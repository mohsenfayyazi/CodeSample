using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Contexts;
using System.Web;
using System.Web.Mvc;
using Equipment.Models;
using Kendo.Mvc.Extensions;
using Equipment.Models.CoustomModel;
using Asr.Cartable;
using System.Globalization;
using Equipment.Codes.Globalization;
using Asr.Security;

namespace Equipment.Controllers.Exploitation.Event
{
    public class EventController : DbController
    {
        //BandarEntities Db;



        ////سازنده کلاس
        //public EventController()
        //{
        //    Db = GlobalConst.DB();
        //}
        ////
        // GET: /Event/
        public ActionResult EventCategoury()
        {
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            return View();
        }
        // GET: /Event/
        public ActionResult SendEvent()
        {
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            return View();
        }
        /*اولین  اکشن در این کنتولر که برای باز شدن فرم دسته بندی و تحلیل حوادث  استفاده شده است مقادیر */
        public ActionResult EventAnalyser()
        {
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            return View();
        }
        /*     دومین  اکشن در این کنتولر که برای باز شدن دعوت نامه جلسه حوادث  استفاده شده است  */
        public ActionResult meetingevent()
        {
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            return View();
        }
        /*ین اکشن ردیف حادثه مشخص شده را از جلسه حذف می کند وان را ازاد می نماید  */
        public ActionResult upadateiniteevent(int idd)
        {
            try
            {
                var row = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == idd select b).FirstOrDefault();
                row.ANPT_ANPT_ID = null;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        public ActionResult showanalysis()
        {

            return View();
        }
        public ActionResult Search_Analyser()
        {

            return View();
        }
        public ActionResult SearchAnalyser([DataSourceRequest] DataSourceRequest request, string fd)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper();



            var query = (
                         from a in Db.PAY_PERSONEL
                         join b in Db.SEC_USERS on a.EMP_NUMB equals b.PRSN_EMP_NUMB
                         join c in Db.SEC_USER_TYPE_POST on b.ROW_NO equals c.SCSU_ROW_NO
                         join d in Db.EXP_ANALYZOR_EVENT on c.EANA_EANA_ROW equals d.EANA_ROW
                         where b.USER_NAME != null &&
                         (a.FAML_NAME.ToUpper().Contains(filter) || a.FIRS_NAME.ToUpper().Contains(filter) || filterDisable) &&
                        c.EXP_ANALYZOR_EVENT.ACTV_TYPE == "1" && c.EXP_ANALYZOR_EVENT.EANA_TYPE == 0 && c.SCSU_ROW_NO == b.ROW_NO
                         orderby a.FAML_NAME
                         select new
                         {

                             a.FAML_NAME,
                             a.FIRS_NAME,
                             a.EMP_NUMB,
                             ORCL_NAME = b.ORCL_NAME,
                             b.ROW_NO,
                             EANA_DESC = c.EXP_ANALYZOR_EVENT.EANA_DESC

                         }).ToList();




            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }
        /*این اکشن برای ثبت اطلاعات دعوت نامه و ایجاد ان برای کارتابل است .     */
        public ActionResult Insert_inveit_meet(COM_INVIT_PART MyModel)
        {
            string id = Request.Form["id"];
            string sdate = string.Empty;
            try
            {
                if (!string.IsNullOrEmpty(id))
                {
                    int ANPT_ID = Convert.ToInt16(id);
                    var row = (from b in Db.COM_INVIT_PART where b.ANPT_ID == ANPT_ID select b).FirstOrDefault();
                    row.ANPT_FNO = MyModel.ANPT_FNO;
                    if (Request.Form["MetDate"].ToString() != "")
                        sdate = Request.Form["MetDate"].ToString();


                    row.ANPT_DATE = sdate;
                    row.ANPT_DESC = MyModel.ANPT_DESC;
                    row.ANPT_CLOK = MyModel.ANPT_CLOK;
                    row.ANPT_PLAS = MyModel.ANPT_PLAS;
                    Db.SaveChanges();
                    string sql = string.Format("SELECT not_id  FROM WF_NOTE_V where item_key='FLW_MEET.PFLW_MEET^{0}'", ANPT_ID);

                    var notid = Db.Database.SqlQuery<decimal>(sql).FirstOrDefault().ToString();

                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد", MyModel.ANPT_DESC), CoustomData = ANPT_ID.ToString() + "," + notid }.ToJson();

                }
                else
                {
                    int qcount = (from b in Db.COM_INVIT_PART where b.ANPT_FNO == MyModel.ANPT_FNO && b.ACMI_1_ACMI_CODE == 2 && b.ANPT_DESC == MyModel.ANPT_DESC select b).Count();
                    if (qcount == 0)
                    {


                        if (Request.Form["MetDate"].ToString() != "")
                            sdate = Request.Form["MetDate"].ToString();

                        MyModel.ANPT_DATE = sdate;
                        MyModel.ACMI_1_ACMI_CODE = 2;
                        Db.COM_INVIT_PART.Add(MyModel);

                        Db.SaveChanges();
                        int i = MyModel.ANPT_ID;
                        string doc_name = MyModel.ANPT_DESC;
                        string bodymessage = " دعوتنامه جلسه حوادث به شماره" + MyModel.ANPT_FNO + " در تاریخ " + MyModel.ANPT_DATE;

                        int ETDO_ID = 143;

                        var RetVal = from comm_user in Db.COM_PERSON_COMM where comm_user.ACMI_1_ACMI_CODE == 2 select comm_user;
                        COM_PERSON_INVIT objecttemp = new COM_PERSON_INVIT();
                        foreach (Equipment.Models.COM_PERSON_COMM comm_user in RetVal)
                        {
                            objecttemp.PRSN_EMP_NUMB = comm_user.PRSN_EMP_NUMB;
                            objecttemp.ANPT_ANPT_ID = i;
                            objecttemp.CPIN_STAT = "0";
                            objecttemp.OUTP_OUTP_ID = comm_user.OUTP_OUTP_ID;


                            Db.COM_PERSON_INVIT.Add(objecttemp);
                            Db.SaveChanges();
                        }

                        Session["anapid"] = i;

                        AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                        wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, bodymessage, ETDO_ID, i);
                        string sql = string.Format("SELECT not_id  FROM WF_NOTE_V where item_key='FLW_MEET.PFLW_MEET^{0}'", i);

                        var notid = Db.Database.SqlQuery<decimal>(sql).FirstOrDefault().ToString();

                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", MyModel.ANPT_DESC), CoustomData = i.ToString() + "," + notid }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] این شماره دعوت نامه تکراری است لطفا شماره را تغییر داده و دوباره ثبت نمایید .", MyModel.ANPT_DESC), CoustomData = 0 }.ToJson();

                    }
                }


            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.InnerException.ToString() }.ToJson();
            }
        }
        /*نام پرسنلی دعوت شده را برمی گرداند  */
        private string funcreturnname(int? i)
        {
            string c = string.Empty;
            var q = (from b in Db.COM_PERSON_INVIT where b.CPIN_ROW == i select b).FirstOrDefault();
            if (q.PRSN_EMP_NUMB != null)
            {
                var qc = (from b in Db.PAY_PERSONEL where b.EMP_NUMB == q.PRSN_EMP_NUMB select b).FirstOrDefault();
                c = qc.FAML_NAME + "  " + qc.FIRS_NAME;

            }
            else
            {
                if (q.OUTP_OUTP_ID != null)
                {
                    var qc = (from b in Db.EXP_OUT_PERSONEL where b.OUTP_ID == q.OUTP_OUTP_ID select b).FirstOrDefault();
                    c = qc.OUTP_FNAME + "  " + qc.OUTP_LNAME;

                }
            }

            return c;

        }
        /*اطلاعات افراد جلسه چه خارج شرکت چه پرسنل شرکت را ثبت و در صورت تغییر تغییر می دهد */
        public ActionResult add_personinvite(Equipment.Models.COM_PERSON_INVIT NewItem)
        {
            int id = Convert.ToInt32(Session["anapid"].ToString());
            int u = Convert.ToInt32(Session["personinv_id"].ToString());
            try
            {
                if (u == 0)
                {
                    if (NewItem.OUTP_OUTP_ID != null && NewItem.PRSN_EMP_NUMB != null)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "پرسنل شرکت یا خارج شرکت یکی باید پرشود" }.ToJson();
                    }
                    else
                    {
                        NewItem.ANPT_ANPT_ID = id;
                        NewItem.CPIN_STAT = "1";
                        Db.COM_PERSON_INVIT.Add(NewItem);
                        Db.SaveChanges();

                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", id) }.ToJson();
                    }

                }
                else
                {
                    var row = (from b in Db.COM_PERSON_INVIT where b.CPIN_ROW == u select b).FirstOrDefault();
                    if (row.OUTP_OUTP_ID != null)
                    { row.OUTP_OUTP_ID = NewItem.OUTP_OUTP_ID; }
                    if (row.PRSN_EMP_NUMB != null)
                    { row.PRSN_EMP_NUMB = NewItem.PRSN_EMP_NUMB; }
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بررسی شد.", id) }.ToJson();

                }


            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }
        /*این اکشن ویوی را که در ان اطلاعات افراد جلسه را برمی گرداند که می توان ان را تغییر داد و ثبت نمود  */
        public ActionResult personinvite_new(int? id)
        {
            Session["personinv_id"] = id;
            if (id != 0)
            {
                COM_PERSON_INVIT EXPNEW = (from b in Db.COM_PERSON_INVIT where b.CPIN_ROW == id select b).FirstOrDefault();
                return View(EXPNEW);
            }
            return View();
        }
        /*ین اکشن پرسنل مربوط به جلسه را برمی گرداند */
        public ActionResult get_person_invite([DataSourceRequest] DataSourceRequest request, int? id)
        {
            try
            {
                var query = from p in Db.COM_PERSON_INVIT.AsEnumerable()
                            where p.ANPT_ANPT_ID == id && id.HasValue
                            orderby p.CPIN_ROW
                            select new
                            {
                                p.CPIN_ROW,
                                p.PRSN_EMP_NUMB,
                                p.ANPT_ANPT_ID,
                                FAML_NAME = funcreturnname(p.CPIN_ROW),
                                p.CPIN_STAT
                            };
                return Json(query.ToDataSourceResult(request));
            }
            catch { return null; }

        }

        /*
این اکشن تحلیل حوادث مربوط به جلسه را در صورت وجود برمی گرداند 
*/
        public ActionResult Exp_event_met([DataSourceRequest] DataSourceRequest request, string fdate, string edate, int? id)
        {
            var query = from b in Db.EXP_EXPI_DOC
                        where b.ETDO_ETDO_ID == 1 && b.DOC_NUMB != null && (b.ANPT_ANPT_ID == id && id != null) && b.EANA_EANA_ROW == 1
                        orderby b.DOC_NUMB
                        select new
                        {
                            b.EEDO_ID,
                            b.DOC_NUMB,
                            b.EEDO_DESC,
                            b.EANA_EANA_ROW,
                            //  countcut = b.EXP_EDOC_INSTRU.Where(xx=>xx.ETDO_ETDO_ID==61).s.Count,
                        };
            return Json(query.ToDataSourceResult(request));
        }
        /*حوادثی که در جلسه ای هنوز لینک نشده اند */

        public ActionResult Exp_event_nmet([DataSourceRequest] DataSourceRequest request, string fdate, string edate)
        {
            var query = from b in Db.EXP_EXPI_DOC
                        where (b.FIRS_DATE.CompareTo(fdate) >= 0) && (b.FIRS_DATE.CompareTo(edate) <= 0) &&
                        b.ETDO_ETDO_ID == 1 && b.DOC_NUMB != null && b.ANPT_ANPT_ID == null && b.EANA_EANA_ROW == 1
                        orderby b.DOC_NUMB
                        select new
                        {
                            b.EEDO_ID,
                            b.DOC_NUMB,
                            b.EEDO_DESC,
                            b.EANA_EANA_ROW,
                            countcut = b.EXP_EDOC_INSTRU.Count,
                        };
            return Json(query.ToDataSourceResult(request));
        }

        /*ین اکشن حادثه های که خارج از تاریخ و کوچکتراز تاریخ هستند و به جلسه ای لینک نیستند را  به یک جلسه لینک می کند */
        public ActionResult alleventinsert(int? idd, string fdate, string edate)
        {
            try
            {
                var query = from b in Db.EXP_EXPI_DOC
                            where (b.FIRS_DATE.CompareTo(fdate) <= 0) && b.ETDO_ETDO_ID == 1 && b.ANPT_ANPT_ID == null && b.EANA_EANA_ROW == 1
                            select b;
                foreach (var q in query)
                {
                    q.ANPT_ANPT_ID = idd;

                }
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }


        }
        /*این اکشن حادثه های که براساس تاریخ مشخص شده است به یک جلسه لینک می کند */

        public ActionResult alleventdateinsert(int? idd, string fdate, string edate)
        {
            try
            {
                int qcount = (from b in Db.COM_INVIT_PART where b.ANPT_ID == idd select b).Count();
                if (qcount == 0)
                {
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] این شماره دعوت نامه تکراری است لطفا شماره را تغییر داده و دوباره ثبت نمایید ."), CoustomData = 1 }.ToJson();

                }
                else
                {
                    var query = from b in Db.EXP_EXPI_DOC
                                where (b.FIRS_DATE.CompareTo(fdate) >= 0) && (b.FIRS_DATE.CompareTo(edate) <= 0) && b.ETDO_ETDO_ID == 1 && b.ANPT_ANPT_ID == null && b.EANA_EANA_ROW == 1
                                select b;
                    foreach (var q in query)
                    {
                        q.ANPT_ANPT_ID = idd;

                    }
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /*این اکشن ویوی را برمی گرداند که براساس ان می توان حوادث مربوط به یک تاریخ مشخص را پیدا کرد و هر کدام که بخواهیم به جلسه لینک کنیم */
        public ActionResult chosseevent_new(int? id, string fdate, string edate)
        {
            ViewBag.id = id;
            ViewBag.fdated = fdate;
            ViewBag.edated = edate;
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            // ViewBag.PostInstrument1 = Context.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.PostInstrument1 = Db.EXP_ERROR_INST.Select(c => new { c.EERR_ID, c.EERR_DESC });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            return View("");
        }

        /*این اکشن  اضافه شدن حادثه به جلسه را است */
        public ActionResult addeventtoinvite(string idd, int? idc)
        {
            try
            {
                var val = idd.Split('-');
                int j = 0;
                while (val[j].ToString() != "")
                {
                    int idcut = Convert.ToInt32(val[j].ToString());

                    var row = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == idcut select b).FirstOrDefault();
                    row.ANPT_ANPT_ID = idc;
                    j = j + 1;
                }
                Db.SaveChanges();

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }
        /***********************تعهدات **************************************/
        /*این اکشن جلسات مربوط به کمیته حوادث را برمی گرداند */
        public ActionResult meetdesc()
        {
            var RetVal = from b in Db.COM_INVIT_PART
                         join p in Db.COM_COMMITE on b.ACMI_1_ACMI_CODE equals p.ACMI_CODE
                         where b.ACMI_1_ACMI_CODE == 2
                         select new { b.ANPT_ID, Fullmeet = b.ANPT_FNO + "  " + b.ANPT_DESC };
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetMessages([DataSourceRequest]
                                        DataSourceRequest request, string msgType, string statmeettakh, string statmeet, string meet)
        {
            PersianDateTime pdt = new PersianDateTime();


            var data = AsrCartable.Messages(null, msgType).OrderByDescending(x => x.BEGIN_DATE).Select(x => new
            {
                x.NOT_ID,
                x.RECIPIENT_ROLE,
                x.SUBJECT,
                x.MESSAGE_BODY,
                persianTdTime = pdt.GetMedumDate(x.BEGIN_DATE),
                curentrole = new AsrWorkFlowProcess(Convert.ToInt32(x.NOT_ID)).CurrentStat
            });


            return Json(data.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }

        /*
این اکشن برای ثبت اطلاعات مربوط به جوابیه مصوبه ها است 
*/
        public ActionResult insertrespons(Equipment.Models.EXP_EDOC_INSTRU NewItem)
        {

            int u = Convert.ToInt32(Session["eedo_id"].ToString());
            int edin_id = Convert.ToInt32(Session["eedin_id"].ToString());
            int uidasle = 0;
            if (Session["eedinasle_id"] != null)
                uidasle = Convert.ToInt32(Session["eedinasle_id"].ToString());

            PersianCalendar pc = new PersianCalendar();
            DateTime thisDate = DateTime.Now.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));


            try
            {
                var querycheck = from b in Db.EXP_EDOC_INSTRU
                                 where b.ETDO_ETDO_ID == 144 && b.EDIN_EDIN_ID == edin_id && b.EEDO_EEDO_ID == u
                                 select b;
                if (!querycheck.Any())
                {
                    NewItem.EEDO_EEDO_ID = u;
                    NewItem.ETDO_ETDO_ID = 144;
                    NewItem.EDIN_EDIN_ID = edin_id;
                    NewItem.EPOL_EPOL_ID = Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == u && xx.ETDO_ETDO_ID == 61).Select(xx => xx.EPOL_EPOL_ID).FirstOrDefault();
                    Db.EXP_EDOC_INSTRU.Add(NewItem);
                    Db.SaveChanges();
                    NewItem.ATTG_SPIC = "RES" + NewItem.EDIN_ID.ToString();
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();
                }
                else
                {
                    querycheck.FirstOrDefault().ATTG_MOEJ = NewItem.ATTG_MOEJ;
                    querycheck.FirstOrDefault().TYPE_FUNC = NewItem.TYPE_FUNC;
                    querycheck.FirstOrDefault().ATTG_DATE = NewItem.ATTG_DATE;
                    querycheck.FirstOrDefault().EPOL_EPOL_ID = Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == u && xx.ETDO_ETDO_ID == 61).Select(xx => xx.EPOL_EPOL_ID).FirstOrDefault();

                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();
                }



            }

            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }





        /*
این اکشن برای ثبت اطلاعات مصوبه ها و تغییرات ان است 
*/
        public ActionResult insertapproevent(Equipment.Models.EXP_EDOC_INSTRU NewItem)
        {

            int u = Convert.ToInt32(Session["eedo_id"].ToString());
            int uid = 0;
            if (Session["eedin_id"] != null)
            {
                uid = Convert.ToInt32(Session["eedin_id"].ToString());
            }
            int uidasle = 0;
            if (Session["eedinasle_id"] != null)
                uidasle = Convert.ToInt32(Session["eedinasle_id"].ToString());
            string y = string.Empty;
            string qcount = string.Empty;
            string name = string.Empty;
            PersianCalendar pc = new PersianCalendar();
            DateTime thisDate = DateTime.Now.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));

            // string DAY = Convert.ToString(pc.GetDayOfMonth(thisDate));
            // string _MNT = Convert.ToString(pc.GetMonth(thisDate));
            // string YEAR = Convert.ToString(pc.GetYear(thisDate));
            // DAY = YEAR + "/" + _MNT + "/" + DAY;
            // DateTime d = Convert.ToDateTime(DAY);
            // d = d.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));
            try
            {
                var EXP_SUPL_DOC = new EXP_SUPL_DOC();
                if (!string.IsNullOrEmpty(Request.Form["PRSN_EMP_NUMB"]))
                    // Ope = Convert.ToInt32(Request.Form["PRSN_EMP_NUMB"].ToString());
                    EXP_SUPL_DOC.PRSN_EMP_NUMB = short.Parse(Request.Form["PRSN_EMP_NUMB"].ToString());
                var check = from b in Db.EXP_EDOC_INSTRU
                            where b.EDIN_ID == uid
                            select b;

                if (!check.Any())
                {
                    string sql = string.Format("insert into EXP_EDOC_INSTRU (ATTG_DATE,ETDO_ETDO_ID,EEDO_EEDO_ID,ATTG_MOEJ,CONT_FUN,epol_epol_id) values (to_date('{0}','mm/dd/yyyy'),{1},{2},'{3}',{4},{5})", thisDate.ToShortDateString(), 144, u, NewItem.ATTG_MOEJ, NewItem.CONT_FUN, Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == u && xx.ETDO_ETDO_ID == 61).Select(xx => xx.EPOL_EPOL_ID).FirstOrDefault());
                    Db.Database.ExecuteSqlCommand(sql);
                    // NewItem.ATTG_DATE = thisDate;
                    // NewItem.ETDO_ETDO_ID = 144;
                    //  NewItem.EEDO_EEDO_ID = u;
                    //  Context.EXP_EDOC_INSTRU.Add(NewItem);
                    // Context.SaveChanges();
                    var edin_id = Db.Database.SqlQuery<decimal>(string.Format("SELECT edin_id FROM EXP_EDOC_INSTRU where ATTG_DATE=to_date('{0}','mm/dd/yyyy') and ETDO_ETDO_ID=144 and EEDO_EEDO_ID={1} and ATTG_MOEJ='{2}'", thisDate.ToShortDateString(), u, NewItem.ATTG_MOEJ)).FirstOrDefault();

                    sql = string.Format("update EXP_EDOC_INSTRU set ATTG_SPIC='A'||'{0}' where edin_id={0}", edin_id);
                    Db.Database.ExecuteSqlCommand(sql);


                    EXP_SUPL_DOC.EDIN_EDIN_ID = edin_id;
                    EXP_SUPL_DOC.TIME_WORK = NewItem.CONT_FUN;
                    EXP_SUPL_DOC.POSI_TYEP = "1";
                    if (!string.IsNullOrEmpty(Request.Form["PRSN_EMP_NUMB"]))
                        // Ope = Convert.ToInt32(Request.Form["PRSN_EMP_NUMB"].ToString());
                        EXP_SUPL_DOC.PRSN_EMP_NUMB = short.Parse(Request.Form["PRSN_EMP_NUMB"].ToString());
                    Db.EXP_SUPL_DOC.Add(EXP_SUPL_DOC);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();
                }
                else
                {/*تغییرات بروی مصوبه */
                    var row = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == uid select b).FirstOrDefault();

                    row.ATTG_DATE = thisDate;
                    row.ATTG_MOEJ = NewItem.ATTG_MOEJ;


                    var row2 = (from b in Db.EXP_SUPL_DOC where b.EDIN_EDIN_ID == uid select b).FirstOrDefault();


                    row2.TIME_WORK = NewItem.CONT_FUN;
                    if (!string.IsNullOrEmpty(Request.Form["PRSN_EMP_NUMB"]))
                        // Ope = Convert.ToInt32(Request.Form["PRSN_EMP_NUMB"].ToString());
                        row2.PRSN_EMP_NUMB = short.Parse(Request.Form["PRSN_EMP_NUMB"].ToString());

                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();

                }



            }

            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }



        //public ActionResult insertapproevent(Equipment.Models.EXP_EDOC_INSTRU NewItem)
        //{

        //    int u = Convert.ToInt32(Session["eedo_id"].ToString());
        //    int uid = Convert.ToInt32(Session["eedin_id"].ToString());
        //    int uidasle = 0;
        //    if (Session["eedinasle_id"] != null)
        //        uidasle = Convert.ToInt32(Session["eedinasle_id"].ToString());
        //    string y = string.Empty;
        //    string qcount = string.Empty;
        //    string name = string.Empty;
        //    try
        //    {

        //        var q = (from b in Context.EXP_EXPI_DOC where b.EEDO_ID == u select b).FirstOrDefault();
        //        name = (from b in Context.COM_INVIT_PART where b.ANPT_ID == q.ANPT_ANPT_ID select b.ANPT_FNO).FirstOrDefault().ToString();
        //        qcount = (Convert.ToInt32((from b in Context.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == u && b.ETDO_ETDO_ID == 144 select b).Count().ToString()) + 1).ToString();



        //        PersianCalendar pc = new PersianCalendar();
        //        DateTime thisDate = DateTime.Now;

        //        string DAY = Convert.ToString(pc.GetDayOfMonth(thisDate));
        //        string _MNT = Convert.ToString(pc.GetMonth(thisDate));
        //        string YEAR = Convert.ToString(pc.GetYear(thisDate));
        //        // y = a.Year.ToString();
        //        name = name + "-" + YEAR + "-" + qcount;


        //        DAY = YEAR + "/" + _MNT + "/" + DAY;
        //        DateTime d = Convert.ToDateTime(DAY);
        //        d = d.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));
        //        string Omc = string.Empty;
        //        string Org = string.Empty;
        //        short Ope = 0;

        //        string Omc1 = string.Empty;
        //        string Org1 = string.Empty;
        //        string wdesc = string.Empty;
        //        string wconf = string.Empty;
        //        string date = string.Empty;
        //        short Ope1 = 0;

        //        int per = 0;
        //        if (!string.IsNullOrEmpty(Request.Form["ORGA_MANA_CODE"] ))
        //            Omc = Request.Form["ORGA_MANA_CODE"].ToString();

        //        if (!string.IsNullOrEmpty(Request.Form["ORGA_CODEconf"]))
        //            Org = Request.Form["ORGA_CODEconf"].ToString();

        //        if (!string.IsNullOrEmpty(Request.Form["PRSN_EMP_NUMB"] ))
        //            // Ope = Convert.ToInt32(Request.Form["PRSN_EMP_NUMB"].ToString());
        //            Ope = short.Parse(Request.Form["PRSN_EMP_NUMB"].ToString());

        //        if (!string.IsNullOrEmpty(Request.Form["ORGA_MANA_CODE1"] ))
        //            Omc1 = Request.Form["ORGA_MANA_CODE1"].ToString();

        //        if (!string.IsNullOrEmpty(Request.Form["ORGA_CODEconf1"] ))
        //            Org1 = Request.Form["ORGA_CODEconf1"].ToString();

        //        if (!string.IsNullOrEmpty(Request.Form["PRSN_EMP_NUMB1"] ))

        //            Ope1 = short.Parse(Request.Form["PRSN_EMP_NUMB1"].ToString());
        //        if (!string.IsNullOrEmpty(Request.Form["PRSNout"] ))
        //            per = Convert.ToInt32(Request.Form["PRSNout"].ToString());
        //        if (!string.IsNullOrEmpty(Request.Form["tdesc"] ))
        //            wdesc = Request.Form["tdesc"].ToString();
        //        if (!string.IsNullOrEmpty(Request.Form["tconf"] ))
        //            wconf = Request.Form["tconf"].ToString();


        //        if (!string.IsNullOrEmpty(Request.Form["EDATE"] ))
        //            date = Request.Form["EDATE"].ToString();

        //        string calssts = Request.Form["EINSC"];
        //        int classt = Convert.ToInt32(calssts);
        //        int idinst = 0;
        //        if (classt != 281 && classt > 4)
        //        {



        //            if (Request.Form["POSTINSTTT"] != null)
        //                NewItem.EPIU_EPIU_ID = Convert.ToInt32(Request.Form["POSTINSTTT"].ToString());
        //            //if (Request.Form["detailp1"] != null)
        //            //    NewItem.EERR_EERR_ID = Convert.ToInt32(Request.Form["detailp1"].ToString());

        //        }
        //        else
        //        {

        //            string typeinst = Request.Form["typeinst1"];
        //            if (typeinst == "1")
        //            {


        //                if (Request.Form["POSTINSTTT"] != null)
        //                    NewItem.EPIU_EPIU_ID = Convert.ToInt32(Request.Form["POSTINSTTT"].ToString());
        //                //if (Request.Form["detailp1"] != null)
        //                //    NewItem.EERR_EERR_ID = Convert.ToInt32(Request.Form["detailp1"].ToString());

        //            }
        //            else
        //            {

        //                if (Request.Form["POSTINST"] != null)
        //                    NewItem.EPIU_EPIU_ID = Convert.ToInt32(Request.Form["POSTINST"].ToString());
        //                //if (Request.Form["detailp"] != null)
        //                //    NewItem.EERR_EERR_ID = Convert.ToInt32(Request.Form["detailp"].ToString());


        //            }
        //        }



        //        // a=a.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));
        //        if (uid == 0)
        //        {
        //            /*ایجاد مصوبه*/
        //            if (uidasle != 0)
        //                NewItem.EDIN_EDIN_ID = uidasle;






        //            NewItem.ATTG_DATE = d;
        //            NewItem.ATTG_SPIC = name;
        //            NewItem.ATTG_DATE = d;
        //            NewItem.ETDO_ETDO_ID = 144;

        //            NewItem.ORGA_MANA_ASTA_CODE = "7";
        //            NewItem.ORGA_MANA_CODE = "6";
        //            NewItem.EEDO_EEDO_ID = u;

        //            Context.EXP_EDOC_INSTRU.Add(NewItem);
        //            Context.SaveChanges();
        //            int i = Convert.ToUInt16(NewItem.EDIN_ID.ToString());

        //            if (Ope == 0)
        //            {/*متعهدها*/
        //                Context.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

        //                {
        //                    EDIN_EDIN_ID = i,
        //                    ORGA_CODE = Org,
        //                    ORGA_MANA_ASTA_CODE = "7",
        //                    ORGA_MANA_CODE = Omc,

        //                    POSI_TYEP = "3",
        //                    TIME_WORK = NewItem.CONT_FUN

        //                });
        //            }
        //            else
        //            {
        //                Context.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

        //                {
        //                    EDIN_EDIN_ID = i,
        //                    ORGA_CODE = Org,
        //                    ORGA_MANA_ASTA_CODE = "7",
        //                    ORGA_MANA_CODE = Omc,
        //                    PRSN_EMP_NUMB = Ope,
        //                    POSI_TYEP = "3",
        //                    TIME_WORK = NewItem.CONT_FUN

        //                });
        //            }


        //            if (per != 0 && Ope1 != 0)
        //            {
        //                Context.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

        //                {
        //                    EDIN_EDIN_ID = i,
        //                    ORGA_CODE = Org1,
        //                    ORGA_MANA_ASTA_CODE = "7",
        //                    ORGA_MANA_CODE = Omc1,
        //                    PRSN_EMP_NUMB = Ope1,

        //                    OUTP_OUTP_ID = per,
        //                    POSI_TYEP = "1",
        //                    TIME_WORK = NewItem.CONT_FUN

        //                });
        //            }
        //            else
        //            {
        //                if (per == 0 && Ope1 == 0)
        //                {
        //                    Context.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

        //                    {
        //                        EDIN_EDIN_ID = i,
        //                        ORGA_CODE = Org1,
        //                        ORGA_MANA_ASTA_CODE = "7",
        //                        ORGA_MANA_CODE = Omc1,
        //                        POSI_TYEP = "1",
        //                        TIME_WORK = NewItem.CONT_FUN

        //                    });
        //                }
        //                if (Ope1 == 0)
        //                {
        //                    Context.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()
        //                    {
        //                        EDIN_EDIN_ID = i,
        //                        ORGA_CODE = Org1,
        //                        ORGA_MANA_ASTA_CODE = "7",
        //                        ORGA_MANA_CODE = Omc1,
        //                        OUTP_OUTP_ID = per,
        //                        POSI_TYEP = "1",
        //                        TIME_WORK = NewItem.CONT_FUN

        //                    });
        //                }
        //                if (per == 0)
        //                {
        //                    Context.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()
        //                    {
        //                        EDIN_EDIN_ID = i,
        //                        ORGA_CODE = Org1,
        //                        ORGA_MANA_ASTA_CODE = "7",
        //                        ORGA_MANA_CODE = Omc1,
        //                        PRSN_EMP_NUMB = Ope1,

        //                        POSI_TYEP = "1",
        //                        TIME_WORK = NewItem.CONT_FUN
        //                    });
        //                }
        //            }
        //            Context.SaveChanges();
        //            return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();
        //        }
        //        else
        //        {/*تغییرات بروی مصوبه */
        //            var row = (from b in Context.EXP_EDOC_INSTRU where b.EDIN_ID == uid select b).FirstOrDefault();
        //            row.ATTG_SPIC = name;
        //            row.ATTG_DATE = d;
        //            row.ATTG_MOEJ = NewItem.ATTG_MOEJ;
        //            row.TIME_ISTA = NewItem.TIME_ISTA;
        //            row.ORDE_TYPE = NewItem.ORDE_TYPE;
        //            row.EFUN_EFUN_ID = NewItem.EFUN_EFUN_ID;
        //            row.ORGA_CODE = NewItem.ORGA_CODE;
        //            row.EPOL_EPOL_ID = NewItem.EPOL_EPOL_ID;
        //            row.EPIU_EPIU_ID = NewItem.EPIU_EPIU_ID;
        //            row.CONT_FUN = NewItem.CONT_FUN;
        //            row.ON_DATE = date;
        //            row.TYPE_FUNC = NewItem.TYPE_FUNC;
        //            row.ATTG_STATT = NewItem.ATTG_STATT;
        //            row.MEMA_DESC = NewItem.MEMA_DESC;

        //            Context.SaveChanges();

        //            var row1 = (from b in Context.EXP_SUPL_DOC where b.EDIN_EDIN_ID == uid && b.POSI_TYEP == "3" select b).FirstOrDefault();

        //            row1.ORGA_CODE = Org;
        //            row1.ORGA_MANA_ASTA_CODE = "7";
        //            row1.ORGA_MANA_CODE = Omc;
        //            row1.ESUD_DESC = wconf;

        //            if (Ope != 0)
        //            { row1.PRSN_EMP_NUMB = Ope; }
        //            row1.TIME_WORK = NewItem.CONT_FUN;
        //            var row2 = (from b in Context.EXP_SUPL_DOC where b.EDIN_EDIN_ID == uid && b.POSI_TYEP == "1" select b).FirstOrDefault();
        //            row2.ORGA_CODE = Org1;
        //            row2.ORGA_MANA_ASTA_CODE = "7";
        //            row2.ORGA_MANA_CODE = Omc1;
        //            row2.ESUD_DESC = wdesc;
        //            if (Ope1 != 0)
        //            { row2.PRSN_EMP_NUMB = Ope1; }
        //            if (per != 0)
        //            { row2.OUTP_OUTP_ID = per; }
        //            row2.TIME_WORK = NewItem.CONT_FUN;

        //            Context.SaveChanges();
        //            return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();

        //        }

        //    }

        //    catch (Exception ex)
        //    {
        //        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
        //    }

        //}

        /*ایجاد مصوبه در کارتابل مربوط متعهد */
        public ActionResult Sendresptowor(int edinid)
        {
            try
            {
                var q = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == edinid select b).FirstOrDefault();
                var qevent = (from k in Db.EXP_EXPI_DOC where k.EEDO_ID == q.EEDO_EEDO_ID select k).FirstOrDefault();

                string doc_name = "مصوبات جلسه حوادث";
                int etdo_id = 144;
                string e = qevent.DOC_NUMB;
                string edesc = qevent.EEDO_DESC;
                string postname = string.Empty;
                string organdesc = string.Empty;
                string instdesc = string.Empty;
                if (q.EPOL_EPOL_ID != null)
                {
                    var qpost = (from b in Db.EXP_POST_LINE where b.EPOL_ID == q.EPOL_EPOL_ID && b.EPOL_STAT == "1" select b).FirstOrDefault();

                    postname = qpost.EPOL_NAME.ToString();
                }

                if (q.ORGA_CODE != null)
                {
                    var qorga = (from b in Db.PAY_ORGAN where b.CODE == q.ORGA_CODE select b).FirstOrDefault();

                    organdesc = qorga.ORGA_DESC.ToString();
                }
                if (q.EPIU_EPIU_ID != null)
                {
                    var insta = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == q.EPIU_EPIU_ID select b).FirstOrDefault();

                    instdesc = insta.CODE_NAME.ToString();
                }
                postname = organdesc + "  " + postname + "  " + instdesc;
                string bodymessage = " مصوبه " + q.ATTG_SPIC + " مربوط به  " + edesc + " به شرح " + q.ATTG_MOEJ + " مربوط به  " + postname + " که مدت انجام ان  " + q.CONT_FUN + "روز است برای اجرا برای شما ارسال شده است ";

                var qmas = (from b in Db.EXP_SUPL_DOC where b.EDIN_EDIN_ID == edinid && b.POSI_TYEP == "1" select b).FirstOrDefault();

                var typedoc = (from c in Db.EXP_TYPE_DOC where c.ETDO_ID == 144 select c).FirstOrDefault();
                int not_id = 0;
                string s = typedoc.FLOW_TYPE.ToString() + "." + typedoc.PRCC_NAME.ToString() + "^" + edinid;


                //  not_id = Asr.Security.WF_LOCAL_USER_ROLES.searchnotid(s);


                int cm = Db.Database.SqlQuery<int>("SELECT count(WF_NOTE_V.NOT_ID) as m FROM WF_NOTE_V where  WF_NOTE_V.ITEM_KEY='" + s + "'").FirstOrDefault();
                if (cm != 0)
                {
                    not_id = Db.Database.SqlQuery<int>("SELECT WF_NOTE_V.NOT_ID as m FROM WF_NOTE_V where  WF_NOTE_V.ITEM_KEY='" + s + "'").FirstOrDefault();
                }



                if (not_id != 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این مصوبه را ارسال نموده اید" }.ToJson();

                else
                {
                    /*بدست اوردن متعهدوایجاد مصوبه در کارتابل او*/
                    string usera = string.Empty;
                    if (qmas.OUTP_OUTP_ID != null)
                    {
                        var users = (from b in Db.SEC_USERS where b.OUTP_OUTP_ID == qmas.OUTP_OUTP_ID /*&& b.USER_TYPE == "1"*/ select b).FirstOrDefault();
                        if (users == null)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = " مسئول اجرا خارج شرکت نام کاربری فعال برای استفاده از سیستم ندارد" }.ToJson();
                        }
                        else
                        {
                            usera = users.ORCL_NAME;
                            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();

                            wp.StartProcess(usera, new string[] { usera }, doc_name, bodymessage, etdo_id, edinid);
                        }
                    }
                    if (qmas.PRSN_EMP_NUMB != null)
                    {
                        var users = (from b in Db.SEC_USERS where b.PRSN_EMP_NUMB == qmas.PRSN_EMP_NUMB /*&& b.USER_TYPE=="1"*/ select b).FirstOrDefault();
                        if (users == null)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = " مسئول اجرا پرسنل شرکت نام کاربری فعال برای استفاده از سیستم ندارد" }.ToJson();
                        }
                        else
                        {
                            usera = users.ORCL_NAME;
                            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();

                            wp.StartProcess(usera, new string[] { usera }, doc_name, bodymessage, etdo_id, edinid);
                            return new ServerMessages(ServerOprationType.Success) { Message = " مصوبه با موفقیت ارسال شد" }.ToJson();

                        }
                    }




                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ارسال شد.", usera), CoustomData = edinid }.ToJson();

                }


            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }

        /***************************صورت جلسه************************/
        /*
این اکشن تجهیزات و خط مر بوط به پست را برمی گرداند 
*/
        public ActionResult getinstline(short postid)
        {

            var RetVal = from b in Db.EXP_POST_LINE_INSTRU
                         join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID
                         where ((p.EPOL_TYPE == "1" && p.EPOL_STAT == "1" && (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid)
                         && (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null)) || (p.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == postid))

                         select new { b.EPIU_ID, b.CODE_NAME };

            return Json(RetVal, JsonRequestBehavior.AllowGet);




        }
        /*پست های مربوط به حوادث که کاربر دسترسی دارد را برمیگرداند */
        public ActionResult getpost(int code, string oragan)
        {

            var i = this.HttpContext.User.Identity.Name;
            var q = from b in Db.SEC_USER_TYPE_POST
                    join s in Db.SEC_USERS on b.SCSU_ROW_NO equals s.ROW_NO
                    where b.ETDO_ETDO_ID == code && s.ORCL_NAME == i
                    select b.EPOL_EPOL_ID;

            var RetVal = from p in Db.EXP_POST_LINE
                         where q.Contains(p.EPOL_ID) && p.EPOL_STAT == "1" && p.ORGA_CODE == oragan && p.ORGA_MANA_ASTA_CODE == "7" && p.ORGA_MANA_CODE == "6"
                         select new { p.EPOL_ID, p.EPOL_NAME };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        /*براساس وضعیت ها نام فارسی انها را برمی گرداند */
        private string RETURNN(decimal p)
        {

            int c = Convert.ToInt32(p);
            string curent = string.Empty;
            int cm = (Db.Database.SqlQuery<int>("SELECT RETURNNOTEIDR('FLW_RESN'," + c + ",144) as m FROM dual").FirstOrDefault());
            if (cm != 0)
            {
                AsrWorkFlowProcess p1 = new AsrWorkFlowProcess(cm);
                string cur = p1.CurrentStat;

                if (cur == "CREATOR")
                    curent = "مسئول اجرا";
                if (cur == "CONFIRM")
                    curent = "تایید کننده";
                if (cur == "MANEGMENT")
                    curent = "دبیر جلسه";

            }
            return curent;
        }

        private int RETURint(decimal p)
        {

            int c = Convert.ToInt32(p);
            int curent = 0;
            int cm = (Db.Database.SqlQuery<int>("SELECT RETURNNOTEIDR('FLW_RESN'," + c + ",144) as m FROM dual").FirstOrDefault());
            if (cm != 0)
            {
                AsrWorkFlowProcess p1 = new AsrWorkFlowProcess(cm);
                string cur = p1.CurrentStat;

                if (cur == "CREATOR")
                    curent = 1;
                if (cur == "CONFIRM")
                    curent = 2;
                if (cur == "MANEGMENT")
                    curent = 3;
            }
            return curent;
        }
        /*این اکشن مصوبات پیرو مصوبه اصلی را برمی گرداند */
        public ActionResult approeventpiro([DataSourceRequest] DataSourceRequest request, int? eddin)
        {
            var query = from b in Db.EXP_EDOC_INSTRU.AsEnumerable()

                        where b.ETDO_ETDO_ID == 144 && b.EDIN_EDIN_ID == eddin && eddin != null

                        select new
                        {
                            b.EDIN_ID,
                            b.ATTG_MOEJ,
                            b.TIME_ISTA,
                            b.ORDE_TYPE,
                            b.ATTG_SPIC,
                            b.ORGA_CODE,
                            b.EPOL_EPOL_ID,

                            b.EPIU_EPIU_ID,
                            b.EFUN_EFUN_ID,
                            b.CONT_FUN,
                            b.ATTG_DATE,
                            b.STAT_SMET,
                            b.EEDO_EEDO_ID,
                            b.EDIN_EDIN_ID,
                            b.ATTG_STATT,
                            b.TYPE_FUNC,
                            curer = RETURNN(b.EDIN_ID)



                        };


            return Json(query.ToDataSourceResult(request));

        }
        /*این اکشن براساس جستجو های که کاربر نیاز دارد ایتم های مصوبات را برمی گرداند  مانند شماره جلسه یا تاخییرات یا وضعیت که مصوبه در ان است */
        public ActionResult approeventcheck([DataSourceRequest] DataSourceRequest request, string msgType, string statmeettakh, string statmeet, string meet)
        {
            PersianCalendar pc = new PersianCalendar();
            DateTime thisDate = DateTime.Now;

            string DAY = Convert.ToString(pc.GetDayOfMonth(thisDate));
            string _MNT = Convert.ToString(pc.GetMonth(thisDate));
            string YEAR = Convert.ToString(pc.GetYear(thisDate));
            // y = a.Year.ToString();
            int s = 0;
            int st = 0;
            if (statmeet != "")
            {
                s = Convert.ToInt32(statmeet);
            }
            if (statmeettakh != "")
            {
                st = Convert.ToInt32(statmeettakh);
            }
            DAY = YEAR + "/" + _MNT + "/" + DAY;
            DateTime d = Convert.ToDateTime(DAY);
            var query = from b in Db.EXP_EDOC_INSTRU.AsEnumerable()
                        where b.ETDO_ETDO_ID == 144
                        select new
                        {
                            b.EDIN_ID,
                            b.ATTG_MOEJ,
                            b.TIME_ISTA,
                            b.ORDE_TYPE,
                            b.ATTG_SPIC,
                            b.ORGA_CODE,
                            b.EPOL_EPOL_ID,

                            b.EPIU_EPIU_ID,
                            b.EFUN_EFUN_ID,
                            b.CONT_FUN,
                            b.ATTG_DATE,
                            b.STAT_SMET,
                            b.EEDO_EEDO_ID,
                            b.EDIN_EDIN_ID,
                            b.ATTG_STATT,
                            b.TYPE_FUNC,
                            curer = RETURNN(b.EDIN_ID)

                        };

            int imeet = 0;
            if (meet != "")
            {
                imeet = Convert.ToInt32(meet);
                query = from b in query
                        join k in Db.EXP_EXPI_DOC.AsEnumerable() on b.EEDO_EEDO_ID equals k.EEDO_ID

                        where (k.ANPT_ANPT_ID == imeet)
                        select new
                        {
                            b.EDIN_ID,
                            b.ATTG_MOEJ,
                            b.TIME_ISTA,
                            b.ORDE_TYPE,
                            b.ATTG_SPIC,
                            b.ORGA_CODE,
                            b.EPOL_EPOL_ID,

                            b.EPIU_EPIU_ID,
                            b.EFUN_EFUN_ID,
                            b.CONT_FUN,
                            b.ATTG_DATE,
                            b.STAT_SMET,
                            b.EEDO_EEDO_ID,
                            b.EDIN_EDIN_ID,
                            b.ATTG_STATT,
                            b.TYPE_FUNC,
                            curer = RETURNN(b.EDIN_ID)

                        };

            }
            if (statmeet != "")
            {
                query = from b in query
                        where (RETURint(b.EDIN_ID) == s && RETURint(b.EDIN_ID) != 0)

                        select new
                        {
                            b.EDIN_ID,
                            b.ATTG_MOEJ,
                            b.TIME_ISTA,
                            b.ORDE_TYPE,
                            b.ATTG_SPIC,
                            b.ORGA_CODE,
                            b.EPOL_EPOL_ID,

                            b.EPIU_EPIU_ID,
                            b.EFUN_EFUN_ID,
                            b.CONT_FUN,
                            b.ATTG_DATE,
                            b.STAT_SMET,
                            b.EEDO_EEDO_ID,
                            b.EDIN_EDIN_ID,
                            b.ATTG_STATT,
                            b.TYPE_FUNC,
                            curer = RETURNN(b.EDIN_ID)

                        };

            }
            if (statmeettakh != "")
            {
                query = from b in query
                        where (((statmeettakh != "5" && RETURint(b.EDIN_ID) == st && RETURint(b.EDIN_ID) != 0) || statmeettakh == "5")
                       && b.ATTG_DATE < d)
                        select new
                        {
                            b.EDIN_ID,
                            b.ATTG_MOEJ,
                            b.TIME_ISTA,
                            b.ORDE_TYPE,
                            b.ATTG_SPIC,
                            b.ORGA_CODE,
                            b.EPOL_EPOL_ID,

                            b.EPIU_EPIU_ID,
                            b.EFUN_EFUN_ID,
                            b.CONT_FUN,
                            b.ATTG_DATE,
                            b.STAT_SMET,
                            b.EEDO_EEDO_ID,
                            b.EDIN_EDIN_ID,
                            b.ATTG_STATT,
                            b.TYPE_FUNC,
                            curer = RETURNN(b.EDIN_ID)

                        };

            }
            return Json(query.ToDataSourceResult(request));

        }
        /*اطلاعات پرسنل خارج شرکت را برمی گرداند */
        public ActionResult Personelout()
        {  //+ "  " + b.OUTP_FANAME
            var query = from b in Db.EXP_OUT_PERSONEL select new { b.OUTP_ID, fullname = b.OUTP_FNAME + "   " + b.OUTP_LNAME };
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*اطلاعات پرسنل  شرکت را برمی گرداند */
        public ActionResult Personelin()
        {  //+ "  " + b.OUTP_FANAME
            var query = from b in Db.PAY_PERSONEL select new { b.EMP_NUMB, fullname = b.FIRS_NAME + "   " + b.FAML_NAME };
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*فرم مصوبه هارا نمایش می دهد*/
        public ActionResult approevent_new(int id, int type)
        {
            ViewBag.ORGA = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.presption = Db.EXP_EDOC_INSTRU.Where(c => c.ETDO_ETDO_ID == 144).Select(c => new { c.EDIN_ID, c.ATTG_SPIC });
            Session["notid"] = null;
            if (type == 1)
            {
                Session["eedin_id"] = 0;
                Session["eedo_id"] = id;
                if (id != 0)
                {
                    EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();

                    EXP_EDOC_INSTRU appro = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == id && b.ETDO_ETDO_ID == 144 select b).FirstOrDefault();
                    return View();
                }
                else
                { return View("ErrorNotFound"); }
            }
            else

                if (type == 2)
            {
                if (id != 0)
                {
                    int i = Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 select b.EEDO_EEDO_ID).FirstOrDefault().ToString());
                    Session["eedo_id"] = i;
                    Session["eedin_id"] = id;
                    EXP_EDOC_INSTRU appro = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 select b).FirstOrDefault();
                    return View(appro);
                }
                else
                { return View("ErrorNotFound"); }
            }
            else

                    if (type == 3)
            {
                int i = Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 select b.EEDO_EEDO_ID).FirstOrDefault().ToString());
                Session["eedo_id"] = i;
                Session["eedin_id"] = 0;
                Session["eedinasle_id"] = id;
                return View();
            }
            else

                        if (type == 4)
            {

                int iedina = Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 && b.EDIN_EDIN_ID != null select b.EDIN_EDIN_ID).FirstOrDefault().ToString());

                int i = Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == iedina && b.ETDO_ETDO_ID == 144 select b.EEDO_EEDO_ID).FirstOrDefault().ToString());
                Session["eedo_id"] = i;
                Session["eedin_id"] = id;
                EXP_EDOC_INSTRU appro = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 select b).FirstOrDefault();
                return View(appro);

            }
            else
            { return View("ErrorNotFound"); }

        }
        /*این اکشن ویو های مربوط به مصوبات را در کارتابل مصوبات برمی گرداند */
        public ActionResult ViewFormresp(string id, string notId)
        {
            ViewBag.ORGA = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.presption = Db.EXP_EDOC_INSTRU.Where(c => c.ETDO_ETDO_ID == 144).Select(c => new { c.EDIN_ID, c.ATTG_SPIC });


            Equipment.Models.PartialClass.MultiModelPrj multicm = new Equipment.Models.PartialClass.MultiModelPrj();
            EXP_EDOC_INSTRU cm = new EXP_EDOC_INSTRU();

            cm = Db.Database.SqlQuery<EXP_EDOC_INSTRU>("select * from EXP_EDOC_INSTRU where {0}".FormatWith(id)).FirstOrDefault();

            Session["notid"] = notId;
            ViewBag.key = notId;

            Session["eedo_id"] = cm.EEDO_EEDO_ID;
            Session["eedin_id"] = cm.EDIN_ID;

            return View("approevent_new", cm);

        }
        /*تعهدات را برمی گرداند */
        public string GetShamsiDate(DateTime DATE)
        {
            return Asr.Base.Globalization.AsrDateTimeExtentions.GetShamsi(DATE);
        }
        public ActionResult approevent([DataSourceRequest] DataSourceRequest request, decimal? EEDO_ID)
        {

            var query = (from b in Db.EXP_EDOC_INSTRU
                         join c in Db.EXP_SUPL_DOC on b.EDIN_ID equals c.EDIN_EDIN_ID
                         where b.EEDO_EEDO_ID == EEDO_ID && b.ETDO_ETDO_ID == 144 && b.EDIN_EDIN_ID == null

                         select new
                         {
                             b.EDIN_ID,
                             b.ATTG_MOEJ,
                             b.EEDO_EEDO_ID,
                             b.ATTG_SPIC,
                             b.CONT_FUN,
                             //ATTG_DATE_PERSIAN=Asr.Base.Globalization.AsrDateTimeExtentions.GetShamsi(  b.ATTG_DATE.GetValueOrDefault()),
                             b.ATTG_DATE,
                             FULL_NAME = c.PAY_PERSONEL.FIRS_NAME + " " + c.PAY_PERSONEL.FAML_NAME
                             //b.EXP_SUPL_DOC.Select(xx=>xx.PRSN_EMP_NUMB).FirstOrDefault()!=null?b.EXP_SUPL_DOC.Select(xx => xx.PAY_PERSONEL.FIRS_NAME).FirstOrDefault():"" //+ " " + b.EXP_SUPL_DOC.Select(xx => xx.PAY_PERSONEL.FAML_NAME).FirstOrDefault()
                         }).ToList();
            var query2 = query.Select(a => new {
                ATTG_DATE_PERSIAN = GetShamsiDate(a.ATTG_DATE.GetValueOrDefault()),
                a.ATTG_DATE,
                a.ATTG_MOEJ,
                a.ATTG_SPIC,
                a.CONT_FUN,
                a.FULL_NAME,
                a.EEDO_EEDO_ID,
                a.EDIN_ID

            }).ToList();
            // return Json(query.ToDataSourceResult(request));
            return Json(query2.ToDataSourceResult(request));
        }
        /*----------------------------------کارتابل-----------------------------*/
        /*این اکشن اطلاعات مربوط به تحلیل حادثه مربوط به جلسه را برمیگرداند */
        public ActionResult Exp_event_cartable([DataSourceRequest] DataSourceRequest request, int id)
        {
            var query = (from b in Db.EXP_EXPI_DOC
                             // join c in Context.EXP_EDOC_INSTRU on b.EEDO_ID equals c.EEDO_EEDO_ID
                         where (b.ETDO_ETDO_ID == 1 && b.DOC_NUMB != null && b.ANPT_ANPT_ID == id && b.EANA_EANA_ROW == 1 //&& c.ETDO_ETDO_ID==61
                         )
                         orderby b.DOC_NUMB
                         select new
                         {
                             b.EEDO_ID,
                             b.DOC_NUMB,
                             b.EEDO_DESC,
                             b.EANA_EANA_ROW,
                             //CODE_NAME = b.EXP_EDOC_INSTRU.Select(xx=>xx.EXP_POST_LINE_INSTRU.CODE_NAME).FirstOrDefault()
                         }).ToList();
            return Json(query.ToDataSourceResult(request));
        }
        public string GetCode(decimal EEDO_ID)
        {
            string code_name = "";
            code_name = Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == EEDO_ID).Select(xx => xx.EXP_POST_LINE_INSTRU.CODE_NAME).FirstOrDefault();
            return code_name;


        }

        /*این اکشن فرم صورتجلسه و کارتابل جلسات را برمی گرداند */
        public ActionResult ViewForm(string id, string notId)
        {

            ViewBag.ORGA = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.presption = Db.EXP_EDOC_INSTRU.Where(c => c.ETDO_ETDO_ID == 144).Select(c => new { c.EDIN_ID, c.ATTG_SPIC });

            if (id != null)
            {

                COM_INVIT_PART cm = new COM_INVIT_PART();
                cm = Db.Database.SqlQuery<COM_INVIT_PART>("select * from COM_INVIT_PART where {0}".FormatWith(id)).FirstOrDefault();
                var val = id.Split('=');
                string hhoff = val[0].ToString();

                // string id = val[1].ToString();

                Session["anapid"] = val[1].ToString();
                Session["notid"] = notId;
                //   Session["anapid"] = id;
                //   Session["notid"] = notId;
                ViewBag.key = notId;

                AsrWorkFlowProcess p1 = new AsrWorkFlowProcess(Convert.ToInt32(notId));
                string curent = p1.CurrentStat;
                if (curent == "CREATMEET")
                { return View("PartialViewmeet", cm); }
                else
                { return View("sortmeeting", cm); }

            }
            else
            { return View(); }

        }

        public JsonResult Approvemeeting(int notId)
        {
            string idrole = "MEETINGORDER";
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);


        }

        /*********************************تحلیل*/
        //////////////////////
        public class Customergrid
        {
            public int typee { get; set; }
            public int typecut1 { get; set; }
            public string azDate { get; set; }
            public string taDate1 { get; set; }
        }

        public class Customergrid2
        {
            public string azDate { get; set; }
            public string taDate1 { get; set; }
        }


        /*این اکشن برای برگرداندن اطلاعات قطعی هاست */
        public ActionResult Exp_maneu_Read([DataSourceRequest] DataSourceRequest request, Customergrid Customergrid1)
        {

            string azDate = Customergrid1.azDate;
            string taDate1 = Customergrid1.taDate1;
            int typecut1 = Customergrid1.typecut1;
            int typee = Customergrid1.typee;
            if (typee == 0)/*تمام قطعی ها را نشان می دهد*/
            {
                if (typecut1 == 0)
                {/*اطلاعات نوع قطعی های مشخص شده تمام را برمی گرداند هم قطع تغذیه و هم اتوماتیک */
                    var query = from b in Db.EXP_EDOC_INSTRU
                                join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID

                                where (b.OFF_DATE.CompareTo(azDate) >= 0 || azDate == null) && ((b.OFF_DATE != null && b.OFF_TIME != null) ||
                                (b.TANS_TOFF != null && b.TANS_DOFF != null))
                               && c.EUNL_EUNL_ID != 201 && (b.OFF_DATE.CompareTo(taDate1) <= 0 || taDate1 == null) && (b.DMAN_DMAN_ID == 370 || b.DMAN_DMAN_ID == 372)
                                orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                                select new
                                {
                                    b.EDIN_ID,
                                    b.CRET_BY,
                                    b.EPOL_EPOL_ID,
                                    b.EPIU_EPIU_ID,
                                    b.EEDO_EEDO_ID,
                                    inst = c.CODE_NAME,
                                    OFFDATE = b.OFF_DATE + " " + b.TANS_DOFF,
                                    TANSDOFF = b.OFF_TIME + " " + b.TANS_TOFF,
                                    ONDATE = b.ON_DATE + " " + b.TANS_DON,
                                    TANSDON = b.ON_TIME + " " + b.TANS_TON,
                                    b.OFF_TIME,
                                    b.DMAN_DMAN_ID,
                                    b.ON_DATE,
                                    b.ON_TIME,
                                    b.CONN_STAT,
                                    b.EDIN_MW,
                                    b.EDIN_OFF,
                                    b.EDIN_MVH,
                                    b.ATTG_SPIC,
                                    b.TANS_DOFF,
                                    b.OFF_DATE,
                                    b.TANS_TOFF,
                                    b.TANS_DON,
                                    b.TANS_TON,
                                    b.TANS_OFST,
                                    b.TANS_ONST

                                };

                    return Json(query.ToDataSourceResult(request));
                }
                else
                {
                    /*براساس نوع قطعی اطلاعات رابرمی گرداند */
                    var query = from b in Db.EXP_EDOC_INSTRU
                                join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                                //where ( b.OFF_DATE >= azDate) && (b.OFF_DATE <= taDate1)
                                where (b.OFF_DATE.CompareTo(azDate) >= 0 || azDate == null) && ((b.OFF_DATE != null && b.OFF_TIME != null)
                                || (b.TANS_TOFF != null && b.TANS_DOFF != null))
                               && c.EUNL_EUNL_ID != 201 && (b.OFF_DATE.CompareTo(taDate1) <= 0 || taDate1 == null) && b.DMAN_DMAN_ID == typecut1 //&& ((b.ON_DATE != null && b.ON_TIME != null) || (b.TANS_DON != null && b.TANS_TON != null))
                                orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                                select new
                                {
                                    b.EDIN_ID,
                                    b.CRET_BY,
                                    b.EPOL_EPOL_ID,
                                    b.EPIU_EPIU_ID,
                                    b.EEDO_EEDO_ID,
                                    inst = c.CODE_NAME,
                                    b.OFF_DATE,
                                    b.OFF_TIME,
                                    OFFDATE = b.OFF_DATE + " " + b.TANS_DOFF,
                                    TANSDOFF = b.OFF_TIME + " " + b.TANS_TOFF,
                                    ONDATE = b.ON_DATE + " " + b.TANS_DON,
                                    TANSDON = b.ON_TIME + " " + b.TANS_TON,
                                    b.DMAN_DMAN_ID,
                                    b.ON_DATE,
                                    b.ON_TIME,
                                    b.CONN_STAT,
                                    b.EDIN_MW,
                                    b.EDIN_OFF,
                                    b.EDIN_MVH,
                                    b.ATTG_SPIC,
                                    b.TANS_DOFF,
                                    b.TANS_TOFF,
                                    b.TANS_DON,
                                    b.TANS_TON,
                                    b.TANS_OFST,
                                    b.TANS_ONST,
                                    DOC_NUMB = b.EXP_EXPI_DOC.DOC_NUMB

                                };

                    return Json(query.ToDataSourceResult(request));

                }
            }
            else
            {/*قطعی های که حادثه ندارند را نشان می دهد*/
                if (typecut1 == 0)
                {
                    var query = from b in Db.EXP_EDOC_INSTRU
                                join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                                //where ( b.OFF_DATE >= azDate) && (b.OFF_DATE <= taDate1)
                                where (b.OFF_DATE.CompareTo(azDate) >= 0) && ((b.OFF_DATE != null && b.OFF_TIME != null) ||
                                (b.TANS_TOFF != null && b.TANS_DOFF != null))
                               && c.EUNL_EUNL_ID != 201 && (b.OFF_DATE.CompareTo(taDate1) <= 0) && (b.DMAN_DMAN_ID == 370 || b.DMAN_DMAN_ID == 372)
                               && b.EEDO_EEDO_ID == null //&& ((b.ON_DATE != null && b.ON_TIME != null) || (b.TANS_DON != null && b.TANS_TON != null))
                                orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                                select new
                                {
                                    b.EDIN_ID,
                                    b.CRET_BY,
                                    b.EPOL_EPOL_ID,
                                    b.EPIU_EPIU_ID,
                                    b.EEDO_EEDO_ID,
                                    inst = c.CODE_NAME,
                                    OFFDATE = b.OFF_DATE + " " + b.TANS_DOFF,
                                    TANSDOFF = b.OFF_TIME + " " + b.TANS_TOFF,
                                    ONDATE = b.ON_DATE + " " + b.TANS_DON,
                                    TANSDON = b.ON_TIME + " " + b.TANS_TON,
                                    b.OFF_DATE,
                                    b.OFF_TIME,
                                    b.DMAN_DMAN_ID,
                                    b.ON_DATE,
                                    b.ON_TIME,
                                    b.CONN_STAT,
                                    b.EDIN_MW,
                                    b.EDIN_OFF,
                                    b.EDIN_MVH,
                                    b.ATTG_SPIC,
                                    b.TANS_DOFF,
                                    b.TANS_TOFF,
                                    b.TANS_DON,
                                    b.TANS_TON,
                                    b.TANS_OFST,
                                    b.TANS_ONST

                                };

                    return Json(query.ToDataSourceResult(request));
                }
                else
                {
                    var query = from b in Db.EXP_EDOC_INSTRU
                                join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                                //where ( b.OFF_DATE >= azDate) && (b.OFF_DATE <= taDate1)
                                where (b.OFF_DATE.CompareTo(azDate) >= 0) && ((b.OFF_DATE != null && b.OFF_TIME != null) ||
                                (b.TANS_TOFF != null && b.TANS_DOFF != null))
                               && c.EUNL_EUNL_ID != 201 && (b.OFF_DATE.CompareTo(taDate1) <= 0) && b.DMAN_DMAN_ID == typecut1
                               && b.EEDO_EEDO_ID == null //&& ((b.ON_DATE != null && b.ON_TIME != null) || (b.TANS_DON != null && b.TANS_TON != null))
                                orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                                select new
                                {
                                    b.EDIN_ID,
                                    b.CRET_BY,
                                    b.EPOL_EPOL_ID,
                                    b.EPIU_EPIU_ID,
                                    b.EEDO_EEDO_ID,
                                    inst = c.CODE_NAME,
                                    OFFDATE = b.OFF_DATE + " " + b.TANS_DOFF,
                                    TANSDOFF = b.OFF_TIME + " " + b.TANS_TOFF,
                                    ONDATE = b.ON_DATE + " " + b.TANS_DON,
                                    TANSDON = b.ON_TIME + " " + b.TANS_TON,
                                    b.OFF_DATE,
                                    b.OFF_TIME,
                                    b.DMAN_DMAN_ID,
                                    b.ON_DATE,
                                    b.ON_TIME,
                                    b.CONN_STAT,
                                    b.EDIN_MW,
                                    b.EDIN_OFF,
                                    b.EDIN_MVH,
                                    b.ATTG_SPIC,
                                    b.TANS_DOFF,
                                    b.TANS_TOFF,
                                    b.TANS_DON,
                                    b.TANS_TON,
                                    b.TANS_OFST,
                                    b.TANS_ONST

                                };

                    return Json(query.ToDataSourceResult(request));

                }
            }
        }

        public ActionResult Exp_maneu_Read2([DataSourceRequest] DataSourceRequest request, Customergrid Customergrid1)
        {
            short? PRSN_EMP_NUMB = Db.SEC_USERS.Where(xx => xx.ORCL_NAME.ToUpper() == User.Identity.Name.ToUpper()).Select(xx => xx.PRSN_EMP_NUMB).FirstOrDefault();
            string azDate = Customergrid1.azDate;
            string taDate1 = Customergrid1.taDate1;
            int typecut1 = Customergrid1.typecut1;
            int typee = Customergrid1.typee;
            if (typee == 0)/*تمام قطعی ها را نشان می دهد*/
            {
                if (typecut1 == 0)
                {/*اطلاعات نوع قطعی های مشخص شده تمام را برمی گرداند هم قطع تغذیه و هم اتوماتیک */
                    var query = from b in Db.EXP_EDOC_INSTRU
                                join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                                join d in Db.EXP_SUPL_DOC on b.EDIN_ID equals d.EDIN_EDIN_ID
                                //where ( b.OFF_DATE >= azDate) && (b.OFF_DATE <= taDate1)
                                where (b.OFF_DATE.CompareTo(azDate) >= 0 || azDate == null) && ((b.OFF_DATE != null && b.OFF_TIME != null) ||
                                (b.TANS_TOFF != null && b.TANS_DOFF != null))
                               && (b.OFF_DATE.CompareTo(taDate1) <= 0 || taDate1 == null) && (b.DMAN_DMAN_ID == 370 || b.DMAN_DMAN_ID == 372) //&& ((b.ON_DATE != null && b.ON_TIME != null) || (b.TANS_DON != null && b.TANS_TON != null))
                                orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                                select new
                                {
                                    b.EDIN_ID,
                                    b.CRET_BY,
                                    b.EPOL_EPOL_ID,
                                    b.EPIU_EPIU_ID,
                                    b.EEDO_EEDO_ID,
                                    inst = c.CODE_NAME,
                                    OFFDATE = b.OFF_DATE + " " + b.TANS_DOFF,
                                    TANSDOFF = b.OFF_TIME + " " + b.TANS_TOFF,
                                    ONDATE = b.ON_DATE + " " + b.TANS_DON,
                                    TANSDON = b.ON_TIME + " " + b.TANS_TON,
                                    b.OFF_TIME,
                                    b.DMAN_DMAN_ID,
                                    b.ON_DATE,
                                    b.ON_TIME,
                                    b.CONN_STAT,
                                    b.EDIN_MW,
                                    b.EDIN_OFF,
                                    b.EDIN_MVH,
                                    b.ATTG_SPIC,
                                    b.TANS_DOFF,
                                    b.OFF_DATE,
                                    b.TANS_TOFF,
                                    b.TANS_DON,
                                    b.TANS_TON,
                                    b.TANS_OFST,
                                    b.TANS_ONST,
                                    ANPT_DESC = Db.COM_INVIT_PART.Select(xx => xx.ANPT_DESC).FirstOrDefault()

                                };

                    return Json(query.ToDataSourceResult(request));
                }
                else
                {
                    /*براساس نوع قطعی اطلاعات رابرمی گرداند */
                    var query = from b in Db.EXP_EDOC_INSTRU
                                join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                                join d in Db.EXP_SUPL_DOC on b.EDIN_ID equals d.EDIN_EDIN_ID
                                join e in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals e.EEDO_ID
                                //where ( b.OFF_DATE >= azDate) && (b.OFF_DATE <= taDate1)
                                where b.EEDO_EEDO_ID == d.EEDO_EEDO_ID && (b.OFF_DATE.CompareTo(azDate) >= 0 || azDate == null) && ((b.OFF_DATE != null && b.OFF_TIME != null)
                                || (b.TANS_TOFF != null && b.TANS_DOFF != null))
                               && (b.OFF_DATE.CompareTo(taDate1) <= 0 || taDate1 == null) && b.DMAN_DMAN_ID == typecut1 //&& ((b.ON_DATE != null && b.ON_TIME != null) || (b.TANS_DON != null && b.TANS_TON != null))
                               && d.PRSN_EMP_NUMB == PRSN_EMP_NUMB
                                orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                                select new
                                {
                                    b.EDIN_ID,
                                    b.CRET_BY,
                                    b.EPOL_EPOL_ID,
                                    b.EPIU_EPIU_ID,
                                    b.EEDO_EEDO_ID,
                                    inst = c.CODE_NAME,
                                    b.OFF_DATE,
                                    b.OFF_TIME,
                                    OFFDATE = b.OFF_DATE + " " + b.TANS_DOFF,
                                    TANSDOFF = b.OFF_TIME + " " + b.TANS_TOFF,
                                    ONDATE = b.ON_DATE + " " + b.TANS_DON,
                                    TANSDON = b.ON_TIME + " " + b.TANS_TON,
                                    b.DMAN_DMAN_ID,
                                    b.ON_DATE,
                                    b.ON_TIME,
                                    b.CONN_STAT,
                                    b.EDIN_MW,
                                    b.EDIN_OFF,
                                    b.EDIN_MVH,
                                    b.ATTG_SPIC,
                                    b.TANS_DOFF,
                                    b.TANS_TOFF,
                                    b.TANS_DON,
                                    b.TANS_TON,
                                    b.TANS_OFST,
                                    b.TANS_ONST,
                                    DOC_NUMB = b.EXP_EXPI_DOC.DOC_NUMB
                                    ,
                                    ANPT_ID = e.ANPT_ANPT_ID,
                                    ANPT_DESC = e.COM_INVIT_PART.ANPT_DESC
                                    //ANPT_DESC=Context.COM_INVIT_PART.Where(xx=>xx.ANPT_ID==
                                    //Context.EXP_EXPI_DOC.Where(yy=>yy.EEDO_ID==b.EEDO_EEDO_ID).Select(yy=>yy.ANPT_ANPT_ID).FirstOrDefault()
                                    //)
                                    //.Select(xx=>xx.ANPT_DESC).FirstOrDefault()

                                };

                    return Json(query.ToDataSourceResult(request));

                }
            }
            else
            {/*قطعی های که حادثه ندارند را نشان می دهد*/
                if (typecut1 == 0)
                {
                    var query = from b in Db.EXP_EDOC_INSTRU
                                join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                                join d in Db.EXP_SUPL_DOC on b.EDIN_ID equals d.EDIN_EDIN_ID
                                //where ( b.OFF_DATE >= azDate) && (b.OFF_DATE <= taDate1)
                                where (b.OFF_DATE.CompareTo(azDate) >= 0) && ((b.OFF_DATE != null && b.OFF_TIME != null) ||
                                (b.TANS_TOFF != null && b.TANS_DOFF != null))
                               && (b.OFF_DATE.CompareTo(taDate1) <= 0) && (b.DMAN_DMAN_ID == 370 || b.DMAN_DMAN_ID == 372)
                               && b.EEDO_EEDO_ID == null //&& ((b.ON_DATE != null && b.ON_TIME != null) || (b.TANS_DON != null && b.TANS_TON != null))
                                orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                                select new
                                {
                                    b.EDIN_ID,
                                    b.CRET_BY,
                                    b.EPOL_EPOL_ID,
                                    b.EPIU_EPIU_ID,
                                    b.EEDO_EEDO_ID,
                                    inst = c.CODE_NAME,
                                    OFFDATE = b.OFF_DATE + " " + b.TANS_DOFF,
                                    TANSDOFF = b.OFF_TIME + " " + b.TANS_TOFF,
                                    ONDATE = b.ON_DATE + " " + b.TANS_DON,
                                    TANSDON = b.ON_TIME + " " + b.TANS_TON,
                                    b.OFF_DATE,
                                    b.OFF_TIME,
                                    b.DMAN_DMAN_ID,
                                    b.ON_DATE,
                                    b.ON_TIME,
                                    b.CONN_STAT,
                                    b.EDIN_MW,
                                    b.EDIN_OFF,
                                    b.EDIN_MVH,
                                    b.ATTG_SPIC,
                                    b.TANS_DOFF,
                                    b.TANS_TOFF,
                                    b.TANS_DON,
                                    b.TANS_TON,
                                    b.TANS_OFST,
                                    b.TANS_ONST
                                    ,
                                    ANPT_DESC = Db.COM_INVIT_PART.Select(xx => xx.ANPT_DESC).FirstOrDefault()
                                };

                    return Json(query.ToDataSourceResult(request));
                }
                else
                {
                    var query = from b in Db.EXP_EDOC_INSTRU
                                join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                                join d in Db.EXP_SUPL_DOC on b.EDIN_ID equals d.EDIN_EDIN_ID
                                //where ( b.OFF_DATE >= azDate) && (b.OFF_DATE <= taDate1)
                                where (b.OFF_DATE.CompareTo(azDate) >= 0) && ((b.OFF_DATE != null && b.OFF_TIME != null) ||
                                (b.TANS_TOFF != null && b.TANS_DOFF != null))
                               && (b.OFF_DATE.CompareTo(taDate1) <= 0) && b.DMAN_DMAN_ID == typecut1
                               && b.EEDO_EEDO_ID == null //&& ((b.ON_DATE != null && b.ON_TIME != null) || (b.TANS_DON != null && b.TANS_TON != null))
                                orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                                select new
                                {
                                    b.EDIN_ID,
                                    b.CRET_BY,
                                    b.EPOL_EPOL_ID,
                                    b.EPIU_EPIU_ID,
                                    b.EEDO_EEDO_ID,
                                    inst = c.CODE_NAME,
                                    OFFDATE = b.OFF_DATE + " " + b.TANS_DOFF,
                                    TANSDOFF = b.OFF_TIME + " " + b.TANS_TOFF,
                                    ONDATE = b.ON_DATE + " " + b.TANS_DON,
                                    TANSDON = b.ON_TIME + " " + b.TANS_TON,
                                    b.OFF_DATE,
                                    b.OFF_TIME,
                                    b.DMAN_DMAN_ID,
                                    b.ON_DATE,
                                    b.ON_TIME,
                                    b.CONN_STAT,
                                    b.EDIN_MW,
                                    b.EDIN_OFF,
                                    b.EDIN_MVH,
                                    b.ATTG_SPIC,
                                    b.TANS_DOFF,
                                    b.TANS_TOFF,
                                    b.TANS_DON,
                                    b.TANS_TON,
                                    b.TANS_OFST,
                                    b.TANS_ONST
                                    ,
                                    ANPT_DESC = Db.COM_INVIT_PART.Select(xx => xx.ANPT_DESC).FirstOrDefault()
                                };

                    return Json(query.ToDataSourceResult(request));

                }
            }
        }

        /*ین اکشن اطلاعات مربوط به حوادث را برمی گرداند */
        public ActionResult Exp_event_Read([DataSourceRequest] DataSourceRequest request, Customergrid2 Customergrid1)
        {
            string azDate = Customergrid1.azDate;
            string taDate1 = Customergrid1.taDate1;
            var query = from b in Db.EXP_EXPI_DOC
                        where (b.FIRS_DATE.CompareTo(azDate) >= 0) && (b.FIRS_DATE.CompareTo(taDate1) <= 0) && b.ETDO_ETDO_ID == 1 && b.DOC_NUMB != null && b.EANA_EANA_ROW == 1
                        orderby b.DOC_NUMB
                        select new
                        {
                            b.EEDO_ID,
                            b.DOC_NUMB,
                            b.EEDO_DESC,
                            countcut = b.EXP_EDOC_INSTRU.Count,
                        };


            return Json(query.ToDataSourceResult(request));



        }
        /*این اکشن اطلاعات مربوط به قطعی های حادثه را برمی گرداند */

        public ActionResult Exp_maneuevent_Read([DataSourceRequest] DataSourceRequest request, string eana, int eedoid)
        {
            int i = 0;
            if (Session["eedodaftarfani_id"] != null)
                i = Convert.ToInt32(Session["eedodaftarfani_id"].ToString());
            else
                i = eedoid;
            var query = from b in Db.EXP_EDOC_INSTRU
                        join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                        where b.EEDO_EEDO_ID == i
                        orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                        select new
                        {
                            b.EDIN_ID,
                            b.CRET_BY,
                            b.EPOL_EPOL_ID,
                            b.EPIU_EPIU_ID,
                            inst = c.CODE_NAME,
                            cpost = b.EXP_POST_LINE.EPOL_NAME + " " + b.EXP_POST_LINE_INSTRU.CODE_NAME,
                            b.EEDO_EEDO_ID,
                            offdate = b.OFF_DATE + " " + b.OFF_TIME + "" + b.TANS_DOFF + " " + b.TANS_TOFF,
                            b.DMAN_DMAN_ID,
                            onedate = b.ON_DATE + " " + b.ON_TIME + "" + b.TANS_DON + " " + b.TANS_TON,
                            b.CONN_STAT,
                            b.EDIN_MW,
                            b.EDIN_OFF,
                            b.EDIN_MVH,
                            b.ATTG_SPIC,
                            b.TANS_DOFF,
                            b.OFF_DATE,
                            b.TANS_TOFF,
                            dattanon = b.TANS_DON + " " + b.TANS_TON + " :تانسیون" + b.TANS_DOFF + " " + b.TANS_TOFF,
                            b.TANS_OFST,
                            b.TANS_ONST,
                            b.OPER_STAT
                            ,
                            b.FUNC_TYPE
                            ,
                            b.CUT_STAT
                            ,
                            b.EVEN_KM
                            ,
                            b.CONT_FUN,
                            clent = b.EXP_POST_LINE.LINE_LENT,
                            opertmain = b.EXP_EVE_OPERA.EEVO_DESC + "" + b.EXP_EVE_OPER_DET.EEOD_DESC,

                        };

            return Json(query.ToDataSourceResult(request));
        }
        /*این اکشن اطلاعات عوامل شروع حادثه را برمی گرداند */
        public ActionResult Exp_opereves_Read([DataSourceRequest] DataSourceRequest request, string eana, int eedoid)
        {
            int i = 0;
            //if (Session["eedo_id"]!=null)
            //    i = Convert.ToInt32(Session["eedo_id"].ToString());
            string sdoc = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b.DOC_NUMB).FirstOrDefault().ToString();

            var query = from b in Db.EXP_DEF_EVENT_INSTR
                        join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                        join p in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals p.EEDO_ID
                        where ((b.EEDO_EEDO_ID == eedoid && eana != "1") || (eana == "1" && p.DOC_NUMB == sdoc)) && b.EEVO_EEVO_ID == 1
                        select new
                        {
                            b.EDEI_ID,
                            b.EDEI_STAT,
                            b.EPOL_EPOL_ID,
                            b.EPIU_EPIU_ID,
                            inst = c.CODE_NAME,
                            b.EEDO_EEDO_ID,
                            b.EDEI_TYPE,
                            b.EPIU_EPIU_ID_R,
                            b.EINS_EINS_ID,
                            b.EEVO_EEVO_ID,
                            b.EEOD_EEOD_ID,
                            b.EDIN_EDIN_ID,
                            b.EDEI_DESC,
                            // b.EERR_EERR_ID,
                            inst1 = b.EXP_POST_LINE_INSTRU1.CODE_NAME,
                            cexecdes = b.EXP_POST_LINE_INSTRU1.EXP_TYPE_EQUIP.ETEX_DESC,
                            cexecstat = b.EXP_POST_LINE_INSTRU.PHAS_STAT,
                            cexectype = b.EXP_POST_LINE_INSTRU.PHAS_TYPE,

                        };
            return Json(query.ToDataSourceResult(request));
        }
        /*این اکشن اطلاعات عوامل گسترش حادثه را برمی گرداند */
        public ActionResult Exp_operevea_Read([DataSourceRequest] DataSourceRequest request, string eana, int eedoid)
        {
            int i = 0;
            string sdoc = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b.DOC_NUMB).FirstOrDefault().ToString();
            var query = from b in Db.EXP_DEF_EVENT_INSTR
                        join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                        join p in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals p.EEDO_ID
                        where ((b.EEDO_EEDO_ID == eedoid && eana != "1") || (eana == "1" && p.DOC_NUMB == sdoc)) && b.EEVO_EEVO_ID == 2
                        select new
                        {
                            b.EDEI_ID,
                            b.EDEI_STAT,
                            b.EPOL_EPOL_ID,
                            b.EPIU_EPIU_ID,
                            inst = c.CODE_NAME,
                            b.EEDO_EEDO_ID,
                            b.EDEI_TYPE,
                            b.EPIU_EPIU_ID_R,
                            b.EINS_EINS_ID,
                            b.EEVO_EEVO_ID,
                            b.EEOD_EEOD_ID,
                            b.EDIN_EDIN_ID,
                            b.EDEI_DESC,
                            ///  b.EERR_EERR_ID,
                            cexecdes = b.EXP_POST_LINE_INSTRU1.EXP_TYPE_EQUIP.ETEX_DESC,
                            cexecstat = b.EXP_POST_LINE_INSTRU.PHAS_STAT,
                            cexectype = b.EXP_POST_LINE_INSTRU.PHAS_TYPE,
                        };
            return Json(query.ToDataSourceResult(request));
        }
        /*اطلاعات قطعی را براساس کد حادثه برمی گرداند قطعی های حادثه */
        public ActionResult Get_Value_Doc2([DataSourceRequest] DataSourceRequest request)
        {
            int u = 0;
            if (Session["event_id"] != null)
            {
                u = Convert.ToInt32(Session["event_id"].ToString());
            }

            var query = from b in Db.EXP_EDOC_INSTRU
                        join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                        where (b.EEDO_EEDO_ID == u)

                        select new
                        {

                            b.EDIN_ID,
                            b.CRET_BY,
                            b.EPOL_EPOL_ID,
                            b.EPIU_EPIU_ID,
                            b.EEDO_EEDO_ID,
                            inst = c.CODE_NAME,
                            b.OFF_TIME,
                            b.DMAN_DMAN_ID,
                            b.ON_DATE,
                            b.ON_TIME,
                            b.CONN_STAT,
                            b.EDIN_MW,
                            b.EDIN_OFF,
                            b.EDIN_MVH,
                            b.ATTG_SPIC,
                            b.TANS_DOFF,
                            b.OFF_DATE,
                            b.TANS_TOFF,
                            b.TANS_DON,
                            b.TANS_TON,
                            b.TANS_OFST,
                            b.TANS_ONST,

                            cpost = b.EXP_POST_LINE.EPOL_NAME + " " + b.EXP_POST_LINE_INSTRU.CODE_NAME,
                            offdate = b.OFF_DATE + " " + b.OFF_TIME + "" + b.TANS_DOFF + " " + b.TANS_TOFF,
                            onedate = b.ON_DATE + " " + b.ON_TIME + "" + b.TANS_DON + " " + b.TANS_TON,
                            dattanon = b.TANS_DON + " " + b.TANS_TON + " :تانسیون" + b.TANS_DOFF + " " + b.TANS_TOFF,
                            clent = b.EXP_POST_LINE.LINE_LENT,
                            opertmain = b.EXP_EVE_OPERA.EEVO_DESC + "" + b.EXP_EVE_OPER_DET.EEOD_DESC,
                            b.OPER_STAT,
                            b.FUNC_TYPE
                            ,
                            b.CUT_STAT
                            ,
                            b.EVEN_KM
                            ,
                            b.CONT_FUN,



                        };

            return Json(query.ToDataSourceResult(request));


        }

        /*این اکشن قطعی های مربوط به حادثه را برمی گرداند */
        public ActionResult Get_Value_Doc([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = from b in Db.EXP_EDOC_INSTRU
                        join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                        where (b.EEDO_EEDO_ID == id && b.ETDO_ETDO_ID == 61) /*&& b.ETDO_ETDO_ID == null*/

                        select new
                        {
                            b.EDIN_ID,
                            b.CRET_BY,
                            b.EPOL_EPOL_ID,
                            b.EPIU_EPIU_ID,
                            b.EEDO_EEDO_ID,
                            b.OFF_TIME,
                            inst = c.CODE_NAME,
                            b.DMAN_DMAN_ID,
                            b.ON_DATE,
                            b.ON_TIME,
                            b.CONN_STAT,
                            b.EDIN_MW,
                            b.EDIN_OFF,
                            b.EDIN_MVH,
                            b.ATTG_SPIC,
                            b.TANS_DOFF,
                            b.OFF_DATE,
                            b.TANS_TOFF,
                            b.TANS_DON,
                            b.TANS_TON,
                            b.TANS_OFST,
                            b.TANS_ONST,
                            cpost = b.EXP_POST_LINE.EPOL_NAME + " " + b.EXP_POST_LINE_INSTRU.CODE_NAME,
                            offdate = b.OFF_DATE + " " + b.OFF_TIME + "" + b.TANS_DOFF + " " + b.TANS_TOFF,
                            onedate = b.ON_DATE + " " + b.ON_TIME + "" + b.TANS_DON + " " + b.TANS_TON,
                            dattanon = b.TANS_DON + " " + b.TANS_TON + " :تانسیون" + b.TANS_DOFF + " " + b.TANS_TOFF,
                            clent = b.EXP_POST_LINE.LINE_LENT,
                            opertmain = b.EXP_EVE_OPERA.EEVO_DESC + "" + b.EXP_EVE_OPER_DET.EEOD_DESC,
                            b.OPER_STAT,
                            b.FUNC_TYPE
                              ,
                            b.CUT_STAT
                              ,
                            b.EVEN_KM
                              ,
                            b.CONT_FUN,

                        };

            return Json(query.ToDataSourceResult(request));
        }

        /*این اکشن بعد از ساختن کد حادثه و هدر حادثه بروی ردیف قطعی های که مشخص شده است ان را قرار می دهد*/

        public ActionResult InsertcodeEvent(int idd, string id, string date, string edate/*, string organcode, string manacode*/)
        {
            if (id == "" || idd == null)
            {
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] لطفا قطعی های حادثه را مشخص نمایید.", id) }.ToJson();
            }
            else
            {
                int cc = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == idd select b).Count();
                if (cc == 0)
                {
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ردیف نوشته شده برای قطعی اصلی وجود ندارد.", id) }.ToJson();
                }
                else
                {
                    var query = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == idd select b).FirstOrDefault();
                    string dateof = "";
                    string timeoff = "";
                    string post = (from b in Db.EXP_POST_LINE where b.EPOL_ID == query.EPOL_EPOL_ID select b.EPOL_NAME).FirstOrDefault().ToString();

                    if (query.OFF_TIME == null)
                    {
                        dateof = query.TANS_DOFF.ToString();
                        timeoff = query.TANS_TOFF;
                    }
                    else
                    {
                        dateof = query.OFF_DATE.ToString();
                        timeoff = query.OFF_TIME;
                    }
                    try
                    {
                        string eventd = "حادثه " + post + "  " + dateof;
                        int q = (from b in Db.EXP_EXPI_DOC where b.FIRS_DATE == dateof select b).Count();
                        string code = dateof + "_" + q;
                        var newModel = new EXP_EXPI_DOC()
                        {
                            FIRS_DATE = dateof,
                            FIRS_TIME = timeoff,
                            EPOL_EPOL_ID = query.EPOL_EPOL_ID,
                            EEDO_DESC = eventd,
                            ETDO_ETDO_ID = 1,
                            EANA_EANA_ROW = 1
                        };
                        /*ایجاد حادثه */
                        Db.EXP_EXPI_DOC.Add(newModel);

                        Db.SaveChanges();
                        newModel.DOC_NUMB = "E" + newModel.EEDO_ID.ToString();
                        Db.SaveChanges();

                        var i = newModel.EEDO_ID;
                        var objecttemp = new EXP_SUPL_DOC();

                        // var val = id.Split('-');
                        int j = 0;
                        // while (val[j].ToString() != "")
                        // {
                        //     int idcut = Convert.ToInt32(val[j].ToString());

                        var row = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == idd select b).FirstOrDefault();
                        row.EEDO_EEDO_ID = i;
                        //    j = j + 1;
                        // }
                        /*ثبت حادثه بروی قطعی ها */
                        Db.SaveChanges();
                        objecttemp.EEDO_EEDO_ID = newModel.EEDO_ID;
                        objecttemp.EDIN_EDIN_ID = Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == newModel.EEDO_ID).Select(xx => xx.EDIN_ID).FirstOrDefault();
                        objecttemp.PRSN_EMP_NUMB = Db.SEC_USERS.Where(xx => xx.ORCL_NAME.ToUpper() == User.Identity.Name.ToUpper()).Select(xx => xx.PRSN_EMP_NUMB).FirstOrDefault();
                        Db.EXP_SUPL_DOC.Add(objecttemp);
                        var querycheck = from b in Db.EXP_SUPL_DOC
                                         where b.EEDO_EEDO_ID == objecttemp.EEDO_EEDO_ID && b.PRSN_EMP_NUMB == objecttemp.PRSN_EMP_NUMB && b.EDIN_EDIN_ID == Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == objecttemp.EEDO_EEDO_ID).Select(xx => xx.EDIN_ID).FirstOrDefault()
                                         select b;
                        if (!querycheck.Any())
                        {
                            Db.SaveChanges();
                        }

                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", id) }.ToJson();

                    }
                    catch (Exception ex)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                    }
                }
            }
        }
        /*براساس ردیف قطعی اطلاعات دیگری که لازم است را بروی قطعی قرار می دهد */
        public ActionResult updateeventManeu(Equipment.Models.EXP_EDOC_INSTRU NewItem)
        {

            int u = Convert.ToInt32(Session["cutoperate_id"].ToString());

            int eve = Convert.ToInt32(Request.Form["mainoperate"].ToString());
            try
            {

                EXP_EDOC_INSTRU row = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == u select b).FirstOrDefault();
                row.EVEN_KM = NewItem.EVEN_KM;
                row.CONT_FUN = NewItem.CONT_FUN;
                row.CUT_STAT = NewItem.CUT_STAT;
                row.OPER_STAT = NewItem.OPER_STAT;
                row.EEVO_EEVO_ID = eve;
                row.EEOD_EEOD_ID = NewItem.EEOD_EEOD_ID;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." + row.CONT_FUN }.ToJson();
            }

            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }
        /*  ین اکشن اطلاعات عوامل شروع و گسترش که تعریف شده است را ثبت می نماید و در صورت تغییر اطلاعات ان هارا تغییر می دهد و ثبت می نماید  */
        public ActionResult Inststatrevent(Equipment.Models.EXP_DEF_EVENT_INSTR NewItem)
        {

            int u = Convert.ToInt32(Session["defcevent_id"]);
            int idopert = Convert.ToInt32(Request.Form["typeopert"].ToString());

            if (idopert == 0)
                idopert = 1;
            else
                idopert = 2;
            try
            {
                if (Session["eedocreat_id"] == "")
                { return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شماره حادثه مشخص نیست" }.ToJson(); }
                else
                {
                    NewItem.EEDO_EEDO_ID = Convert.ToInt32(Session["eedocreat_id"]);
                    if (Request.Form["post3"].ToString() != "")
                        NewItem.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post3"].ToString());

                    string calssts = Request.Form["EINSC"];
                    int classt = Convert.ToInt32(calssts);
                    int idinst = 0;
                    if (classt != 281 && classt > 4)
                    {



                        if (Request.Form["POSTINSTTT"] != null)
                            NewItem.EPIU_EPIU_ID = Convert.ToInt32(Request.Form["POSTINSTTT"].ToString());
                        //if (Request.Form["detailp1"] != null)
                        //    NewItem.EERR_EERR_ID = Convert.ToInt32(Request.Form["detailp1"].ToString());

                    }
                    else
                    {

                        string typeinst = Request.Form["typeinst1"];
                        if (typeinst == "1")
                        {


                            if (Request.Form["POSTINSTTT"] != null)
                                NewItem.EPIU_EPIU_ID = Convert.ToInt32(Request.Form["POSTINSTTT"].ToString());
                            //if (Request.Form["detailp1"] != null)
                            //    NewItem.EERR_EERR_ID = Convert.ToInt32(Request.Form["detailp1"].ToString());

                        }
                        else
                        {

                            if (Request.Form["POSTINST"] != null)
                                NewItem.EPIU_EPIU_ID = Convert.ToInt32(Request.Form["POSTINST"].ToString());
                            //if (Request.Form["detailp"] != null)
                            //    NewItem.EERR_EERR_ID = Convert.ToInt32(Request.Form["detailp"].ToString());


                        }
                    }





                    if (u == 0)
                    {


                        if (NewItem.EEOD_EEOD_ID == null)
                        { return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "عامل شروع مشخص نیست" }.ToJson(); }
                        else
                        {

                            NewItem.EEVO_EEVO_ID = idopert;
                            Db.EXP_DEF_EVENT_INSTR.Add(NewItem);
                            Db.SaveChanges();


                            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.EDEI_DESC) }.ToJson();
                        }

                    }
                    else
                    {

                        NewItem.EDEI_ID = Convert.ToInt32(Session["defcevent_id"]);
                        var row = (from b in Db.EXP_DEF_EVENT_INSTR where b.EDEI_ID == NewItem.EDEI_ID select b).FirstOrDefault();


                        row.EDEI_STAT = NewItem.EDEI_STAT;
                        row.EDEI_TYPE = NewItem.EDEI_TYPE;
                        row.EDIN_EDIN_ID = NewItem.EDIN_EDIN_ID;

                        row.EINS_EINS_ID = NewItem.EINS_EINS_ID;
                        row.EPIU_EPIU_ID = NewItem.EPIU_EPIU_ID;
                        //row.EERR_EERR_ID = NewItem.EERR_EERR_ID;
                        //row.EERR_EERR_ID_R = NewItem.EERR_EERR_ID_R;
                        // row.EPIU_EPIU_ID_R = NewItem.EPIU_EPIU_ID_R;
                        row.EPOL_EPOL_ID = NewItem.EPOL_EPOL_ID;
                        row.EDEI_DESC = NewItem.EDEI_DESC;
                        row.EEOD_EEOD_ID = NewItem.EEOD_EEOD_ID;
                        Db.SaveChanges();
                        return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();

                    }
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }

        /*این اکشن تحلیل گرها را برمی گرداند */
        public ActionResult analysor()
        {
            int userid = this.UserInfo().UserId;

            var query = (from b in Db.EXP_ANALYZOR_EVENT
                         join c in Db.SEC_USER_TYPE_POST on b.EANA_ROW equals c.EANA_EANA_ROW
                         where c.SCSU_ROW_NO == userid && b.EANA_TYPE == 0

                         select new { b.EANA_ROW, b.EANA_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*عوامل شروع حادثه*/
        public ActionResult EEOD_EEOD_ID_Read()
        {
            var query = (from b in Db.EXP_EVE_OPER_DET where b.EEVO_EEVO_ID == 1 select new { b.EEOD_ID, b.EEOD_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*عوامل گسترش حادثه*/
        public ActionResult EEOD_EEOD_ID_Readg()
        {
            var query = (from b in Db.EXP_EVE_OPER_DET where b.EEVO_EEVO_ID == 2 select new { b.EEOD_ID, b.EEOD_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }


        /*اطلاعات مربوط به زیر شاخه ها را برمی گرداند */
        public ActionResult EEOD_EEOD_ID_Reada(int? id)
        {
            int id1 = Convert.ToInt32(id);
            if (id == 0)
                id1 = 1;
            else
            {
                if (id == 1)
                    id1 = 2;

            }
            var query = (from b in Db.EXP_EVE_OPER_DET where b.EEVO_EEVO_ID == id1 select new { b.EEOD_ID, b.EEOD_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*اطلاعات مربوط به عوامل قطعی ها را برمی گرداند */
        public ActionResult EEVO_EEVO_ID_Reada()
        {
            var query = (from b in Db.EXP_EVE_OPERA where b.EEVO_ID > 2 select new { b.EEVO_ID, b.EEVO_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*
این اکشن اطلاعات   پست ها را برمی گرداند 
*/
        public ActionResult EPOL_EPOL_ID_Read()
        {
            var query = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "0" select new { b.EPOL_ID, b.EPOL_NAME });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*
این اکشن اطلاعات تجهیزات  پست ها را برمی گرداند 
*/
        public ActionResult EPIU_EPIU_ID_Read(int? postcode)
        {
            var query = (from b in Db.EXP_POST_LINE_INSTRU
                         join k in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals k.EINS_ID
                         where k.INST_TYPE == "0" && b.EPOL_EPOL_ID == postcode && b.EPIU_EPIU_ID_SAVABEGH != null

                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,


                         });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*
این اکشن اطلاعات نوع تجهیزات  را برمی گرداند 
*/
        public ActionResult EINS_EINS_ID_Read()
        {
            var query = (from b in Db.EXP_INSTRUMENT
                         where b.INST_TYPE == "1"
                         select new { b.EINS_ID, b.EINS_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*
      این اکشن اطلاعات نوع تجهیزات  پست ها را برمی گرداند 
      */
        public ActionResult EPIU_EPIU_ID_R_Read(int? postcode)
        {
            var query = (from b in Db.EXP_POST_LINE_INSTRU
                         join k in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals k.EINS_ID
                         where k.INST_TYPE == "1" && b.EPOL_EPOL_ID == postcode && b.EPIU_EPIU_ID_SAVABEGH != null
                         select new { b.EPIU_ID, b.CODE_NAME });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        /*حذف اطلاعات کامل یک حادثه */
        public ActionResult deletallevent(int idd)
        {
            try
            {
                /*حذف اطلاعات عوامل */
                var qdefa = from defa in Db.EXP_DEF_EVENT_INSTR where defa.EEDO_EEDO_ID == idd select defa;
                foreach (var da in qdefa)
                {
                    Db.EXP_DEF_EVENT_INSTR.Remove(da);

                }

                var q = from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == idd select b;
                foreach (var qrel in q)
                {
                    int defid = Convert.ToInt32(qrel.EEDO_EEDO_ID_R.ToString());
                    var qdef = from def in Db.EXP_DEF_EVENT_INSTR where def.EEDO_EEDO_ID == defid select def;
                    foreach (var d in qdef)
                    {
                        Db.EXP_DEF_EVENT_INSTR.Remove(d);

                    }

                    Db.EXP_RELATION_DOC.Remove(qrel);
                }
                /*برگرداندن اطلاعات مربوط به حوادث بروی قطعی ها  */
                var ins = (from i in Db.EXP_EDOC_INSTRU where i.EEDO_EEDO_ID == idd select i);
                foreach (var instcut in ins)
                {
                    instcut.EEDO_EEDO_ID = null;

                    instcut.EVEN_KM = null;
                    instcut.CONT_FUN = null;
                    instcut.CUT_STAT = null;
                    instcut.OPER_STAT = null;
                    instcut.EEVO_EEVO_ID = null;
                    instcut.EEOD_EEOD_ID = null;

                }
                /*حذف حادثه */
                var eedo = Db.EXP_EXPI_DOC.FirstOrDefault(b => b.EEDO_ID == idd);
                Db.EXP_EXPI_DOC.Remove(eedo);
                Db.SaveChanges();

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }
        /*این اکشن اطلاعات حادثه را از روی قطعی برداشته و قطعی را ازاد می کند */
        public ActionResult upadatecut(int idd)
        {
            try
            {
                var row = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == idd select b).FirstOrDefault();
                row.EEDO_EEDO_ID = null;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }
        /*قطعی های که انتخاب شده است را به حادثه مورد نظر انتخاب شده لینک می کند */
        public ActionResult Insertcodecut(string idd, int idc)
        {
            try
            {
                var val = idd.Split('-');
                int j = 0;
                /*انتخاب قطعی های مورد نظر */
                while (val[j].ToString() != "")
                {
                    int idcut = Convert.ToInt32(val[j].ToString());

                    var row = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == idcut select b).FirstOrDefault();
                    row.EEDO_EEDO_ID = idc;
                    j = j + 1;
                }
                Db.SaveChanges();

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }
        /*این اکشن قطعی های مربوط به قطع تغذیه و اتومات های که مربوط به هیچ قطعی نیست را برمی گرداند */
        public ActionResult Get_cut_add([DataSourceRequest] DataSourceRequest request)
        {

            var query = from b in Db.EXP_EDOC_INSTRU

                        where ((b.OFF_DATE != null && b.OFF_TIME != null) || (b.TANS_TOFF != null && b.TANS_DOFF != null))
                          && (b.DMAN_DMAN_ID == 370 || b.DMAN_DMAN_ID == 372) && b.EEDO_EEDO_ID == null
                        select b;
            var d = new DataSourceResult
            {

                Data = query.Select(b => new
                {
                    b.EDIN_ID,
                    b.CRET_BY,
                    b.EPOL_EPOL_ID,
                    b.EPIU_EPIU_ID,
                    cpost = b.EXP_POST_LINE.EPOL_NAME + " " + b.EXP_POST_LINE_INSTRU.CODE_NAME,
                    b.EEDO_EEDO_ID,
                    offdate = b.OFF_DATE + " " + b.OFF_TIME + "" + b.TANS_DOFF + " " + b.TANS_TOFF,
                    b.DMAN_DMAN_ID,
                    onedate = b.ON_DATE + " " + b.ON_TIME + "" + b.TANS_DON + " " + b.TANS_TON,
                    b.CONN_STAT,
                    b.EDIN_MW,
                    b.EDIN_OFF,
                    b.EDIN_MVH,
                    b.ATTG_SPIC,
                    b.TANS_DOFF,
                    b.OFF_DATE,
                    b.TANS_TOFF,
                    dattanon = b.TANS_DON + " " + b.TANS_TON + " :تانسیون" + b.TANS_DOFF + " " + b.TANS_TOFF,
                    b.TANS_OFST,
                    b.TANS_ONST,
                    b.OPER_STAT
                            ,
                    b.FUNC_TYPE
                            ,
                    b.CUT_STAT
                            ,
                    b.EVEN_KM
                            ,
                    b.CONT_FUN,
                    clent = b.EXP_POST_LINE.LINE_LENT,
                    opertmain = b.EXP_EVE_OPERA.EEVO_DESC + "" + b.EXP_EVE_OPER_DET.EEOD_DESC,



                }),
            };
            return Json(d);
        }
        /*این اکشن فرم اضافه کردن قطعی به حادثه را نمایش می دهد*/
        public ActionResult cutaddevent_new(int? id)
        {
            Session["event_id"] = id;
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.PostInstrument1 = Db.EXP_ERROR_INST.Select(c => new { c.EERR_ID, c.EERR_DESC });
            //  ViewBag.PostInstrument1 = Context.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });


            if (id != 0)
            {

                EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();
                return View(EXPNEW);

            }
            else
            {
                return View("ErrorNotFound");

            }


        }

        /*دوانالیز مورد نظر انکه ابتدا انتخاب شده و ان که برای تلفیق انتخاب شده است
         * را در نظر گرفته و کد اصلی را روی انتخاب تلفیق قرار می دهد */
        public ActionResult concatcodeevent(int idd, int idc)
        {
            try
            {

                var qdef = from def in Db.EXP_DEF_EVENT_INSTR where def.EEDO_EEDO_ID == idd select def;
                foreach (var d in qdef)
                {
                    d.EEDO_EEDO_ID = idc;
                }
                var q = from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == idd select b;
                foreach (var qrel in q)
                {
                    qrel.EEDO_EEDO_ID = idc;

                }
                var ins = (from i in Db.EXP_EDOC_INSTRU where i.EEDO_EEDO_ID == idd select i);
                foreach (var instcut in ins)
                {
                    instcut.EEDO_EEDO_ID = idc;


                }

                var eedo = Db.EXP_EXPI_DOC.FirstOrDefault(b => b.EEDO_ID == idd);
                Db.EXP_EXPI_DOC.Remove(eedo);

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }




        }

        /*
تمام انالیز حوادث دیگر را به غیر از انالیز انتخاب شده را برمی گرداند 
*/
        public ActionResult Exp_event_Read_other([DataSourceRequest] DataSourceRequest request)
        {
            int u = 0;
            if (Session["event_id"] != null)
            {
                u = Convert.ToInt32(Session["event_id"].ToString());
            }


            var query = from b in Db.EXP_EXPI_DOC
                        where b.ETDO_ETDO_ID == 1 && b.DOC_NUMB != null && b.EANA_EANA_ROW == 1 && b.EEDO_ID != u
                        orderby b.DOC_NUMB
                        select new
                        {
                            b.EEDO_ID,
                            b.DOC_NUMB,
                            b.EEDO_DESC,
                            countcut = b.EXP_EDOC_INSTRU.Count,
                        };


            return Json(query.ToDataSourceResult(request));



        }
        /*این اکشن فرم تلفیق حادثه ها را به نمایش می گذارد */
        public ActionResult cevent_new(int? id)
        {
            Session["event_id"] = id;
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            // ViewBag.PostInstrument1 = Context.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.PostInstrument1 = Db.EXP_ERROR_INST.Select(c => new { c.EERR_ID, c.EERR_DESC });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });


            if (id != 0)
            {

                EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();
                return View(EXPNEW);

            }
            else
            {
                return View("ErrorNotFound");

            }


        }
        /*اطلاعات تحلیل و انالیز حوادث را برمی گرداند */
        public ActionResult Exp_event_Readass([DataSourceRequest] DataSourceRequest request)
        {
            int u = 0;
            if (Session["event_id"] != null)
            {
                u = Convert.ToInt32(Session["event_id"].ToString());
            }


            var query = from b in Db.EXP_EXPI_DOC

                        where b.ETDO_ETDO_ID == 1 && b.DOC_NUMB != null && b.EEDO_ID == u
                        orderby b.DOC_NUMB
                        select new
                        {
                            b.EEDO_ID,
                            b.DOC_NUMB,
                            b.EEDO_DESC,
                            b.EANA_EANA_ROW,
                            countcut = b.EXP_EDOC_INSTRU.Count,
                        };

            return Json(query.ToDataSourceResult(request));
        }
        /*اطلاعات انالیز حوادث دیگر انالیزرهای یک حادثه را برمی گرداند */
        public ActionResult Exp_event_Readoneevent([DataSourceRequest] DataSourceRequest request)
        {
            int u = 0;
            if (Session["event_id"] != null)
            {
                u = Convert.ToInt32(Session["event_id"].ToString());
            }


            var query = from b in Db.EXP_EXPI_DOC
                        join c in Db.EXP_RELATION_DOC on b.EEDO_ID equals c.EEDO_EEDO_ID_R
                        where b.ETDO_ETDO_ID == 1 && b.DOC_NUMB != null && c.EEDO_EEDO_ID == u
                        orderby b.DOC_NUMB
                        select new
                        {
                            b.EEDO_ID,
                            b.DOC_NUMB,
                            b.EEDO_DESC,
                            b.EANA_EANA_ROW,
                            countcut = b.EXP_EDOC_INSTRU.Count,
                        };


            return Json(query.ToDataSourceResult(request));



        }
        /*این اکشن تحلیل حوادث یک حادثه را تمام تحلیل های ان و قطعی های ان را برمی گرداند */
        public ActionResult eventseeall_new(int? id)
        {
            Session["event_id"] = id;
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            //  ViewBag.PostInstrument1 = Context.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.PostInstrument1 = Db.EXP_ERROR_INST.Select(c => new { c.EERR_ID, c.EERR_DESC });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            ViewBag.analysor = Db.EXP_ANALYZOR_EVENT.Select(c => new { c.EANA_ROW, c.EANA_DESC });


            if (id != 0)
            {

                EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();
                return View(EXPNEW);

            }
            else
            {
                return View("ErrorNotFound");

            }


        }
        /*این اکشن فرم مربوط به عوامل قطعی را به نمایش می گذارد */
        public ActionResult cutoperate_new(int? id)
        {
            Session["cutoperate_id"] = id;
            if (id != 0)
            {

                EXP_EDOC_INSTRU EXPNEW = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b).FirstOrDefault();
                return View(EXPNEW);

            }
            else
            {
                return View("ErrorNotFound");

            }


        }
        /*این ویو اطلاعات مربوط به عوامل گسترش و شروع حادثه را برمی گرداند */
        public ActionResult statevent_new(int? id, int? type, int? eedoid)
        {
            Session["defcevent_id"] = id;

            var seedo_id = eedoid;
            if (seedo_id != null)
            {
                string sdocq = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b.DOC_NUMB).FirstOrDefault().ToString();
                var qdaftar = (from b in Db.EXP_EXPI_DOC where b.DOC_NUMB == sdocq && b.EANA_EANA_ROW == 1 select b.EEDO_ID);
                string seeddaftarfani_id = null;

                if (qdaftar != null)
                {
                    seeddaftarfani_id = qdaftar.FirstOrDefault().ToString();
                }



                int eedocreat_id = 0;

                if (seedo_id != null)
                { eedocreat_id = Convert.ToInt32(seedo_id); }
                else
                { eedocreat_id = Convert.ToInt32(seeddaftarfani_id); }

                Session["eedocreat_id"] = eedocreat_id;
            }
            ViewBag.typeopert = type;

            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            // ViewBag.PostInstrument1 = Context.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.PostInstrument1 = Db.EXP_ERROR_INST.Select(c => new { c.EERR_ID, c.EERR_DESC });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.operats = Db.EXP_EVE_OPER_DET.Where(c => c.EEVO_EEVO_ID == 1).Select(c => new { c.EEOD_ID, c.EEOD_DESC });
            ViewBag.operatg = Db.EXP_EVE_OPER_DET.Where(c => c.EEVO_EEVO_ID == 2).Select(c => new { c.EEOD_ID, c.EEOD_DESC });



            if (id != 0)
            {

                EXP_DEF_EVENT_INSTR EXPNEW = (from b in Db.EXP_DEF_EVENT_INSTR where b.EDEI_ID == id select b).FirstOrDefault();
                return View(EXPNEW);

            }

            return View();

        }

        public ActionResult allevent_new(int? id)
        {

            Session["defceventall_id"] = id;
            var seeddaftarfani_id = Session["eedodaftarfani_id"];
            var seedo_id = Session["eedo_id"];
            int eedocreat_id = 0;

            if (seedo_id != null)
            { eedocreat_id = Convert.ToInt32(seedo_id); }
            else
            { eedocreat_id = Convert.ToInt32(seeddaftarfani_id); }

            Session["eedocreat_id"] = eedocreat_id;



            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            //  ViewBag.PostInstrument1 = Context.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.PostInstrument1 = Db.EXP_ERROR_INST.Select(c => new { c.EERR_ID, c.EERR_DESC });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.operats = Db.EXP_EVE_OPER_DET.Where(c => c.EEVO_EEVO_ID == 1).Select(c => new { c.EEOD_ID, c.EEOD_DESC });
            ViewBag.operatg = Db.EXP_EVE_OPER_DET.Where(c => c.EEVO_EEVO_ID == 2).Select(c => new { c.EEOD_ID, c.EEOD_DESC });

            if (id != 0)
            {
                EXP_DEF_EVENT_INSTR EXPNEW = (from b in Db.EXP_DEF_EVENT_INSTR where b.EDEI_ID == id select b).FirstOrDefault();
                return View(EXPNEW);
            }
            return View();

        }
        /***************پیوست*******/

        public void LoadFiles()
        {
            if (Session["AttacheedotID"] != null)
            {

                int id = Convert.ToInt32(Session["AttacheedotID"]);
                List<SCN_ATTACHE> attaches = (from k in Db.SCN_ATTACHINTER
                                              join p in Db.SCN_ATTACHE on k.ATCH_ID equals p.ID
                                              //where k.EEDO_EEDO_ID == id
                                              select p).ToList();
                ViewBag.ListAttach = attaches;

            }
        }

        public ActionResult event_doc(int? id)
        {

            Session["AttacheedotID"] = id;
            LoadFiles();
            return View();


        }

        public ActionResult SaveAttach(IEnumerable<HttpPostedFileBase> files)
        {
            try
            {
                if (Session["AttacheedotID"] != null)
                {
                    if (files != null)
                    {
                        foreach (var file in files)
                        {

                            byte[] buffer = new byte[file.ContentLength];
                            file.InputStream.Read(buffer, 0, file.ContentLength - 1);

                            SCN_ATTACHE attach = new SCN_ATTACHE();

                            string[] f = file.ContentType.Split('/');
                            attach.FILE_FRMT = f[f.Length - 1];

                            attach.FILE_SIZE = file.ContentLength;
                            attach.PDF_FILE = buffer;
                            attach.CATG_ID = 1;
                            Db.SCN_ATTACHE.Add(attach);
                            Db.SaveChanges();

                            SCN_ATTACHINTER attacher = new SCN_ATTACHINTER();
                            attacher.TITLE = file.FileName;
                            attacher.ATCH_ID = attach.ID;
                            // attacher.EEDO_EEDO_ID = Convert.ToInt32(Session["AttacheedotID"]);
                            Db.SCN_ATTACHINTER.Add(attacher);
                            Db.SaveChanges();

                        }
                    }
                    LoadFiles();
                }

            }
            catch { }

            return Content("");
        }

        public ActionResult RemoveAttach(string[] fileNames)
        {
            if (fileNames != null)
            {
                foreach (var file in fileNames)
                {

                    string[] name = file.Split('-');
                    int id = Convert.ToInt32(name[0]);
                    SCN_ATTACHINTER attacher = Db.SCN_ATTACHINTER.FirstOrDefault(c => c.ATCH_ID == id);
                    Db.SCN_ATTACHINTER.Remove(attacher);
                    Db.SaveChanges();

                    SCN_ATTACHE attach = Db.SCN_ATTACHE.Find(id);
                    Db.SCN_ATTACHE.Remove(attach);
                    Db.SaveChanges();

                }
            }
            return Content("");
        }

        public ActionResult Download(string Id)
        {

            string[] name = Id.Split('-');
            int newId = Convert.ToInt32(name[0]);
            SCN_ATTACHE attach = Db.SCN_ATTACHE.Find(newId);
            return new FileContentResult(attach.PDF_FILE, System.Net.Mime.MediaTypeNames.Application.Octet);

        }

        public ActionResult ShowImage(string Id)
        {
            Session["ImageId"] = Id;

            if (Session["AttacheedotID"] != null)
            { LoadFiles(); }

            return View("event_doc");
        }

        public ActionResult GetImage()
        {
            try
            {

                string Id = Session["ImageId"].ToString();
                string[] name = Id.Split('-');
                int newId = Convert.ToInt32(name[0]);
                SCN_ATTACHE attach = Db.SCN_ATTACHE.Find(newId);
                return File(attach.PDF_FILE, "image/jpeg");

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }

        /**********************/
        // public ActionResult InsertEvent(int idanal, int? func, int? infi, int? type)
        /*ثبت اطلاعات تجزیه و تحلیل حوادث */
        public ActionResult InsertEvent(EXP_EDOC_INSTRU MyModel)
        {
            int idanal = Convert.ToInt32(Request.Form["tahlilid"].ToString());
            int infi = 0;
            if (!string.IsNullOrEmpty(Request.Form["INFLTYPE"]))
                infi = Convert.ToInt32(Request.Form["INFLTYPE"].ToString());
            int func = 0;
            if (!string.IsNullOrEmpty(Request.Form["OUTFUNC"]))
                func = Convert.ToInt32(Request.Form["OUTFUNC"].ToString());
            int type = 0;
            if (!string.IsNullOrEmpty(Request.Form["EVENTYPE"]))
                type = Convert.ToInt32(Request.Form["EVENTYPE"].ToString());



            int ideedo = Convert.ToInt32(Session["eedodaftarfani_id"].ToString());
            int ieedo = 0;
            var q = (from k in Db.EXP_EXPI_DOC
                     where k.EANA_EANA_ROW == 1 && k.EEDO_ID == ideedo
                     select k).FirstOrDefault();
            try
            {
                if (idanal == 1)
                {

                    q.INFL_TYPE = infi.ToString();
                    q.OUT_FUNC = func.ToString();
                    q.EVEN_TYPE = type.ToString();
                    Db.SaveChanges();
                    ieedo = ideedo;
                }
                else
                {
                    int counti = (from b in Db.EXP_RELATION_DOC
                                  join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                                  where b.EEDO_EEDO_ID == ideedo && k.EANA_EANA_ROW == idanal
                                  select k).Count();

                    if (counti == 0)
                    {
                        var newModel = q;
                        newModel.INFL_TYPE = infi.ToString();
                        newModel.OUT_FUNC = func.ToString();
                        newModel.EVEN_TYPE = type.ToString();
                        newModel.ETDO_ETDO_ID = 363;
                        newModel.EANA_EANA_ROW = idanal;
                        Db.EXP_EXPI_DOC.Add(newModel);
                        Db.SaveChanges();

                        ieedo = Convert.ToInt32(newModel.EEDO_ID);

                        var newrelation = new EXP_RELATION_DOC()
                        {
                            EEDO_EEDO_ID = ideedo,
                            EEDO_EEDO_ID_R = ieedo
                        };


                        Db.EXP_RELATION_DOC.Add(newrelation);
                        Db.SaveChanges();

                    }
                    else
                    {
                        var qre = (from b in Db.EXP_RELATION_DOC
                                   join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                                   where b.EEDO_EEDO_ID == ideedo && k.EANA_EANA_ROW == idanal
                                   select k).FirstOrDefault();
                        qre.INFL_TYPE = infi.ToString();
                        qre.OUT_FUNC = func.ToString();
                        qre.EVEN_TYPE = type.ToString();
                        ieedo = Convert.ToInt32(qre.EEDO_ID);
                        Db.SaveChanges();
                    }

                }

                string srow = Request.Form["count"];
                int row = Convert.ToInt32(srow);
                var value = new EXP_EITEM_DOC_VALUE();
                for (int i = 0; i <= row; i++)
                {
                    string val = Request.Form[i.ToString()];
                    int? EITY_ID = Convert.ToInt32(Request.Form["EITY_ID" + i.ToString()]);
                    if (string.IsNullOrEmpty(val)) { val = Request.Form["dman" + i.ToString()]; }
                    if (!string.IsNullOrEmpty(val))
                    {
                        value.EEDO_EEDO_ID = ieedo;
                        value.EITY_EITY_ID = Convert.ToInt32(EITY_ID);
                        value.EIDR_VALUE = val;
                        var querycheck = from b in Db.EXP_EITEM_DOC_VALUE where b.EEDO_EEDO_ID == ieedo && b.EITY_EITY_ID == EITY_ID select new { b.EIDR_ID };
                        if (!querycheck.Any())
                        {
                            Db.EXP_EITEM_DOC_VALUE.Add(value);
                            Db.SaveChanges();
                        }
                        else
                        {
                            string sql = string.Format("update EXP_EITEM_DOC_VALUE set EIDR_VALUE ='{0}' " +

                                            " where EIDR_ID={1}"
                                            ,
                                            val,
                                            querycheck.Select(xx => xx.EIDR_ID).FirstOrDefault()
                                            );
                            Db.Database.ExecuteSqlCommand(sql);

                        }

                    }


                }





                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", ideedo) }.ToJson();

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }

        public ActionResult Update_EVENT_Doc(EXP_EXPI_DOC objecttemp)
        {



            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB) }.ToJson();



        }
        /*این اکشن ویو مربوط به بررسی حوادث در دفتر فنی را  برمی گرداند */
        public ActionResult cuteditevent_new()
        {

            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            // ViewBag.PostInstrument1 = Context.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.PostInstrument1 = Db.EXP_ERROR_INST.Select(c => new { c.EERR_ID, c.EERR_DESC });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });

            return View();


        }

        public JsonResult checkDate(string azDate1, string taDate1)
        {
            try
            {
                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate1 = dateTime.GetMiladiDateTime(azDate1);
                DateTime miladiDate2 = dateTime.GetMiladiDateTime(taDate1);
                if (miladiDate2 < miladiDate1)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch { return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet); }

        }
        /*این اکشن فرم مربوط به تحلیل حوادث را نمایش می دهد */
        public ActionResult Add_tahlil_event(int? id, string p, int type)
        {

            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            //  ViewBag.PostInstrument1 = Context.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.PostInstrument1 = Db.EXP_ERROR_INST.Select(c => new { c.EERR_ID, c.EERR_DESC });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.operats = Db.EXP_EVE_OPER_DET.Where(c => c.EEVO_EEVO_ID == 1).Select(c => new { c.EEOD_ID, c.EEOD_DESC });
            ViewBag.operatg = Db.EXP_EVE_OPER_DET.Where(c => c.EEVO_EEVO_ID == 2).Select(c => new { c.EEOD_ID, c.EEOD_DESC });
            ViewBag.id = p;
            Session["eedo_id"] = null;
            Session["eedodaftarfani_id"] = null;

            if (id != 0)
            {
                if (type == 1)
                {
                    Session["eedodaftarfani_id"] = id;


                    if (p == "1")
                    {

                        EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();
                        return View(EXPNEW);
                    }
                    else
                    {
                        int analysor = Convert.ToInt32(p.ToString());
                        int counti = (from b in Db.EXP_RELATION_DOC
                                      join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                                      where b.EEDO_EEDO_ID == id && k.EANA_EANA_ROW == analysor
                                      select k).Count();
                        if (counti != 0)
                        {

                            EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_RELATION_DOC
                                                   join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                                                   where b.EEDO_EEDO_ID == id && k.EANA_EANA_ROW == analysor
                                                   select k).FirstOrDefault();
                            Session["eedo_id"] = EXPNEW.EEDO_ID.ToString();

                            return View(EXPNEW);
                        }
                        else
                        {
                            EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();
                            return View(EXPNEW);
                        }
                    }

                }
                else
                {
                    Session["cut_id"] = id;



                    string eedodaftarfani = (from j in Db.EXP_EDOC_INSTRU
                                             join k in Db.EXP_EXPI_DOC on j.EEDO_EEDO_ID equals k.EEDO_ID
                                             where j.EDIN_ID == id && k.EANA_EANA_ROW == 1
                                             select j.EEDO_EEDO_ID).FirstOrDefault().ToString();

                    if (eedodaftarfani != "")
                    {
                        int idaftafani = Convert.ToInt32(eedodaftarfani);
                        Session["eedodaftarfani_id"] = idaftafani;


                        if (p == "1")
                        {

                            EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == idaftafani select b).FirstOrDefault();
                            return View(EXPNEW);
                        }
                        else
                        {
                            int analysor = Convert.ToInt32(p.ToString());
                            int counti = (from b in Db.EXP_RELATION_DOC
                                          join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                                          where b.EEDO_EEDO_ID == idaftafani && k.EANA_EANA_ROW == analysor
                                          select k).Count();
                            if (counti != 0)
                            {

                                EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_RELATION_DOC
                                                       join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                                                       where b.EEDO_EEDO_ID == idaftafani && k.EANA_EANA_ROW == analysor
                                                       select k).FirstOrDefault();
                                Session["eedo_id"] = EXPNEW.EEDO_ID.ToString();

                                return View(EXPNEW);
                            }
                            else
                            {
                                EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == idaftafani select b).FirstOrDefault();
                                return View(EXPNEW);
                            }

                        }

                    }
                    else
                    {
                        return View("ErrorNotFound");
                    }
                }
            }
            else
            {
                return View("ErrorNotFound");
            }


        }

        public ActionResult AddEvent()
        {
            return View("~/EXP_DOC/Exp_Expi_Doc_F");
        }

        public ActionResult AddApproval()
        {
            return View("Evn_AddApproval_F");
        }

        public ActionResult AddAnalyes()
        {
            return View("Evn_AddAnalyes_F");
        }

        public ActionResult SearchEvent()
        {
            return View("Evn_SearchEvent_F");
        }

        public ActionResult Evn_Approval_R()
        {


            ViewBag.exp_doc = Db.COM_INVIT_PART;
            return View("Evn_Approval_R");
        }

        public ActionResult SearchResult([DataSourceRequest] DataSourceRequest request, string ANPT_DESC, string ANPT_FNO,
            string ANPT_PLAS, string ANPT_DATE, string EANPT_DATE, string ATTG_MOEJ, int? ETDO_ETDO_ID, int? EPOL_EPOL_ID,
            string ORGA_CODE

            )
        {
            var query = from b in Db.COM_INVIT_PART
                        join d in Db.EXP_EXPI_DOC on b.ANPT_ID equals d.ANPT_ANPT_ID
                        join c in Db.EXP_EDOC_INSTRU on d.EEDO_ID equals c.EEDO_EEDO_ID
                        join f in Db.EXP_POST_LINE on c.EPOL_EPOL_ID equals f.EPOL_ID
                        join ee in Db.EXP_SUPL_DOC on c.EDIN_ID equals ee.EDIN_EDIN_ID into temp
                        from e in temp.DefaultIfEmpty()
                        where (c.ETDO_ETDO_ID == 144 || c.ETDO_ETDO_ID == 443)//&& c.EDIN_EDIN_ID == null
                        && (b.ANPT_DESC.Contains(ANPT_DESC) || ANPT_DESC == null)
                        && (b.ANPT_FNO.Contains(ANPT_FNO) || ANPT_FNO == null)
                        && (b.ANPT_PLAS.Contains(ANPT_PLAS) || ANPT_PLAS == null)
                        && (c.ATTG_MOEJ.Contains(ATTG_MOEJ) || ATTG_MOEJ == null)
                        && (b.ANPT_DATE == ANPT_DATE || b.ANPT_DATE == EANPT_DATE || ((b.ANPT_DATE.CompareTo(ANPT_DATE) > 0 || ANPT_DATE == null)))
                        && (b.ANPT_DATE.CompareTo(EANPT_DATE) < 0 || EANPT_DATE == null)
                        && (d.ETDO_ETDO_ID == ETDO_ETDO_ID || ETDO_ETDO_ID == null)
                        && (d.EPOL_EPOL_ID == EPOL_EPOL_ID || EPOL_EPOL_ID == null)
                        && (f.ORGA_CODE == ORGA_CODE || ORGA_CODE == null)


                        select new
                        {

                            c.EPOL_EPOL_ID,
                            b.ANPT_ID,
                            b.ANPT_DATE,
                            b.ANPT_DESC,
                            b.ANPT_PLAS,
                            b.ANPT_TYPE,
                            b.ANPT_CLOK,
                            b.ANPT_FNO,
                            ATTG_SPIC = c.ATTG_SPIC,
                            ATTG_MOEJ = c.ATTG_MOEJ,
                            CONT_FUN = c.CONT_FUN,
                            FULL_NAME = e.PAY_PERSONEL.FIRS_NAME + " " + e.PAY_PERSONEL.FAML_NAME,
                            EPOL_NAME = c.EXP_POST_LINE.EPOL_NAME,
                            DOC_NUMB = d.DOC_NUMB,
                            EEDO_ID = d.EEDO_ID,
                            EEDO_DATE = d.FIRS_DATE,
                            EDIN_ID = c.EDIN_ID,
                            ETDO_DESC = d.ETDO_ETDO_ID == 2 ? "دیفکت" : "حادثه",
                            ETDO_ID = d.ETDO_ETDO_ID,
                            ATTG_TYPE = c.TYPE_FUNC == "0" ? "جوابیه" : "مصوبه",
                            TYPE_FUNC = c.TYPE_FUNC,
                            ATTG_TYPE_CODE = c.TYPE_FUNC



                        }
                      ;

            //var query2 = query.Select(a=>new {

            //    a.ANPT_ID,
            //    a.ANPT_DATE,
            //    a.ANPT_DESC,
            //    a.ANPT_PLAS,
            //    a.ANPT_TYPE,
            //    a.ANPT_CLOK,
            //    a.ANPT_FNO,
            //    ATTG_SPIC = a.ATTG_SPIC,
            //    ATTG_MOEJ = a.ATTG_MOEJ,

            //    CONT_FUN = a.CONT_FUN,
            //    FULL_NAME = a.FULL_NAME,
            //    EPOL_NAME = a.EPOL_NAME,
            //    DOC_NUMB = a.DOC_NUMB,
            //    EEDO_DATE = a.EEDO_DATE,
            //   // NOT_ID = Equipment.Controllers.PublicController.return_noteid(a.ANPT_ID, "FLW_RESN.PFLW_RESN", Context)         
            //}
            //    );
            request.Page = 1;
            var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }


        public ActionResult SearchResultDefect([DataSourceRequest] DataSourceRequest request, string ANPT_DESC, string ANPT_FNO,
         string ANPT_PLAS, string ANPT_DATE, string EANPT_DATE, string ATTG_MOEJ, int? ETDO_ETDO_ID, int? EPOL_EPOL_ID,
         string ORGA_CODE

         )
        {
            var query = from b in Db.COM_INVIT_PART
                            //join d in Context.EXP_EXPI_DOC on b.ANPT_ID equals d.ANPT_ANPT_ID

                        where (b.ANPT_DESC.Contains(ANPT_DESC) || ANPT_DESC == null)
                        && (b.ANPT_FNO.Contains(ANPT_FNO) || ANPT_FNO == null)
                        && (b.ANPT_PLAS.Contains(ANPT_PLAS) || ANPT_PLAS == null)

                        && (b.ANPT_DATE == ANPT_DATE || b.ANPT_DATE == EANPT_DATE || ((b.ANPT_DATE.CompareTo(ANPT_DATE) > 0 || ANPT_DATE == null)))
                        && (b.ANPT_DATE.CompareTo(EANPT_DATE) < 0 || EANPT_DATE == null)
                        && b.ACMI_1_ACMI_CODE == 3
                        //&& (b.ETDO_ETDO_ID == ETDO_ETDO_ID || ETDO_ETDO_ID == null)
                        //&& (d.EPOL_EPOL_ID == EPOL_EPOL_ID || EPOL_EPOL_ID == null)
                       && b.EXP_EXPI_DOC.Where(xx => xx.ETDO_ETDO_ID == ETDO_ETDO_ID || ETDO_ETDO_ID == null).Any()


                        select new
                        {


                            b.ANPT_ID,
                            b.ANPT_DATE,
                            b.ANPT_DESC,
                            b.ANPT_PLAS,
                            b.ANPT_TYPE,
                            b.ANPT_CLOK,
                            b.ANPT_FNO,
                            ETDO_ID = b.EXP_EXPI_DOC.Select(xx => xx.ETDO_ETDO_ID).FirstOrDefault()







                        }
                      ;

            request.Page = 1;
            var jsonResult = Json(query.Distinct().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }





        public ActionResult EventAnalyse(decimal id, string notId, string edin_id)
        {
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            //Equipment.Models.PartialClass.MultiModelPrj multicm = new Equipment.Models.PartialClass.MultiModelPrj();
            //EXP_EDOC_INSTRU cm = new EXP_EDOC_INSTRU();

            //cm = Context.Database.SqlQuery<EXP_EDOC_INSTRU>("select * from EXP_EDOC_INSTRU where {0}".FormatWith(id)).FirstOrDefault();

            Session["notid"] = notId;
            ViewBag.key = notId;

            Session["eedo_id"] = id;
            Session["eedin_id"] = edin_id;

            return View();


        }
        public ActionResult Obligation(decimal id)
        {
            ViewData["EEDO_ID"] = id;
            return View();
        }

        public ActionResult Worksheet(decimal id)
        {
            ViewData["EEDO_ID"] = id;
            return View();
        }
        public ActionResult Add_Analyser()
        {
            var objecttemp = new EXP_SUPL_DOC();
            string ORCL_NAME = ""; int ROW_NO = 0; decimal EEDO_EEDO_ID = 0;
            EEDO_EEDO_ID = decimal.Parse(Request.Form["EEDO_EEDO_ID"]);
            for (int j = 1; j < 200; j++)
            {
                if (!string.IsNullOrEmpty(Request.Form[j.ToString()]))
                {
                    ROW_NO = int.Parse(Request.Form[j.ToString()]);
                    objecttemp.EEDO_EEDO_ID = EEDO_EEDO_ID;
                    objecttemp.EDIN_EDIN_ID = Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == EEDO_EEDO_ID).Select(xx => xx.EDIN_ID).FirstOrDefault();
                    objecttemp.PRSN_EMP_NUMB = Db.SEC_USERS.Where(xx => xx.ROW_NO == ROW_NO).Select(xx => xx.PRSN_EMP_NUMB).FirstOrDefault();
                    Db.EXP_SUPL_DOC.Add(objecttemp);
                    var querycheck = from b in Db.EXP_SUPL_DOC
                                     where b.EEDO_EEDO_ID == EEDO_EEDO_ID && b.PRSN_EMP_NUMB == Db.SEC_USERS.Where(xx => xx.ROW_NO == ROW_NO).Select(xx => xx.PRSN_EMP_NUMB).FirstOrDefault() && b.EDIN_EDIN_ID == Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == EEDO_EEDO_ID).Select(xx => xx.EDIN_ID).FirstOrDefault()
                                     select b;
                    if (!querycheck.Any())
                    {
                        Db.SaveChanges();
                    }

                    var message = new Asr.Cartable.AsrWorkFlowMessage(User.Identity.Name, new string[] { Db.SEC_USERS.Where(xx => xx.ROW_NO == ROW_NO).Select(xx => xx.ORCL_NAME).FirstOrDefault() }, "حوادث", "حادثه به کد E" + EEDO_EEDO_ID + "  برای  شما ارسال شد.لطفا از منوی بهره برداری قسمت حوادث اطلاعات تحلیل حوادث را وارد نمایید.");
                    message.Send();
                }

                //  var message = new Asr.Cartable.AsrWorkFlowMessage(User.Identity.Name, new string[] { "userA", "userB", "userC" }, "subject", "body");
                //   message.Send();
            }
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("اطلاعات با موفقیت ثبت شد") }.ToJson();

        }

        //مخرب کلاس
        //~EventController()
        //{
        //    //این دستور کانکشن را دیسکانکت میکند
        //    Db.Dispose();
        //}
    }
}
