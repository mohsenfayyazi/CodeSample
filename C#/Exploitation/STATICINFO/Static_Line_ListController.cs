using Asr.Text;
using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_LineController
    {
        [Authorize]
        //
        // GET: /Static_Post_List/

        [MenuAuthorize]
        public ActionResult Index()
        {
            GetLineGrid();
            using (Asr.Security.AsrMembershipProvider mp = new Asr.Security.AsrMembershipProvider(User.Identity.Name))
            {
                ViewBag.deleteGridButton = mp.CheckPermission("EXP_DELETELINE_FRM_GRIDBTN"); // دکمه حذف خط در فرم اطلاعات خطوط
                ViewBag.editGridButton = mp.CheckPermission("EXP_EDITLINE_FRM_GRIDBTN"); // دکمه ويرايش خط در فرم اطلاعات خطوط
                ViewBag.addGridButton = mp.CheckPermission("EXP_ADDLINE_FRM_GRIDBTN"); // دکمه اضافه کردن خط در فرم اطلاعات خطوط
            }
            return View();
        }


        private void ModifyFilters(IEnumerable<IFilterDescriptor> filters)
        {
            foreach (var filter in filters)
            {
                var descriptor = filter as FilterDescriptor;
                if (descriptor != null)
                {
                    descriptor.MemberType = typeof(string);
                }
                else if (filter is CompositeFilterDescriptor)
                {
                    ModifyFilters(((CompositeFilterDescriptor)filter).FilterDescriptors);
                }
            }
        }


        [EntityAuthorize("EXP_LINE_V > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadLines([DataSourceRequest] DataSourceRequest request, string fd)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.Empty;
            if (fd != null)
            {
                filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper().ToArabicUtf8();
            }
            //var query = (from b in Db.EXP_LINE_V.AsEnumerable()
            //            where (b.EXP_POST_LINE_EPOL_NAME.ToUpper().Contains(filter) || filterDisable)
            //            select new
            //            {
            //                b.EXP_POST_LINE_EPOL_ID,
            //                b.EXP_POST_LINE_INSTRU_EPIU_ID,
            //                b.EXP_POST_LINE_EPOL_NAME,
            //                b.EXP_POST_LINE_CODE_DISP,
            //                b.EXP_POST_LINE_INSTRU_LINE_TYPE,
            //                b.EXP_POST_LINE_EUNL_EUNL_ID,
            //                b.EXP_POST_LINE_ORGA_CODE,
            //                b.EXP_POST_LINE_EOCO_EOCO_ID,
            //                b.EXP_POST_LINE_A1_EPOL_NAME,
            //                b.EXP_POST_LINE_A1_ORGA_CODE,
            //                b.EXP_POST_LINE_A2_EPOL_NAME,
            //                b.EXP_POST_LINE_A2_ORGA_CODE,
            //                b.EXP_POST_LINE_EPOL_STAT,
            //                b.EXP_POST_LINE_LINE_LENT,
            //                b.EXP_POST_LINE_INSTRU_EPIU_TYPE,
            //                //hasAttach = (Db.Database.SqlQuery<decimal>(string.Format("select count(ATCH_ID) from SCN_ATTACHINTER where ENTI_KEY = 'EXP_POST_LINE_EPOL_ID' and ENTI_NAME = 'EXP_POST_LINE' and ENTI_VALU = to_char({0})", b.EXP_POST_LINE_EPOL_ID)).FirstOrDefault()) > 0 ? "دارد" : "ندارد"
            //            }).ToList();
            //return Json(query.ToDataSourceResult(request),JsonRequestBehavior.AllowGet);

            foreach (var filterGrid in request.Filters)
            {
                var descriptor = filterGrid as FilterDescriptor;
                if (descriptor != null)
                {
                    string fieldName = descriptor.Member;
                    switch (fieldName)
                    {
                        case "EXP_POST_LINE_EPOL_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EXP_POST_LINE_INSTRU_EPIU_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EXP_POST_LINE_EUNL_EUNL_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EXP_POST_LINE_EOCO_EOCO_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        default:
                            descriptor.MemberType = typeof(string);
                            break;
                    }
                }
                else if (filterGrid is CompositeFilterDescriptor)
                {
                    ModifyFilters(((CompositeFilterDescriptor)filterGrid).FilterDescriptors);
                }
            }

            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {

                var RetVal = conn.Query(@"select distinct LINE.EXP_POST_LINE_EPOL_ID, LINE.EXP_POST_LINE_INSTRU_EPIU_ID, LINE.EXP_POST_LINE_EPOL_NAME, LINE.EXP_POST_LINE_CODE_DISP,
                                                 LINE.EXP_POST_LINE_INSTRU_LINE_TYPE, LINE.EXP_POST_LINE_EUNL_EUNL_ID, LINE.EXP_POST_LINE_ORGA_CODE, LINE.EXP_POST_LINE_EOCO_EOCO_ID,
                                                 LINE.EXP_POST_LINE_A1_EPOL_NAME, LINE.EXP_POST_LINE_A1_ORGA_CODE, LINE.EXP_POST_LINE_A2_EPOL_NAME, LINE.EXP_POST_LINE_A2_ORGA_CODE,
                                                 LINE.EXP_POST_LINE_EPOL_STAT, LINE.EXP_POST_LINE_LINE_LENT, LINE.EXP_POST_LINE_INSTRU_EPIU_TYPE, decode(nvl(ENTI_VALU,0),0,'ندارد','دارد') hasAttach,
                                                 OWNER.EOCO_DESC, VOLT.EUNL_DESC, LINE.ORGANDESC
                                          from EXP_LINE_V LINE, SCN_ATTACHINTER, EXP_OWENER_COMPANY OWNER, EXP_UNIT_LEVEL VOLT
                                          where ENTI_KEY(+) = 'EXP_POST_LINE_EPOL_ID' and ENTI_NAME(+) = 'EXP_POST_LINE'
                                          and LINE.EXP_POST_LINE_EOCO_EOCO_ID = OWNER.EOCO_ID(+)
                                          and LINE.EXP_POST_LINE_EUNL_EUNL_ID = VOLT.EUNL_ID(+)
                                          and ((upper(EXP_POST_LINE_EPOL_NAME) like '%'|| :param1 ||'%') or :param1 is null)
                                          and LINE.EXP_POST_LINE_EPOL_ID = SCN_ATTACHINTER.ENTI_VALU(+)
                                          order by LINE.EXP_POST_LINE_EUNL_EUNL_ID, LINE.EXP_POST_LINE_EPOL_ID asc", filter, filter)
                             .Select(b => new
                             {
                                 //EXP_POST_LINE_EPOL_ID = Convert.ToDecimal(b.EXP_POST_LINE_EPOL_ID),
                                 b.EXP_POST_LINE_EPOL_ID,
                                 //EXP_POST_LINE_INSTRU_EPIU_ID = Convert.ToDecimal(b.EXP_POST_LINE_INSTRU_EPIU_ID),
                                 b.EXP_POST_LINE_INSTRU_EPIU_ID,
                                 b.EXP_POST_LINE_EPOL_NAME,
                                 b.EXP_POST_LINE_CODE_DISP,
                                 b.EXP_POST_LINE_INSTRU_LINE_TYPE,
                                 //EXP_POST_LINE_EUNL_EUNL_ID = Convert.ToDecimal(b.EXP_POST_LINE_EUNL_EUNL_ID),
                                 b.EXP_POST_LINE_EUNL_EUNL_ID,
                                 b.EXP_POST_LINE_ORGA_CODE,
                                 //EXP_POST_LINE_EOCO_EOCO_ID = Convert.ToDecimal(b.EXP_POST_LINE_EOCO_EOCO_ID),
                                 b.EXP_POST_LINE_EOCO_EOCO_ID,
                                 b.EXP_POST_LINE_A1_EPOL_NAME,
                                 b.EXP_POST_LINE_A1_ORGA_CODE,
                                 b.EXP_POST_LINE_A2_EPOL_NAME,
                                 b.EXP_POST_LINE_A2_ORGA_CODE,
                                 b.EXP_POST_LINE_EPOL_STAT,
                                 b.EXP_POST_LINE_LINE_LENT,
                                 b.EXP_POST_LINE_INSTRU_EPIU_TYPE,
                                 b.hasAttach,
                                 b.EOCO_DESC,
                                 b.EUNL_DESC,
                                 b.ORGANDESC
                             }).ToList();

                //if (!string.IsNullOrEmpty(fd))
                //{
                //    if (request.Page != null) request.Page = 1;
                //}

                return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }

        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult inst_New(int? id, int lineId, int? instruId)
        {
            //Session["instid"] = id;
            ViewBag.id = id;
            ViewBag.lineId = lineId;
            ViewBag.instruIdMain = instruId;

            if (id != 0)
            {
                EXP_POST_LINE_INSTRU inst = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b).FirstOrDefault();
                ViewBag.instrument = inst != null ? inst.EINS_EINS_ID : 0;
                ViewBag.tip = inst != null ? inst.ETEX_ETEX_ID : 0;
                return View(inst);
            }
            return View();
        }

        public ActionResult getT(int? post)
        {
            var query = (from b in Db.EXP_POST_LINE_INSTRU
                         where b.EPOL_EPOL_ID == post && b.EINS_EINS_ID == 2
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME
                         }).OrderBy(x => x.CODE_NAME);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_INSTRUMENT > select|EXP_POST_LINE_INSTRU> select|EXP_TYPE_EQUIP> select")]
        public ActionResult inst_linenet_New(int? id, int lineId)
        {
            //Session["linstnetid"] = id;
            ViewBag.instruId = id;
            ViewBag.lineId = lineId;
            ViewData["Instrument"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });

            if (id != 0)
            {
                var q = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b.EINS_EINS_ID);
                int i = int.Parse(q.FirstOrDefault().ToString());
                if (i == 0)
                {
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] برای این نوع مدار تجهیزی تعریف نشده است") }.ToJson();
                }
                else
                {
                    ViewData["Instrument"] = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID == i).Select(c => new { c.EINS_ID, c.EINS_DESC });
                }
            }

            ViewData["type"] = Db.EXP_TYPE_EQUIP.Where(c => c.ETEX_TYPE == "1").Select(c => new { c.ETEX_ID, c.ETEX_DESC });
            return View();
        }

        public string condilineamar(int p, string i)
        {
            string c = string.Empty;
            var q = (from b in Db.EXP_TCONDLINE join j in Db.EXP_TCONTOW on b.TCOL_ROW equals j.TCOL_TCOL_ROW where b.TCOL_TYPE == i && j.TAMT_TAMT_ID == p select b.TCOL_DESC);
            if (q.FirstOrDefault() != null)
            {
                c = q.FirstOrDefault().ToString();
            }
            return c;
        }

        public string condilineamarkm(int p, string i)
        {
            string c = string.Empty;
            var q = (from b in Db.EXP_TCONDLINE join j in Db.EXP_TCONTOW on b.TCOL_ROW equals j.TCOL_TCOL_ROW where b.TCOL_TYPE == i && j.TAMT_TAMT_ID == p select j.COTO_KM);
            if (q.FirstOrDefault() != null)
            {
                c = q.FirstOrDefault().ToString();
            }
            return c;
        }

        public ActionResult inst_towerconnect_New(int? id, int? instruId)
        {
            //Session["ltowerconnectid"] = id;
            ViewBag.towerId = id;
            ViewBag.instruId = instruId;

            if (id != 0)
            {
                EXP_TWR_LENG lnetid = (from b in Db.EXP_TWR_LENG where b.ELTW_ROW == id select b).FirstOrDefault();
                return View(lnetid);
            }
            return View();
        }

        public ActionResult Readlinetowerconnect([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = (from b in Db.EXP_TWR_LENG//.AsEnumerable()
                         where b.EPIU_EPIU_ID == id
                         select new
                         {
                             b.EPIU_EPIU_ID,
                             b.ETLI_ETLI_NUM,
                             b.ETLI_ETLI_NUM_R,
                             b.ELTW_ROW,
                             b.ELTW_SORT,
                             b.ELTW_LENT
                         }).ToList();
            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult Readlinetoweramr([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = (from b in Db.EXP_TAMARTOWR.AsEnumerable()
                         where b.EPIU_EPIU_ID == id
                         select new
                         {
                             b.EPIU_EPIU_ID,
                             b.TAMT_ID,
                             b.TAMT_TDAK,
                             b.TAMT_TMAD,
                             b.TAMT_EDAK,
                             b.COUT_DAK,
                             cw = condilineamar(b.TAMT_ID, "0"),
                             cwkm = condilineamarkm(b.TAMT_ID, "0"),
                             ca = condilineamar(b.TAMT_ID, "1"),
                             cakm = condilineamarkm(b.TAMT_ID, "1"),
                             cl = condilineamar(b.TAMT_ID, "2"),
                             clkm = condilineamarkm(b.TAMT_ID, "2")
                         }).ToList();
            return Json(query.ToDataSourceResult(request));
        }

        public string condiline(int p, string i)
        {
            string c = string.Empty;
            var q = (from b in Db.EXP_TCONDLINE join j in Db.EXP_TCONTOW on b.TCOL_ROW equals j.TCOL_TCOL_ROW where b.TCOL_TYPE == i && j.ETLI_ETLI_NUM == p select b.TCOL_DESC);
            if (q.FirstOrDefault() != null)
            {
                c = q.FirstOrDefault().ToString();
            }

            return c;
        }

        public ActionResult Readlinetower([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = (from b in Db.EXP_TAWERLINE.AsEnumerable()
                         where b.EPIU_EPIU_ID == id
                         select new
                         {
                             b.EPIU_EPIU_ID,
                             b.ETLI_FISE,
                             b.ETLI_MADA,
                             b.ETLI_NAME,
                             b.ETLI_NUM,
                             b.ETLI_RILE,
                             b.ETLI_NROW,
                             b.ETLI_TNAME,
                             b.ETLI_UDOW,
                             cw = condiline(b.ETLI_NUM, "0"),
                             ca = condiline(b.ETLI_NUM, "1"),
                             cl = condiline(b.ETLI_NUM, "2")
                         }).ToList();
            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult inst_towerharim_New(int? id, int? instruId)
        {
            ViewBag.towerId = id;
            ViewBag.instruId = instruId;
            ViewData["ETGR"] = Db.EXP_TYPE_GRAD.Select(c => new { c.ETGR_ID, c.ETGR_DESC });
            return View();
        }

        public ActionResult inst_linetower_New(int? id, int lineId)
        {
            ViewBag.instruId = id;
            ViewBag.lineId = lineId;
            return View();
        }

        public ActionResult inst_linetowerconnect_New(int? id, int lineId)
        {
            ViewData["tower1"] = Db.EXP_TAWERLINE.Select(c => new { c.ETLI_NUM, to1 = c.ETLI_NAME + c.ETLI_MADA });
            ViewData["tower2"] = Db.EXP_TAWERLINE.Select(c => new { c.ETLI_NUM, to2 = c.ETLI_NAME + c.ETLI_MADA });
            ViewBag.instruId = id;
            ViewBag.lineId = lineId;
            return View();
        }

        public ActionResult TowerInsert(Equipment.Models.EXP_TAWERLINE NewItem, int? towerId, int? instruId)
        {
            int icondalo = 0;
            if (Request.Form["condalo"] != null && Request.Form["condalo"] != "")
            {
                icondalo = Convert.ToInt32(Request.Form["condalo"].ToString());
            }

            int icondair = 0;
            if (Request.Form["condair"] != null && Request.Form["condair"] != "")
            {
                icondair = Convert.ToInt32(Request.Form["condair"].ToString());
            }

            int icondwor = 0;
            if (Request.Form["condwor"] != null && Request.Form["condwor"] != "")
            {
                icondwor = Convert.ToInt32(Request.Form["condwor"].ToString());
            }

            int p = Convert.ToInt32(instruId);
            int u = Convert.ToInt32(towerId);

            try
            {
                if (u == 0)
                {
                    NewItem.EPIU_EPIU_ID = p;
                    Db.EXP_TAWERLINE.Add(NewItem);
                    Db.SaveChanges();

                    Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                    {
                        ETLI_ETLI_NUM = NewItem.ETLI_NUM,
                        TCOL_TCOL_ROW = icondalo
                    });

                    Db.SaveChanges();
                    Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                    {
                        ETLI_ETLI_NUM = NewItem.ETLI_NUM,
                        TCOL_TCOL_ROW = icondair
                    });

                    Db.SaveChanges();
                    Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                    {
                        ETLI_ETLI_NUM = NewItem.ETLI_NUM,
                        TCOL_TCOL_ROW = icondwor
                    });

                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", p) }.ToJson();
                }
                else
                {
                    var row = (from b in Db.EXP_TAWERLINE where b.ETLI_NUM == u select b).FirstOrDefault();
                    row.ETLI_FISE = NewItem.ETLI_FISE;
                    row.ETLI_UDOW = NewItem.ETLI_UDOW;
                    row.ETLI_TNAME = NewItem.ETLI_TNAME;
                    row.ETLI_NROW = NewItem.ETLI_NROW;
                    row.ETLI_NAME = NewItem.ETLI_NAME;
                    row.ETLI_MADA = NewItem.ETLI_MADA;
                    row.ETLI_RILE = NewItem.ETLI_RILE;
                    Db.SaveChanges();

                    var row1 = (from b in Db.EXP_TCONTOW join j in Db.EXP_TCONDLINE on b.TCOL_TCOL_ROW equals j.TCOL_ROW where j.TCOL_TYPE == "0" && b.ETLI_ETLI_NUM == u select b).FirstOrDefault();
                    if (row1 != null)
                    {
                        row1.TCOL_TCOL_ROW = icondwor;
                        Db.SaveChanges();
                    }
                    else
                    {
                        Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                        {
                            ETLI_ETLI_NUM = u,
                            TCOL_TCOL_ROW = icondwor
                        });
                        Db.SaveChanges();
                    }

                    var row2 = (from b in Db.EXP_TCONTOW join j in Db.EXP_TCONDLINE on b.TCOL_TCOL_ROW equals j.TCOL_ROW where j.TCOL_TYPE == "1" && b.ETLI_ETLI_NUM == u select b).FirstOrDefault();
                    if (row2 != null)
                    {
                        row2.TCOL_TCOL_ROW = icondair;
                        Db.SaveChanges();
                    }
                    else
                    {
                        Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                        {
                            ETLI_ETLI_NUM = u,
                            TCOL_TCOL_ROW = icondair
                        });
                        Db.SaveChanges();
                    }

                    var row3 = (from b in Db.EXP_TCONTOW join j in Db.EXP_TCONDLINE on b.TCOL_TCOL_ROW equals j.TCOL_ROW where j.TCOL_TYPE == "2" && b.ETLI_ETLI_NUM == u select b).FirstOrDefault();
                    if (row3 != null)
                    {
                        row3.TCOL_TCOL_ROW = icondalo;
                        Db.SaveChanges();
                    }
                    else
                    {
                        Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                        {
                            ETLI_ETLI_NUM = u,
                            TCOL_TCOL_ROW = icondalo
                        });
                        Db.SaveChanges();
                    }
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        public ActionResult Readlineharim([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = (from b in Db.EXP_TWR_GARDS//.AsEnumerable()
                         where b.ELTW_ELTW_ROW == id
                         select new
                         {
                             b.ETGR_ETGR_ID,
                             b.TGAR_ID
                         }).ToList();
            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult Insertharim(Equipment.Models.EXP_TWR_GARDS NewItem, int towerId, int gardId)
        {
            int p = Convert.ToInt32(towerId);
            int u = Convert.ToInt32(gardId);

            try
            {
                if (u == 0)
                {
                    NewItem.ELTW_ELTW_ROW = p;
                    Db.EXP_TWR_GARDS.Add(NewItem);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", p) }.ToJson();
                }
                else
                {
                    var row = (from b in Db.EXP_TWR_GARDS where b.TGAR_ID == u select b).FirstOrDefault();
                    row.ETGR_ETGR_ID = NewItem.ETGR_ETGR_ID;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        public ActionResult TowerconnectInsert(Equipment.Models.EXP_TWR_LENG NewItem, int? towerId, int instruId)
        {
            int p = Convert.ToInt32(instruId);
            int u = Convert.ToInt32(towerId);

            try
            {
                if (u == 0)
                {
                    NewItem.EPIU_EPIU_ID = p;
                    Db.EXP_TWR_LENG.Add(NewItem);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", p) }.ToJson();
                }
                else
                {
                    var row = (from b in Db.EXP_TWR_LENG where b.ELTW_ROW == u select b).FirstOrDefault();
                    row.ELTW_LENT = NewItem.ELTW_LENT;
                    row.ELTW_SORT = NewItem.ELTW_SORT;
                    row.ETLI_ETLI_NUM = NewItem.ETLI_ETLI_NUM;
                    row.ETLI_ETLI_NUM_R = NewItem.ETLI_ETLI_NUM_R;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        public ActionResult ToweramarInsert(Equipment.Models.EXP_TAMARTOWR NewItem, int? instruId, int? towerId)
        {
            int icondalo = 0;
            if (Request.Form["condalo"] != null && Request.Form["condalo"] != "")
            {
                icondalo = Convert.ToInt32(Request.Form["condalo"].ToString());
            }

            int icondair = 0;
            if (Request.Form["condair"] != null && Request.Form["condair"] != "")
            {
                icondair = Convert.ToInt32(Request.Form["condair"].ToString());
            }

            int icondwor = 0;
            if (Request.Form["condwor"] != null && Request.Form["condwor"] != "")
            {
                icondwor = Convert.ToInt32(Request.Form["condwor"].ToString());
            }

            string icondalokm = string.Empty;
            if (Request.Form["condalokm"] != null && Request.Form["condalokm"] != "")
            {
                icondalokm = (Request.Form["condalokm"].ToString());
            }

            string icondairkm = string.Empty;
            if (Request.Form["condairkm"] != null && Request.Form["condairkm"] != "")
            {
                icondairkm = (Request.Form["condairkm"].ToString());
            }

            string icondworkm = string.Empty;
            if (Request.Form["condworkm"] != null && Request.Form["condworkm"] != "")
            {
                icondworkm = (Request.Form["condworkm"].ToString());
            }

            int p = Convert.ToInt32(instruId);
            int u = Convert.ToInt32(towerId);

            try
            {
                if (u == 0)
                {
                    NewItem.EPIU_EPIU_ID = p;
                    Db.EXP_TAMARTOWR.Add(NewItem);
                    Db.SaveChanges();

                    Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                    {
                        TAMT_TAMT_ID = NewItem.TAMT_ID,
                        TCOL_TCOL_ROW = icondalo,
                        COTO_KM = icondalokm
                    });

                    Db.SaveChanges();
                    Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                    {
                        TAMT_TAMT_ID = NewItem.TAMT_ID,
                        TCOL_TCOL_ROW = icondair,
                        COTO_KM = icondairkm
                    });

                    Db.SaveChanges();
                    Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                    {
                        TAMT_TAMT_ID = NewItem.TAMT_ID,
                        TCOL_TCOL_ROW = icondwor,
                        COTO_KM = icondworkm
                    });

                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", p) }.ToJson();
                }
                else
                {
                    var row = (from b in Db.EXP_TAMARTOWR where b.TAMT_ID == u select b).FirstOrDefault();
                    row.COUT_DAK = NewItem.COUT_DAK;
                    row.TAMT_EDAK = NewItem.TAMT_EDAK;
                    row.TAMT_TDAK = NewItem.TAMT_TDAK;
                    row.TAMT_TMAD = NewItem.TAMT_TMAD;
                    Db.SaveChanges();

                    var row1 = (from b in Db.EXP_TCONTOW join j in Db.EXP_TCONDLINE on b.TCOL_TCOL_ROW equals j.TCOL_ROW where j.TCOL_TYPE == "2" && b.TAMT_TAMT_ID == u select b).FirstOrDefault();
                    if (row1 == null)
                    {
                        Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                        {
                            TAMT_TAMT_ID = u,
                            TCOL_TCOL_ROW = icondalo,
                            COTO_KM = icondalokm
                        });
                        Db.SaveChanges();
                    }
                    else
                    {
                        row1.TCOL_TCOL_ROW = icondalo;
                        row1.COTO_KM = icondalokm;
                        Db.SaveChanges();
                    }

                    var row2 = (from b in Db.EXP_TCONTOW join j in Db.EXP_TCONDLINE on b.TCOL_TCOL_ROW equals j.TCOL_ROW where j.TCOL_TYPE == "1" && b.TAMT_TAMT_ID == u select b).FirstOrDefault();
                    if (row2 == null)
                    {
                        Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                        {
                            TAMT_TAMT_ID = u,
                            TCOL_TCOL_ROW = icondair,
                            COTO_KM = icondairkm
                        });
                        Db.SaveChanges();
                    }
                    else
                    {
                        row2.TCOL_TCOL_ROW = icondair;
                        row2.COTO_KM = icondairkm;
                        Db.SaveChanges();
                    }

                    var row3 = (from b in Db.EXP_TCONTOW join j in Db.EXP_TCONDLINE on b.TCOL_TCOL_ROW equals j.TCOL_ROW where j.TCOL_TYPE == "0" && b.TAMT_TAMT_ID == u select b).FirstOrDefault();
                    if (row3 == null)
                    {
                        Db.EXP_TCONTOW.Add(new EXP_TCONTOW()
                        {
                            TAMT_TAMT_ID = u,
                            TCOL_TCOL_ROW = icondwor,
                            COTO_KM = icondworkm
                        });
                        Db.SaveChanges();
                    }
                    else
                    {
                        row3.TCOL_TCOL_ROW = icondwor;
                        row3.COTO_KM = icondworkm;
                        Db.SaveChanges();
                    }

                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        public ActionResult condiworread()
        {
            var query = (from b in Db.EXP_TCONDLINE where b.TCOL_TYPE == "0" select new { b.TCOL_ROW, b.TCOL_DESC }).OrderBy(x => x.TCOL_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult condiairread()
        {
            var query = (from b in Db.EXP_TCONDLINE where b.TCOL_TYPE == "1" select new { b.TCOL_ROW, b.TCOL_DESC }).OrderBy(x => x.TCOL_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult harimread()
        {
            var query = (from b in Db.EXP_TYPE_GRAD select new { b.ETGR_ID, b.ETGR_DESC }).OrderBy(x => x.ETGR_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult towerread(int id)
        {
            var query = (from b in Db.EXP_TAWERLINE where b.EPIU_EPIU_ID == id select new { b.ETLI_NUM, to = b.ETLI_MADA + b.ETLI_NAME }).OrderBy(x => x.to);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult condialoread()
        {
            var query = (from b in Db.EXP_TCONDLINE where b.TCOL_TYPE == "2" select new { b.TCOL_ROW, b.TCOL_DESC }).OrderBy(x => x.TCOL_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult inst_harim_New(int? id, int? towerId, int? instruId)
        {
            ViewBag.gardId = id;
            ViewBag.towerId = towerId;
            ViewBag.instruId = instruId;
            if (id != 0)
            {
                EXP_TWR_GARDS lnetid = (from b in Db.EXP_TWR_GARDS where b.TGAR_ID == id select b).FirstOrDefault();
                return View(lnetid);
            }
            return View();
        }

        public ActionResult inst_toweramar_New(int? id, int? lineId, int? instruId)
        {
            ViewBag.towerId = id;
            ViewBag.instruId = instruId;
            ViewBag.lineId = lineId;

            if (id != 0)
            {
                EXP_TAMARTOWR lnetid = (from b in Db.EXP_TAMARTOWR where b.TAMT_ID == id select b).FirstOrDefault();
                return View(lnetid);
            }
            return View();
        }

        public ActionResult inst_tower_New(int? id, int? lineId, int? instruId)
        {
            ViewBag.towerId = id;
            ViewBag.lineId = lineId;
            ViewBag.instruId = instruId;

            if (id != 0)
            {
                EXP_TAWERLINE lnetid = (from b in Db.EXP_TAWERLINE where b.ETLI_NUM == id select b).FirstOrDefault();
                return View(lnetid);
            }
            return View();
        }

        public ActionResult inst_linetoweramar_New(int? id, int lineId)
        {
            ViewBag.instruId = id;
            ViewBag.lineId = lineId;

            if (id != 0)
            {
                EXP_TAMARTOWR lnetid = (from b in Db.EXP_TAMARTOWR where b.TAMT_ID == id select b).FirstOrDefault();
                return View(lnetid);
            }
            return View();
        }

        //[EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT> select")] 
        public ActionResult GetGroupInstru(int? id)
        {
            var query = (from b in Db.EXP_INSTRUMENT select new { b.EINS_ID, b.EINS_DESC }).OrderBy(x => x.EINS_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        //[EntityAuthorize("EXP_TYPE_EQUIP > select|EXP_ATTRIBUTE> select|EXP_TYPE_EQUIP> select")] 
        public ActionResult GetTip(short EINS_EINS_ID)
        {
            var query = (from b in Db.EXP_TYPE_EQUIP join k in Db.EXP_ATTRIBUTE on b.ETEX_ID equals k.ETEX_ETEX_ID where k.EINS_EINS_ID == EINS_EINS_ID select new { b.ETEX_ID, b.ETEX_DESC }).OrderBy(x => x.ETEX_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_RESPO_HIST > select")]
        public ActionResult Getresponl()
        {
            var query = (from b in Db.EXP_RESPO_HIST where b.ERHI_TYPE == 1 select new { b.ERHI_ID, b.ERHI_DESC }).OrderBy(x => x.ERHI_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_POST_LINE > select")]
        public ActionResult Readhistline([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = (from b in Db.EXP_POST_LINE//.AsEnumerable()
                         where b.EPOL_TYPE == "1" && b.EPOL_EPOL_ID == id
                         select new
                         {
                             b.EPOL_EPOL_ID,
                             b.ELRD_ELRD_ID,
                             b.EARD_EARD_ID,
                             b.INCO_TYPE,
                             b.HIST_DATE,
                             b.ERHI_ERHI_ID,
                             b.EPOL_STAT,
                             b.EPOL_NAME,
                             b.CODE_DISP,
                             b.ORGA_CODE,
                             b.GEOL_G_CODE,
                             b.EUNL_EUNL_ID,
                             b.EPOL_ID,
                             b.POST_TYPE
                         }).ToList();
            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_POST_LINE >  select,insert,update|EXP_POST_LINE_INSTRU> select,insert,update")]
        public ActionResult insertlinehist(Equipment.Models.EXP_POST_LINE n, int? lineId)
        {
            int iddd = 0;
            int er = 0;
            if (Request.Form["ERHI1"].ToString() != "")
            {
                er = int.Parse(Request.Form["ERHI1"].ToString());
            }
            else
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "دلیل تغییر را لطفا انتخاب نمایید" }.ToJson();
            }

            try
            {
                int i = Convert.ToInt32(lineId);
                var row = (from b in Db.EXP_POST_LINE where b.EPOL_ID == i select b).FirstOrDefault();
                Db.EXP_POST_LINE.Add(row);
                Db.SaveChanges();
                iddd = row.EPOL_ID;
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

            try
            {
                int i1 = Convert.ToInt32(lineId);
                string ett = Request.Form["calendar1"].ToString();
                int e1r = int.Parse(Request.Form["ERHI1"].ToString());
                var row2 = (from b in Db.EXP_POST_LINE where b.EPOL_ID == iddd select b).FirstOrDefault();
                row2.EPOL_EPOL_ID = i1;
                row2.ERHI_ERHI_ID = e1r;
                row2.HIST_DATE = ett;
                Db.SaveChanges();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

            try
            {
                int i2 = Convert.ToInt32(lineId);
                var row1 = (from b in Db.EXP_POST_LINE where b.EPOL_ID == i2 select b).FirstOrDefault();

                if (n.CODE_DISP != null)
                    row1.CODE_DISP = n.CODE_DISP;
                if (n.EPOL_NAME != null)
                    row1.EPOL_NAME = n.EPOL_NAME;
                if (n.EARD_EARD_ID != null)
                    row1.EARD_EARD_ID = n.EARD_EARD_ID;
                if (n.ELRD_ELRD_ID != null)
                    row1.ELRD_ELRD_ID = n.ELRD_ELRD_ID;
                if (n.EUNL_EUNL_ID != null)
                    row1.EUNL_EUNL_ID = n.EUNL_EUNL_ID;
                if (n.ORGA_CODE != null)
                    row1.ORGA_CODE = n.ORGA_CODE;

                Db.SaveChanges();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

            try
            {
                int i = Convert.ToInt32(lineId);
                var row = (from b in Db.EXP_POST_LINE_INSTRU
                           where b.EPOL_EPOL_ID == i && b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null
                           select b).FirstOrDefault();

                var NewItem = row;

                if (n.EARD_EARD_ID != null)
                {
                    int eard = Convert.ToInt32(n.EARD_EARD_ID.ToString());
                    NewItem.EARD_EARD_ID = eard;
                }

                if (n.ELRD_ELRD_ID != null)
                {
                    int elrd = Convert.ToInt32(n.ELRD_ELRD_ID.ToString());
                    NewItem.ELRD_ELRD_ID = elrd;
                }

                if (n.EUNL_EUNL_ID != null)
                {
                    int unit = Convert.ToInt32(n.EUNL_EUNL_ID.ToString());
                    NewItem.EUNL_EUNL_ID = unit;
                }

                if (n.CODE_DISP != null)
                {
                    string code = n.CODE_DISP;
                    NewItem.CODE_DISP = code;
                }

                Db.EXP_POST_LINE_INSTRU.Add(NewItem);
                Db.SaveChanges();

                int ide = Convert.ToInt32(NewItem.EPIU_ID.ToString());
                var row1 = (from b in Db.EXP_POST_LINE_INSTRU
                            where b.EPOL_EPOL_ID == i && b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null
                            select b).FirstOrDefault();

                string ett = Request.Form["calendar1"].ToString();
                int e1r = int.Parse(Request.Form["ERHI1"].ToString());
                row1.HIST_DATE = ett;
                row1.ERHI_ERHI_ID = er;
                row1.EPIU_EPIU_ID_SAVABEGH = ide;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", row1.CODE_DISP) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select,insert,update")]
        public ActionResult addlinenetinst(Equipment.Models.EXP_POST_LINE_INSTRU NewItem, int? id, int? lineId, int instruIdMain)
        {
            int u = Convert.ToInt32(instruIdMain);
            int u1 = Convert.ToInt32(lineId);
            int u2 = Convert.ToInt32(id);

            int i = 0;
            if (Request.Form["Etypeline"].ToString() == "")
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] تجهیز را مشخص نمایید ") }.ToJson();
            else
                i = int.Parse(Request.Form["Etypeline"].ToString());

            try
            {
                if (u2 == 0)
                {
                    NewItem.EPOL_EPOL_ID = u1;
                    NewItem.EPIU_EPIU_ID = u;
                    NewItem.EINS_EINS_ID = i;
                    Db.EXP_POST_LINE_INSTRU.Add(NewItem);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.EINS_EINS_ID) }.ToJson();
                }
                else
                {
                    var row = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == u2 select b).FirstOrDefault();
                    row.EINS_EINS_ID = i;
                    row.EPIU_6MAD = NewItem.EPIU_6MAD;
                    row.EPIU_4MAD = NewItem.EPIU_4MAD;
                    row.ETEX_ETEX_ID = NewItem.ETEX_ETEX_ID;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult Readinstline([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = from b in Db.EXP_POST_LINE_INSTRU
                        where b.EPIU_EPIU_ID == id
                        select new
                        {
                            b.EPIU_ID,
                            b.EINS_EINS_ID,
                            b.ETEX_ETEX_ID,
                            b.EPIU_6MAD,
                            b.EPIU_4MAD
                        };
            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select,update")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult instlineUpdate([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_POST_LINE_INSTRU> EXP_POST_LINE_INSTRU)
        {
            if (EXP_POST_LINE_INSTRU != null && ModelState.IsValid)
            {
                foreach (EXP_POST_LINE_INSTRU row in EXP_POST_LINE_INSTRU)
                {
                    var myobj = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == row.EPIU_ID select b).FirstOrDefault();
                    myobj.EINS_EINS_ID = row.EINS_EINS_ID;
                    myobj.ETEX_ETEX_ID = row.ETEX_ETEX_ID;
                    myobj.EPIU_6MAD = row.EPIU_6MAD;
                    Db.SaveChanges();
                }
            }
            return Json(EXP_POST_LINE_INSTRU.ToDataSourceResult(request, ModelState));
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult lnet_New(int? id, int lineId)
        {
            ViewBag.instruId = id;
            ViewBag.lineId = lineId;

            if (id != 0)
            {
                EXP_POST_LINE_INSTRU lnetid = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b).FirstOrDefault();
                return View(lnetid);
            }
            return View();
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult linenetread()
        {
            var query = (from b in Db.EXP_INSTRUMENT where b.ESIN_ESIN_ID == 1 select new { b.EINS_ID, b.EINS_DESC }).OrderBy(x => x.EINS_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult Static_Line_net(int? id)
        {
            ViewBag.lineId = id;
            ViewData["Instrument"] = Db.EXP_INSTRUMENT.Where(c => c.ESIN_ESIN_ID == 1).Select(c => new { c.EINS_ID, c.EINS_DESC });
            return View();
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        public ActionResult Readlinenet([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = from b in Db.EXP_POST_LINE_INSTRU
                        join i in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals i.EINS_ID
                        where b.EPOL_EPOL_ID == id && b.EPOL_EPOL_ID_INSLIN == null && i.ESIN_ESIN_ID == 1 &&
                              b.EPOL_EPOL_ID_LINE == null
                        select new
                        {
                            b.EPIU_ID,
                            b.EINS_EINS_ID,
                            b.EPIU_1MAD,
                            b.EPIU_2MAD,
                            b.EPIU_4MAD
                        };
            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select,update")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult lnetUpdate([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_POST_LINE_INSTRU> EXP_POST_LINE_INSTRU)
        {
            if (EXP_POST_LINE_INSTRU != null && ModelState.IsValid)
            {
                foreach (EXP_POST_LINE_INSTRU row in EXP_POST_LINE_INSTRU)
                {
                    var myobj = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == row.EPIU_ID select b).FirstOrDefault();
                    myobj.EINS_EINS_ID = row.EINS_EINS_ID;
                    myobj.EPIU_1MAD = row.EPIU_1MAD;
                    myobj.EPIU_2MAD = row.EPIU_2MAD;
                    myobj.EPIU_4MAD = row.EPIU_4MAD;
                    Db.SaveChanges();
                }
            }
            return Json(EXP_POST_LINE_INSTRU.ToDataSourceResult(request, ModelState));
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU >  select,insert,update")]
        public ActionResult addlinenet(Equipment.Models.EXP_POST_LINE_INSTRU NewItem, int? lineId, int? instruId)
        {
            int p = Convert.ToInt32(lineId);
            int u = Convert.ToInt32(instruId);
            int i = int.Parse(Request.Form["EINS_EINS_ID1"].ToString());

            try
            {
                if (u == 0 || u == null)
                {
                    Db.EXP_POST_LINE_INSTRU.Add(new EXP_POST_LINE_INSTRU()
                    {
                        EPOL_EPOL_ID = p,
                        EINS_EINS_ID = i,
                        EPIU_1MAD = NewItem.EPIU_1MAD,
                        EPIU_2MAD = NewItem.EPIU_2MAD,
                        EPIU_4MAD = NewItem.EPIU_4MAD
                    });

                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", i) }.ToJson();
                }
                else
                {
                    var row = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == u select b).FirstOrDefault();
                    row.EINS_EINS_ID = i;
                    row.EPIU_1MAD = NewItem.EPIU_1MAD;
                    row.EPIU_2MAD = NewItem.EPIU_2MAD;
                    row.EPIU_4MAD = NewItem.EPIU_4MAD;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("PAY_ORGAN > select|EXP_OWENER_TYPE> select|EXP_POST_LINE> select|EXP_OWENER_COMPANY> select|EXP_UNIT_LEVEL> select")]
        public void GetLineGrid()
        {
            ViewData["ORGA"] = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
            ViewData["post_TYPE"] = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewData["OWNER"] = Db.EXP_OWENER_COMPANY.Select(c => new { c.EOCO_ID, c.EOCO_DESC });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
        }


        protected int CreateLineAttr(int? id)
        {
            int retVal = 0;
            using (var conn = new OracleConnection(GlobalConst.ConnectionString))
            {
                using (var command = conn.CreateCommand())
                {
                    try
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.CommandText = "EXP_CREATE_LINE_ATTRIBUTE_P";
                        command.Parameters.Add(new OracleParameter()
                        {
                            DbType = DbType.Int32,
                            Direction = ParameterDirection.Input,
                            Value = id,
                            ParameterName = "EPOLID"
                        });
                        conn.Open();
                        retVal = command.ExecuteNonQuery();
                    }
                    catch (Exception)
                    {                        
                    }
                    finally
                    {
                        command.Dispose();
                        conn.Close();
                        conn.Dispose();
                    }
                }
            }

            return retVal;
        }

        public ActionResult Static_Line_Attribute(int? id)
        {
            ViewBag.lineId = id;
            ViewBag.LineNet = Db.EXP_POST_LINE_INSTRU.Where(x => x.EPOL_EPOL_ID == id.Value).FirstOrDefault().NETL_STAT.ToString();
            var result = CreateLineAttr(id);
            return View();
        }

        public ActionResult ReadLineAttribute([DataSourceRequest] DataSourceRequest request, int? id, short? stat)
        {            
            var query = (from b in Db.EXP_ATTRIBUTE
                         join c in Db.EXP_VALUE on b.XATT_ID equals c.XATT_XATT_ID
                         where c.EPOL_EPOL_ID == id
                         orderby b.XATT_ID ascending
                         select new
                         {
                             c.VALU_ID,
                             c.VALU_VALU,
                             c.EPIU_EPIU_ID,
                             c.XATT_XATT_ID,
                             c.EINS_EINS_ID,    
                             c.EPOL_EPOL_ID,
                             einsId = b.EINS_EINS_ID,
                             xattId = b.XATT_ID,
                             xattTitle = b.XATT_TITLE,
                             lineStat = b.LINE_STAT
                         }).ToList();

            if (query.Count > 0)
                if (stat == (short)LineNetworkStat.SeaLine)
                    query = query.Where(x => x.lineStat.Substring(0, 1) == "1").ToList();
                else if (stat == (short)LineNetworkStat.AirLine)
                    query = query.Where(x => x.lineStat.Substring(1, 1) == "1").ToList();
                else if (stat == (short)LineNetworkStat.GroundLine)
                    query = query.Where(x => x.lineStat.Substring(2, 1) == "1").ToList();
                else
                    return Json("".ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]        
        public ActionResult UpdateLineAttribute([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_VALUE> models)
        {
            var results = new List<EXP_VALUE>();
            if (models != null && ModelState.IsValid)
            {
                if (models.Any())
                {                    
                    List<object> modifiedKeys = new List<object>();
                    foreach (EXP_VALUE modelItem in models)
                    {
                        Db.Entry(modelItem).State = EntityState.Modified;
                        modifiedKeys.Add(modelItem.VALU_ID);
                    }

                    Db.SaveChanges();
                }
            }
            return Json(results.ToDataSourceResult(request, ModelState));
        }

    }

}
