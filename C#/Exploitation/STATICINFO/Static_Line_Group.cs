using Asr.Text;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Equipment.ViewModels.Exploitation.LineGroup;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.Mvc;


namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_LineController
    {

        #region Views

        /// <summary>
        /// Index View
        /// </summary>
        /// <returns></returns>
        public ActionResult Line_Group()
        {
            return View();
        }

        /// <summary>
        /// Attribute Partial View
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public PartialViewResult Line_Group_Attribute(decimal? id)
        {
            if (id.HasValue)
            {
                var model = new LineGroupAttributeViewModel();

                var Group = Db.EXP_LINE_GROUP.Find(id.Value);
                var Lines = (from b in Db.EXP_POST_LINE
                             join c in Db.EXP_POST_LINE_INSTRU on b.EPOL_ID equals c.EPOL_EPOL_ID
                             where b.ELGR_ELGR_ID == id.Value
                             select new LineGroupAttributeViewModel.LineDetail()
                             {
                                 LineId = b.EPOL_ID,
                                 LineName = b.EPOL_NAME,
                                 LineNetStat = c.NETL_STAT
                             }).ToList();

                var Atributes = Db.EXP_ATTRIBUTE.Where(x => x.EINS_EINS_ID == 1)
                                                  .Select(x => new LineGroupAttributeViewModel.AttributeDetail()
                                                  {
                                                      AttributeId = x.XATT_ID,
                                                      AttributeName = x.XATT_TITLE,
                                                      AttributeLineStat = x.LINE_STAT
                                                  }).ToList();

                var AllLineNetStat = Lines.Select(x => x.LineNetStat).Distinct();

                if (AllLineNetStat.Any())
                {
                    if (AllLineNetStat.FirstOrDefault() == (short)LineNetworkStat.SeaLine)
                        Atributes = Atributes.Where(x => x.AttributeLineStat.Substring(0, 1) == "1").ToList();
                    else if (AllLineNetStat.FirstOrDefault() == (short)LineNetworkStat.AirLine)
                        Atributes = Atributes.Where(x => x.AttributeLineStat.Substring(1, 1) == "1").ToList();
                    else if (AllLineNetStat.FirstOrDefault() == (short)LineNetworkStat.GroundLine)
                        Atributes = Atributes.Where(x => x.AttributeLineStat.Substring(2, 1) == "1").ToList();
                }

                model.GroupId = Group.ELGR_ID;
                model.GroupName = Group.ELGR_DESC;
                model.AttributeDetails = Atributes;

                for (int i = 0; i < model.AttributeDetails.Count; i++)
                {
                    List<LineGroupAttributeViewModel.LineDetail> customLine = new List<LineGroupAttributeViewModel.LineDetail>();
                    foreach (var line in Lines)
                    {
                        customLine.Add(new LineGroupAttributeViewModel.LineDetail()
                        {
                            LineId = line.LineId,
                            LineName = line.LineName,
                            LineNetStat = line.LineNetStat,
                            GroupNumber = line.GroupNumber
                        });
                    }

                    for (int j = 0; j < Lines.Count; j++)
                    {
                        var templineid = customLine[j].LineId;
                        var tempattributeid = model.AttributeDetails[i].AttributeId;
                        customLine[j].GroupNumber = (Db.EXP_LINE_GROUP_ATTRIB.FirstOrDefault(x => x.EPOL_EPOL_ID == templineid && x.XATT_XATT_ID == tempattributeid && x.ELGR_ELGR_ID == model.GroupId)?.GROUP_NUMBER) ?? 0;
                    }

                    model.AttributeDetails[i].LineDetails = customLine;
                }

                return PartialView(model);
            }

            return null;
        }

        /// <summary>
        /// Tower Of Line Group
        /// </summary>
        /// <param name="id">ELGR_ID</param>
        /// <returns>View</returns>
        public ActionResult Line_Group_Tower(decimal id)
        {
            var model = new EXP_TAWERLINE();
            model.ELGR_ELGR_ID = id;
            ViewBag.GroupName = Db.EXP_LINE_GROUP.Find(id).ELGR_DESC;
            return View(model);
        }

        /// <summary>
        /// Edit Tower
        /// </summary>
        /// <param name="id">ETLI_NUM</param>
        /// <returns>PartialView</returns>
        public PartialViewResult EditTower(decimal id)
        {
            var model = Db.EXP_TAWERLINE.Find(id);
            var towerViewModel = new TowerViewModel
            {
                Edit_ELGR_ELGR_ID = model.ELGR_ELGR_ID,
                Edit_ETLI_MADA = model.ETLI_MADA,
                Edit_ETLI_NUM = model.ETLI_NUM,
                Edit_ETLI_NROW = model.ETLI_NROW,
                Edit_ETLI_MIDASPEN = model.ETLI_MIDASPEN,
                Edit_ETLI_NAME = model.ETLI_NAME,
                Edit_ETLI_TNAME = model.ETLI_TNAME,
                Edit_ETLI_TYPE = model.ETLI_TYPE,
                Edit_IRON_STAT = model.IRON_STAT,
                Edit_TCOL_TCOL_ROW = model.TCOL_TCOL_ROW,
                Edit_TCOL_TCOL_ROW_R = model.TCOL_TCOL_ROW_R,
                Edit_TCOL_TCOL_ROW_R1 = model.TCOL_TCOL_ROW_R1,
                Edit_TERMO_STAT = model.TERMO_STAT,
                Edit_TTYP_ID = model.TTYP_ID,
                Edit_TWER_TYPE = model.TWER_TYPE
            };
            return PartialView(towerViewModel);
        }        

        /// <summary>
        /// Show sample tower for delete all tower like that
        /// </summary>
        /// <param name="id">ELGR_ID</param>
        /// <returns>PartialView</returns>
        public PartialViewResult ShowSampleTowerForDelete(int groupId)
        {
            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var model = conn.Query(@"SELECT DISTINCT
                                                ELGR_ELGR_ID,                                                                   
                                                MIN(ETLI_NUM) ETLI_NUM,
                                                ETLI_MADA,
                                                --ETLI_TYPE,
                                                DECODE(ETLI_TYPE, 0, 'کششی' ,1 ,'آویز', '---') ETLI_TYPE_DESC,
                                                TTYPE_NAME,
                                                TTYPE_CODE,
                                                --TWER_TYPE,
                                                DECODE (TWER_TYPE, 0, 'مشبک فلزی', 1, 'تلسکوپی', 2, 'پایه بتنی (جناغی یا اچ تایپ)', '---') TWER_TYPE_DESC,
                                                --IRON_STAT,
                                                DECODE(IRON_STAT, 0, 'زنگ زده', 1, 'سالم', '---') IRON_STAT_DESC,
                                                --ETLI_MIDASPEN,                                               
                                                DECODE(ETLI_MIDASPEN, 0, 'ندارد', 1, 'دارد', '---') ETLI_MIDASPEN_DESC,
                                                TCOL_DESC_REGION,
                                                TCOL_DESC_WEATHER,
                                                TCOL_DESC_POLLUTION
                                          FROM EXP_TOWER_V
                                          WHERE ELGR_ELGR_ID = :groupId
                                          GROUP BY 
                                                ELGR_ELGR_ID,                                                                   
                                                ETLI_MADA,
                                                ETLI_TYPE,
                                                TTYPE_NAME,
                                                TTYPE_CODE,
                                                TWER_TYPE,
                                                IRON_STAT,
                                                ETLI_MIDASPEN,
                                                TCOL_DESC_REGION,
                                                TCOL_DESC_WEATHER,
                                                TCOL_DESC_POLLUTION", groupId)
                             .Select(b => new TowerSampleViewModel
                             {
                                 ELGR_ELGR_ID = b.ELGR_ELGR_ID,
                                 ETLI_NUM = b.ETLI_NUM,
                                 ETLI_MADA = b.ETLI_MADA,
                                 //ETLI_TYPE = b.ETLI_TYPE,
                                 ETLI_TYPE_DESC = b.ETLI_TYPE_DESC,
                                 TTYPE_NAME = b.TTYPE_NAME,
                                 TTYPE_CODE = b.TTYPE_CODE,
                                 //TWER_TYPE = b.TWER_TYPE,
                                 TWER_TYPE_DESC = b.TWER_TYPE_DESC,
                                 //IRON_STAT = b.IRON_STAT,
                                 IRON_STAT_DESC = b.IRON_STAT_DESC,
                                 //ETLI_MIDASPEN = b.ETLI_MIDASPEN,
                                 ETLI_MIDASPEN_DESC = b.ETLI_MIDASPEN_DESC,
                                 TCOL_DESC_REGION = b.TCOL_DESC_REGION,
                                 TCOL_DESC_WEATHER = b.TCOL_DESC_WEATHER,
                                 TCOL_DESC_POLLUTION = b.TCOL_DESC_POLLUTION
                             }).ToList();

                return PartialView(model);
            }
        }

        /// <summary>
        /// Show tower circuit
        /// </summary>
        /// <param name="id">ETLI_NUM</param>
        /// <returns>View</returns>
        public ActionResult ShowTowerCircuit(decimal id)
        {
            var tower = Db.EXP_TAWERLINE.Find(id);
            ViewBag.TowerId = id;
            ViewBag.TowerName = tower.ETLI_NAME;
            return View();
        }

        /// <summary>
        /// Add or edit tower circuit
        /// </summary>
        /// <param name="id">ID</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>View</returns>
        public ActionResult AddOrEditTowerCircuit(decimal? id, int towerId)
        {
            var tower = Db.EXP_TAWERLINE.Find(towerId);
            ViewBag.GroupId = tower.ELGR_ELGR_ID.Value;

            if (id.HasValue && id.Value != 0)
            {
                var model = Db.EXP_TOWER_LINE.Find(id.Value);
                return View(model);
            }

            var newModel = new EXP_TOWER_LINE();
            newModel.ETLI_ETLI_NUM = towerId;

            return View(newModel);
        }

        /// <summary>
        /// Show tower insulator
        /// </summary>
        /// <param name="id">ETLI_NUM</param>
        /// <returns>View</returns>
        public ActionResult ShowTowerInsulator(decimal id)
        {
            var tower = Db.EXP_TAWERLINE.Find(id);
            ViewBag.TowerId = id;
            ViewBag.TowerName = tower.ETLI_NAME;
            return View();
        }

        /// <summary>
        /// Add or edit tower insulator
        /// </summary>
        /// <param name="id">ID</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>View</returns>
        public ActionResult AddOrEditTowerInsulator(decimal? id, int towerId)
        {
            if (id.HasValue && id.Value != 0)
            {
                var model = Db.EXP_TOWER_INSULATOR.Find(id.Value);
                return View(model);
            }

            var newModel = new EXP_TOWER_INSULATOR();
            newModel.ETLI_ETLI_NUM = towerId;

            return View(newModel);
        }

        /// <summary>
        /// Show tower leg
        /// </summary>
        /// <param name="id">ETLI_NUM</param>
        /// <returns>View</returns>
        public ActionResult ShowTowerLeg(decimal id)
        {
            var tower = Db.EXP_TAWERLINE.Find(id);
            ViewBag.TowerId = id;
            ViewBag.TowerName = tower.ETLI_NAME;
            return View();
        }

        /// <summary>
        /// Add or edit tower leg
        /// </summary>
        /// <param name="id">ID</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>View</returns>
        public ActionResult AddOrEditTowerLeg(decimal? id, int towerId)
        {
            if (id.HasValue && id.Value != 0)
            {
                var model = Db.EXP_TOWER_LEG.Find(id.Value);
                return View(model);
            }

            var newModel = new EXP_TOWER_LEG();
            newModel.ETLI_ETLI_NUM = towerId;

            return View(newModel);
        }

        /// <summary>
        /// Show tower polluting industry
        /// </summary>
        /// <param name="id">ETLI_NUM</param>
        /// <returns>View</returns>
        public ActionResult ShowTowerPollutingIndustry(decimal id)
        {
            var tower = Db.EXP_TAWERLINE.Find(id);
            ViewBag.TowerId = id;
            ViewBag.TowerName = tower.ETLI_NAME;
            return View();
        }

        /// <summary>
        /// Add or edit tower polluting industry
        /// </summary>
        /// <param name="id">ID</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>View</returns>
        public ActionResult AddOrEditTowerPollutingIndustry(decimal? id, int towerId)
        {
            if (id.HasValue && id.Value != 0)
            {
                var model = Db.EXP_TOWER_INDUSTRY.Find(id.Value);
                return View(model);
            }

            var newModel = new EXP_TOWER_INDUSTRY();
            newModel.ETLI_ETLI_NUM = towerId;

            return View(newModel);
        }

        #endregion Views


        #region Read Data

        /// <summary>
        /// Data source for all lines grid
        /// </summary>
        /// <param name="request">DataSourceRequest</param>
        /// <param name="filterInput">Filter Content</param>
        /// <returns>List of lines that are not yet a member of any groups</returns>
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadLine_GridLOV([DataSourceRequest] DataSourceRequest request, string filterInput)
        {
            bool filterDisable = string.IsNullOrEmpty(filterInput);
            string filter = string.IsNullOrEmpty(filterInput.ToUpper()) ? "" : filterInput.ToUpper().ToArabicUtf8();
            var query = (from b in Db.EXP_LINE_V
                         join c in Db.EXP_UNIT_LEVEL on b.EXP_POST_LINE_EUNL_EUNL_ID equals c.EUNL_ID
                         where b.EXP_POST_LINE_ELGR_ELGR_ID == null && (b.EXP_POST_LINE_EPOL_NAME.ToUpper().Contains(filter) || filterDisable)
                         orderby b.EXP_POST_LINE_EUNL_EUNL_ID, b.EXP_POST_LINE_EPOL_ID descending
                         select new
                         {
                             b.EXP_POST_LINE_EPOL_ID,
                             b.EXP_POST_LINE_EPOL_NAME,
                             b.EXP_POST_LINE_EUNL_EUNL_ID,
                             VoltDesc = c.EUNL_DESC,
                             VoltNum = c.EUNL_NUM
                         }).ToList();

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Data source for all lines multiSelect
        /// </summary>
        /// <returns>List of lines that are not yet a member of any groups</returns>
        public ActionResult ReadLine_MultiSelect()
        {
            var query = (from b in Db.EXP_LINE_V
                         join c in Db.EXP_UNIT_LEVEL on b.EXP_POST_LINE_EUNL_EUNL_ID equals c.EUNL_ID
                         where b.EXP_POST_LINE_ELGR_ELGR_ID == null
                         orderby b.EXP_POST_LINE_EUNL_EUNL_ID, b.EXP_POST_LINE_EPOL_ID descending
                         select new
                         {
                             b.EXP_POST_LINE_EPOL_ID,
                             b.EXP_POST_LINE_EPOL_NAME
                         }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Show all lines added to the line group
        /// </summary>
        /// <param name="request">DataSourceRequest</param>
        /// <param name="groupId">ELGR_ID</param>
        /// <returns>All lines in this group</returns>
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadLineGroup_Grid([DataSourceRequest] DataSourceRequest request, decimal? groupId)
        {
            if (groupId.HasValue && groupId != 0)
            {
                var query = (from b in Db.EXP_LINE_V
                             join c in Db.EXP_UNIT_LEVEL on b.EXP_POST_LINE_EUNL_EUNL_ID equals c.EUNL_ID
                             join e in Db.EXP_LINE_GROUP on b.EXP_POST_LINE_ELGR_ELGR_ID equals e.ELGR_ID
                             where b.EXP_POST_LINE_ELGR_ELGR_ID == groupId
                             select new
                             {
                                 GroupName_Grid = e.ELGR_DESC,
                                 b.EXP_POST_LINE_EPOL_ID,
                                 b.EXP_POST_LINE_INSTRU_LINE_TYPE,
                                 b.EXP_POST_LINE_EPOL_NAME,
                                 b.EXP_POST_LINE_EPOL_STAT,
                                 b.EXP_POST_LINE_EXPL_DATE,
                                 b.EXP_POST_LINE_EUNL_EUNL_ID,
                                 b.EXP_POST_LINE_CODE_DISP,
                                 b.EXP_POST_LINE_A1_EPOL_NAME,
                                 b.EXP_POST_LINE_A2_EPOL_NAME,
                                 VoltDesc_Grid = c.EUNL_DESC,
                                 VoltNum_Grid = c.EUNL_NUM
                             }).ToList();

                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        /// <summary>
        ///  Show all line in group
        /// </summary>
        /// <param name="groupId">ELGR_ID</param>
        /// <returns>all line in group</returns>
        public ActionResult ReadLineGroup(decimal? groupId)
        {
            var query = (from b in Db.EXP_POST_LINE
                         where b.ELGR_ELGR_ID == groupId.Value
                         orderby b.EPOL_ID
                         select new
                         {
                             b.EPOL_ID,
                             b.EPOL_NAME
                         }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Show all tower type
        /// </summary>        
        /// <returns>all tower type</returns>
        public ActionResult ReadTowerType()
        {
            var query = (from b in Db.EXP_TOWER_TYPE
                         orderby b.ID
                         select new
                         {
                             b.ID,
                             TCOL_DESC = b.TTYPE_NAME + (string.IsNullOrEmpty(b.TTYPE_CODE) ? "" : " (" + b.TTYPE_CODE + ") ")
                         }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Show all condition on tower
        /// </summary>
        /// <param name="type">0, 1, 2</param>
        /// <returns>all condition on tower</returns>
        public ActionResult ReadTowerConditions(string type)
        {
            var query = (from b in Db.EXP_TCONDLINE
                         where b.TCOL_TYPE == type
                         orderby b.TCOL_DESC
                         select new
                         {
                             b.TCOL_ROW,
                             b.TCOL_DESC
                         }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Show all tower polluting industry
        /// </summary>        
        /// <returns>all tower polluting industry</returns>
        public ActionResult ReadTowerPollutingIndustry()
        {
            var query = (from b in Db.EXP_POLLUTING_INDUSTRY
                         orderby b.ID
                         select new
                         {
                             b.ID,
                             INDS_NAME = b.INDS_NAME + (string.IsNullOrEmpty(b.INDS_LOCATION) ? "" : " (" + b.INDS_LOCATION + ") ")
                         }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Show all factory for insulator
        /// EINS_EINS_ID  74 => insulator
        /// </summary>        
        /// <returns>all factory for insulator</returns>
        public ActionResult ReadFactoryInsulator()
        {
            var query = (from b in Db.EXP_FACTORY
                         where b.EINS_EINS_ID == 74
                         orderby b.EFAC_ID
                         select new
                         {
                             b.EFAC_ID,
                             b.EFAC_DESC
                         }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Show all condactor type
        /// </summary>        
        /// <returns>all condactor type</returns>
        public ActionResult ReadCondactorType()
        {
            var query = (from b in Db.EXP_CONDACTOR_TYPE
                         orderby b.ID
                         select new
                         {
                             b.ID,
                             b.CONDACTOR_TYPE
                         }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Show all condactor name
        /// </summary>        
        /// <returns>all condactor name</returns>
        public ActionResult ReadCondactorName()
        {
            var query = (from b in Db.EXP_CONDACTOR_NAME
                         orderby b.ID
                         select new
                         {
                             b.ID,
                             b.CONDACTOR_NAME
                         }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Show all tower added to the line group
        /// </summary>
        /// <param name="request">DataSourceRequest</param>
        /// <param name="groupId">ELGR_ID</param>
        /// <returns>All tower in this group</returns>
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadTower_Grid([DataSourceRequest] DataSourceRequest request, int? groupId)
        {
            if (groupId.HasValue && groupId != 0)
            {
                var query = (from b in Db.EXP_TOWER_V
                             where b.ELGR_ELGR_ID == groupId
                             orderby b.ETLI_NROW
                             select new
                             {
                                 b.ETLI_NUM,
                                 b.ETLI_NROW,
                                 b.ETLI_MADA,
                                 b.ETLI_NAME,
                                 b.ETLI_TNAME,
                                 b.ETLI_TYPE,
                                 b.IRON_STAT,
                                 b.ETLI_MIDASPEN,
                                 b.TWER_TYPE,
                                 b.TERMO_STAT,
                                 b.TCOL_DESC_REGION,
                                 b.TCOL_DESC_WEATHER,
                                 b.TCOL_DESC_POLLUTION
                             }).ToList();

                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        /// <summary>
        /// Show all circuit on this tower
        /// </summary>
        /// <param name="request">DataSourceRequest</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>All circuit on this tower</returns>
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadTowerCircuit_Grid([DataSourceRequest] DataSourceRequest request, int? towerId)
        {
            if (towerId.HasValue && towerId != 0)
            {
                var query = (from b in Db.EXP_TOWER_LINE
                             join c in Db.EXP_LINE_V on b.EPOL_EPOL_ID equals c.EXP_POST_LINE_EPOL_ID
                             join d in Db.EXP_CONDACTOR_NAME on b.ECON_ID equals d.ID into condactorName
                             from condName in condactorName.DefaultIfEmpty()
                             join e in Db.EXP_CONDACTOR_TYPE on b.ECOT_ID equals e.ID into condactorType
                             from condType in condactorType.DefaultIfEmpty()
                             where b.ETLI_ETLI_NUM == towerId.Value
                             select new
                             {
                                 b.ID,
                                 b.ETLI_ETLI_NUM,
                                 b.EPOL_EPOL_ID,
                                 LineName_Grid = c.EXP_POST_LINE_EPOL_NAME,
                                 LineCodeDisp_Grid = c.EXP_POST_LINE_CODE_DISP,
                                 CondactorName_Grid = condName.CONDACTOR_NAME,
                                 CondactorType_Grid = condType.CONDACTOR_TYPE,
                                 b.CONDACTOR_AREA,
                                 b.TEMP_RENG,
                                 b.BUNDLE_COUNT
                             }).OrderBy(x => x.ID).ToList();


                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        /// <summary>
        /// Show all insulator on this tower
        /// </summary>
        /// <param name="request">DataSourceRequest</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>All insulator on this tower</returns>
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadTowerInsulator_Grid([DataSourceRequest] DataSourceRequest request, int? towerId)
        {
            if (towerId.HasValue && towerId != 0)
            {
                var query = (from b in Db.EXP_TOWER_INSULATOR
                             where b.ETLI_ETLI_NUM == towerId
                             orderby b.ID
                             select new
                             {
                                 b.ID,
                                 b.ETLI_ETLI_NUM,
                                 b.INSU_CODE,
                                 b.INSU_TYPE,
                                 b.INSU_KIND,
                                 b.INSU_STAT,
                                 FactoryInsulator = b.EXP_FACTORY.EFAC_DESC ?? ""
                             }).ToList();

                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        /// <summary>
        /// Show all leg on this tower
        /// </summary>
        /// <param name="request">DataSourceRequest</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>All leg on this tower</returns>
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadTowerLeg_Grid([DataSourceRequest] DataSourceRequest request, int? towerId)
        {
            if (towerId.HasValue && towerId != 0)
            {
                var query = (from b in Db.EXP_TOWER_LEG
                             where b.ETLI_ETLI_NUM == towerId
                             orderby b.ID
                             select new
                             {
                                 b.ID,
                                 b.ETLI_ETLI_NUM,
                                 b.LEGA_ERTH_STAT,
                                 b.LEGA_STAT,
                                 b.LEGB_ERTH_STAT,
                                 b.LEGB_STAT,
                                 b.LEGC_ERTH_STAT,
                                 b.LEGC_STAT,
                                 b.LEGD_ERTH_STAT,
                                 b.LEGD_STAT,
                                 b.TLEG_STAT
                             }).ToList();

                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        /// <summary>
        /// Show all polluting industry on this tower
        /// </summary>
        /// <param name="request">DataSourceRequest</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>All polluting industry on this tower</returns>
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadTowerPollutingIndustry_Grid([DataSourceRequest] DataSourceRequest request, int? towerId)
        {
            if (towerId.HasValue && towerId != 0)
            {
                var query = (from b in Db.EXP_TOWER_INDUSTRY
                             join c in Db.EXP_POLLUTING_INDUSTRY on b.INDY_ID equals c.ID
                             where b.ETLI_ETLI_NUM == towerId
                             orderby b.ID
                             select new
                             {
                                 b.ID,
                                 b.ETLI_ETLI_NUM,
                                 PollutingName = c.INDS_NAME,
                                 PollutingLocation = c.INDS_LOCATION,
                                 PollutingDesc = c.INDS_DESC
                             }).ToList();

                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        #endregion Read Data


        #region Methods

        /// <summary>
        /// Update group line id in table 'EXP_POST_LINE'
        /// </summary>
        /// <param name="id">String Array Of Lines Id</param>
        /// <param name="elgrId">ELGR_ID</param>
        /// <param name="exeption">OUT Error Exception When Error</param>
        /// <returns>'True' Or 'False'</returns>
        private bool FindLineAndEdit(List<int> id, decimal elgrId, out string exeption)
        {
            exeption = "";
            try
            {
                foreach (var item in id)
                {
                    var modelModify = Db.EXP_POST_LINE.Find(Convert.ToInt32(item));
                    if (modelModify != null)
                        modelModify.ELGR_ELGR_ID = elgrId;
                }

                Db.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                exeption = ex.ToString();
                return false;
            }
        }

        /// <summary>
        /// Check for exist group
        /// </summary>
        /// <param name="id">ELGR_ID</param>
        /// <returns>True Or False</returns>
        private bool existGroup(decimal id)
        {
            return Db.EXP_LINE_GROUP.Any(x => x.ELGR_ID == id);
        }

        /// <summary>
        /// Check for exist line
        /// </summary>
        /// <param name="id">EPOL_ID</param>
        /// <returns>True Or False</returns>
        private bool existLine(decimal id)
        {
            return Db.EXP_POST_LINE.Any(x => x.EPOL_ID == id);
        }

        /// <summary>
        /// Check for exist attribute for this group
        /// </summary>
        /// <param name="id">ELGR_ID</param>
        /// <returns>True Or False</returns>
        private bool existGroupAttribute(decimal id)
        {
            return Db.EXP_LINE_GROUP_ATTRIB.Any(x => x.ELGR_ELGR_ID == id);
        }

        /// <summary>
        /// Check for exist attribute for this Line
        /// </summary>
        /// <param name="id">EPOL_ID</param>
        /// <returns>True Or False</returns>
        private bool existLineAttribute(decimal id)
        {
            return Db.EXP_LINE_GROUP_ATTRIB.Any(x => x.EPOL_EPOL_ID == id);
        }

        /// <summary>
        /// Check for exist tower for this group
        /// </summary>
        /// <param name="id">ELGR_ID</param>
        /// <returns>True Or False</returns>
        private bool existGroupTower(decimal id)
        {
            return Db.EXP_TAWERLINE.Any(x => x.ELGR_ELGR_ID == id);
        }

        /// <summary>
        /// Check for exist tower
        /// </summary>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>True Or False</returns>
        private bool existTower(int towerId)
        {
            return Db.EXP_TAWERLINE.Any(x => x.ETLI_NUM == towerId);
        }

        /// <summary>
        /// Check for duplicate tower number in a group
        /// </summary>
        /// <param name="groupId">ELGR_ID</param>
        /// <param name="towerNumber">ETLI_NROW</param>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>True Or False</returns>            
        private bool existTowerNumber(decimal? groupId, int towerNumber, int towerId)
        {
            return Db.EXP_TAWERLINE.Any(x => x.ELGR_ELGR_ID == groupId.Value && x.ETLI_NROW == towerNumber && x.ETLI_NUM != towerId);
        }

        /// <summary>
        /// Check for exist Circuit for this tower
        /// </summary>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>True Or False</returns>
        private bool existTowerCircuitByTowerId(int towerId)
        {
            return Db.EXP_TOWER_LINE.Any(x => x.ETLI_ETLI_NUM == towerId);
        }

        /// <summary>
        /// Check for exist Circuit for this tower
        /// </summary>
        /// <param name="towerId">EPOL_ID</param>
        /// <returns>True Or False</returns>
        private bool existTowerCircuitByLineId(int lineId)
        {
            return Db.EXP_TOWER_LINE.Any(x => x.EPOL_EPOL_ID == lineId);
        }

        /// <summary>
        /// Check for exist Insulator for this tower
        /// </summary>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>True Or False</returns>
        private bool existTowerInsulator(int towerId)
        {
            return Db.EXP_TOWER_INSULATOR.Any(x => x.ETLI_ETLI_NUM == towerId);
        }

        /// <summary>
        /// Check for exist Leg for this tower
        /// </summary>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>True Or False</returns>
        private bool existTowerLeg(int towerId)
        {
            return Db.EXP_TOWER_LEG.Any(x => x.ETLI_ETLI_NUM == towerId);
        }

        /// <summary>
        /// Check for exist Industry for this tower
        /// </summary>
        /// <param name="towerId">ETLI_NUM</param>
        /// <returns>True Or False</returns>
        private bool existTowerIndustry(int towerId)
        {
            return Db.EXP_TOWER_INDUSTRY.Any(x => x.ETLI_ETLI_NUM == towerId);
        }

        /// <summary>
        /// Getting the number of lines in the group
        /// </summary>
        /// <param name="groupId">ELGR_ID</param>
        /// <returns>Number of Line</returns>
        private int getNumberOfLineInGroup(decimal? groupId)
        {
            int result = 0;

            if (!groupId.HasValue || groupId.Value == 0)
                return result;

            return Db.EXP_POST_LINE.Where(x => x.ELGR_ELGR_ID == groupId.Value).Count();
        }

        /// <summary>
        /// Get raft type
        /// </summary>
        /// <param name="type">ETLI_TYPE</param>
        /// <returns>Raft type description</returns>
        private string GetRaftType(int type)
        {
            switch (type)
            {
                case 0:
                    return "کششی";
                case 1:
                    return "آویز";
                default:
                    return "---";
            }
        }

        /// <summary>
        /// Get tower type
        /// </summary>
        /// <param name="type">TWER_TYPE</param>
        /// <returns>Tower type description</returns>
        private string GetTowerType(int type)
        {
            switch (type)
            {
                case 0:
                    return "مشبک فلزی";
                case 1:
                    return "تلسکوپی";
                case 2:
                    return "پایه بتنی (جناغی یا اچ تایپ)";
                default:
                    return "---";
            }
        }

        /// <summary>
        /// Get iron state
        /// </summary>
        /// <param name="type">IRON_STAT</param>
        /// <returns>Iron state description</returns>
        private string GetIronState(int type)
        {
            switch (type)
            {
                case 0:
                    return "زنگ زده";
                case 1:
                    return "سالم";
                default:
                    return "---";
            }
        }

        /// <summary>
        /// Get midaspen state
        /// </summary>
        /// <param name="type">ETLI_MIDASPEN</param>
        /// <returns>Midaspen state description</returns>
        private string GetMidaspenState(int type)
        {
            switch (type)
            {
                case 0:
                    return "ندارد";
                case 1:
                    return "دارد";
                default:
                    return "---";
            }
        }

        /// <summary>
        /// Delete Tower And All Relation
        /// </summary>
        /// <param name="towerIds">ETLI_NUM</param>        
        private void DeleteTowerAndAllRelations(List<int> towerIds)
        {
            foreach (var id in towerIds)
            {
                #region Delete Tower Circuit
                if (existTowerCircuitByTowerId(id))
                {
                    string delTowerCircuit = string.Format("DELETE FROM EXP_TOWER_LINE WHERE ETLI_ETLI_NUM = {0}", id);
                    Db.Database.ExecuteSqlCommand(delTowerCircuit);
                }
                #endregion

                #region Delete Tower Insulator
                if (existTowerInsulator(id))
                {
                    string delTowerInsulator = string.Format("DELETE FROM EXP_TOWER_INSULATOR WHERE ETLI_ETLI_NUM = {0}", id);
                    Db.Database.ExecuteSqlCommand(delTowerInsulator);
                }
                #endregion

                #region Delete Tower Leg
                if (existTowerLeg(id))
                {
                    string delTowerLeg = string.Format("DELETE FROM EXP_TOWER_LEG WHERE ETLI_ETLI_NUM = {0}", id);
                    Db.Database.ExecuteSqlCommand(delTowerLeg);
                }
                #endregion

                #region Delete Tower Industry
                if (existTowerIndustry(id))
                {
                    string delTowerIndustry = string.Format("DELETE FROM EXP_TOWER_INDUSTRY WHERE ETLI_ETLI_NUM = {0}", id);
                    Db.Database.ExecuteSqlCommand(delTowerIndustry);
                }
                #endregion

                #region Delete Tower
                if (existTower(id))
                {
                    string delTower = string.Format("DELETE FROM EXP_TAWERLINE WHERE ETLI_NUM = {0}", id);
                    Db.Database.ExecuteSqlCommand(delTower);
                }
                #endregion
            }
        }

        /// <summary>
        /// Add group and add line into the group
        /// </summary>
        /// <param name="model">EXP_LINE_GROUP</param>
        /// <returns>ServerMessages</returns>
        public ActionResult AddLineGroup(EXP_LINE_GROUP model)
        {
            #region Validation

            if (string.IsNullOrEmpty(model.ELGR_DESC))
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "نام گروه مشخص نشده" }.ToJson();

            if (Request.Form["MS_Line"] == null)
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("لطفا خطوط مربوط به گروه '{0}' را انتخاب کنید", model.ELGR_DESC) }.ToJson();

            #endregion Validation            

            List<int> lineId = Request.Form["MS_Line"].ToString().Split(',').Select(Int32.Parse).ToList();
            var ModelLineNetwork = Db.EXP_POST_LINE_INSTRU.Where(x => lineId.Contains(x.EPOL_EPOL_ID.Value)).Select(x => x.NETL_STAT).Distinct();
            string error = string.Empty;

            if (model.ELGR_ID == 0)
            {
                try
                {
                    bool existGroup = Db.EXP_LINE_GROUP.Any(b => b.ELGR_DESC == model.ELGR_DESC.Trim());

                    if (existGroup) // اگر نام تکراری بود
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "گروهی با این نام ثبت شده" }.ToJson();
                    }
                    else
                    {
                        if (ModelLineNetwork.Count() > 1)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شبکه خطوط انتخابی نمی توانند متفاوت باشند." }.ToJson();
                        }
                        else
                        {
                            Db.EXP_LINE_GROUP.Add(model);
                            Db.SaveChanges();
                            if (FindLineAndEdit(lineId, model.ELGR_ID, out error))
                            {
                                return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد", CoustomData = model.ELGR_ID }.ToJson();
                            }
                            else
                            {
                                //If the lines are not updated, the group should also be deleted
                                Db.Database.ExecuteSqlCommand(string.Format("DELETE FROM EXP_LINE_GROUP WHERE ELGR_ID = {0}", model.ELGR_ID));
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = error, CoustomData = model.ELGR_ID }.ToJson();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                }
            }
            else
            {
                try
                {
                    var AllLineNetwork = Db.EXP_POST_LINE.Join(Db.EXP_POST_LINE_INSTRU,
                                                  post => post.EPOL_ID,
                                                  instru => instru.EPOL_EPOL_ID,
                                                  (post, instru) => new
                                                  {
                                                      POST = post,
                                                      INSTRU = instru
                                                  })
                                                  .Where(x => x.POST.ELGR_ELGR_ID == model.ELGR_ID)
                                                  .Select(x => x.INSTRU.NETL_STAT)
                                                  .Union(ModelLineNetwork)
                                                  .Distinct();

                    if (AllLineNetwork.Distinct().Count() > 1)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شبکه خطوط انتخابی نمی توانند متفاوت باشند." }.ToJson();
                    }
                    else
                    {
                        Db.Entry(model).State = EntityState.Modified;
                        Db.SaveChanges();
                        if (FindLineAndEdit(lineId, model.ELGR_ID, out error))
                            return new ServerMessages(ServerOprationType.Success) { Message = "ویرایش با موفقیت انجام شد", CoustomData = model.ELGR_ID }.ToJson();
                        else
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = error, CoustomData = model.ELGR_ID }.ToJson();
                    }
                }
                catch (Exception ex)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                }
            }
        }

        /// <summary>
        /// Delete all attributes of lines in the current group and recreate them
        /// </summary>
        /// <param name="model">ViewModel => LineGroupAttributeViewModel</param>
        /// <returns>ServerMessages</returns>
        public ActionResult AddLineGroupAttribute(LineGroupAttributeViewModel model)
        {
            try
            {

                #region Delete Old Attributes

                Db.Database.ExecuteSqlCommand(string.Format("DELETE FROM EXP_LINE_GROUP_ATTRIB WHERE ELGR_ELGR_ID = {0}", model.GroupId));

                #endregion

                foreach (var attrib in model.AttributeDetails)
                {
                    foreach (var line in attrib.LineDetails)
                    {
                        Db.EXP_LINE_GROUP_ATTRIB.Add(new EXP_LINE_GROUP_ATTRIB
                        {
                            ELGR_ELGR_ID = model.GroupId,
                            XATT_XATT_ID = attrib.AttributeId,
                            EPOL_EPOL_ID = line.LineId,
                            GROUP_NUMBER = line.GroupNumber ?? (short)0
                        });
                    }
                }

                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }

        /// <summary>
        /// Add towers for this line group
        /// </summary>
        /// <param name="model">EXP_TAWERLINE</param>
        /// <returns>ServerMessages</returns>
        public ActionResult AddLineGroupTower(EXP_TAWERLINE model)
        {
            try
            {
                int towerCount = 0;
                int.TryParse(Request.Form["Tower_Count"].ToString(), out towerCount);

                int tensileInsulatorCount = 0;
                int.TryParse(Request.Form["Tensile_Insulator_Count"].ToString(), out tensileInsulatorCount);

                int pendantInsulatorCount = 0;
                int.TryParse(Request.Form["Pendant_Insulator_Count"].ToString(), out pendantInsulatorCount);

                int jumperInsulatorCount = 0;
                int.TryParse(Request.Form["Jumper_Insulator_Count"].ToString(), out jumperInsulatorCount);

                short? insuStat = string.IsNullOrEmpty(Request.Form["INSU_STAT"].ToString()) ? (short?)null : short.Parse(Request.Form["INSU_STAT"].ToString());
                //short? insuKind = string.IsNullOrEmpty(Request.Form["INSU_KIND"].ToString()) ? (short?)null : short.Parse(Request.Form["INSU_KIND"].ToString());
                //short? insuType = string.IsNullOrEmpty(Request.Form["INSU_TYPE"].ToString()) ? (short?)null : short.Parse(Request.Form["INSU_TYPE"].ToString());
                //int? factoryId = string.IsNullOrEmpty(Request.Form["EFAC_EFAC_ID"].ToString()) ? (int?)null : int.Parse(Request.Form["EFAC_EFAC_ID"].ToString());
                int? industryId = string.IsNullOrEmpty(Request.Form["INDY_ID"].ToString()) ? (int?)null : int.Parse(Request.Form["INDY_ID"].ToString());

                #region Validation

                if (towerCount < 1 || towerCount > 1000)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تعداد دکل ها باید بین 1 تا 1000 باشد" }.ToJson();

                if (string.IsNullOrEmpty(model.ETLI_MADA))
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تعداد مدارها مشخص نشده" }.ToJson();

                if (Convert.ToInt32(model.ETLI_MADA) > getNumberOfLineInGroup(model.ELGR_ELGR_ID))
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تعداد مدار نمی تواند از تعداد خطوط درون گروه بیشتر باشد" }.ToJson();

                if (int.Parse(model.ETLI_MADA) < 1 || int.Parse(model.ETLI_MADA) > 6)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تعداد مدارها باید بین 1 تا 6 باشد" }.ToJson();

                #endregion

                var currentTowerCount = Db.EXP_TAWERLINE.Where(x => x.ELGR_ELGR_ID == model.ELGR_ELGR_ID).Count();
                var sumTower = towerCount + currentTowerCount;

                for (int i = currentTowerCount + 1; i <= sumTower; i++)
                {

                    #region Add Tower

                    EXP_TAWERLINE tower = new EXP_TAWERLINE
                    {
                        ETLI_NROW = i,
                        //ETLI_NAME = string.Format("Tower-{0}", i),
                        //ETLI_TNAME = string.Format("G{0}-{1}", model.ELGR_ELGR_ID, i),
                        ETLI_NAME = string.Format("G{0}-{1}", model.ELGR_ELGR_ID, i),
                        ELGR_ELGR_ID = model.ELGR_ELGR_ID,
                        ETLI_MADA = model.ETLI_MADA,
                        ETLI_TYPE = model.ETLI_TYPE,
                        TWER_TYPE = model.TWER_TYPE,
                        IRON_STAT = model.IRON_STAT,
                        ETLI_MIDASPEN = model.ETLI_MIDASPEN,
                        TTYP_ID = model.TTYP_ID,
                        TCOL_TCOL_ROW = model.TCOL_TCOL_ROW,
                        TCOL_TCOL_ROW_R = model.TCOL_TCOL_ROW_R,
                        TCOL_TCOL_ROW_R1 = model.TCOL_TCOL_ROW_R1
                    };

                    Db.EXP_TAWERLINE.Add(tower);
                    Db.SaveChanges();

                    #endregion

                    #region Add Tower Insulator

                    for (int t = 0; t < tensileInsulatorCount; t++)
                    {
                        EXP_TOWER_INSULATOR tensilInsulator = new EXP_TOWER_INSULATOR
                        {
                            ETLI_ETLI_NUM = tower.ETLI_NUM,                            
                            INSU_TYPE = 0,
                            INSU_STAT = insuStat
                        };

                        Db.EXP_TOWER_INSULATOR.Add(tensilInsulator);
                    }

                    for (int p = 0; p < pendantInsulatorCount; p++)
                    {
                        EXP_TOWER_INSULATOR pendantInsulator = new EXP_TOWER_INSULATOR
                        {
                            ETLI_ETLI_NUM = tower.ETLI_NUM,
                            INSU_TYPE = 1,
                            INSU_STAT = insuStat
                        };

                        Db.EXP_TOWER_INSULATOR.Add(pendantInsulator);
                    }

                    for (int j = 0; j < jumperInsulatorCount; j++)
                    {
                        EXP_TOWER_INSULATOR jamperInsulator = new EXP_TOWER_INSULATOR
                        {
                            ETLI_ETLI_NUM = tower.ETLI_NUM,
                            INSU_TYPE = 2,
                            INSU_STAT = insuStat
                        };

                        Db.EXP_TOWER_INSULATOR.Add(jamperInsulator);
                    }

                    if (tensileInsulatorCount > 0 || pendantInsulatorCount > 0 || jumperInsulatorCount > 0)                                            
                        Db.SaveChanges();
                    

                    //if (factoryId.HasValue || insuStat.HasValue || insuType.HasValue || insuKind.HasValue)
                    //{
                    //    EXP_TOWER_INSULATOR insulator = new EXP_TOWER_INSULATOR
                    //    {
                    //        ETLI_ETLI_NUM = tower.ETLI_NUM,
                    //        EFAC_EFAC_ID = factoryId,
                    //        INSU_CODE = "",
                    //        INSU_KIND = insuKind,
                    //        INSU_STAT = insuStat,
                    //        INSU_TYPE = insuType
                    //    };

                    //    Db.EXP_TOWER_INSULATOR.Add(insulator);
                    //    Db.SaveChanges();
                    //}

                    #endregion

                    #region Add Tower Polluting Industry

                    if (industryId.HasValue)
                    {
                        EXP_TOWER_INDUSTRY industry = new EXP_TOWER_INDUSTRY
                        {
                            ETLI_ETLI_NUM = tower.ETLI_NUM,
                            INDY_ID = industryId.Value
                        };

                        Db.EXP_TOWER_INDUSTRY.Add(industry);
                        Db.SaveChanges();
                    }

                    #endregion

                    #region Add Tower Leg

                    EXP_TOWER_LEG leg = new EXP_TOWER_LEG
                    {
                        ETLI_ETLI_NUM = tower.ETLI_NUM,
                        LEGA_ERTH_STAT = 1,
                        LEGA_STAT = 1,
                        LEGB_ERTH_STAT = 1,
                        LEGB_STAT = 1,
                        LEGC_ERTH_STAT = 1,
                        LEGC_STAT = 1,
                        LEGD_ERTH_STAT = 1,
                        LEGD_STAT = 1,
                        TLEG_STAT = 1
                    };

                    Db.EXP_TOWER_LEG.Add(leg);
                    Db.SaveChanges();
                    
                    #endregion

                }

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("تعداد {0} دکل ثبت شد", towerCount) }.ToJson();

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// Add or edit circuit on tower
        /// </summary>
        /// <param name="model">EXP_TOWER_LINE</param>
        /// <returns>ServerMessages</returns>
        public ActionResult AddTowerCircuit(EXP_TOWER_LINE model)
        {
            try
            {
                #region Validations

                if (model.ETLI_ETLI_NUM.Equals(null) || model.ETLI_ETLI_NUM == 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاور انتخاب نشده" }.ToJson();

                if (!model.EPOL_EPOL_ID.HasValue || model.EPOL_EPOL_ID.Value == 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خط انتخاب نشده" }.ToJson();

                if (!model.ECON_ID.HasValue)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "نام سیم هادی انتخاب نشده" }.ToJson();

                if (!model.ECOT_ID.HasValue)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "نوع سيم هادي انتخاب نشده" }.ToJson();

                var findDuplicate = Db.EXP_TOWER_LINE.Where(x => x.ETLI_ETLI_NUM == model.ETLI_ETLI_NUM &&
                                                                 x.EPOL_EPOL_ID == model.EPOL_EPOL_ID &&
                                                                 x.ID != model.ID).Count();
                if (findDuplicate > 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "مداری برای این خط برروی تاور انتخابی ثبت شده" }.ToJson();

                #endregion            

                if (model.ID == 0)
                {
                    Db.EXP_TOWER_LINE.Add(model);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
                }
                else
                {
                    Db.Entry(model).State = EntityState.Modified;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ویرایش با موفقیت انجام شد" }.ToJson();
                }

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// Add or edit insulator on tower
        /// </summary>
        /// <param name="model">EXP_TOWER_INSULATOR</param>
        /// <returns>ServerMessages</returns>
        public ActionResult AddTowerInsulator(EXP_TOWER_INSULATOR model)
        {
            try
            {
                //model.INSU_CODE = model.INSU_CODE.Trim();
                model.INSU_CODE = "";

                #region Validations

                if (model.ETLI_ETLI_NUM.Equals(null) || model.ETLI_ETLI_NUM == 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاور انتخاب نشده" }.ToJson();

                //if (string.IsNullOrEmpty(model.INSU_CODE))
                //    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "کد مقره وارد نشده" }.ToJson();

                var findDuplicate = Db.EXP_TOWER_INSULATOR.Where(x => x.ETLI_ETLI_NUM == model.ETLI_ETLI_NUM &&
                                                                      //x.INSU_CODE == model.INSU_CODE &&
                                                                      x.EFAC_EFAC_ID == model.EFAC_EFAC_ID &&
                                                                      x.ID != model.ID).Count();
                if (findDuplicate > 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "مقره ای با این مشخصات برای تاور انتخابی ثبت شده" }.ToJson();

                #endregion

                if (model.ID == 0)
                {
                    Db.EXP_TOWER_INSULATOR.Add(model);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
                }
                else
                {
                    Db.Entry(model).State = EntityState.Modified;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ویرایش با موفقیت انجام شد" }.ToJson();
                }

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// Add or edit leg on tower
        /// </summary>
        /// <param name="model">EXP_TOWER_LEG</param>
        /// <returns>ServerMessages</returns>
        public ActionResult AddTowerLeg(EXP_TOWER_LEG model)
        {
            try
            {
                #region Validations

                if (model.ETLI_ETLI_NUM.Equals(null) || model.ETLI_ETLI_NUM == 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاور انتخاب نشده" }.ToJson();

                if (model.TLEG_STAT.Equals(null) || !model.TLEG_STAT.HasValue)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "وضعیت تاور انتخاب نشده" }.ToJson();

                var findDuplicate = Db.EXP_TOWER_LEG.Where(x => x.ETLI_ETLI_NUM == model.ETLI_ETLI_NUM &&
                                                                x.TLEG_STAT == 1 &&
                                                                x.ID != model.ID).Count();

                if (findDuplicate > 0 && model.TLEG_STAT == 1)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "برای هر تاور امکان ثبت بیشتر از یک لگ فعال وجود ندارد" }.ToJson();

                #endregion

                if (model.ID == 0)
                {
                    Db.EXP_TOWER_LEG.Add(model);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
                }
                else
                {
                    Db.Entry(model).State = EntityState.Modified;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ویرایش با موفقیت انجام شد" }.ToJson();
                }

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// Add or edit polluting industry on tower
        /// </summary>
        /// <param name="model">EXP_TOWER_INDUSTRY</param>
        /// <returns>ServerMessages</returns>
        public ActionResult AddTowerPollutingIndustry(EXP_TOWER_INDUSTRY model)
        {
            try
            {
                #region Validations

                if (model.ETLI_ETLI_NUM.Equals(null) || model.ETLI_ETLI_NUM == 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاور انتخاب نشده" }.ToJson();

                if (model.INDY_ID.Equals(null) || model.INDY_ID == 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "نوع آلاینده وارد نشده" }.ToJson();

                var findDuplicate = Db.EXP_TOWER_INDUSTRY.Where(x => x.ETLI_ETLI_NUM == model.ETLI_ETLI_NUM &&
                                                                     x.INDY_ID == model.INDY_ID &&
                                                                     x.ID != model.ID).Count();
                if (findDuplicate > 0)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "آلاینده ای با این مشخصات برای تاور انتخابی ثبت شده" }.ToJson();

                #endregion


                if (model.ID == 0)
                {
                    Db.EXP_TOWER_INDUSTRY.Add(model);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
                }
                else
                {
                    Db.Entry(model).State = EntityState.Modified;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ویرایش با موفقیت انجام شد" }.ToJson();
                }

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// Edit tower for this line group
        /// </summary>
        /// <param name="model">TowerViewModel</param>
        /// <returns>ServerMessages</returns>
        public ActionResult EditLineGroupTower(TowerViewModel model)
        {
            try
            {
                #region Validation

                if (string.IsNullOrEmpty(model.Edit_ETLI_MADA))
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تعداد مدارها مشخص نشده" }.ToJson();

                if (int.Parse(model.Edit_ETLI_MADA) < 1 || int.Parse(model.Edit_ETLI_MADA) > 6)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تعداد مدارها باید بین 1 تا 6 باشد" }.ToJson();

                if (existTowerNumber(model.Edit_ELGR_ELGR_ID, model.Edit_ETLI_NROW, model.Edit_ETLI_NUM))
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاوری با این شماره وجود دارد" }.ToJson();

                #endregion

                var forEditModel = Db.EXP_TAWERLINE.Find(model.Edit_ETLI_NUM);
                forEditModel.ELGR_ELGR_ID = model.Edit_ELGR_ELGR_ID;
                forEditModel.ETLI_MADA = model.Edit_ETLI_MADA;
                forEditModel.ETLI_NUM = model.Edit_ETLI_NUM;
                forEditModel.ETLI_NROW = model.Edit_ETLI_NROW;
                forEditModel.ETLI_MIDASPEN = model.Edit_ETLI_MIDASPEN;
                forEditModel.ETLI_NAME = model.Edit_ETLI_NAME;
                forEditModel.ETLI_TNAME = model.Edit_ETLI_TNAME;
                forEditModel.ETLI_TYPE = model.Edit_ETLI_TYPE;
                forEditModel.IRON_STAT = model.Edit_IRON_STAT;
                forEditModel.TCOL_TCOL_ROW = model.Edit_TCOL_TCOL_ROW;
                forEditModel.TCOL_TCOL_ROW_R = model.Edit_TCOL_TCOL_ROW_R;
                forEditModel.TCOL_TCOL_ROW_R1 = model.Edit_TCOL_TCOL_ROW_R1;
                forEditModel.TERMO_STAT = model.Edit_TERMO_STAT;
                forEditModel.TTYP_ID = model.Edit_TTYP_ID;
                forEditModel.TWER_TYPE = model.Edit_TWER_TYPE;
                Db.Entry(forEditModel).State = EntityState.Modified;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = "ویرایش با موفقیت انجام شد" }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// Check table 'EXP_LINE_GROUP_ATTRIB' has data for this group
        /// </summary>
        /// <param name="id">ELGA_ID</param>
        /// <returns>Server Message CustomData = True Or False</returns>
        public JsonResult CheckGroupHasRelation(decimal? id)
        {
            bool result = false;

            if (id.HasValue)
                if (existGroup(id.Value))
                {
                    if (existGroupAttribute(id.Value))
                        result = true;

                    if (existGroupTower(id.Value))
                        result = true;
                }

            return new ServerMessages(ServerOprationType.Success) { CoustomData = result }.ToJson();
        }

        /// <summary>
        /// Check table 'EXP_LINE_GROUP_ATTRIB' has data for this line 
        /// </summary>
        /// <param name="id">EPOL_ID</param>
        /// <returns>Server Message CustomData = true Or false</returns>
        public JsonResult CheckLineHasRelation(decimal? id)
        {
            bool result = false;

            if (id.HasValue)
                if (existLine(id.Value))
                {
                    if (existLineAttribute(id.Value))
                        result = true;

                    if (existTowerCircuitByLineId((int)id.Value))
                        result = true;
                }

            return new ServerMessages(ServerOprationType.Success) { CoustomData = result }.ToJson();
        }

        /// <summary>
        /// Remove line group if it is not associated with 'EXP_LINE_GROUP_ATTRIB'
        /// </summary>
        /// <param name="id">ELGR_ID</param>
        /// <returns>ServerMessages</returns>
        public ActionResult DeleteLineGroupComplete(decimal? id)
        {
            if (id.HasValue)
            {
                if (existGroup(id.Value))
                {
                    try
                    {
                        #region Delete Tower And All Relation
                        if (existGroupTower(id.Value))
                        {
                            var towerIds = Db.EXP_TAWERLINE.Where(x => x.ELGR_ELGR_ID == id.Value).Select(x => x.ETLI_NUM).ToList();
                            if (towerIds.Count() > 0)
                                DeleteTowerAndAllRelations(towerIds);
                        }
                        #endregion

                        #region Delete Line Attribute
                        string delLineAttribCommand = string.Format("DELETE FROM EXP_LINE_GROUP_ATTRIB WHERE ELGR_ELGR_ID = {0}", id);
                        Db.Database.ExecuteSqlCommand(delLineAttribCommand);
                        #endregion

                        #region Update Line
                        string upLineCommand = string.Format("UPDATE EXP_POST_LINE SET ELGR_ELGR_ID = NULL WHERE ELGR_ELGR_ID = {0}", id);
                        Db.Database.ExecuteSqlCommand(upLineCommand);
                        #endregion

                        #region Delete Attachment

                        var findAttachment = Db.Database.SqlQuery<SCN_ATTACHINTER>(string.Format(@"SELECT * FROM SCN_ATTACHINTER 
                                                                                                   WHERE ENTI_KEY = 'ELGR_ID' AND
                                                                                                         ENTI_NAME = 'EXP_LINE_GROUP' AND 
                                                                                                         ENTI_VALU = '{0}'", id.Value)).ToList();

                        if (findAttachment.Any())
                        {
                            List<string> ID = new List<string>();
                            List<string> ATCH_ID = new List<string>();

                            foreach (var item in findAttachment.Select(x => x.ID).Distinct())
                                ID.Add(item.ToString());

                            foreach (var item in findAttachment.Select(x => x.ATCH_ID).Distinct())
                                ATCH_ID.Add(item.ToString());

                            foreach (var item in ID)
                            {
                                string delAttachInterCommand = string.Format("DELETE FROM SCN_ATTACHINTER WHERE ID = {0}", item);
                                Db.Database.ExecuteSqlCommand(delAttachInterCommand);
                            }

                            foreach (var item in ATCH_ID)
                            {
                                string delAttachCommand = string.Format("DELETE FROM SCN_ATTACHE WHERE ID = {0}", item);
                                Db.Database.ExecuteSqlCommand(delAttachCommand);
                            }
                        }

                        #endregion

                        #region Delete Line Group
                        string delGroupCommand = string.Format("DELETE FROM EXP_LINE_GROUP WHERE ELGR_ID = {0}", id);
                        Db.Database.ExecuteSqlCommand(delGroupCommand);
                        #endregion

                        return new ServerMessages(ServerOprationType.Success) { Message = "گروه خط مورد نظر حذف شد" }.ToJson();

                    }
                    catch (Exception ex)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                    }
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "کد گروه خط نامعتبر است" }.ToJson();
                }
            }
            else
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "هیچ گروهی برای حذف انتخاب نشده" }.ToJson();

            }

        }

        /// <summary>
        /// Delete line from current group
        /// </summary>
        /// <param name="id">EPOL_ID</param>
        /// <returns>ServerMessages</returns>
        public ActionResult DeleteLineFromGroup(int? id)
        {
            try
            {
                if (id.HasValue)
                {
                    if (existLine(id.Value))
                    {

                        #region Delete Tower Circuit
                        if (existTowerCircuitByLineId(id.Value))
                        {
                            string delTowerCircuit = string.Format("DELETE FROM EXP_TOWER_LINE WHERE EPOL_EPOL_ID = {0}", id);
                            Db.Database.ExecuteSqlCommand(delTowerCircuit);
                        }
                        #endregion

                        #region Delete Line Attribute
                        if (existLineAttribute(id.Value))
                        {
                            string delLineAttribCommand = string.Format("DELETE FROM EXP_LINE_GROUP_ATTRIB WHERE EPOL_EPOL_ID = {0}", id);
                            Db.Database.ExecuteSqlCommand(delLineAttribCommand);
                        }
                        #endregion

                        #region Update Line
                        string upLineCommand = string.Format("UPDATE EXP_POST_LINE SET ELGR_ELGR_ID = NULL WHERE EPOL_ID = {0}", id);
                        Db.Database.ExecuteSqlCommand(upLineCommand);
                        #endregion

                        return new ServerMessages(ServerOprationType.Success) { Message = "خط مورد نظر از گروه جاری حذف گردید" }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خطی با این کد وجود ندارد" }.ToJson();
                    }
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خطی انتخاب نشده است" }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }


        /// <summary>
        /// Delete tower from current group
        /// </summary>
        /// <param name="towerIds">ETLI_NUM</param>
        /// <param name="multiDelete">True = many tower to be delete | False = single tower to be delete</param> 
        /// <returns>ServerMessages</returns>
        public ActionResult DeleteTower(List<int> towerIds, bool multiDelete = false)
        {
            try
            {
                #region Multi Delete State

                if (multiDelete)
                {
                    var idForDelete = new List<int>();

                    var ids = Db.EXP_TAWERLINE.Where(x => towerIds.Contains(x.ETLI_NUM))
                                              .Select(x => new
                                              {
                                                  x.ELGR_ELGR_ID,
                                                  x.ETLI_MADA,
                                                  x.ETLI_TYPE,
                                                  x.TTYP_ID,
                                                  x.TWER_TYPE,
                                                  x.IRON_STAT,
                                                  x.ETLI_MIDASPEN,
                                                  x.TCOL_TCOL_ROW,
                                                  x.TCOL_TCOL_ROW_R,
                                                  x.TCOL_TCOL_ROW_R1,
                                              }).ToList();

                    foreach (var id in ids)
                    {
                        var query = Db.EXP_TAWERLINE.Where(x => (id.ELGR_ELGR_ID.HasValue ? x.ELGR_ELGR_ID == id.ELGR_ELGR_ID : true) &&
                                                                (string.IsNullOrEmpty(id.ETLI_MADA) || x.ETLI_MADA == id.ETLI_MADA) &&
                                                                (id.ETLI_TYPE.HasValue ? x.ETLI_TYPE == id.ETLI_TYPE : true) &&
                                                                (id.TTYP_ID.HasValue ? x.TTYP_ID == id.TTYP_ID : true) &&
                                                                (id.TWER_TYPE.HasValue ? x.TWER_TYPE == id.TWER_TYPE : true) &&
                                                                (id.IRON_STAT.HasValue ? x.IRON_STAT == id.IRON_STAT : true) &&
                                                                (id.ETLI_MIDASPEN.HasValue ? x.ETLI_MIDASPEN == id.ETLI_MIDASPEN : true) &&
                                                                (id.TCOL_TCOL_ROW.HasValue ? x.TCOL_TCOL_ROW == id.TCOL_TCOL_ROW : true) &&
                                                                (id.TCOL_TCOL_ROW_R.HasValue ? x.TCOL_TCOL_ROW_R == id.TCOL_TCOL_ROW_R : true) &&
                                                                (id.TCOL_TCOL_ROW_R1.HasValue ? x.TCOL_TCOL_ROW_R1 == id.TCOL_TCOL_ROW_R1 : true))
                                                    .Select(x => x.ETLI_NUM).ToList();

                        idForDelete.AddRange(query);
                    }

                    towerIds = idForDelete;
                }

                #endregion

                DeleteTowerAndAllRelations(towerIds);
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("تعداد {0} تاور با موفقیت حذف شد", towerIds.Count) }.ToJson();

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }

        #endregion Methods

    }

}
