using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_Post_ListController
    {
        //
        // GET: /Static_Post_List_Insert/       
        [EntityAuthorize("EXP_POST_LINE > select")]
        public ActionResult Static_Post_Insert(int? id)
        {
            try
            {
                LoadPostForm();
                EXP_POST_LINE pl = Db.EXP_POST_LINE.FirstOrDefault(c => c.EPOL_ID == id);
                ViewBag.postId = id;
                ViewBag.Post = pl;
                ViewBag.PostGrade = Db.Database.SqlQuery<string>(string.Format("SELECT EXP_GRADE({0},{1},{2},{3}) FROM DUAL", 0, 0, 1, id)).FirstOrDefault().ToString();
                ViewBag.PostClass = Db.Database.SqlQuery<string>(string.Format("SELECT EXP_GRADE({0},{1},{2},{3}) FROM DUAL", 0, 0, 0, id)).FirstOrDefault().ToString();
                ViewBag.PostScore = Db.Database.SqlQuery<string>(string.Format("SELECT EXP_GRADE({0},{1},{2},{3}) FROM DUAL", 0, 0, 2, id)).FirstOrDefault().ToString();
                return View();
            }
            catch
            {
                return View();
            }
        }

        public void DeleteRow()
        {
            Session["RowId"] = null;
        }

        [EntityAuthorize("EXP_POST_LINE > select,insert,update")]
        public ActionResult AddPost(EXP_POST_LINE pl, string postId)
        {
            string message = "";
            if (pl.EPOL_NAME == null || pl.CODE_DISP == null)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات را تکمیل نمایید." }.ToJson();
            }
            else
            {
                string EXPL_DATE = Request.Form["EXPL_DATE"].ToString();
                string EXPB_DATE = Request.Form["EXPB_DATE"] == null ? string.Empty : Request.Form["EXPB_DATE"].ToString();

                if (!string.IsNullOrEmpty(postId) && postId != "" && postId != "0")
                {
                    int id = Convert.ToInt32(postId);
                    var myobj = Db.EXP_POST_LINE.FirstOrDefault(b => b.EPOL_ID == id);
                    myobj.EPOL_NAME = pl.EPOL_NAME;
                    myobj.ORGA_CODE = pl.ORGA_CODE;
                    myobj.ORGA_MANA_ASTA_CODE = "7";
                    myobj.ORGA_MANA_CODE = "6";
                    myobj.EOTY_EOTY_ID = pl.EOTY_EOTY_ID;
                    myobj.EDIC_EDIC_ID = pl.EDIC_EDIC_ID;
                    myobj.STAC_DYNM = pl.STAC_DYNM;
                    myobj.INCO_TYPE = pl.INCO_TYPE;
                    myobj.EARD_EARD_ID = pl.EARD_EARD_ID;
                    myobj.EPOL_STAT = pl.EPOL_STAT;
                    myobj.CODE_DISP = pl.CODE_DISP;
                    myobj.GEOL_G_CODE = pl.GEOL_G_CODE;
                    myobj.EOCO_EOCO_ID = pl.EOCO_EOCO_ID;
                    myobj.EUNL_EUNL_ID = pl.EUNL_EUNL_ID;
                    myobj.POST_TYPE = pl.POST_TYPE;
                    myobj.ELRD_ELRD_ID = pl.ELRD_ELRD_ID;
                    myobj.EXPL_DATE = EXPL_DATE;
                    myobj.EXPB_DATE = EXPB_DATE;
                    myobj.POST_LAT = pl.POST_LAT;
                    myobj.POST_LNG = pl.POST_LNG;
                    myobj.EPOL_TYPE = "0";
                    myobj.EPOL_IP = pl.EPOL_IP;
                    myobj.BEHS_ID = pl.BEHS_ID;
                    myobj.EANA_EANA_ROW = pl.EANA_EANA_ROW;
                    myobj.POST_ADD = pl.POST_ADD;
                    myobj.STATION_TYPE = pl.STATION_TYPE;
                    myobj.EPOL_NAME_EN = pl.EPOL_NAME_EN;
                    message = "بروز رسانی شد.";
                }
                else
                {
                    var post = Db.EXP_POST_LINE.FirstOrDefault(c => c.CODE_DISP == pl.CODE_DISP);
                    if (post == null)
                    {
                        pl.ORGA_MANA_ASTA_CODE = "7";
                        pl.ORGA_MANA_CODE = "6";
                        pl.EPOL_TYPE = "0";
                        pl.EXPL_DATE = EXPL_DATE;
                        pl.EXPB_DATE = EXPB_DATE;
                        Db.EXP_POST_LINE.Add(pl);
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "پست با این کد دیسپاچینگ قبلا ایجاد شده است." }.ToJson();
                    }

                    message = "ثبت شد.";
                }

                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = message }.ToJson();
            }
        }

        [EntityAuthorize("PAY_ORGAN > select")]
        public ActionResult GetOrgans()
        {
            string[] array = { "1", "4", "6", "7" };
            var query = (from b in Db.PAY_ORGAN
                         where b.MANA_ASTA_CODE == "7" && b.MANA_CODE == "6" && b.CHNG_STAT == "2" && !array.Contains(b.ORGA_STAT)
                         orderby b.ORGA_DESC
                         select new { b.CODE, b.ORGA_DESC }).OrderBy(x => x.ORGA_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_ANALYZOR_EVENT > select")]
        public ActionResult GetAnalyzorOrgan()
        {
            string txt = "اداره بهره برداري";
            int[] array = { 11, 12, 13, 14, 15, 16 };
            var query = (from b in Db.EXP_ANALYZOR_EVENT
                         where array.Contains(b.EANA_ROW)
                         orderby b.EANA_ROW
                         select new
                         {
                             b.EANA_ROW,
                             EANA_DESC = b.EANA_DESC.Replace("سرپرست", txt)
                         }).OrderBy(x => x.EANA_ROW);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("BKP_GEOGH_LOC > select")]
        public ActionResult GetCity()
        {
            var query = (from b in Db.BKP_GEOGH_LOC select new { b.G_CODE, b.G_DESC }).OrderBy(x => x.G_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_OWENER_TYPE > select")]
        public ActionResult GetOwnerType()
        {
            var query = (from b in Db.EXP_OWENER_TYPE select new { b.EOTY_ID, b.EOTY_DESC }).OrderBy(x => x.EOTY_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_OWENER_COMPANY > select")]
        public ActionResult GetOwner(int? ownerCode)
        {
            var query = (from b in Db.EXP_OWENER_COMPANY where b.EOTY_EOTY_ID == ownerCode select new { b.EOCO_ID, b.EOCO_DESC }).OrderBy(x => x.EOCO_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_DISTRIBUTE_COMPANY > select")]
        public ActionResult GetDistributeCompany()
        {
            var query = (from b in Db.EXP_DISTRIBUTE_COMPANY select new { b.EDIC_ID, b.EDIC_DESC }).OrderBy(x => x.EDIC_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_UNIT_LEVEL > select")]
        public ActionResult GetUnitLevel()
        {
            var query = (from b in Db.EXP_UNIT_LEVEL select new { b.EUNL_ID, b.EUNL_DESC, b.EUNL_NUM }).OrderByDescending(x => x.EUNL_NUM);
            List<EXP_UNIT_LEVEL> lst = (from b in Db.EXP_UNIT_LEVEL where b.ACTV_TYPE == "1" select b).ToList();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_LOCATION_RDC > select")]
        public ActionResult GetLocation(int? locationCode)
        {
            var query = (from b in Db.EXP_LOCATION_RDC where b.EARD_EARD_ID == locationCode select new { b.ELRD_ID, b.ELRD_DESC }).OrderBy(x => x.ELRD_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_AOC_RDC > select")]
        public ActionResult GetAoc()
        {
            var query = (from b in Db.EXP_AOC_RDC select new { b.EARD_ID, b.EARD_NAME }).OrderBy(x => x.EARD_NAME);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("PAY_ORGAN > select|BKP_GEOGH_LOC > select|EXP_OWENER_TYPE > select|EXP_OWENER_COMPANY > select|EXP_UNIT_LEVEL > select")]
        public void LoadPostForm()
        {
            ViewData["ORGA"] = Db.PAY_ORGAN.Select(c => new { c.CODE, c.ORGA_DESC });
            ViewData["CITY"] = Db.BKP_GEOGH_LOC.Select(c => new { c.G_CODE, c.G_DESC });
            ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
            ViewData["OWNER"] = Db.EXP_OWENER_COMPANY.Select(c => new { c.EOCO_ID, c.EOCO_DESC });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
        }

    }

}
