using Equipment.Codes.Security;
using Equipment.Models;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_Post_ListController
    {
        //
        // GET: /Static_Post_ConvertVolt/
        [EntityAuthorize("EXP_SHINE_TYPE > select|EXP_UNIT_LEVEL> select")]
        public ActionResult Static_Post_ConvertVolt(int? id)
        {
            ViewBag.PostId = id;
            ViewData["UnitLevel1"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewData["UnitLevel2"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewData["Shin"] = Db.EXP_SHINE_TYPE.Select(c => new { c.ESHT_ID, c.ESHT_DESC });
            return View();
        }

        [EntityAuthorize("EXP_CONVERT_VOLT > select")]
        public ActionResult ReadConvertVolt([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = from b in Db.EXP_CONVERT_VOLT where b.EPOL_EPOL_ID == id select new { b.ECNV_ID, b.EUNL_EUNL_ID, b.EUNL_EUNL_ID_R, b.ESHT_ESHT_ID };
            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_CONVERT_VOLT > select,insert,update")]
        public ActionResult AddConvertVolt(int? id, string firstVolt, string secondVolt, string shin, int? postId)
        {
            EXP_CONVERT_VOLT model = new EXP_CONVERT_VOLT();
            if (id == null)
            {
                model.EUNL_EUNL_ID = Convert.ToInt32(firstVolt);
                model.EUNL_EUNL_ID_R = Convert.ToInt32(secondVolt);
                model.ESHT_ESHT_ID = Convert.ToInt32(shin);
                model.EPOL_EPOL_ID = postId;
                Db.EXP_CONVERT_VOLT.Add(model);
                Db.SaveChanges();
            }
            else
            {
                model = Db.EXP_CONVERT_VOLT.FirstOrDefault(c => c.ECNV_ID == id);
                model.EUNL_EUNL_ID = Convert.ToInt32(firstVolt);
                model.EUNL_EUNL_ID_R = Convert.ToInt32(secondVolt);
                model.ESHT_ESHT_ID = Convert.ToInt32(shin);
                Db.SaveChanges();
            }
            return Json(new { Success = true }, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [EntityAuthorize("EXP_CONVERT_VOLT > select,update")]
        public ActionResult UpdateConvertVolt([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_CONVERT_VOLT> expConvertVolt)
        {
            if (expConvertVolt != null && ModelState.IsValid)
            {
                foreach (EXP_CONVERT_VOLT row in expConvertVolt)
                {
                    var model = (from b in Db.EXP_CONVERT_VOLT where b.ECNV_ID == row.ECNV_ID select b).FirstOrDefault();
                    model.ESHT_ESHT_ID = row.ESHT_ESHT_ID;
                    model.EUNL_EUNL_ID = row.EUNL_EUNL_ID;
                    model.EUNL_EUNL_ID_R = row.EUNL_EUNL_ID_R;
                    Db.SaveChanges();
                }
            }
            return Json(expConvertVolt.ToDataSourceResult(request, ModelState));
        }

        [EntityAuthorize("EXP_SHINE_TYPE > select")]
        public ActionResult GetShin()
        {
            var query = (from b in Db.EXP_SHINE_TYPE select new { b.ESHT_ID, b.ESHT_DESC }).OrderBy(x => x.ESHT_DESC);
            List<EXP_SHINE_TYPE> lst = (from b in Db.EXP_SHINE_TYPE select b).ToList();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

    }

}
