using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_Post_ListController
    {
        //
        // GET: /Static_Post_Tel/
        public ActionResult Static_Post_Sabeghe()
        {
            return View();
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult ReadhistInstrument([DataSourceRequest] DataSourceRequest request, string instruId)
        {
            decimal id = Convert.ToInt32(instruId);
            decimal idd = Convert.ToInt32(instruId);
            var qstring = string.Empty;
            var cities = new decimal[1000];

            if (id != 0)
            {
                int I = 0;
                cities[I] = id;
                I = I + 1;
                while (id != 0)
                {
                    id = Convert.ToInt32((from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_EPIU_ID_SAVABEGH == id select b.EPIU_ID).FirstOrDefault().ToString());
                    cities[I] = id;
                    I = I + 1;
                }
                var query = from b in Db.EXP_POST_LINE_INSTRU
                            where cities.Contains(b.EPIU_ID)  // b.EPIU_ID.IsIn(new string[] { qstring })
                            //  where c.City.IsIn( new string[] { "London", "Seattle" } )
                            select new
                            {
                                b.ERHI_ERHI_ID,
                                b.HIST_DATE,
                                b.EPIU_ID,
                                b.EINS_EINS_ID,
                                b.CODE_DISP,
                                b.EUNL_EUNL_ID,
                                b.EARD_EARD_ID,
                                b.ELRD_ELRD_ID,
                                b.OUIN_TYPE,
                                b.EPIU_TYPE,
                                b.CODE_NAME,
                                b.ETEX_ETEX_ID,
                                b.PHAS_TYPE,
                                b.EPIU_EPIU_ID_SAVABEGH
                            };
                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            else
            {
                var query = from b in Db.EXP_POST_LINE_INSTRU
                            //where cities.Contains(b.EPIU_ID.ToString())  // b.EPIU_ID.IsIn(new string[] { qstring })
                            //where c.City.IsIn( new string[] { "London", "Seattle" } )
                            select new
                            {
                                b.ERHI_ERHI_ID,
                                b.HIST_DATE,
                                b.EPIU_ID,
                                b.EINS_EINS_ID,
                                b.CODE_DISP,
                                b.EUNL_EUNL_ID,
                                b.EARD_EARD_ID,
                                b.ELRD_ELRD_ID,
                                b.OUIN_TYPE,
                                b.EPIU_TYPE,
                                b.CODE_NAME,
                                b.ETEX_ETEX_ID,
                                b.PHAS_TYPE,
                                b.EPIU_EPIU_ID_SAVABEGH
                            };
                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult inst_hist_new(int? id)
        {
            ViewBag.instruId = id;
            if (id != 0)
            {
                EXP_POST_LINE_INSTRU edithistid = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b).FirstOrDefault();
                return View(edithistid);
            }
            return View();
        }

        [EntityAuthorize("EXP_RESPO_HIST > select")]
        public ActionResult Getrespon()
        {
            var query = (from b in Db.EXP_RESPO_HIST where b.ERHI_TYPE == 2 select new { b.ERHI_ID, b.ERHI_DESC }).OrderBy(x => x.ERHI_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_RESPO_HIST > select")]
        public ActionResult GetresponP()
        {
            var query = (from b in Db.EXP_RESPO_HIST where b.ERHI_TYPE == 0 select new { b.ERHI_ID, b.ERHI_DESC }).OrderBy(x => x.ERHI_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_POST_LINE > select,insert,update")]
        public ActionResult insertPOSThist(Equipment.Models.EXP_POST_LINE n, int postId)
        {
            int iddd = 0;
            int er = 0;
            if (Request.Form["ERHI1"].ToString() != "")
            {
                er = int.Parse(Request.Form["ERHI1"].ToString());
            }
            else
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "دلیل تغییر را لطفا انتخاب نمایید" }.ToJson();
            }

            try
            {
                int i = postId;
                var row = (from b in Db.EXP_POST_LINE where b.EPOL_ID == i select b).FirstOrDefault();
                Db.EXP_POST_LINE.Add(row);
                Db.SaveChanges();
                iddd = row.EPOL_ID;
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

            try
            {
                int i1 = postId;
                string ett = Request.Form["calendar1"].ToString();
                int e1r = int.Parse(Request.Form["ERHI1"].ToString());
                var row2 = (from b in Db.EXP_POST_LINE where b.EPOL_ID == iddd select b).FirstOrDefault();
                row2.EPOL_EPOL_ID = i1;
                row2.ERHI_ERHI_ID = e1r;
                row2.HIST_DATE = ett;
                Db.SaveChanges();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

            try
            {
                int i2 = postId;
                var row1 = (from b in Db.EXP_POST_LINE where b.EPOL_ID == i2 select b).FirstOrDefault();

                if (n.CODE_DISP != null)
                    row1.CODE_DISP = n.CODE_DISP;
                if (n.EPOL_NAME != null)
                    row1.EPOL_NAME = n.EPOL_NAME;
                if (n.EARD_EARD_ID != null)
                    row1.EARD_EARD_ID = n.EARD_EARD_ID;
                if (n.ELRD_ELRD_ID != null)
                    row1.ELRD_ELRD_ID = n.ELRD_ELRD_ID;
                if (n.EUNL_EUNL_ID != null)
                    row1.EUNL_EUNL_ID = n.EUNL_EUNL_ID;
                if (n.ORGA_CODE != null)
                    row1.ORGA_CODE = n.ORGA_CODE;
                if (n.INCO_TYPE != null)
                    row1.INCO_TYPE = n.INCO_TYPE;
                if (n.EPOL_STAT != null)
                    row1.EPOL_STAT = n.EPOL_STAT;

                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", row1.EPOL_NAME) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select,insert,update")]
        public ActionResult inserthist(Equipment.Models.EXP_POST_LINE_INSTRU NewItem, int instruId)
        {
            try
            {
                string ett = Request.Form["calendar"].ToString();
                int er = 0;
                if (Request.Form["ERHI"].ToString() != "")
                {
                    er = int.Parse(Request.Form["ERHI"].ToString());
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "دلیل تغییر را لطفا انتخاب نمایید" }.ToJson();
                }

                var n = NewItem;
                int i = instruId;
                var row = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == i select b).FirstOrDefault();
                NewItem = row;

                if (n.CODE_DISP != null)
                    NewItem.CODE_DISP = n.CODE_DISP;

                if (n.CODE_NAME != null)
                {
                    NewItem.CODE_NAME = n.CODE_NAME;
                }
                else
                {
                    if (n.CODE_DISP != null)
                    {
                        string name = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == NewItem.EINS_EINS_ID select b.EINS_DESC).FirstOrDefault().ToString();
                        NewItem.CODE_NAME = name + n.CODE_DISP;
                    }
                }

                if (n.EARD_EARD_ID != null)
                    NewItem.EARD_EARD_ID = n.EARD_EARD_ID;
                if (n.ELRD_ELRD_ID != null)
                    NewItem.ELRD_ELRD_ID = n.ELRD_ELRD_ID;
                if (n.EUNL_EUNL_ID != null)
                    NewItem.EUNL_EUNL_ID = n.EUNL_EUNL_ID;
                if (n.ETEX_ETEX_ID != null)
                    NewItem.ETEX_ETEX_ID = n.ETEX_ETEX_ID;

                Db.EXP_POST_LINE_INSTRU.Add(NewItem);
                Db.SaveChanges();

                int ide = Convert.ToInt32(NewItem.EPIU_ID.ToString());
                var row1 = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == i select b).FirstOrDefault();
                row1.HIST_DATE = ett;
                row1.ERHI_ERHI_ID = er;
                row1.EPIU_EPIU_ID_SAVABEGH = ide;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.CODE_NAME), CoustomData = 1 }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_RESPO_HIST > select|EXP_UNIT_LEVEL > select|EXP_AOC_RDC > select|EXP_LOCATION_RDC > select|PAY_ORGAN > select")]
        public ActionResult Static_hist_post(int? id)
        {
            ViewBag.postId = id;
            ViewData["ERHI"] = Db.EXP_RESPO_HIST.Select(c => new { c.ERHI_ID, c.ERHI_DESC });
            ViewData["EUNL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewData["EARD"] = Db.EXP_AOC_RDC.Select(c => new { c.EARD_ID, c.EARD_NAME });
            ViewData["ELRD"] = Db.EXP_LOCATION_RDC.Select(c => new { c.ELRD_ID, c.ELRD_DESC });
            ViewData["CODEO"] = Db.PAY_ORGAN.Select(c => new { c.CODE, c.ORGA_DESC }).AsEnumerable();
            return View();
        }

        [EntityAuthorize("EXP_POST_LINE>select")]
        public ActionResult Readhistpost([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = (from b in Db.EXP_POST_LINE.AsEnumerable()
                         where b.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == id
                         select new
                         {
                             b.EPOL_EPOL_ID,
                             b.ELRD_ELRD_ID,
                             b.EARD_EARD_ID,
                             b.INCO_TYPE,
                             b.HIST_DATE,
                             b.ERHI_ERHI_ID,
                             b.EPOL_STAT,
                             b.EPOL_NAME,
                             b.CODE_DISP,
                             b.ORGA_CODE,
                             b.GEOL_G_CODE,
                             b.EUNL_EUNL_ID,
                             b.EPOL_ID,
                             b.POST_TYPE
                         }).ToList();
            return Json(query.ToDataSourceResult(request));

        }

    }

}