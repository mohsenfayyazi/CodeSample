using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_LineController : DbController
    {

        // GET: /Static_Post_List_Insert/
        //[EntityAuthorize("EXP_POST_LINE > select|EXP_POST_LINE_INSTRU> select")]
        public ActionResult Static_Line_Insert(int? id)
        {
            try
            {
                LineCustomModel line = new LineCustomModel();
                if (id != 0)
                {
                    var q = from c in Db.EXP_POST_LINE
                            join b in Db.EXP_POST_LINE_INSTRU on c.EPOL_ID equals b.EPOL_EPOL_ID
                            where b.EPIU_ID == id
                            select c;

                    line.EXP_POST_LINE = q.FirstOrDefault();
                    line.EXP_POST_LINE_INSTRU = Db.EXP_POST_LINE_INSTRU.FirstOrDefault(c => c.EPIU_ID == id);
                    ViewBag.instruId = id;
                    ViewBag.lineId = line.EXP_POST_LINE.EPOL_ID;
                }
                else
                {
                    ViewBag.instruId = null;
                    ViewBag.lineId = null;
                }
                return View(line);
            }
            catch
            {
                return View();
            }
        }

        // جدید خانم بهمنی ویرایش کرده
        [EntityAuthorize("EXP_POST_LINE > select,insert,update|EXP_POST_LINE_INSTRU> select,insert,update")]
        public ActionResult AddLine(LineCustomModel model, int? lineId, int? instruId)
        {
            try
            {
                if (model.EXP_POST_LINE.EPOL_NAME == null)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "لطفا نام را وارد نماييد." }.ToJson();

                if (model.EXP_POST_LINE_INSTRU.NETL_STAT == null)
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "لطفا نوع شبکه خط را مشخص نماييد." }.ToJson();

                string EXPB_DATE = Request.Form["EXPB_DATE"] == null ? string.Empty : Request.Form["EXPB_DATE"].ToString();


                int u2 = Convert.ToInt32(lineId);
                int post = 0;
                string post2 = string.Empty;
                string post1 = (from b in Db.EXP_POST_LINE
                                where b.EPOL_ID == model.EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_INSLIN
                                select b.EPOL_NAME).FirstOrDefault().ToString();

                if (model.EXP_POST_LINE_INSTRU.LINE_TYPE == "0")
                {
                    if (Request.Form["DrpdLinepost"].ToString() != "")
                    {
                        post = int.Parse(Request.Form["DrpdLinepost"].ToString());
                        //post2 = (from b in db.EXP_POST_LINE where b.EPOL_ID == post select b.EPOL_NAME).FirstOrDefault().ToString();
                        post2 = model.EXP_POST_LINE.EPOL_NAME;
                    }
                    else
                    { post = -1; }
                }

                if (model.EXP_POST_LINE_INSTRU.LINE_TYPE == "1")
                {

                    if (Request.Form["DrpdlMajorLine"].ToString() != "")
                    {
                        //post2 = "تياف خط ";
                        post = int.Parse(Request.Form["DrpdlMajorLine"].ToString());
                        //post2 = "تياف خط " + (from b in db.EXP_POST_LINE where b.EPOL_ID == post select b.EPOL_NAME).FirstOrDefault().ToString();
                        post2 = model.EXP_POST_LINE.EPOL_NAME;
                    }
                    else
                    {
                        post = -1;
                    }
                }

                if (model.EXP_POST_LINE_INSTRU.LINE_TYPE == "2")
                {
                    post2 = "فيدر توزيع ";
                    if (Request.Form["EXP_POST_LINE_INSTRU.EPIU_EPIU_ID_RT"].ToString() != "")
                    {
                        //int idc = Convert.ToInt32(Request.Form["EXP_POST_LINE_INSTRU.EPIU_EPIU_ID_RT"].ToString());
                        //post2 = "فيدر توزيع " + (from b in db.EXP_POST_LINE_INSTRU where b.EPIU_ID == idc select b.CODE_NAME).FirstOrDefault().ToString();
                        post2 = model.EXP_POST_LINE.EPOL_NAME;
                    }
                    else
                    {
                        post = -1;
                    }
                }

                if (post == -1)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "پست مقصد يا خط تياف و يا ترانس خروجي تعريف نشده است." }.ToJson();
                }
                else
                {
                    if (model.EXP_POST_LINE.ORGA_CODE == null)                    
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اداره خط را انتخاب نماييد " }.ToJson();                    

                    if (lineId == null || lineId == 0)
                    {
                        var line = Db.EXP_POST_LINE.FirstOrDefault(c => c.CODE_DISP == model.EXP_POST_LINE.CODE_DISP);
                        if (line == null)
                        {
                            model.EXP_POST_LINE.EXPB_DATE = EXPB_DATE;
                            model.EXP_POST_LINE.EPOL_TYPE = "1";
                            model.EXP_POST_LINE.ORGA_MANA_ASTA_CODE = "7";
                            model.EXP_POST_LINE.ORGA_MANA_CODE = "6";
                            Db.EXP_POST_LINE.Add(model.EXP_POST_LINE);

                            Db.SaveChanges();

                            ViewBag.lineId = model.EXP_POST_LINE.EPOL_ID;

                            model.EXP_POST_LINE_INSTRU.CODE_DISP = model.EXP_POST_LINE.CODE_DISP;
                            model.EXP_POST_LINE_INSTRU.CODE_NAME = post2;
                            model.EXP_POST_LINE_INSTRU.EPOL_EPOL_ID = model.EXP_POST_LINE.EPOL_ID;
                            model.EXP_POST_LINE_INSTRU.EINS_EINS_ID = 1;
                            if (post != -1 && post != 0)
                            {
                                model.EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_LINE = post;
                            }
                            model.EXP_POST_LINE_INSTRU.EPIU_1MAD = Request.Form["oneMultiCircute"];
                            model.EXP_POST_LINE_INSTRU.EPIU_2MAD = Request.Form["TowerSingleCircute"];
                            model.EXP_POST_LINE_INSTRU.EPIU_4MAD = Request.Form["fourMultiCircute"];
                            model.EXP_POST_LINE_INSTRU.EPIU_6MAD = Request.Form["TowerMultiCircute"];
                            model.EXP_POST_LINE_INSTRU.CODE_NAME = model.EXP_POST_LINE.EPOL_NAME;
                            model.EXP_POST_LINE_INSTRU.EUNL_EUNL_ID = model.EXP_POST_LINE.EUNL_EUNL_ID;
                            Db.EXP_POST_LINE_INSTRU.Add(model.EXP_POST_LINE_INSTRU);
                            Db.SaveChanges();
                            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", model.EXP_POST_LINE.CODE_DISP) }.ToJson();
                        }
                        else
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خط با اين کد ديسپاچينگ قبلا ايجاد شده است." }.ToJson();
                        }
                    }
                    else
                    {
                        var row = (from b in Db.EXP_POST_LINE where b.EPOL_ID == u2 select b).FirstOrDefault();
                        row.CODE_DISP = model.EXP_POST_LINE.CODE_DISP;
                        row.ORGA_CODE = model.EXP_POST_LINE.ORGA_CODE;
                        row.EARD_EARD_ID = model.EXP_POST_LINE.EARD_EARD_ID;
                        row.EUNL_EUNL_ID = model.EXP_POST_LINE.EUNL_EUNL_ID;
                        row.EOTY_EOTY_ID = model.EXP_POST_LINE.EOTY_EOTY_ID;
                        row.EXPL_DATE = model.EXP_POST_LINE.EXPL_DATE;
                        row.EPOL_STAT = model.EXP_POST_LINE.EPOL_STAT;
                        row.ELRD_ELRD_ID = model.EXP_POST_LINE.ELRD_ELRD_ID;
                        row.LINE_LENT = model.EXP_POST_LINE.LINE_LENT;
                        row.EOCO_EOCO_ID = model.EXP_POST_LINE.EOCO_EOCO_ID;
                        row.CURE_MOJA = model.EXP_POST_LINE.CURE_MOJA;
                        row.EPOL_NAME = model.EXP_POST_LINE.EPOL_NAME;
                        row.EXPB_DATE = EXPB_DATE;
                        Db.SaveChanges();
                        EXP_POST_LINE_INSTRU row1 = new EXP_POST_LINE_INSTRU();
                        if (instruId == null || instruId == 0)
                        {
                            row1.EPOL_EPOL_ID = u2;
                        }
                        else
                        {
                            decimal iu = Convert.ToDecimal(instruId);
                            row1 = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == iu select b).FirstOrDefault();
                        }

                        row1.LINE_TYPE = model.EXP_POST_LINE_INSTRU.LINE_TYPE;
                        row1.EPOL_EPOL_ID_INSLIN = model.EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_INSLIN;
                        row1.EPIU_TYPE = model.EXP_POST_LINE_INSTRU.EPIU_TYPE;
                        row1.EINS_EINS_ID = 1;
                        row1.CODE_DISP = model.EXP_POST_LINE.CODE_DISP;
                        row1.EUNL_EUNL_ID = model.EXP_POST_LINE.EUNL_EUNL_ID;
                        if (model.EXP_POST_LINE_INSTRU.LINE_TYPE == "2")
                        {
                            row1.EPOL_EPOL_ID_LINE = null;
                            row1.EPIU_EPIU_ID_RT = model.EXP_POST_LINE_INSTRU.EPIU_EPIU_ID_RT;
                        }
                        else
                        {
                            row1.EPOL_EPOL_ID_LINE = post;
                            row1.EPIU_EPIU_ID_RT = null;
                        }

                        row1.CODE_NAME = model.EXP_POST_LINE.EPOL_NAME;
                        row1.EPIU_1MAD = Request.Form["oneMultiCircute"];
                        row1.EPIU_2MAD = Request.Form["TowerSingleCircute"];
                        row1.EPIU_4MAD = Request.Form["fourMultiCircute"];
                        row1.EPIU_6MAD = Request.Form["TowerMultiCircute"];
                        row1.TRAN_ZARF = model.EXP_POST_LINE_INSTRU.TRAN_ZARF;
                        row1.NETL_STAT = model.EXP_POST_LINE_INSTRU.NETL_STAT;

                        Db.SaveChanges();
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز شد", model.EXP_POST_LINE.CODE_DISP) }.ToJson();
                    }
                }

            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_POST_LINE > select")]
        public ActionResult GetPosts()
        {
            var query = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == null select new { b.EPOL_ID, b.EPOL_NAME }).OrderBy(x => x.EPOL_NAME);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_POST_LINE > select")]
        public ActionResult GetLines()
        {
            var query = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "1" select new { b.EPOL_ID, b.EPOL_NAME }).OrderBy(x => x.EPOL_NAME);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("PAY_ORGAN > select")]
        public ActionResult GetOrgans()
        {
            string[] array = { "1", "4", "6", "7" };
            var query = (from b in Db.PAY_ORGAN
                         where b.MANA_ASTA_CODE == "7" && b.MANA_CODE == "6" && b.CHNG_STAT == "2" && !array.Contains(b.ORGA_STAT)
                         select new { b.CODE, b.ORGA_DESC }).OrderBy(x => x.ORGA_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("BKP_GEOGH_LOC > select")]
        public ActionResult GetCity()
        {
            var query = (from b in Db.BKP_GEOGH_LOC select new { b.G_CODE, b.G_DESC }).OrderBy(x => x.G_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// نوع مالکیت
        /// </summary>
        /// <returns>لیست نوع های مالکیت</returns>
        /// 
        [EntityAuthorize("EXP_OWENER_TYPE > select")]
        public ActionResult GetOwnerType()
        {
            var query = (from b in Db.EXP_OWENER_TYPE select new { b.EOTY_ID, b.EOTY_DESC }).OrderBy(x => x.EOTY_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// مالک
        /// </summary>
        /// <param name="ownerCode">کد نوع مالکیت</param>
        /// <returns>لیست مالک ها فیلتر شده بر اساس کد نوع مالکیت</returns>
        ///  
        [EntityAuthorize("EXP_OWENER_COMPANY > select")]
        public ActionResult GetOwner(int? ownerCode)
        {
            var query = (from b in Db.EXP_OWENER_COMPANY where b.EOTY_EOTY_ID == ownerCode select new { b.EOCO_ID, b.EOCO_DESC }).OrderBy(x => x.EOCO_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_DISTRIBUTE_COMPANY > select")]
        public ActionResult GetDistributeCompany()
        {
            var query = (from b in Db.EXP_DISTRIBUTE_COMPANY select new { b.EDIC_ID, b.EDIC_DESC }).OrderBy(x => x.EDIC_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// سطح ولتاژ
        /// </summary>
        /// <returns>لیست ولتاژها</returns>
        [EntityAuthorize("EXP_UNIT_LEVEL > select")]
        public ActionResult GetUnitLevel()
        {
            var query = (from b in Db.EXP_UNIT_LEVEL select new { b.EUNL_ID, b.EUNL_DESC, b.EUNL_NUM }).OrderBy(x => x.EUNL_NUM);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// ناحیه RDC
        /// </summary>
        /// <returns>لیست ناحیه های RDC</returns>
        [EntityAuthorize("EXP_LOCATION_RDC > select")]
        public ActionResult GetLocation(int? locationCode)
        {
            var query = (from b in Db.EXP_LOCATION_RDC where b.EARD_EARD_ID == locationCode select new { b.ELRD_ID, b.ELRD_DESC }).OrderBy(x => x.ELRD_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// مرکز کنترل
        /// </summary>
        /// <returns>لیست مرکز های کنترل</returns>
        [EntityAuthorize("EXP_AOC_RDC > select")]
        public ActionResult GetAOC()
        {
            var query = (from b in Db.EXP_AOC_RDC select new { b.EARD_ID, b.EARD_NAME }).OrderBy(x => x.EARD_NAME);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("PAY_ORGAN > select|BKP_GEOGH_LOC> select|EXP_OWENER_TYPE> select|EXP_OWENER_COMPANY> select|EXP_UNIT_LEVEL > select")]
        public void LoadLineForm()
        {
            ViewData["ORGA"] = Db.PAY_ORGAN.Select(c => new { c.CODE, c.ORGA_DESC });
            ViewData["CITY"] = Db.BKP_GEOGH_LOC.Select(c => new { c.G_CODE, c.G_DESC });
            ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
            ViewData["OWNER"] = Db.EXP_OWENER_COMPANY.Select(c => new { c.EOCO_ID, c.EOCO_DESC });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
        }

        /// <summary>
        /// بی خط پست مبدا
        /// </summary>
        /// <returns>بر گرداندن ویو</returns>      
        [EntityAuthorize("EXP_CORE_BAY > select|EXP_INSTRU_BAY> select|EXP_POST_LINE_INSTRU> select")]
        public ActionResult BayLineSourcePost(int? id, int? lineId, int? instruId)
        {
            try
            {
                EXP_CORE_BAY bay = new EXP_CORE_BAY();
                ViewBag.postId = id;
                ViewBag.lineId = lineId;
                ViewBag.instruId = instruId;
                int idBay = 0;
                int idline = Convert.ToInt32(lineId);
                int idlineid = Convert.ToInt32(instruId);

                var q = (from b in Db.EXP_CORE_BAY
                         join i in Db.EXP_INSTRU_BAY on b.ECBA_ID equals i.ECBA_ECBA_ID
                         where b.EPIU_EPIU_ID == idlineid && b.ETBY_ETBY_ID == 4
                         select new { i.EPIU_EPIU_ID, b.ECBA_ID });

                var qu = from b in q join p in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals p.EPIU_ID where p.EPOL_EPOL_ID == id && p.EPIU_EPIU_ID_SAVABEGH != null select new { b.ECBA_ID };

                foreach (var i in qu)
                {
                    ViewBag.bayId = i.ECBA_ID;
                    ViewBag.keybays = Convert.ToInt32(i.ECBA_ID);
                    idBay = Convert.ToInt32(i.ECBA_ID);
                }
                if (idBay == 0)
                {
                    ViewBag.bayId = null;
                    return View();
                }
                else
                {
                    bay = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == idBay select b).FirstOrDefault();
                    IEnumerable<decimal> keys = from b in Db.EXP_INSTRU_BAY where b.ECBA_ECBA_ID == idBay select b.EPIU_EPIU_ID.Value;
                    ViewBag.keys = keys;
                    return View(bay);
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        private string backtypephaz(string i)
        {
            if (i == "0") return " فاز R";
            else
                if (i == "1") return "فاز S";
                else if (i == "2") return "فاز T";
                else return " ";
        }

        public ActionResult getinstlineinst(short? postid, int? inst, int? lineId)
        {
            var instru = (from J in Db.EXP_POST_LINE_INSTRU where J.EPOL_EPOL_ID == lineId && J.EPOL_EPOL_ID_INSLIN != null && J.EPOL_EPOL_ID_LINE != null select J.EPIU_ID).FirstOrDefault();
            var query1 = (from b in Db.EXP_CORE_BAY
                          join c in Db.EXP_INSTRU_BAY on b.ECBA_ID equals c.ECBA_ECBA_ID
                          where b.EPIU_EPIU_ID == instru && b.ETBY_ETBY_ID == 4 && b.ERHI_ERHI_ID == null
                          select c.EPIU_EPIU_ID);

            var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                         join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID
                         where (b.EPOL_EPOL_ID == postid) && b.EINS_EINS_ID == inst && !query1.Contains(b.EPIU_ID)
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME,
                             b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                             b.PHAS_STAT,
                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                             types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)
                         };
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// ذخیره بی خط پست مبدا
        /// </summary>
        /// <param name="bay">گرفتن شی بی برای ذخیره</param>
        /// <returns>برگرداندن پیام</returns>
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_CORE_BAY>select,insert,update|EXP_INSTRU_BAY>select,delete,insert,update")]
        public ActionResult AddLineCoreBay(EXP_CORE_BAY bay)
        {
            try
            {
                var instrumentBay = new EXP_INSTRU_BAY();
                string[] instrumentId = Request.Form["SelectedInstru"].ToString().Split(',');
                int lineId = Convert.ToInt32(Session["Line_Id"]);
                var instru = (from J in Db.EXP_POST_LINE_INSTRU where J.EPOL_EPOL_ID == lineId && J.EPOL_EPOL_ID_INSLIN != null && J.EPOL_EPOL_ID_LINE != null select J.EPIU_ID).FirstOrDefault();

                if (Session["Line_SourcePost_Bay_Id"] == null)
                {
                    //عدد 20 در شرح بی قرار می گیرد که به معنی خط می باشد
                    bay.ETBY_ETBY_ID = 4;
                    bay.EPIU_EPIU_ID = instru;
                    Db.EXP_CORE_BAY.Add(bay);
                    Db.SaveChanges();
                    Session["Line_SourcePost_Bay_Id"] = bay.ECBA_ID;
                }
                else
                {
                    int id = Convert.ToInt32(Session["Line_SourcePost_Bay_Id"]);
                    bay.EPIU_EPIU_ID = instru;//Convert.ToInt32(Session["Post_Source_Instru_Id"]);
                    bay.ECBA_ID = id;
                    bay.ETBY_ETBY_ID = 4;
                    Db.Entry(bay).State = EntityState.Modified;
                    Db.SaveChanges();
                    //پاک کردن تجهیزات هسته بی

                    var q = (from b in Db.EXP_INSTRU_BAY where b.ECBA_ECBA_ID == bay.ECBA_ID select b);
                    foreach (var row in q)
                    {
                        var myobj = Db.EXP_INSTRU_BAY.FirstOrDefault(b => b.ECBA_ECBA_ID == bay.ECBA_ID);
                        Db.EXP_INSTRU_BAY.Remove(myobj);
                        Db.SaveChanges();
                    }
                }
                //ایجاد و ذخیره تجهیزات بی
                foreach (var item in instrumentId)
                {
                    instrumentBay.ECBA_ECBA_ID = bay.ECBA_ID;
                    //مقدار 0 به معنی ایجاد می باشد
                    instrumentBay.EINB_TYPE = "0";
                    instrumentBay.EPIU_EPIU_ID = Convert.ToInt32(item);
                    Db.EXP_INSTRU_BAY.Add(instrumentBay);
                    Db.SaveChanges();
                }
                return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// تمام تجهیزات
        /// </summary>
        /// <returns>برگرداندن تجهیزات خط</returns>
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult GetSourceInstrument()
        {
            int postId = Convert.ToInt32(Session["PostIdLine"]);
            var query = (from b in Db.EXP_POST_LINE_INSTRU
                         where b.EPOL_EPOL_ID == postId && b.EPIU_EPIU_ID_SAVABEGH != null
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME
                         }).OrderBy(x => x.CODE_NAME);
            //int count = query.Count();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// سر خط
        /// /// </summary>
        /// <returns>بر گرداندن ویو</returns>      
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_CORE_BAY>select|EXP_INSTRU_BAY>select")]
        public ActionResult BayLineInstrumentLineSourcePost(int? id)
        {
            try
            {
                EXP_CORE_BAY bay = new EXP_CORE_BAY();
                Session["PostIdLine"] = id;
                int idBay = 0;
                int idline = Convert.ToInt32(Session["Line_Id"]);
                int idlineid = Convert.ToInt32(Session["Post_Source_Instru_Id"]);

                var q = (from b in Db.EXP_CORE_BAY
                         join i in Db.EXP_INSTRU_BAY on b.ECBA_ID equals i.ECBA_ECBA_ID
                         where b.EPIU_EPIU_ID == idlineid && b.ETBY_ETBY_ID == 28
                         select new { i.EPIU_EPIU_ID, b.ECBA_ID });

                var qu = from b in q join p in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals p.EPIU_ID where p.EPOL_EPOL_ID == id && p.EPIU_EPIU_ID_SAVABEGH != null select new { b.ECBA_ID };

                foreach (var i in qu)
                {
                    Session["Line_SourcePost_Bay_Id"] = i.ECBA_ID;
                    ViewBag.keybays1 = Convert.ToInt32(Session["Line_SourcePost_Bay_Id"]);
                    idBay = Convert.ToInt32(Session["Line_SourcePost_Bay_Id"]);
                }

                if (idBay == 0)
                {
                    Session["Line_SourcePost_Bay_Id"] = null;
                    return View();
                }
                else
                {
                    bay = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == idBay select b).FirstOrDefault();
                    IEnumerable<decimal> keys = from b in Db.EXP_INSTRU_BAY where b.ECBA_ECBA_ID == idBay select b.EPIU_EPIU_ID.Value;
                    ViewBag.keys1 = keys;
                    return View(bay);
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// ذخیره بی خط پست مبدا
        /// </summary>
        /// <param name="bay">گرفتن شی بی برای ذخیره</param>
        /// <returns>برگرداندن پیام</returns>
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_CORE_BAY>select,insert,update|EXP_INSTRU_BAY>select,delete,insert,update")]
        public ActionResult AddLineinstrucorebay(EXP_CORE_BAY bay)
        {
            try
            {
                var instrumentBay = new EXP_INSTRU_BAY();
                string[] instrumentId = Request.Form["mltsBayInstrument"].ToString().Split(',');
                int lineId = Convert.ToInt32(Session["Line_Id"]);
                var instru = (from J in Db.EXP_POST_LINE_INSTRU where J.EPOL_EPOL_ID == lineId && J.EPOL_EPOL_ID_INSLIN != null && J.EPOL_EPOL_ID_LINE != null select J.EPIU_ID).FirstOrDefault();

                if (Session["Line_SourcePost_Bay_Id"] == null)
                {
                    //عدد 20 در شرح بی قرار می گیرد که به معنی خط می باشد
                    bay.ETBY_ETBY_ID = 28;
                    bay.EPIU_EPIU_ID = instru;
                    Db.EXP_CORE_BAY.Add(bay);
                    Db.SaveChanges();
                    Session["Line_SourcePost_Bay_Id"] = bay.ECBA_ID;
                }
                else
                {
                    int id = Convert.ToInt32(Session["Line_SourcePost_Bay_Id"]);
                    bay.EPIU_EPIU_ID = instru;//Convert.ToInt32(Session["Post_Source_Instru_Id"]);
                    bay.ECBA_ID = id;
                    bay.ETBY_ETBY_ID = 28;
                    Db.Entry(bay).State = EntityState.Modified;
                    Db.SaveChanges();
                    //پاک کردن تجهیزات هسته بی

                    var q = (from b in Db.EXP_INSTRU_BAY where b.ECBA_ECBA_ID == bay.ECBA_ID select b);
                    foreach (var row in q)
                    {
                        var myobj = Db.EXP_INSTRU_BAY.FirstOrDefault(b => b.ECBA_ECBA_ID == bay.ECBA_ID);
                        Db.EXP_INSTRU_BAY.Remove(myobj);
                        Db.SaveChanges();
                    }
                }
                //ایجاد و ذخیره تجهیزات بی
                foreach (var item in instrumentId)
                {
                    instrumentBay.ECBA_ECBA_ID = bay.ECBA_ID;
                    //مقدار 0 به معنی ایجاد می باشد
                    instrumentBay.EINB_TYPE = "0";
                    instrumentBay.EPIU_EPIU_ID = Convert.ToInt32(item);
                    Db.EXP_INSTRU_BAY.Add(instrumentBay);
                    Db.SaveChanges();
                }
                return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

    }

}
