using Asr.Text;
using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_Post_ListController
    {
        //
        // GET: /Static_Post_Instrument/       
        public void LoadInstrumentGrid(int? idd)
        {
            //int? idd = Convert.ToInt32(Session["Post_Instrument_Id"].ToString());
            var dataList = Db.EXP_POST_LINE_INSTRU.Where(p => p.EPOL_EPOL_ID == idd || p.EPOL_EPOL_ID_LINE == idd || p.EPOL_EPOL_ID_INSLIN == idd).ToList();
            dataList.Add(new EXP_POST_LINE_INSTRU { EPIU_ID = 0, CODE_NAME = "نامشخص" });
            ViewData["epui"] = dataList.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewData["EARD"] = Db.EXP_AOC_RDC.Select(c => new { c.EARD_ID, c.EARD_NAME });
            ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { ETEX_ID = c.ETEX_ID, ETEX_DESC = c.ETEX_DESC });
            ViewBag.postid = 0;
            ViewBag.postinstid = 0;
            ViewBag.postline = 0;
            ViewBag.postId = idd;
        }

        private string backtypephaz(string i)
        {
            if (i == "0") return " فاز R";
            else
                if (i == "1") return "فاز S";
                else if (i == "2") return "فاز T";
                else return "";
        }

        public ActionResult getinstlineinst(short? postid, int? inst)
        {
            var RetVal = (from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                          join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID
                          where (b.EPOL_EPOL_ID == postid) && b.EINS_EINS_ID == inst
                          select new
                          {
                              b.EPIU_ID,
                              b.CODE_NAME,
                              b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                              b.PHAS_STAT,
                              // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                              types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)
                          }).OrderBy(x => x.CODE_NAME);

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        // ***************************** New Insert For LOV *****************************

        //[AcceptVerbs(HttpVerbs.Post)]
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_POST_LINE > select")]
        public ActionResult getinstlineinst_multi(int? id)
        {
            //string[] array = { "1", "2", "3", "4", "281" };
            int?[] array = { 1, 2, 3, 4, 281 };
            //int id = Convert.ToInt32(Session["Post_Instrument_Id"]);            
            var RetVal = from b in Db.EXP_POST_LINE_INSTRU//.AsEnumerable()
                         join p in Db.EXP_POST_LINE//.AsEnumerable() 
                         on b.EPOL_EPOL_ID equals p.EPOL_ID
                         where (b.EPOL_EPOL_ID == id) && !array.Contains(b.EINS_EINS_ID) /*&& b.EINS_EINS_ID == inst*/
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME
                             //b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                             //b.PHAS_STAT,
                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                             // types = b.CODE_NAME// + " " + backtypephaz(b.PHAS_STAT)
                         };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_POST_LINE > select|EXP_INSTRU_BAY > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult getinstlineinst_grid([DataSourceRequest] DataSourceRequest request, string filterInput, int? id, string bayId)
        {
            int?[] array = { 1, 2, 3, 4, 281 };

            if (!string.IsNullOrEmpty(bayId) || bayId != "0")
            {
                int idd = Convert.ToInt32(bayId);
                var q = (from b in Db.EXP_INSTRU_BAY where b.ECBA_ECBA_ID == idd select b.EPIU_EPIU_ID);

                bool filterDisable = string.IsNullOrEmpty(filterInput);
                string filter = string.IsNullOrEmpty(filterInput.ToUpper()) ? "" : filterInput.ToUpper().ToArabicUtf8();

                var RetVal = from b in Db.EXP_POST_LINE_INSTRU
                             join p in Db.EXP_POST_LINE
                             on b.EPOL_EPOL_ID equals p.EPOL_ID
                             // where (b.EPOL_EPOL_ID == id)/* && b.EINS_EINS_ID == inst*/
                             where (b.CODE_NAME.ToUpper().Contains(filter) || filterDisable) && (b.EPOL_EPOL_ID == id) && !array.Contains(b.EINS_EINS_ID)
                                 // && !s.Contains(b.EPIU_ID)
                                    && !q.Contains(b.EPIU_ID)
                             select new
                             {
                                 b.EPIU_ID,
                                 b.CODE_NAME,
                                 b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                 b.PHAS_STAT
                                 // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                 //types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)
                             };

                return Json(RetVal.ToList().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            else
            {
                bool filterDisable = string.IsNullOrEmpty(filterInput);
                string filter = string.IsNullOrEmpty(filterInput.ToUpper()) ? "" : filterInput.ToUpper().ToArabicUtf8();

                var RetVal = from b in Db.EXP_POST_LINE_INSTRU
                             join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID
                             // where (b.EPOL_EPOL_ID == id)/* && b.EINS_EINS_ID == inst*/
                             where (b.CODE_NAME.ToUpper().Contains(filter) || filterDisable) && (b.EPOL_EPOL_ID == id) && !array.Contains(b.EINS_EINS_ID)
                             // && !s.Contains(b.EPIU_ID)                         
                             select new
                             {
                                 b.EPIU_ID,
                                 b.CODE_NAME,
                                 b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                 b.PHAS_STAT
                                 // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                 //types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)
                             };

                return Json(RetVal.ToList().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
        }

        // ***************************** End LOV *****************************

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_bay(int? inst, int? instType)
        {
            if (inst == 0)
            {
                var query = (from i in Db.EXP_INSTRUMENT
                             where (i.ETYI_ETYI_ID == 1 || i.ETYI_ETYI_ID == 181) && i.EINS_EINS_ID != null
                             select new { i.EINS_ID, i.EINS_DESC }).Distinct().OrderBy(x => x.EINS_DESC);
                return Json(query, JsonRequestBehavior.AllowGet);
            }
            else if (inst == 1)
            {
                var query = (from i in Db.EXP_INSTRUMENT
                             where (i.ETYI_ETYI_ID == 184) && i.EINS_EINS_ID != null
                             select new { i.EINS_ID, i.EINS_DESC }).Distinct().OrderBy(x => x.EINS_DESC);
                return Json(query, JsonRequestBehavior.AllowGet);
            }
            else if (inst == 2)
            {
                if (instType.HasValue)
                {
                    var query = (from i in Db.EXP_INSTRUMENT
                                 where (i.ETYI_ETYI_ID == 185) && i.EINS_EINS_ID != null && i.EINS_EINS_ID_RRE == instType
                                 select new { i.EINS_ID, i.EINS_DESC }).Distinct().OrderBy(x => x.EINS_DESC);
                    return Json(query, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var query = (from i in Db.EXP_INSTRUMENT
                                 where (i.ETYI_ETYI_ID == 185) && i.EINS_EINS_ID != null
                                 select new { i.EINS_ID, i.EINS_DESC }).Distinct().OrderBy(x => x.EINS_DESC);
                    return Json(query, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                var query = (from i in Db.EXP_INSTRUMENT
                             where i.EINS_EINS_ID == inst && i.EINS_EINS_ID != null
                             select new { i.EINS_ID, i.EINS_DESC }).Distinct().OrderBy(x => x.EINS_DESC);
                return Json(query, JsonRequestBehavior.AllowGet);
            }
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        public ActionResult GetAllInstru(int? id)
        {
            //int?[] array = { 1, 2, 4, 7, 10, 281 };
            int?[] array = { 1, 2, 3, 4, 7, 9, 10, 11, 12, 13, 23, 24, 259, 281 };
            var query = (from b in Db.EXP_POST_LINE_INSTRU
                         //join p in db.EXP_INSTRUMENT on b.EINS_EINS_ID equals p.EINS_ID
                         //where b.EPOL_EPOL_ID == id && p.EINS_EINS_ID != null && b.EPIU_EPIU_ID_SAVABEGH == null
                         where (b.EPOL_EPOL_ID == id || b.EPOL_EPOL_ID_LINE == id || b.EPOL_EPOL_ID_INSLIN == id)
                                && array.Contains(b.EINS_EINS_ID) && b.EPIU_EPIU_ID_SAVABEGH == null
                         orderby /*b.EINS_EINS_ID,*/ b.CODE_NAME
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME
                             //b.PHAS_TYPE,
                             //b.PHAS_STAT,
                             //cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC
                         }).OrderBy(x => x.CODE_NAME);
            //int count = query.Count();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult GetGroupInstru()
        {
            var query = (from b in Db.EXP_INSTRUMENT where b.EINS_ID != 1 && b.EINS_EINS_ID != null orderby b.EINS_DESC select new { b.EINS_ID, b.EINS_DESC }).ToList().OrderBy(x => x.EINS_DESC);
            int count = query.Count();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_TYPE_EQUIP > select")]
        public ActionResult GetTip()
        {
            var query = (from b in Db.EXP_TYPE_EQUIP where b.ETEX_TYPE == "1" select new { b.ETEX_ID, b.ETEX_DESC }).OrderBy(x => x.ETEX_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_UNIT_LEVEL > select|EXP_AOC_RDC > select|EXP_INSTRUMENT > select|EXP_TYPE_EQUIP > select")]
        public ActionResult Static_Post_Instrumnet(int? id)
        {
            //Session["Post_Instrument_Id"] = id;
            ViewBag.postId = id;
            LoadInstrumentGrid(id);
            using (Asr.Security.AsrMembershipProvider mp = new Asr.Security.AsrMembershipProvider(User.Identity.Name))
            {
                ViewBag.deleteGridButton = mp.CheckPermission("EXP_DELETEPOSTINSTRU_FRM_GRIDBTN"); // دکمه حذف تجهيزات پست در فرم تجهيزات مربوط به پست ها
                ViewBag.editGridButton = mp.CheckPermission("EXP_EDITPOSTINSTRU_FRM_GRIDBTN"); // دکمه ویرایش تجهيزات پست در فرم تجهيزات مربوط به پست ها
                ViewBag.addGridButton = mp.CheckPermission("EXP_ADDPOSTINSTRU_FRM_GRIDBTN"); // دکمه اضافه کردن تجهيزات پست در فرم تجهيزات مربوط به پست ها
            }
            return View("Static_Post_Instrumnet");
        }

        [HttpPost]
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadInstrument([DataSourceRequest] DataSourceRequest request, int? parentId, string fd, string postId)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper().ToArabicUtf8();
            int id = 0;

            if (!string.IsNullOrEmpty(postId) && postId != "0")
                id = Convert.ToInt32(postId);

            foreach (var filterGrid in request.Filters)
            {
                var descriptor = filterGrid as FilterDescriptor;
                if (descriptor != null)
                {
                    string fieldName = descriptor.Member;
                    switch (fieldName)
                    {
                        case "EPIU_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EINS_EINS_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EUNL_EUNL_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EARD_EARD_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "ETEX_ETEX_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EPIU_EPIU_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        default:
                            descriptor.MemberType = typeof(string);
                            break;
                    }
                }
                else if (filterGrid is CompositeFilterDescriptor)
                {
                    ModifyFilters(((CompositeFilterDescriptor)filterGrid).FilterDescriptors);
                }
            }

            if (parentId != null)
            {
                using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                {

                    var RetVal = conn.Query(@"select distinct INSTRU.BAY_STAT, POST_INSTRU.EPIU_ID, POST_INSTRU.EINS_EINS_ID, POST_INSTRU.CODE_DISP, POST_INSTRU.EUNL_EUNL_ID,
                                                     POST_INSTRU.EARD_EARD_ID, POST_INSTRU.OUIN_TYPE, POST_INSTRU.EPIU_TYPE, POST_INSTRU.CODE_NAME, POST_INSTRU.ETEX_ETEX_ID, 
                                                     decode(nvl(ENTI_VALU,0),0,'ندارد','دارد') hasAttach, POST_INSTRU.PHAS_TYPE, POST_INSTRU.PHAS_STAT, POST_INSTRU.EPIU_EPIU_ID
                                              from EXP_POST_LINE_INSTRU POST_INSTRU, EXP_INSTRUMENT INSTRU, SCN_ATTACHINTER
                                              where POST_INSTRU.EINS_EINS_ID = INSTRU.EINS_ID(+)
                                              AND ENTI_KEY(+) = 'EPIU_ID' and ENTI_NAME(+) = 'EXP_POST_LINE_INSTRU'
                                              AND POST_INSTRU.EPIU_ID = SCN_ATTACHINTER.ENTI_VALU(+)
                                              and POST_INSTRU.HIST_DATE is null                                              
                                              and POST_INSTRU.EPOL_EPOL_ID = :param1 
                                              and POST_INSTRU.EPIU_EPIU_ID = : param2
                                              and (upper(CODE_NAME) like '%'|| :param3 ||'%' or :param3 is null)
                                              order by POST_INSTRU.EPIU_ID asc", id, parentId, filter, filter)
                                 .Select(b => new
                                 {
                                     b.BAY_STAT,
                                     EPIU_ID = Convert.ToDecimal(b.EPIU_ID),
                                     EINS_EINS_ID = Convert.ToDecimal(b.EINS_EINS_ID),
                                     b.CODE_DISP,
                                     EUNL_EUNL_ID = Convert.ToDecimal(b.EUNL_EUNL_ID),
                                     EARD_EARD_ID = Convert.ToDecimal(b.EARD_EARD_ID),
                                     b.OUIN_TYPE,
                                     b.EPIU_TYPE,
                                     b.CODE_NAME,
                                     ETEX_ETEX_ID = Convert.ToDecimal(b.ETEX_ETEX_ID),
                                     b.PHAS_TYPE,
                                     b.hasAttach,
                                     b.PHAS_STAT,
                                     EPIU_EPIU_ID = Convert.ToDecimal(b.EPIU_EPIU_ID)
                                 }).ToList();

                    return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }

            }
            else
            {
                using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                {

                    var RetVal = conn.Query(@"select distinct POST_INSTRU.EPIU_ID, POST_INSTRU.EINS_EINS_ID,POST_INSTRU.CODE_DISP, POST_INSTRU.EUNL_EUNL_ID, POST_INSTRU.EARD_EARD_ID,
                                                     POST_INSTRU.OUIN_TYPE, POST_INSTRU.EPIU_TYPE, POST_INSTRU.CODE_NAME, POST_INSTRU.ETEX_ETEX_ID, POST_INSTRU.PHAS_TYPE,
                                                     POST_INSTRU.PHAS_STAT, nvl(EPIU_EPIU_ID,0) EPIU_EPIU_ID, decode(nvl(ENTI_VALU,0),0,'ندارد','دارد') hasAttach
                                              from EXP_POST_LINE_INSTRU POST_INSTRU, EXP_INSTRUMENT INSTRU, SCN_ATTACHINTER
                                              where POST_INSTRU.EINS_EINS_ID = INSTRU.EINS_ID(+)
                                              AND ENTI_KEY(+) = 'EPIU_ID' and ENTI_NAME(+) = 'EXP_POST_LINE_INSTRU'
                                              AND POST_INSTRU.EPIU_ID = SCN_ATTACHINTER.ENTI_VALU(+)
                                              and POST_INSTRU.HIST_DATE is null
                                              AND POST_INSTRU.EPOL_EPOL_ID = :param1
                                              and (upper(CODE_NAME) like '%'|| :param2 ||'%' or :param2 is null)
                                              order by POST_INSTRU.EPIU_ID asc", id, filter, filter)
                                 .Select(b => new
                                 {
                                     EPIU_ID = Convert.ToDecimal(b.EPIU_ID),
                                     EINS_EINS_ID = Convert.ToDecimal(b.EINS_EINS_ID),
                                     b.CODE_DISP,
                                     EUNL_EUNL_ID = Convert.ToDecimal(b.EUNL_EUNL_ID),
                                     EARD_EARD_ID = Convert.ToDecimal(b.EARD_EARD_ID),
                                     b.OUIN_TYPE,
                                     b.EPIU_TYPE,
                                     b.CODE_NAME,
                                     ETEX_ETEX_ID = Convert.ToDecimal(b.ETEX_ETEX_ID),
                                     b.PHAS_TYPE,
                                     b.hasAttach,
                                     b.PHAS_STAT,
                                     EPIU_EPIU_ID = Convert.ToDecimal(b.EPIU_EPIU_ID)
                                 }).ToList();

                    return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }
            }
        }

        [HttpPost]
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadInstrumentModal([DataSourceRequest] DataSourceRequest request, string fdModal, int? id)
        {
            bool filterDisable = string.IsNullOrEmpty(fdModal);
            string filter = string.IsNullOrEmpty(fdModal.ToUpper()) ? "" : fdModal.ToUpper().ToArabicUtf8();
            int?[] array = { 1, 2, 4, 7, 10, 281 };

            var query = Db.EXP_POST_LINE_INSTRU.Where(b =>
                         (b.EPOL_EPOL_ID == id || b.EPOL_EPOL_ID_LINE == id || b.EPOL_EPOL_ID_INSLIN == id)
                         && array.Contains(b.EINS_EINS_ID) && b.EPIU_EPIU_ID_SAVABEGH == null
                         && (b.CODE_NAME.ToUpper().Contains(filter) || filterDisable))
                         .Select(b => new
                         {
                             b.EPIU_ID,
                             b.EINS_EINS_ID,
                             b.CODE_NAME,
                             b.CODE_DISP,
                             b.PHAS_TYPE,
                             b.PHAS_STAT
                         });

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select,insert,update")]
        public ActionResult AddInstrument(EXP_POST_LINE_INSTRU pl, int? epiu, int postId) //int? parentId, int? id, int groupInstru, int unitLevel, string ouIn, string instruName, string dispCode, int aoc, string instruState, int tip, string phas, string doc, string location)
        {
            try
            {
                decimal? instruId = Request.Form["epiuNew"] != "" ? Convert.ToDecimal(Request.Form["epiuNew"]) : Convert.ToDecimal(null);

                string EXPT_DATE = string.Empty;
                string BAPT_DATE = string.Empty;
                string checkDateRow = Request.Form["checkDateRow"].ToString();
                if (!string.IsNullOrEmpty(checkDateRow) && checkDateRow == "1")
                {
                    EXPT_DATE = Request.Form["EXPT_DATE"].ToString();
                    BAPT_DATE = Request.Form["BAPT_DATE"] == null ? string.Empty : Request.Form["BAPT_DATE"].ToString();
                }
                else
                {
                    EXPT_DATE = "";
                    BAPT_DATE = "";
                }
                

                // *********** برای نامگذاری صحیح تجهیزات **********
                int?[] array = { 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 23, 24, 30, 259, 62, 281, 282 };
                string insttext = string.Empty;
                string instname = string.Empty;
                if (array.Contains(pl.EINS_EINS_ID))
                {
                    insttext = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == pl.EINS_EINS_ID select b.EINS_DESC).FirstOrDefault().ToString().Trim();
                }
                else
                {
                    insttext = pl.CODE_NAME;
                }
                //****************************************************

                EXP_POST_LINE_INSTRU model = new EXP_POST_LINE_INSTRU();

                if (epiu.HasValue && epiu.Value != 0)
                {
                    int id = Convert.ToInt32(epiu);
                    model = Db.EXP_POST_LINE_INSTRU.FirstOrDefault(c => c.EPIU_ID == id);

                    string phasType = pl.PHAS_TYPE;
                    string phas = pl.PHAS_STAT;
                    if ((phas != null || phas != "") && phasType == "1")
                    {
                        switch (phas)
                        {
                            case "0":
                                phas = "فاز R";
                                break;
                            case "1":
                                phas = "فاز S";
                                break;
                            case "2":
                                phas = "فاز T";
                                break;
                            case "3":
                                phas = "SPEAR";
                                break;
                            default:
                                phas = "";
                                break;
                        }
                        instname = insttext + " - " + pl.CODE_DISP + " - " + phas;
                    }
                    else if ((phas == null || phas == "") && phasType == "0")
                    {
                        instname = insttext + " - " + pl.CODE_DISP;
                    }

                    model.CODE_NAME = instname;
                    model.EINS_EINS_ID = pl.EINS_EINS_ID;
                    model.EUNL_EUNL_ID = pl.EUNL_EUNL_ID;
                    model.OUIN_TYPE = pl.OUIN_TYPE;
                    model.CODE_DISP = pl.CODE_DISP;
                    model.SERN_NO = pl.SERN_NO;
                    model.SHAG_BATT = pl.SHAG_BATT;
                    model.EARD_EARD_ID = pl.EARD_EARD_ID;
                    model.ELRD_ELRD_ID = pl.ELRD_ELRD_ID;
                    model.EPIU_TYPE = pl.EPIU_TYPE;
                    model.ETEX_ETEX_ID = pl.ETEX_ETEX_ID;
                    model.PHAS_TYPE = pl.PHAS_TYPE;
                    model.DOC_STAT = pl.DOC_STAT;
                    model.INST_LOCA = pl.INST_LOCA;
                    model.PHAS_STAT = pl.PHAS_STAT;
                    model.EPIU_EPIU_ID = instruId != 0 ? instruId : null;
                    model.TRAN_ZARF = pl.TRAN_ZARF;
                    model.TRAN_TSIM = pl.TRAN_TSIM;
                    model.EUNL_EUNL_ID_R1 = pl.EUNL_EUNL_ID_R1;
                    model.EUNL_EUNL_ID_H2 = pl.EUNL_EUNL_ID_H2;
                    model.INCO_TYPE = pl.INCO_TYPE;
                    model.BUILD_YEAR = pl.BUILD_YEAR;
                    model.EXPT_DATE = EXPT_DATE;
                    model.BAPT_DATE = BAPT_DATE;
                    model.DGSL_CODE = pl.DGSL_CODE;
                    model.DGSL_LOAC = pl.DGSL_LOAC;
                    Db.SaveChanges();
                }
                else
                {
                    //exist               
                    var row = (from b in Db.EXP_POST_LINE_INSTRU where (b.CODE_DISP == pl.CODE_DISP && b.EPOL_EPOL_ID == postId) && (b.EPIU_TYPE != "0" || b.EPIU_TYPE != "1") select b).ToList();
                    if (row.Count == 1)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ".قبلا ثبت شده است" }.ToJson();
                    }
                    else if (row.Count == 0)
                    {
                        model.EINS_EINS_ID = pl.EINS_EINS_ID;
                        model.EUNL_EUNL_ID = pl.EUNL_EUNL_ID;
                        model.OUIN_TYPE = pl.OUIN_TYPE;
                        model.CODE_NAME = pl.PHAS_TYPE == "1" ? insttext + " - " + pl.CODE_DISP + " - " + "فاز R" : insttext + " - " + pl.CODE_DISP;
                        model.CODE_DISP = pl.CODE_DISP;
                        model.SERN_NO = pl.SERN_NO;
                        model.ELRD_ELRD_ID = pl.ELRD_ELRD_ID;
                        model.EARD_EARD_ID = pl.EARD_EARD_ID;
                        model.EPIU_TYPE = pl.EPIU_TYPE;
                        model.SHAG_BATT = pl.SHAG_BATT;
                        model.ETEX_ETEX_ID = pl.ETEX_ETEX_ID;
                        model.PHAS_TYPE = pl.PHAS_TYPE;
                        model.DOC_STAT = pl.DOC_STAT;
                        model.INST_LOCA = pl.INST_LOCA;
                        model.EPIU_EPIU_ID = instruId != 0 ? instruId : null;
                        model.TRAN_ZARF = pl.TRAN_ZARF;
                        model.TRAN_TSIM = pl.TRAN_TSIM;
                        model.EUNL_EUNL_ID_R1 = pl.EUNL_EUNL_ID_R1;
                        model.EUNL_EUNL_ID_H2 = pl.EUNL_EUNL_ID_H2;
                        model.INCO_TYPE = pl.INCO_TYPE;
                        model.BUILD_YEAR = pl.BUILD_YEAR;
                        model.EXPT_DATE = EXPT_DATE;
                        model.BAPT_DATE = BAPT_DATE;
                        model.DGSL_CODE = pl.DGSL_CODE;
                        model.DGSL_LOAC = pl.DGSL_LOAC;

                        if (pl.PHAS_TYPE == "1")
                        {
                            model.PHAS_STAT = "0";
                        }
                        else
                        {
                            model.PHAS_STAT = pl.PHAS_STAT;
                        }

                        model.EPOL_EPOL_ID = postId;

                        Db.EXP_POST_LINE_INSTRU.Add(model);
                        Db.SaveChanges();

                        if (pl.PHAS_TYPE == "1")
                        {
                            //crate A
                            model.EPIU_TYPE = pl.EPIU_TYPE;
                            model.ETEX_ETEX_ID = pl.ETEX_ETEX_ID;
                            model.CODE_NAME = insttext + " - " + pl.CODE_DISP + " - " + "فاز S";
                            model.PHAS_STAT = "1";
                            Db.EXP_POST_LINE_INSTRU.Add(model);
                            Db.SaveChanges();

                            //create B
                            model.EPIU_TYPE = pl.EPIU_TYPE;
                            model.ETEX_ETEX_ID = pl.ETEX_ETEX_ID;
                            model.CODE_NAME = insttext + " - " + pl.CODE_DISP + " - " + "فاز T";
                            model.PHAS_STAT = "2";
                            Db.EXP_POST_LINE_INSTRU.Add(model);
                            Db.SaveChanges();
                            string SPEAR = Request.Form["SPEAR"];
                            if (SPEAR == "1")
                            {
                                model.EPIU_TYPE = pl.EPIU_TYPE;
                                model.ETEX_ETEX_ID = pl.ETEX_ETEX_ID;
                                model.CODE_NAME = insttext + " - " + pl.CODE_DISP + " - " + "SPEAR";
                                model.PHAS_STAT = "3";
                                Db.EXP_POST_LINE_INSTRU.Add(model);
                                Db.SaveChanges();
                            }
                        }
                    }
                }

                return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد.", CoustomData = model.EPIU_ID }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select,delete")]
        public ActionResult RemoveInstrument(EXP_POST_LINE_INSTRU model)
        {
            var myobj = Db.EXP_POST_LINE_INSTRU.FirstOrDefault(b => b.EPIU_ID == model.EPIU_ID);
            Db.EXP_POST_LINE_INSTRU.Remove(myobj);
            Db.SaveChanges();
            LoadInstrumentGrid(null);
            return View("Static_Post_Instrumnet");
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select,update")]
        public ActionResult UpdateInstrument([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<EXP_POST_LINE_INSTRU> expPostLineInstru)
        {
            if (expPostLineInstru != null && ModelState.IsValid)
            {
                foreach (EXP_POST_LINE_INSTRU row in expPostLineInstru)
                {
                    var myobj = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == row.EPIU_ID select b).FirstOrDefault();
                    myobj.ETEX_ETEX_ID = row.ETEX_ETEX_ID;
                    myobj.EINS_EINS_ID = row.EINS_EINS_ID;
                    myobj.CODE_DISP = row.CODE_DISP;
                    myobj.CODE_NAME = row.CODE_NAME;
                    myobj.PHAS_TYPE = row.PHAS_TYPE;
                    myobj.OUIN_TYPE = row.OUIN_TYPE.ToString();
                    myobj.EPIU_TYPE = row.EPIU_TYPE.ToString();
                    myobj.EUNL_EUNL_ID = row.EUNL_EUNL_ID;
                    myobj.ELRD_ELRD_ID = row.ELRD_ELRD_ID;
                    Db.SaveChanges();
                }
            }
            return Json(expPostLineInstru.ToDataSourceResult(request, ModelState));
        }

        [HttpPost]
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select,delete")]
        public ActionResult DeleteInstrument(List<string> selectedRows)
        {
            int id;
            foreach (string item in selectedRows)
            {
                id = int.Parse(item);
                var myobj = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b).FirstOrDefault();
                Db.EXP_POST_LINE_INSTRU.Remove(myobj);
                Db.SaveChanges();
            }
            return Json(new { Deleted = "Success" }, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult Static_Post_InsertInstrument(int? id, int postId)
        {
            try
            {
                ViewBag.postId = postId;
                EXP_POST_LINE_INSTRU pl = Db.EXP_POST_LINE_INSTRU.FirstOrDefault(c => c.EPIU_ID == id);
                ViewBag.epiuID = id;
                ViewBag.btnCheck = true;
                ViewBag.PostInstru = pl;
                return View("Static_Post_InsertInstrument");

            }
            catch { return View("Static_Post_InsertInstrument"); }
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult Static_Post_InsertInstrumentNew(int? id, int postId)
        {
            try
            {
                ViewBag.postId = postId;
                EXP_POST_LINE_INSTRU pl = null;
                ViewBag.btnCheck = false;
                ViewBag.PostInstru = pl;
                return View("Static_Post_InsertInstrument");
            }
            catch
            {
                return View("Static_Post_InsertInstrument");
            }
        }

        public ActionResult findEinsId(int? id)
        {
            var query = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b.EINS_EINS_ID).FirstOrDefault().ToString();
            return new ServerMessages(ServerOprationType.Success) { CoustomData = query }.ToJson();
        }

    }

}
