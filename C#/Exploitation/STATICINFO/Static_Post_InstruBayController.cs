using Equipment.Codes.Security;
using Equipment.DAL;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.Mvc;
using System.Web.Script.Serialization;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_Post_ListController
    {
        //
        // GET: /Static_Post_Bay/
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_TYPE_BAY > select|EXP_UNIT_LEVEL > select")]
        public ActionResult Static_Post_InstrumentBayInstrument(int? id)
        {
            try
            {
                ViewData["EPIU_ID"] = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
                ViewData["ETBY_ID"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
                ViewData["EUNL_ID"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
                Session["PostId"] = id;
                return View();
            }
            catch
            {
                Session["PostId"] = null;
                return View();
            }
        }

        public ActionResult ReadExpPostLineInstru()
        {
            var data = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            JavaScriptSerializer jss = new JavaScriptSerializer();
            jss.MaxJsonLength = int.MaxValue;
            var contentResult = new ContentResult
            {
                Content = jss.Serialize(data),
                ContentType = "application/json",
                ContentEncoding = System.Text.Encoding.UTF8
            };
            return contentResult;
        }

        /// <summary>
        /// پنجره ذخیره و ویرایش یک تجهیز بی مربوط به یک تجهیز خاص در یک پست خاص
        /// </summary>
        /// <param name="id">کلید اصلی جدول تجهیزات بی</param>
        /// <returns>پنجره ورود اطلاعات</returns>
        [EntityAuthorize("EXP_INSTRU_BAY > select")]
        public ActionResult Static_Post_Instrument_Bay_NewInstrument(int? id)
        {
            Session["Static_Post_Instrument_Bay_Instrument_Id"] = id;
            if (id != 0)
            {
                EXP_INSTRU_BAY bayInstrument = (from b in Db.EXP_INSTRU_BAY where b.EINB_ID == id select b).FirstOrDefault();
                return View(bayInstrument);
            }
            return View();
        }

        /// <summary>
        /// پنجره ذخیره و ویرایش یک بی مربوط به یک تجهیز خاص در یک پست خاص
        /// </summary>
        /// <param name="id">کلید اصلی جدول بی</param>
        /// <returns>پنجره ورود اطلاعات</returns>
        [EntityAuthorize("EXP_CORE_BAY > select")]
        public ActionResult Static_Post_Instrument_BayNew(int? id)
        {
            ViewBag.bayId = id;
            EXP_CORE_BAY bay = new EXP_CORE_BAY();
            if (id != null)
            {
                bay = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == id select b).FirstOrDefault();
                ViewBag.bayId = id;
                IEnumerable<decimal> keys = from b in Db.EXP_INSTRU_BAY where b.ECBA_ECBA_ID == id select b.EPIU_EPIU_ID.Value;
                ViewBag.keys = keys;
                return View(bay);
            }
            return View();
        }


        /// <summary>
        /// باز کردن پنجره لیست بی های تجهیزات یک پست خاص
        /// </summary>
        /// <param name="id">کد کلید جدول تجهیزات که کلید خارجی جدول بی می باشد</param>
        /// <returns>پنجره لیست بی های تجهیز</returns>
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_TYPE_BAY>select|EXP_UNIT_LEVEL>select")]
        public ActionResult Static_Post_InstruBay(int? id)
        {
            try
            {
                ViewData["EPIU_ID"] = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
                ViewData["ETBY_ID"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
                ViewData["EUNL_ID"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
                ViewBag.instruId = id;
                return View();
            }
            catch
            {
                ViewBag.instruId = null;
                return View();
            }
        }

        /// <summary>
        /// بی های پست انتخاب شده و عملیات های مربوط به آن :ذخیره،حذف،بروز رسانی
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        [EntityAuthorize("EXP_CORE_BAY > select")]
        public ActionResult ReadInstrumentBay([DataSourceRequest] DataSourceRequest request, int? instruId)
        {
            try
            {
                int id = Convert.ToInt32(instruId);
                int eins = Convert.ToInt32((from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b.EINS_EINS_ID).FirstOrDefault().ToString());
                var query = from c in Db.EXP_CORE_BAY
                            where c.EPIU_EPIU_ID == id
                            select new { c.EUNL_EUNL_ID, c.ETBY_ETBY_ID, c.ECBA_TYPE, c.ACTI_NACT, c.ECBA_ID, c.EPIU_EPIU_ID };
                return Json(query.ToDataSourceResult(request));
            }
            catch
            {
                return null;
            }
        }

        [EntityAuthorize("EXP_TYPE_BAY > select")]
        public ActionResult GetBayComment()
        {
            var query = (Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC })).OrderBy(x => x.ETBY_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_CORE_BAY>select,insert,update|EXP_INSTRU_BAY>select,delete,insert,update")]
        public ActionResult AddInstrumentCoreBay(EXP_CORE_BAY bay)
        {
            try
            {
                var instrumentBay = new EXP_INSTRU_BAY();
                if (Request.Form["MS_Instru"] != null)
                {
                    string[] instrumentId = Request.Form["MS_Instru"].ToString().Split(',');

                    if (Session["Post_Instrument_Bay_Id"] == null)
                    {
                        //عدد 20 در شرح بی قرار می گیرد که به معنی خط می باشد
                        bay.EPIU_EPIU_ID = Convert.ToInt32(Session["Post_Instrument_Id_Bay"]);
                        bay.EPOL_EPOL_ID = Convert.ToInt32(Session["Post_Instrument_Id"].ToString());
                        int eins = Convert.ToInt32(
                            (from b in Db.EXP_POST_LINE_INSTRU
                             where b.EPIU_ID == bay.EPIU_EPIU_ID
                             select b.EINS_EINS_ID).FirstOrDefault().ToString());
                        if (eins == 2)
                            bay.ETBY_ETBY_ID = 1;
                        if (eins == 3)
                            bay.ETBY_ETBY_ID = 2;
                        if (eins == 4)
                            bay.ETBY_ETBY_ID = 3;
                        if (eins == 281)
                            bay.ETBY_ETBY_ID = 5;

                        Db.EXP_CORE_BAY.Add(bay);
                        Db.SaveChanges();
                        Session["Post_Instrument_Bay_Id"] = bay.ECBA_ID;
                    }
                    else
                    {
                        int id = Convert.ToInt32(Session["Post_Instrument_Bay_Id"]);
                        bay.ECBA_ID = id;
                        bay.EPIU_EPIU_ID = Convert.ToInt32(Session["Post_Instrument_Id_Bay"]);
                        bay.EPOL_EPOL_ID = Convert.ToInt32(Session["Post_Instrument_Id"].ToString());
                        int eins = Convert.ToInt32(
                            (from b in Db.EXP_POST_LINE_INSTRU
                             where b.EPIU_ID == bay.EPIU_EPIU_ID
                             select b.EINS_EINS_ID).FirstOrDefault().ToString());
                        if (eins == 2)
                            bay.ETBY_ETBY_ID = 1;
                        if (eins == 3)
                            bay.ETBY_ETBY_ID = 2;
                        if (eins == 4)
                            bay.ETBY_ETBY_ID = 3;
                        if (eins == 281)
                            bay.ETBY_ETBY_ID = 5;
                        Db.Entry(bay).State = EntityState.Modified;
                        Db.SaveChanges();
                    }
                    //ایجاد و ذخیره تجهیزات بی
                    foreach (var item in instrumentId)
                    {
                        instrumentBay.ECBA_ECBA_ID = bay.ECBA_ID;
                        //مقدار 0 به معنی ایجاد می باشد
                        instrumentBay.EINB_TYPE = "0";
                        instrumentBay.EPIU_EPIU_ID = Convert.ToInt32(item);
                        Db.EXP_INSTRU_BAY.Add(instrumentBay);
                        Db.SaveChanges();
                    }

                    return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "مقدار تجهیز بی درست انتخاب نشده است " }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }


        private string instrumentv(decimal? i)
        {
            var q = (from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                     where b.EPIU_ID == i
                     select new { b.CODE_NAME, b.PHAS_STAT });

            string g = string.Empty;
            if (q.FirstOrDefault().PHAS_STAT != null)
            {
                if (q.FirstOrDefault().PHAS_STAT.ToString() == "0") g = q.FirstOrDefault().CODE_NAME + " فاز R";
                else
                    if (q.FirstOrDefault().PHAS_STAT.ToString() == "1") g = q.FirstOrDefault().CODE_NAME + "فاز S";
                    else if (q.FirstOrDefault().PHAS_STAT.ToString() == "2") g = q.FirstOrDefault().CODE_NAME + "فاز T";
                    else g = q.FirstOrDefault().CODE_NAME;
            }
            else
            {
                g = q.FirstOrDefault().CODE_NAME;
            }

            return g;
        }

        [EntityAuthorize("EXP_INSTRU_BAY > select")]
        [HttpPost]
        public ActionResult ReadInstrumentBayInstrument([DataSourceRequest] DataSourceRequest request, int? BayId)
        {
            if (BayId == null)
            {
                BayId = 0;
            }

            var query = from c in Db.EXP_INSTRU_BAY
                        join d in Db.EXP_POST_LINE_INSTRU on c.EPIU_EPIU_ID equals d.EPIU_ID
                        where c.ECBA_ECBA_ID == BayId
                        select new
                        {
                            c.EINB_ID,
                            c.DATE_CREA,
                            c.DATE_REPL,
                            c.EINB_TYPE,
                            c.EPIU_EPIU_ID,

                            instruDescB = d.CODE_NAME
                            //c.EPIU_EPIU_ID.HasValue ? db.EXP_POST_LINE_INSTRU.Find(c.EPIU_EPIU_ID.Value).CODE_NAME : ""
                            //inst = instrumentv(k.EPIU_EPIU_ID)
                            // phasState = p.PHAS_STAT,
                            //codeName = p.CODE_NAME
                        };
            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_CORE_BAY > select,insert,update")]
        public ActionResult AddInstrumentBayInstrument(EXP_INSTRU_BAY model)
        {
            try
            {
                //در صورت نداشتن کد تجهیز بی دکمه جدید کلیک شده و باید رکورد جدید ایجاد شود
                int id = Convert.ToInt32(Session["Static_Post_Instrument_Bay_Instrument_Id"]);
                if (id == 0)
                {
                    //انتصاب کلید خارجی بی
                    model.ECBA_ECBA_ID = Convert.ToInt32(Session["Post_Instrument_Bay_Id"]);
                    model.DATE_CREA = "1395/01/01";
                    model.DATE_REPL = "1395/01/01";
                    model.EINB_TYPE = "0";
                    //بررسی اینکه آیا تجهیز بی با این مشخصات قبلا ذخیره شده یا نه
                    if (PublicRepository.ExistModel("EXP_INSTRU_BAY", "ECBA_ECBA_ID={0} and DATE_CREA='{1}' and DATE_REPL='{2}' and EINB_TYPE='{3}' and EPIU_EPIU_ID={4}", model.ECBA_ECBA_ID, model.DATE_CREA, model.DATE_REPL, model.EINB_TYPE, model.EPIU_EPIU_ID))
                        //در صورت تکراری بودن پیغام رکورد تکراری را به کاربر نمایش می دهد
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "رکورد تکراری." }.ToJson();
                    //در صورت تکراری نبودن بی جدید ذخیره می شود
                    Db.EXP_INSTRU_BAY.Add(model);
                    Db.SaveChanges();
                    // modelSaveToDataBase();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();
                }
                //در صورت که کد تجهیز بی خالی باشد دکمه ویرایش انتخاب شده و باید تجهیز بی بروز رسانی شود
                else
                {
                    //انتصاب کد تجهیز بی برای ویرایش شدن
                    model.EINB_ID = Convert.ToInt32(Session["Static_Post_Instrument_Bay_Instrument_Id"]);
                    Db.SaveChanges();
                    // model.Update();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult UpdateInstrumentBayInstrument([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<EXP_INSTRU_BAY> expInstruBay)
        {
            return null;
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [EntityAuthorize("EXP_CORE_BAY > select,update")]
        public ActionResult UpdateInstrumentBay([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<EXP_CORE_BAY> expCoreBay)
        {
            if (expCoreBay != null && ModelState.IsValid)
            {
                foreach (EXP_CORE_BAY row in expCoreBay)
                {
                    var model = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == row.ECBA_ID select b).FirstOrDefault();
                    model.ETBY_ETBY_ID = row.ETBY_ETBY_ID;
                    model.ECBA_TYPE = row.ECBA_TYPE;
                    model.ACTI_NACT = row.ACTI_NACT;
                    model.EPIU_EPIU_ID = row.EPIU_EPIU_ID;
                    Db.SaveChanges();
                }
            }
            return Json(expCoreBay.ToDataSourceResult(request, ModelState));
        }

        [EntityAuthorize("EXP_CORE_BAY > select|EXP_INSTRU_BAY> select|EXP_POST_LINE_INSTRU> select")]
        public ActionResult bayinst_new(int? id, int? postId)
        {
            try
            {
                EXP_CORE_BAY bay = new EXP_CORE_BAY();
                ViewBag.postId = postId;
                if (id == 0)
                {
                    ViewBag.bayId = null;
                    return View();
                }
                else
                {
                    bay = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == id select b).FirstOrDefault();
                    ViewBag.bayId = id;
                    IEnumerable<decimal> keys = from b in Db.EXP_INSTRU_BAY where b.ECBA_ECBA_ID == id select b.EPIU_EPIU_ID.Value;
                    ViewBag.keys = keys;
                    return View(bay);
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_TYPE_BAY > select|EXP_POST_LINE_INSTRU>select|EXP_UNIT_LEVEL>select")]
        public ActionResult PostBay(int? id)
        {
            try
            {
                ViewData["EUNL_ID"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
                ViewBag.postId = id;
                return View();
            }
            catch
            {
                ViewBag.postId = null;
                return View();
            }
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_baymain()
        {
            int[] array = { 1, 2, 3, 4, 23, 281 };

            var query = (from i in Db.EXP_INSTRUMENT
                         where array.Contains(i.EINS_ID)
                         select new { i.EINS_ID, i.EINS_DESC }).Distinct();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult getinstmain(int? postid, int? unit, int? inst, int? bayModel /*,int? id/*, int? coreBayId */)
        {

            int id = 0;
            if (Session["Post_Instrument_Bay_Id"] != null && Session["Post_Instrument_Bay_Id"] != "")
            {
                id = Convert.ToInt32(Session["Post_Instrument_Bay_Id"].ToString());
            }

            var queryEpiu = (from b in Db.EXP_CORE_BAY where b.EPOL_EPOL_ID == postid && b.EUNL_EUNL_ID == unit && b.ETBY_ETBY_ID == bayModel select b.EPIU_EPIU_ID);

            if (id != 0)
            {
                if (inst == 1)
                {
                    var RetVal = (from b in Db.EXP_POST_LINE_INSTRU//.AsEnumerable()
                                  //join p in db.EXP_POST_LINE//.AsEnumerable()
                                  //on b.EPOL_EPOL_ID equals p.EPOL_ID
                                  where (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) && b.EUNL_EUNL_ID == unit
                                  orderby b.CODE_NAME
                                  select new
                                  {
                                      b.EPIU_ID,
                                      b.CODE_NAME,
                                      b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                      b.PHAS_STAT
                                      // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                      //types = b.CODE_NAME //+ " " + backtypephaz(b.PHAS_STAT)
                                  }).OrderBy(x => x.CODE_NAME);

                    return Json(RetVal, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var RetVal = (from b in Db.EXP_POST_LINE_INSTRU//.AsEnumerable()
                                  //join p in db.EXP_POST_LINE//.AsEnumerable()
                                  //on b.EPOL_EPOL_ID equals p.EPOL_ID
                                  where (b.EPOL_EPOL_ID == postid) && b.EINS_EINS_ID == inst // && b.EUNL_EUNL_ID == unit
                                  orderby b.CODE_NAME
                                  select new
                                  {
                                      b.EPIU_ID,
                                      b.CODE_NAME,
                                      b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                      b.PHAS_STAT
                                      // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                      // types = b.CODE_NAME //+ " " + backtypephaz(b.PHAS_STAT)
                                  }).OrderBy(x => x.CODE_NAME);

                    return Json(RetVal, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                if (inst == 1)
                {
                    var RetVal = (from b in Db.EXP_POST_LINE_INSTRU
                                  where (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) &&
                                      /*!queryEpiu.Contains(b.EPIU_ID) &&*/ b.EUNL_EUNL_ID == unit
                                  orderby b.CODE_NAME
                                  select new
                                  {
                                      b.EPIU_ID,
                                      b.CODE_NAME,
                                      b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                      b.PHAS_STAT
                                      // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                      //types = b.CODE_NAME //+ " " + backtypephaz(b.PHAS_STAT)
                                  }).OrderBy(x => x.CODE_NAME);


                    // var RetVal = db.EXP_POST_LINE_INSTRU
                    //              .Where(b =>
                    //                  (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) &&
                    //                  (!query.Where(x => x.EPOL_EPOL_ID == b.EPOL_EPOL_ID_INSLIN || x.EPOL_EPOL_ID == b.EPOL_EPOL_ID_LINE).Any())
                    //                  ).
                    //              Select(v => new
                    //              {
                    //                  v.EPIU_ID,
                    //                  v.CODE_NAME,
                    //                  v.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                    //                  v.PHAS_STAT
                    //                  // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                    //                  //types = b.CODE_NAME //+ " " + backtypephaz(b.PHAS_STAT)
                    //              });
                    //
                    return Json(RetVal, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var RetVal = (from b in Db.EXP_POST_LINE_INSTRU//.AsEnumerable()
                                  //join p in db.EXP_POST_LINE//.AsEnumerable()
                                  //on b.EPOL_EPOL_ID equals p.EPOL_ID
                                  where (b.EPOL_EPOL_ID == postid && b.EINS_EINS_ID == inst) //&&
                                  //!queryEpiu.Contains(b.EPIU_ID) //&& b.EUNL_EUNL_ID == unit
                                  orderby b.CODE_NAME
                                  select new
                                  {
                                      b.EPIU_ID,
                                      b.CODE_NAME,
                                      b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                      b.PHAS_STAT
                                      // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                      // types = b.CODE_NAME //+ " " + backtypephaz(b.PHAS_STAT)
                                  }).OrderBy(x => x.CODE_NAME);

                    return Json(RetVal, JsonRequestBehavior.AllowGet);
                }

            }
            // }
        }


        /// ذخیره بی خط پست مبدا
        /// </summary>
        /// <param name="bay">گرفتن شی بی برای ذخیره</param>
        /// <returns>برگرداندن پیام</returns>
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_CORE_BAY>select,insert,update|EXP_INSTRU_BAY>select,delete,insert,update")]
        public ActionResult AddpostCoreBay(EXP_CORE_BAY bay, string bayId, int? post_name)
        {
            var corebayId = Convert.ToInt32(bayId);
            int checkDataCount = 0;
            if (corebayId != 0)
            {
                //var getData = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == Convert.ToInt32(bay) select b).FirstOrDefault();
                checkDataCount = (from b in Db.EXP_CORE_BAY
                                  where b.EPOL_EPOL_ID == post_name && b.ETBY_ETBY_ID == bay.ETBY_ETBY_ID &&
                                        b.EPIU_EPIU_ID == bay.EPIU_EPIU_ID && b.EUNL_EUNL_ID == bay.EUNL_EUNL_ID &&
                                        b.ECBA_ID != corebayId
                                  select b).Count();
            }
            else
            {
                checkDataCount = (from b in Db.EXP_CORE_BAY
                                  where b.EPOL_EPOL_ID == post_name && b.ETBY_ETBY_ID == b.ETBY_ETBY_ID &&
                                        b.EPIU_EPIU_ID == bay.EPIU_EPIU_ID && b.EUNL_EUNL_ID == bay.EUNL_EUNL_ID
                                  select b).Count();
            }

            if (checkDataCount > 0)
            {
                var instruName = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == bay.EPIU_EPIU_ID select b.CODE_NAME).FirstOrDefault();
                instruName = string.IsNullOrEmpty(instruName) ? " تجهیز اصلی انتخاب شده " : instruName.ToString();
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("بی '{0}' قبلا ایجاد شده است", instruName) }.ToJson();
            }

            try
            {
                var instrumentBay = new EXP_INSTRU_BAY();
                string[] instrumentId = { };

                if (string.IsNullOrEmpty(bayId) || bayId == "0")
                {
                    if (Request.Form["MS_Instru"] != null)
                    {
                        instrumentId = Request.Form["MS_Instru"].ToString().Split(',');
                        bay.EPOL_EPOL_ID = post_name;
                        Db.EXP_CORE_BAY.Add(bay);
                        Db.SaveChanges();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "مقدار تجهیز بی درست انتخاب نشده است " }.ToJson();
                    }
                }
                else
                {
                    // برای حالتی که ویرایش میشود و تجهیز هم دارد
                    if (Request.Form["MS_Instru"] != null)
                    {
                        instrumentId = Request.Form["MS_Instru"].ToString().Split(',');
                    }

                    bay.EPOL_EPOL_ID = post_name;
                    bay.ECBA_ID = corebayId;
                    Db.Entry(bay).State = EntityState.Modified;
                    Db.SaveChanges();
                }
                //ایجاد و ذخیره تجهیزات بی
                foreach (var item in instrumentId)
                {
                    instrumentBay.ECBA_ECBA_ID = bay.ECBA_ID;
                    //مقدار 0 به معنی ایجاد می باشد
                    instrumentBay.EINB_TYPE = "0";
                    instrumentBay.EPIU_EPIU_ID = Convert.ToInt32(item);
                    Db.EXP_INSTRU_BAY.Add(instrumentBay);
                    Db.SaveChanges();
                }

                return new ServerMessages(ServerOprationType.Success) { Message = "ذخیره سازی با موفقیت انجام شد" }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [HttpPost]
        [EntityAuthorize("EXP_CORE_BAY > select|EXP_POST_LINE_INSTRU>select")]
        public ActionResult ReadPostBay([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = (from c in Db.EXP_CORE_BAY
                         join p in Db.EXP_POST_LINE_INSTRU on c.EPIU_EPIU_ID equals p.EPIU_ID
                         join d in Db.EXP_TYPE_BAY on c.ETBY_ETBY_ID equals d.ETBY_ID
                         where p.EPOL_EPOL_ID == id || c.EPOL_EPOL_ID == id
                         //orderby d.ETBY_DESC
                         //select c).AsEnumerable()
                         //.Select(c => new
                         select new
                         {
                             c.EUNL_EUNL_ID,
                             c.EPIU_EPIU_ID,
                             c.ETBY_ETBY_ID,
                             c.ECBA_TYPE,
                             c.ACTI_NACT,
                             c.ECBA_ID,
                             instruDesc = p.CODE_NAME,
                             bayDesc = d.ETBY_DESC
                         }).Distinct(); //.OrderBy(x => x.bayDesc);
            return Json(query.ToDataSourceResult(request));
        }

    }

}