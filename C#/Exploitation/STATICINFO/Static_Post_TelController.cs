using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_Post_ListController
    {
        //
        // GET: /Static_Post_Tel/       
        [EntityAuthorize("EXP_TEL > select")]
        public ActionResult Static_Post_Tel(int? id)
        {
            ViewBag.PostId = id;
            LoadPostForm();
            if (id != null)
            {
                EXP_TEL tel = (from b in Db.EXP_TEL where b.ETEL_ID == id select b).FirstOrDefault();
                return View(tel);
            }
            return View();
        }

        [EntityAuthorize("EXP_TEL > select")]
        public ActionResult ReadTel([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = from b in Db.EXP_TEL where b.EPOL_EPOL_ID == id select new { b.ETEL_ID, b.ETEL_NUMB, b.ETEL_DESC };
            return Json(query.ToDataSourceResult(request));
        }

        [HttpPost]
        [EntityAuthorize("EXP_TEL > select,insert,update")]
        public ActionResult AddTel(int? id, string tel, string desc, int? postId)
        {
            if (tel == "")
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تلفن را تکمیل نمایید" }.ToJson();
            }
            else
            {
                EXP_TEL model = new EXP_TEL();
                if (id == null)
                {
                    model.ETEL_NUMB = tel;
                    model.ETEL_DESC = desc;
                    model.EPOL_EPOL_ID = postId;
                    Db.EXP_TEL.Add(model);
                    Db.SaveChanges();
                }
                else
                {
                    model = Db.EXP_TEL.FirstOrDefault(c => c.ETEL_ID == id);
                    model.ETEL_NUMB = tel;
                    model.ETEL_DESC = desc;
                    Db.SaveChanges();
                }
                return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();
            }
        }

        [HttpPost]
        [EntityAuthorize("EXP_TEL > select,delete")]
        public ActionResult RemoveTel(int targetID)
        {
            try
            {
                var myobj = Db.EXP_TEL.FirstOrDefault(b => b.ETEL_ID == targetID);
                Db.EXP_TEL.Remove(myobj);
                Db.SaveChanges();
            }
            catch { }
            return Json(new { Success = true });
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [EntityAuthorize("EXP_TEL > select,insert,update")]
        public ActionResult UpdateTel([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<EXP_TEL> expTel)
        {
            if (expTel != null && ModelState.IsValid)
            {
                foreach (EXP_TEL row in expTel)
                {
                    var myobj = (from b in Db.EXP_TEL where b.ETEL_ID == row.ETEL_ID select b).FirstOrDefault();
                    myobj.ETEL_NUMB = row.ETEL_NUMB;
                    myobj.ETEL_DESC = row.ETEL_DESC;
                    Db.SaveChanges();
                }
            }
            return Json(expTel.ToDataSourceResult(request, ModelState));
        }

        [HttpPost]
        [EntityAuthorize("EXP_TEL > select,delete")]
        public ActionResult DeleteTel(List<string> selectedRows)
        {
            int id;
            foreach (string item in selectedRows)
            {
                id = int.Parse(item);
                var myobj = (from b in Db.EXP_TEL where b.ETEL_ID == id select b).FirstOrDefault();
                Db.EXP_TEL.Remove(myobj);
                Db.SaveChanges();
            }
            return Json(new { Deleted = "Success" }, JsonRequestBehavior.AllowGet);
        }

    }

}
