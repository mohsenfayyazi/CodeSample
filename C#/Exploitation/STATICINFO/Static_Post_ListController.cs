using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using Asr.Text;
using Kendo.Mvc;
using Oracle.ManagedDataAccess.Client;
using System.Data;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_Post_ListController
    {
        //
        // GET: /Static_Post_List/
        [MenuAuthorize]
        [EntityAuthorize("PAY_ORGAN > select|BKP_GEOGH_LOC > select|EXP_UNIT_LEVEL > select|EXP_OWENER_TYPE > select")]
        public ActionResult Index()
        {
            ViewData["ORGA"] = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6" && c.ORGA_STAT == "2").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewData["CITY"] = Db.BKP_GEOGH_LOC.Select(c => new { c.G_CODE, c.G_DESC });
            ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Where(c => c.ACTV_TYPE == "1").Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.postid = 0;
            ViewBag.postinstid = 0;
            ViewBag.postline = 0;
            using (Asr.Security.AsrMembershipProvider mp = new Asr.Security.AsrMembershipProvider(User.Identity.Name))
            {
                ViewBag.deleteGridButton = mp.CheckPermission("EXP_DELETEPOST_FRM_GRIDBTN"); // دکمه حذف پست در فرم اطلاعات پست ها
                ViewBag.editGridButton = mp.CheckPermission("EXP_EDITPOST_FRM_GRIDBTN"); // دکمه ویرایش پست در فرم اطلاعات پست ها
                ViewBag.addGridButton = mp.CheckPermission("EXP_ADDPOST_FRM_GRIDBTN"); // دکمه اضافه کردن پست در فرم اطلاعات پست ها
            }
            return View();
        }

        [MenuAuthorize]
        [EntityAuthorize("PAY_ORGAN > select|BKP_GEOGH_LOC > select|EXP_UNIT_LEVEL > select|EXP_OWENER_TYPE > select")]
        public ActionResult Index_Proprietary()
        {
            ViewData["ORGA"] = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6" && c.ORGA_STAT == "2").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewData["CITY"] = Db.BKP_GEOGH_LOC.Select(c => new { c.G_CODE, c.G_DESC });
            ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Where(c => c.ACTV_TYPE == "1").Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.postid = 0;
            ViewBag.postinstid = 0;
            ViewBag.postline = 0;
            using (Asr.Security.AsrMembershipProvider mp = new Asr.Security.AsrMembershipProvider(User.Identity.Name))
            {
                ViewBag.deleteGridButton = mp.CheckPermission("EXP_DELETEPOST_FRM_GRIDBTN"); // دکمه حذف پست در فرم اطلاعات پست ها
                ViewBag.editGridButton = mp.CheckPermission("EXP_EDITPOST_FRM_GRIDBTN"); // دکمه ویرایش پست در فرم اطلاعات پست ها
                ViewBag.addGridButton = mp.CheckPermission("EXP_ADDPOST_FRM_GRIDBTN"); // دکمه اضافه کردن پست در فرم اطلاعات پست ها
            }
            return View();
        }

        [MenuAuthorize]
        [EntityAuthorize("PAY_ORGAN > select|BKP_GEOGH_LOC > select|EXP_UNIT_LEVEL > select")]
        public ActionResult Newpost_Prev()
        {
            ViewData["ORGA"] = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6" && c.ORGA_STAT == "2").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewData["CITY"] = Db.BKP_GEOGH_LOC.Select(c => new { c.G_CODE, c.G_DESC });
            ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.postid = 0;
            ViewBag.postinstid = 0;
            ViewBag.postline = 0;
            return View();
        }

        private void ModifyFilters(IEnumerable<IFilterDescriptor> filters)
        {
            foreach (var filter in filters)
            {
                var descriptor = filter as FilterDescriptor;
                if (descriptor != null)
                {
                    descriptor.MemberType = typeof(string);
                }
                else if (filter is CompositeFilterDescriptor)
                {
                    ModifyFilters(((CompositeFilterDescriptor)filter).FilterDescriptors);
                }
            }
        }

        [EntityAuthorize("EXP_POST_LINE > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadPosts([DataSourceRequest] DataSourceRequest request, string fd)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.Empty;
            if (fd != null)
            {
                filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper().ToArabicUtf8();
            }
            //var query = (from b in Db.EXP_POST_LINE.AsEnumerable()
            //             where ((b.EPOL_TYPE == "0") && (b.EPOL_EPOL_ID == null))// && (b.EPOL_NAME.ToUpper().Contains(filter) || filterDisable))
            //             select new
            //             {
            //                 b.EPOL_ID,
            //                 b.EPOL_NAME,
            //                 b.CODE_DISP,
            //                 b.EUNL_EUNL_ID,
            //                 b.ORGA_CODE,
            //                 b.POST_TYPE,
            //                 b.EPOL_STAT,
            //                 b.EOTY_EOTY_ID,
            //                 b.INCO_TYPE,
            //                 b.STAC_DYNM,
            //                 b.EXPL_DATE,
            //                 //b.GEOL_G_CODE,                             
            //                 countOfinstruMents = (from c in Db.EXP_POST_LINE_INSTRU where c.EPOL_EPOL_ID == b.EPOL_ID select c).Count(),
            //                 //hasAttach = (from a in Db.SCN_ATTACHINTER where a.ENTI_KEY == "EPOL_ID" && a.ENTI_NAME == "EXP_POST_LINE" && a.ENTI_VALU == b.EPOL_ID.ToString() select a.ATCH_ID).Count().ToString() == '0' ? "دارد" : "ندارد"
            //                 hasAttach = (Db.Database.SqlQuery<decimal>(string.Format("select count(ATCH_ID) from SCN_ATTACHINTER where ENTI_KEY = 'EPOL_ID' and ENTI_NAME = 'EXP_POST_LINE' and ENTI_VALU = to_char({0})", b.EPOL_ID)).FirstOrDefault()) > 0 ? "دارد" : "ندارد"
            //                 //countOfinstruMents = b.EXP_POST_LINE_INSTRU2.Count
            //             }).ToList();
            //return  Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);            

            foreach (var filterGrid in request.Filters)
            {
                var descriptor = filterGrid as FilterDescriptor;
                if (descriptor != null)
                {
                    string fieldName = descriptor.Member;
                    switch (fieldName)
                    {
                        case "EPOL_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EUNL_EUNL_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EOTY_EOTY_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "countOfInstruments":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        default:
                            descriptor.MemberType = typeof(string);
                            break;
                    }
                }
                else if (filterGrid is CompositeFilterDescriptor)
                {
                    ModifyFilters(((CompositeFilterDescriptor)filterGrid).FilterDescriptors);
                }
            }

            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {

                var RetVal = conn.Query(@"select tbl.EPOL_ID, tbl.EPOL_NAME, tbl.CODE_DISP, tbl.EUNL_EUNL_ID, 
                                                 tbl.ORGA_CODE, tbl.POST_TYPE, tbl.EPOL_STAT, tbl.EOTY_EOTY_ID, 
                                                 tbl.INCO_TYPE, tbl.STAC_DYNM, tbl.EXPL_DATE, tbl.hasAttach,
                                                 (select count(*) from exp_post_line_instru where EPOL_EPOL_ID = tbl.EPOL_ID) countOfInstruments,
                                                 EXP_GRADE(0,0,0,tbl.EPOL_ID) postClass 
                                          from (
                                                select distinct POST.EPOL_ID, POST.EPOL_NAME, POST.CODE_DISP, POST.EUNL_EUNL_ID, 
                                                                POST.ORGA_CODE, POST.POST_TYPE, POST.EPOL_STAT, POST.EOTY_EOTY_ID, 
                                                                POST.INCO_TYPE, POST.STAC_DYNM, POST.EXPL_DATE, decode(nvl(ENTI_VALU,0),0,'ندارد','دارد') hasAttach                                                                                                                
                                                from EXP_POST_LINE POST, SCN_ATTACHINTER, EXP_POST_LINE_INSTRU INSTRU
                                                where ENTI_KEY(+) = 'EPOL_ID' and ENTI_NAME(+) = 'EXP_POST_LINE'
                                                AND POST.EPOL_ID = SCN_ATTACHINTER.ENTI_VALU(+)
                                                and POST.EPOL_ID = INSTRU.EPOL_EPOL_ID(+)
                                                and POST.EPOL_TYPE = '0' and POST.EPOL_EPOL_ID is null
                                                --and (upper(EPOL_NAME) like '%'|| :param ||'%' or :param is null)
                                                order by POST.EUNL_EUNL_ID, POST.EPOL_ID asc
                                                ) tbl")
                             .Where(b => b.EPOL_NAME.ToUpper().Contains(filter) || filterDisable)
                             .Select(b => new
                             {
                                 EPOL_ID = Convert.ToDecimal(b.EPOL_ID),
                                 b.EPOL_NAME,
                                 b.CODE_DISP,
                                 EUNL_EUNL_ID = Convert.ToDecimal(b.EUNL_EUNL_ID),
                                 b.ORGA_CODE,
                                 b.POST_TYPE,
                                 b.EPOL_STAT,
                                 EOTY_EOTY_ID = Convert.ToDecimal(b.EOTY_EOTY_ID),
                                 b.INCO_TYPE,
                                 b.STAC_DYNM,
                                 b.EXPL_DATE,
                                 b.hasAttach,
                                 countOfInstruments = Convert.ToDecimal(b.countOfInstruments),
                                 postClass = b.postClass
                             }).ToList();

                return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
        }

        [EntityAuthorize("EXP_POST_LINE > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadPosts_Proprietary([DataSourceRequest] DataSourceRequest request, string fd)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.Empty;
            if (fd != null)
            {
                filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper().ToArabicUtf8();
            }
            //var query = (from b in Db.EXP_POST_LINE.AsEnumerable()
            //             where ((b.EPOL_TYPE == "0") && (b.EPOL_EPOL_ID == null))// && (b.EPOL_NAME.ToUpper().Contains(filter) || filterDisable))
            //             select new
            //             {
            //                 b.EPOL_ID,
            //                 b.EPOL_NAME,
            //                 b.CODE_DISP,
            //                 b.EUNL_EUNL_ID,
            //                 b.ORGA_CODE,
            //                 b.POST_TYPE,
            //                 b.EPOL_STAT,
            //                 b.EOTY_EOTY_ID,
            //                 b.INCO_TYPE,
            //                 b.STAC_DYNM,
            //                 b.EXPL_DATE,
            //                 //b.GEOL_G_CODE,                             
            //                 countOfinstruMents = (from c in Db.EXP_POST_LINE_INSTRU where c.EPOL_EPOL_ID == b.EPOL_ID select c).Count(),
            //                 //hasAttach = (from a in Db.SCN_ATTACHINTER where a.ENTI_KEY == "EPOL_ID" && a.ENTI_NAME == "EXP_POST_LINE" && a.ENTI_VALU == b.EPOL_ID.ToString() select a.ATCH_ID).Count().ToString() == '0' ? "دارد" : "ندارد"
            //                 hasAttach = (Db.Database.SqlQuery<decimal>(string.Format("select count(ATCH_ID) from SCN_ATTACHINTER where ENTI_KEY = 'EPOL_ID' and ENTI_NAME = 'EXP_POST_LINE' and ENTI_VALU = to_char({0})", b.EPOL_ID)).FirstOrDefault()) > 0 ? "دارد" : "ندارد"
            //                 //countOfinstruMents = b.EXP_POST_LINE_INSTRU2.Count
            //             }).ToList();
            //return  Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);            

            foreach (var filterGrid in request.Filters)
            {
                var descriptor = filterGrid as FilterDescriptor;
                if (descriptor != null)
                {
                    string fieldName = descriptor.Member;
                    switch (fieldName)
                    {
                        case "EPOL_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EUNL_EUNL_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "EOTY_EOTY_ID":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        case "countOfInstruments":
                            descriptor.MemberType = typeof(decimal);
                            break;
                        default:
                            descriptor.MemberType = typeof(string);
                            break;
                    }
                }
                else if (filterGrid is CompositeFilterDescriptor)
                {
                    ModifyFilters(((CompositeFilterDescriptor)filterGrid).FilterDescriptors);
                }
            }

            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {

                var RetVal = conn.Query(@"select tbl.EPOL_ID, tbl.EPOL_NAME, tbl.CODE_DISP, tbl.EUNL_EUNL_ID, 
                                                 tbl.ORGA_CODE, tbl.POST_TYPE, tbl.EPOL_STAT, tbl.EOTY_EOTY_ID, 
                                                 tbl.INCO_TYPE, tbl.STAC_DYNM, tbl.EXPL_DATE, tbl.hasAttach,
                                                 (select count(*) from exp_post_line_instru where EPOL_EPOL_ID = tbl.EPOL_ID) countOfInstruments,
                                                 EXP_GRADE(0,0,0,tbl.EPOL_ID) postClass 
                                          from (
                                                select distinct POST.EPOL_ID, POST.EPOL_NAME, POST.CODE_DISP, POST.EUNL_EUNL_ID, 
                                                                POST.ORGA_CODE, POST.POST_TYPE, POST.EPOL_STAT, POST.EOTY_EOTY_ID, 
                                                                POST.INCO_TYPE, POST.STAC_DYNM, POST.EXPL_DATE, decode(nvl(ENTI_VALU,0),0,'ندارد','دارد') hasAttach                                                                                                                
                                                from EXP_POST_LINE POST, SCN_ATTACHINTER, EXP_POST_LINE_INSTRU INSTRU
                                                where ENTI_KEY(+) = 'EPOL_ID' and ENTI_NAME(+) = 'EXP_POST_LINE'
                                                AND POST.EPOL_ID = SCN_ATTACHINTER.ENTI_VALU(+)
                                                and POST.EPOL_ID = INSTRU.EPOL_EPOL_ID(+)
                                                and POST.EPOL_TYPE = '0' and POST.EPOL_EPOL_ID is null
                                                and POST.EOTY_EOTY_ID = 1
                                                --and (upper(EPOL_NAME) like '%'|| :param ||'%' or :param is null)
                                                order by POST.EUNL_EUNL_ID, POST.EPOL_ID asc
                                                ) tbl")
                             .Where(b => b.EPOL_NAME.ToUpper().Contains(filter) || filterDisable)
                             .Select(b => new
                             {
                                 EPOL_ID = Convert.ToDecimal(b.EPOL_ID),
                                 b.EPOL_NAME,
                                 b.CODE_DISP,
                                 EUNL_EUNL_ID = Convert.ToDecimal(b.EUNL_EUNL_ID),
                                 b.ORGA_CODE,
                                 b.POST_TYPE,
                                 b.EPOL_STAT,
                                 EOTY_EOTY_ID = Convert.ToDecimal(b.EOTY_EOTY_ID),
                                 b.INCO_TYPE,
                                 b.STAC_DYNM,
                                 b.EXPL_DATE,
                                 b.hasAttach,
                                 countOfInstruments = Convert.ToDecimal(b.countOfInstruments),
                                 postClass = b.postClass
                             }).ToList();

                return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [EntityAuthorize("EXP_POST_LINE > select,delete")]
        public ActionResult RemovePost(int TargetID)
        {
            try
            {
                var myobj = (from b in Db.EXP_POST_LINE where b.EPOL_ID == TargetID select b).FirstOrDefault();
                Db.EXP_POST_LINE.Remove(myobj);
                Db.SaveChanges();
            }
            catch { }
            return Json(new { Success = true });
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [EntityAuthorize("EXP_POST_LINE > select,update")]
        public ActionResult PostLineUpdate([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<EXP_POST_LINE> exp_post_line)
        {
            if (exp_post_line != null && ModelState.IsValid)
            {
                foreach (EXP_POST_LINE row in exp_post_line)
                {
                    var myobj = (from b in Db.EXP_POST_LINE where b.EPOL_ID == row.EPOL_ID select b).FirstOrDefault();
                    myobj.EPOL_NAME = row.EPOL_NAME;
                    myobj.ORGA_CODE = row.ORGA_CODE;
                    myobj.EOTY_EOTY_ID = row.EOTY_EOTY_ID;
                    myobj.EOCO_EOCO_ID = row.EOCO_EOCO_ID;
                    myobj.EUNL_EUNL_ID = row.EUNL_EUNL_ID;
                    myobj.GEOL_G_CODE = row.GEOL_G_CODE;
                    myobj.CODE_DISP = row.CODE_DISP;
                    Db.SaveChanges();
                }
            }
            return Json(exp_post_line.ToDataSourceResult(request, ModelState));
        }

        [HttpPost]
        [EntityAuthorize("EXP_POST_LINE > select,delete")]
        public ActionResult PostLineDelete(List<string> selectedRows)
        {
            try
            {
                int id;
                foreach (string item in selectedRows)
                {
                    id = int.Parse(item);
                    var myobj = (from b in Db.EXP_POST_LINE where b.EPOL_ID == id select b).FirstOrDefault();
                    Db.EXP_POST_LINE.Remove(myobj);
                    Db.SaveChanges();
                }
            }
            catch { }
            return Json(new { Deleted = "Success" }, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult GetInstruDesc()
        {
            var query = (from b in Db.EXP_INSTRUMENT
                         select new { b.EINS_ID, b.EINS_DESC }).OrderBy(x => x.EINS_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_POST_LINE > select")]
        public ActionResult GetPostLineDesc()
        {
            var query = (from b in Db.EXP_POST_LINE
                         select new
                         {
                             b.EPOL_ID,
                             b.EPOL_NAME,
                             b.CODE_DISP
                         }).OrderBy(x => x.EPOL_NAME);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_TYPE_EQUIP > select")]
        public ActionResult GetPostLineTypeEq()
        {
            var query = (from b in Db.EXP_TYPE_EQUIP
                         select new
                         {
                             b.ETEX_ID,
                             b.ETEX_DESC
                         }).OrderBy(x => x.ETEX_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Static_Post_valuatt(int? id)
        {
            ViewBag.instruId = id;
            ViewBag.ESIN = Db.EXP_STATE_INSTRU.Select(c => new { c.ESIN_ID, c.ESIN_DESC }).ToList();
            ViewData["ETYI"] = Db.EXP_TYPE_INSTRU.Select(c => new { c.ETYI_ID, c.ETYI_DESC }).ToList();
            ViewData["temp_position"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 171).AsEnumerable();
            ViewData["temp_type"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 165).AsEnumerable();
            ViewData["temp_algn"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 176).AsEnumerable();
            ViewData["EINS1"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX1"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["EBAY"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC }).AsEnumerable();
            ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable(); ;
            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["ETEXy"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_YEAR }).AsEnumerable();
            ViewData["ETEXm"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_VER }).AsEnumerable();
            ViewData["XATT"] = Db.EXP_ATTRIBUTE.Select(c => new { c.XATT_ID, c.XATT_TITLE, c.ETEX_ETEX_ID, c.EINS_EINS_ID }).AsEnumerable();
            ViewData["DMAN"] = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL }).AsEnumerable();
            return View();
        }

        protected int CreateAttr(int? id)
        {
            int retVal = 0;
            using (var conn = new OracleConnection(GlobalConst.ConnectionString))
            {
                using (var command = conn.CreateCommand())
                {
                    try
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.CommandText = "EXP_CREATE_ATTRIBUTE_P";
                        command.Parameters.Add(new OracleParameter()
                        {
                            DbType = System.Data.DbType.Int32,
                            Direction = System.Data.ParameterDirection.Input,
                            Value = id,
                            ParameterName = "EPIUID"
                        });
                        conn.Open();
                        retVal = command.ExecuteNonQuery();
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        command.Dispose();
                        conn.Close();
                        conn.Dispose();
                    }
                }
            }

            return retVal;
        }

        public ActionResult Static_Post_valuatt2(int? id)
        {
            ViewBag.instruId = id;
            int?[] array = { 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 24, 62, 259 }; // مقادیر درست شود
            var einsId = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b.EINS_EINS_ID).FirstOrDefault();
            if (array.Contains(einsId))
            {
                var result = CreateAttr(id);
            }
            return View();
        }

        public ActionResult Readvalueattr([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var q = from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == id select b;
            int eetx = 0;
            int eins = 0;
            if (q.FirstOrDefault() != null)
            {
                if (q.FirstOrDefault().ETEX_ETEX_ID != null)
                    eetx = Convert.ToInt32(q.FirstOrDefault().ETEX_ETEX_ID.ToString());

                if (q.FirstOrDefault().EINS_EINS_ID != null)
                    eins = Convert.ToInt32(q.FirstOrDefault().EINS_EINS_ID.ToString());
            }

            var query = from b in Db.EXP_VALUE
                        join p in Db.EXP_TYPE_EQUIP on b.ETEX_ETEX_ID equals p.ETEX_ID
                        where b.EINS_EINS_ID == eins && b.ETEX_ETEX_ID == eetx
                        select new
                        {
                            b.VALU_ID,
                            b.EINS_EINS_ID,
                            b.ETEX_ETEX_ID,
                            p.ETEX_VER,
                            p.ETEX_YEAR,
                            b.XATT_XATT_ID,
                            b.VALU_VALU,
                            b.DMAN_DMAN_ID
                        };
            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult Readvalueattr2([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = (from b in Db.EXP_ATTRIBUTE
                         join c in Db.EXP_VALUE on b.XATT_ID equals c.XATT_XATT_ID
                         where c.EPIU_EPIU_ID == id
                         orderby b.XATT_ID ascending
                         select new
                         {
                             c.VALU_ID,
                             c.VALU_VALU,
                             c.EPIU_EPIU_ID,
                             c.XATT_XATT_ID,
                             c.EINS_EINS_ID,
                             einsId = b.EINS_EINS_ID,
                             xattId = b.XATT_ID,
                             xattTitle = b.XATT_TITLE
                         }).ToList();

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        //[EntityAuthorize("DomainViewModel > update")]
        public ActionResult Updatevalueattr2([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_VALUE> models)
        {
            var results = new List<EXP_VALUE>();
            if (models != null && ModelState.IsValid)
            {
                if (models.Any())
                {
                    //string logPattern = "ویرایش جدول [{0}] ردیف ها({1})";
                    List<object> modifiedKeys = new List<object>();
                    foreach (EXP_VALUE modelItem in models)
                    {
                        Db.Entry(modelItem).State = EntityState.Modified;
                        modifiedKeys.Add(modelItem.VALU_ID);
                    }

                    Db.SaveChanges();
                }
            }
            return Json(results.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Static_Post_Line(int? id)
        {
            ViewBag.postId = id;
            ViewData["ERHI"] = Db.EXP_RESPO_HIST.Select(c => new { c.ERHI_ID, c.ERHI_DESC });
            ViewData["EUNL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewData["EARD"] = Db.EXP_AOC_RDC.Select(c => new { c.EARD_ID, c.EARD_NAME });
            ViewData["ELRD"] = Db.EXP_LOCATION_RDC.Select(c => new { c.ELRD_ID, c.ELRD_DESC });
            ViewData["CODEO"] = Db.PAY_ORGAN.Select(c => new { c.CODE, c.ORGA_DESC }).AsEnumerable();
            ViewData["ORGA"] = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
            ViewData["post_TYPE"] = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewData["OWNER"] = Db.EXP_OWENER_COMPANY.Select(c => new { c.EOCO_ID, c.EOCO_DESC });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            return View();
        }

        //[EntityAuthorize("EXP_LINE_V > select")]
        public ActionResult ReadLinespost([DataSourceRequest] DataSourceRequest request, int? idp)
        {
            var query = from b in Db.EXP_LINE_V
                        join j in Db.EXP_POST_LINE_INSTRU on b.EXP_POST_LINE_INSTRU_EPIU_ID equals j.EPIU_ID
                        where (j.EPOL_EPOL_ID_INSLIN == idp || j.EPOL_EPOL_ID_LINE == idp) && j.EPIU_EPIU_ID_SAVABEGH == null
                        select new
                        {
                            b.EXP_POST_LINE_EPOL_ID,
                            b.EXP_POST_LINE_INSTRU_EPIU_ID,
                            b.EXP_POST_LINE_EPOL_NAME,
                            b.EXP_POST_LINE_CODE_DISP,
                            b.EXP_POST_LINE_INSTRU_LINE_TYPE,
                            b.EXP_POST_LINE_EUNL_EUNL_ID,
                            b.EXP_POST_LINE_ORGA_CODE,
                            b.EXP_POST_LINE_EOCO_EOCO_ID,
                            b.EXP_POST_LINE_A1_EPOL_NAME,
                            b.EXP_POST_LINE_A1_ORGA_CODE,
                            b.EXP_POST_LINE_A2_EPOL_NAME,
                            b.EXP_POST_LINE_A2_ORGA_CODE
                        };
            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult pointinfo_new(int? id)
        {
            ViewData["EARD"] = Db.EXP_AOC_RDC.Select(c => new { c.EARD_ID, c.EARD_NAME });
            ViewBag.instruId = id;
            if (id != 0)
            {
                EXP_POINTS inst = (from b in Db.EXP_POINTS where b.EPIU_EPIU_ID == id select b).FirstOrDefault();
                return View(inst);
            }
            return View();
        }

        public ActionResult Point_New(int? id, int? instruId)
        {
            ViewData["EARD"] = Db.EXP_AOC_RDC.Select(c => new { c.EARD_ID, c.EARD_NAME });
            ViewBag.pointId = id; // EPNT_ROW
            ViewBag.instruId = instruId;
            if (id != 0)
            {
                EXP_POINTS inst = (from b in Db.EXP_POINTS where b.EPNT_ROW == id select b).FirstOrDefault();
                return View(inst);
            }
            return View();
        }

        public ActionResult ReadPoint([DataSourceRequest] DataSourceRequest request, int? idp)
        {
            var query = (from b in Db.EXP_POINTS
                         where b.EPIU_EPIU_ID == idp
                         select new
                         {
                             b.ACTUAL_BIT_NO,
                             b.BAY_FEEDER_NO,
                             b.EARD_EARD_ID,
                             b.EPIU_EPIU_ID,
                             b.EPNT_COMMENT,
                             b.EPNT_ROW,
                             b.IEC_HIGH,
                             b.IEC_LOW,
                             b.IEC_MID,
                             b.ITEM_NO,
                             b.LOR,
                             b.MARSHAL_CUBICLE,
                             b.MARSHAL_LABLE,
                             b.MARSHAL_NO,
                             b.MARSHAL_RACK,
                             b.MARSHAL_TERMINAL,
                             b.PHYSICAL_STATION,
                             b.RTU_CORE,
                             b.RTU_TERMINAL,
                             b.STATUS
                         });
            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult InsertPoint(Equipment.Models.EXP_POINTS NewItem, int? pointId, int instruId)
        {
            int id = Convert.ToInt32(instruId);
            int u = Convert.ToInt32(pointId);

            if (u == 0)
            {
                NewItem.EPIU_EPIU_ID = id;
                Db.EXP_POINTS.Add(NewItem);
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.ITEM_NO), CoustomData = 1 }.ToJson();
            }
            else
            {
                var row = (from b in Db.EXP_POINTS where b.EPNT_ROW == u select b).FirstOrDefault();
                row.ACTUAL_BIT_NO = NewItem.ACTUAL_BIT_NO;
                row.BAY_FEEDER_NO = NewItem.BAY_FEEDER_NO;
                row.EARD_EARD_ID = NewItem.EARD_EARD_ID;
                row.IEC_HIGH = NewItem.IEC_HIGH;
                row.IEC_LOW = NewItem.IEC_LOW;
                row.IEC_MID = NewItem.IEC_MID;
                row.ITEM_NO = NewItem.ITEM_NO;
                row.MARSHAL_CUBICLE = NewItem.MARSHAL_CUBICLE;
                row.MARSHAL_LABLE = NewItem.MARSHAL_LABLE;
                row.MARSHAL_NO = NewItem.MARSHAL_NO;
                row.MARSHAL_RACK = NewItem.MARSHAL_RACK;
                row.MARSHAL_TERMINAL = NewItem.MARSHAL_TERMINAL;
                row.PHYSICAL_STATION = NewItem.PHYSICAL_STATION;
                row.RTU_CORE = NewItem.RTU_CORE;
                row.RTU_TERMINAL = NewItem.RTU_TERMINAL;
                row.STATUS = NewItem.STATUS;
                row.EPNT_COMMENT = NewItem.EPNT_COMMENT;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
            }
        }

    }

}
