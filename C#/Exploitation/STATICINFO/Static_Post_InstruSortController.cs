using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.STATICINFO
{
    public partial class Static_Post_ListController
    {

        public ActionResult Static_Post_InstruSort(int? id, int? PostID)
        {
            try
            {
                ViewData["INSTRUMENT"] = Db.EXP_POST_LINE_INSTRU.Where(w => w.EPOL_EPOL_ID == PostID).Select(c => new { c.EPIU_ID, c.CODE_NAME });
                ViewBag.instruId = id;
                ViewBag.postId = PostID;
                return View();
            }
            catch
            {
                ViewBag.instruId = null;
                return View();
            }
        }

        [EntityAuthorize("EXP_SORT_INSTRU > select")]
        public ActionResult ReadSort([DataSourceRequest] DataSourceRequest request, int? id)
        {
            var query = from b in Db.EXP_SORT_INSTRU
                        //join c in db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                        where b.EPIU_EPIU_ID == id
                        select new
                        {
                            b.ESON_ID,
                            b.EPIU_EPIU_ID_R,
                            b.ESON_ORDE,
                            b.ESON_TYPE
                            //,instru = c.CODE_NAME
                        };
            return Json(query.ToDataSourceResult(request));
        }

        [HttpPost]
        [EntityAuthorize("EXP_SORT_INSTRU > select,insert,update")]
        public ActionResult AddInstruSort(string instrument, string order, string type, int? id, int? instruId)
        {
            if (order == null || order == "")
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "ترتیب چیدمان را مشخص کنید" }.ToJson();
            }

            EXP_SORT_INSTRU model = new EXP_SORT_INSTRU();
            if (id == null)
            {
                model.ESON_TYPE = type;
                model.EPIU_EPIU_ID_R = Convert.ToInt32(instrument);
                model.ESON_ORDE = Convert.ToInt32(order);
                model.EPIU_EPIU_ID = Convert.ToInt32(instruId);
                Db.EXP_SORT_INSTRU.Add(model);
                Db.SaveChanges();
            }
            else
            {
                model = Db.EXP_SORT_INSTRU.Find(id);
                model.ESON_TYPE = type;
                model.EPIU_EPIU_ID_R = Convert.ToInt32(instrument);
                model.ESON_ORDE = Convert.ToInt32(order);
                Db.SaveChanges();
            }

            return Json(new { Success = true }, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [EntityAuthorize("EXP_SORT_INSTRU > select,insert,update")]
        public ActionResult UpdateInstruSort([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<EXP_SORT_INSTRU> expSort)
        {
            if (expSort != null && ModelState.IsValid)
            {
                foreach (EXP_SORT_INSTRU row in expSort)
                {
                    var model = (from b in Db.EXP_SORT_INSTRU where b.ESON_ID == row.ESON_ID select b).FirstOrDefault();
                    model.ESON_TYPE = row.ESON_TYPE;
                    model.EPIU_EPIU_ID_R = row.EPIU_EPIU_ID_R;
                    model.ESON_ORDE = row.ESON_ORDE;
                    Db.SaveChanges();
                }
            }
            return Json(expSort.ToDataSourceResult(request, ModelState));
        }

    }

}