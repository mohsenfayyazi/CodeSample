using Asr.Base.Globalization;
using Asr.Cartable;
using Asr.Security;
using Asr.Text;
using Equipment.Codes.Security;
using Equipment.DAL;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.Request
{
    [Authorize]
    public class RequestController : DbController
    {
        /*  این اکشن چک بین تاریخ اعلام دیفکت و تاریخ روز را دارد که از تاریخ روز تاریخ اعلام کوچکتر نباشد */
        public JsonResult checkCurrentDate(string date)
        {
            try
            {
                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate = dateTime.GetMiladiDateTime(date);
                DateTime currentDate = DateTime.Now;
                if (miladiDate > currentDate)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        /* این اکشن چک بین تاریخ اعلام برای اجرا و تاریخ دیفکت (اعلام) را بر عهده دارد */
        public JsonResult checkElamDate(string elamDate, string elamExecuteDate)
        {
            try
            {
                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate1 = dateTime.GetMiladiDateTime(elamDate);
                DateTime miladiDate2 = dateTime.GetMiladiDateTime(elamExecuteDate);
                if (miladiDate2 < miladiDate1)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        /*این اکشن چک تاریخ اعلام برای اجرا و تاریخ مراجعه را بر عهده دارد */
        public JsonResult checkMorajeDate(string morajeDate, string elamExecuteDateInput, string elamExecuteDateDisplay)
        {
            try
            {
                string elamDate = string.Empty;
                if (elamExecuteDateInput != null)
                {
                    elamDate = elamExecuteDateInput;
                }
                else if (elamExecuteDateDisplay != null)
                {
                    elamDate = elamExecuteDateDisplay;
                }

                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate1 = dateTime.GetMiladiDateTime(morajeDate);
                DateTime miladiDate2 = dateTime.GetMiladiDateTime(elamDate);
                if (miladiDate2 > miladiDate1)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        /* این اکشن چک تاریخ مراجعه و تاریخ رفع عیب را بر عهده دارد  */
        public JsonResult checkRafDate(string morajeDate, string rafDate)
        {
            try
            {
                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate1 = dateTime.GetMiladiDateTime(morajeDate);
                DateTime miladiDate2 = dateTime.GetMiladiDateTime(rafDate);
                if (miladiDate2 < miladiDate1)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult program(string etdo_id)
        {
            int etdo_etdo_id = 0;
            if (etdo_id != "")
            {
                etdo_etdo_id = Convert.ToInt32(etdo_id);
            }

            var RetVal = (from b in PublicRepository.get_program()
                          where (b.ETDO_ETDO_ID == etdo_etdo_id && b.EPRO_ID != 250 && b.EPRO_ID != 252 && b.EPRO_ID != 321)
                          orderby b.EPRO_DESC
                          select b).AsEnumerable().Select(b => new { b.EPRO_ID, b.EPRO_DESC }).OrderBy(b => b.EPRO_DESC);
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        public ActionResult function(string epro_id)
        {
            if (epro_id == "")
            {
                epro_id = "0";
            }
            int epro_epro_id = Convert.ToInt32(epro_id);
            var RetVal = (from b in PublicRepository.get_function()
                          where (b.EPRO_EPRO_ID == epro_epro_id)
                          orderby b.EFUN_DESC
                          select b).AsEnumerable().Select(b => new { b.EFUN_ID, b.EFUN_DESC }).OrderBy(b => b.EFUN_DESC);
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        /*این اکشن در صورتیکه درخواست  انجام کار  انتخابی از طرف کاربر درخواست
         * انجام کار  تمدیدی باشد درخواست  انجام کار  های که در سیستم ثبت شده است را به کاربر نمایش می دهد 
        */
        private string instpiro(decimal i)
        {
            var q = from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == i select new { b.EXP_POST_LINE.EPOL_NAME, b.EXP_POST_LINE_INSTRU.CODE_NAME };
            return q.FirstOrDefault().EPOL_NAME + "  " + q.FirstOrDefault().CODE_NAME;

        }

        public ActionResult get_rel_doc_DP(int? postid)
        {
            //ar RetVal = (from b in PublicRepository.Get_Doc() where (b.ETDO_ETDO_ID == id) orderby b.DOC_NUMB select b).AsEnumerable().Select(b => new { b.EEDO_ID, b.DOC_NUMB });
            //var RetVal = (from b in Db.EXP_EXPI_DOC.AsEnumerable()
            //              join c in Db.EXP_EDOC_INSTRU//.AsEnumerable() 
            //              on b.EEDO_ID equals c.EEDO_EEDO_ID
            //              where b.ETDO_ETDO_ID == 21 && c.EPOL_EPOL_ID == postid
            //              select new { b.EEDO_ID, fullname = b.DOC_NUMB + " " + instpiro(b.EEDO_ID) }).ToList().Distinct();

            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var RetVal = conn.Query(@"select distinct exp_expi_doc.DOC_NUMB || ' * ' || NVL(EXP_POST_LINE_INSTRU.CODE_NAME,'کل پست') AS REQUEST_MAINNAME, EXP_EDOC_INSTRU.EEDO_EEDO_ID AS EEDO_EEDO_ID
                                                            from EXP_EXPI_DOC join EXP_EDOC_INSTRU
                                                            on EXP_EXPI_DOC.EEDO_ID = EXP_EDOC_INSTRU.EEDO_EEDO_ID
                                                            left join EXP_POST_LINE_INSTRU on EXP_EDOC_INSTRU.EPIU_EPIU_ID= EXP_POST_LINE_INSTRU.EPIU_ID
                                                            where EXP_EXPI_DOC.ETDO_ETDO_ID = 21 and EXP_EDOC_INSTRU.EPOL_EPOL_ID = :filter", postid)
                             .Select(b => new
                             {
                                 b.EEDO_EEDO_ID,
                                 b.REQUEST_MAINNAME
                             }).OrderByDescending(b => b.EEDO_EEDO_ID).ToList();
                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }

        }

        //public ActionResult MainRequest_Grid(int? postid)
        //{
        //    return View();
        //}

        //public ActionResult get_rel_doc_DP(int id)
        //{
        //    var RetVal = (from b in PublicRepository.Get_Doc() where (b.ETDO_ETDO_ID == id) orderby b.DOC_NUMB select b).AsEnumerable().Select(b => new { b.EEDO_ID, b.DOC_NUMB });
        //    return Json(RetVal, JsonRequestBehavior.AllowGet);
        //}

        ///////////////////////////////EXPI DOC

        /*اولین اکشن که برای باز شدن فرم درخواست دهنده درخواست  استفاده شده است  */
        //[MenuAuthorize]
        [EntityAuthorize("EXP_POST_LINE > select|CGT_PRO > select|PAY_ORGAN > select|EXP_EXPI_DOC > select | EXP_EITEM_DOC_VALUE > select | EXP_POST_LINE_INSTRU > select | EXP_INSTRUMENT > select | EXP_TYPE_BAY > select | EXP_UNIT_LEVEL > select | EXP_OFF_STAT > select | EXP_PFUNCTION > select")]
        public ActionResult Exp_Requ_Doc(string id, int? def_id)
        {
            ViewData["def_id"] = def_id; // Added By Mr.Fayyazi
            Session["ETDO_ID"] = 21;
            Session["id"] = id;
            Session["eedo_id"] = null;
            ViewData["post_line"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
            ViewData["project"] = Db.CGT_PRO.Where(o => o.CPRO_PRJ_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_PRJ_CODE).FirstOrDefault())
                                            .Where(o => o.CPLA_PLN_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_CPLA_PLN_CODE).FirstOrDefault())
                                            .Select(o => new { o.PRJ_CODE, o.PRJ_DESC })
                                            .AsEnumerable();
            ViewData["Organ"] = Db.PAY_ORGAN.Select(o => new { o.CODE, o.ORGA_DESC }).AsEnumerable();
            ViewData["Type_Doc"] = Db.EXP_EXPI_DOC.Select(o => new { o.EEDO_ID, o.EXP_TYPE_DOC, o.ETDO_ETDO_ID, o.EXP_TYPE_DOC.ETDO_DESC }).Where(o => o.ETDO_ETDO_ID == o.EXP_TYPE_DOC.ETDO_ID).AsEnumerable();
            ViewData["Doc_val"] = Db.EXP_EITEM_DOC_VALUE.Select(o => new { o.EIDR_ID, o.EIDR_VALUE });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EINS_EINS_ID, o.CODE_DISP });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID != null).Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Bay = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
            ViewBag.UniteV = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.EXP_OFF_STAT.Select(c => new { c.EOFS_ID, c.EOFS_DESC });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.exp_doc = Db.EXP_EXPI_DOC;
            return View("Exp_Requ_Doc");
        }

        /*این اکشن درخواست  انجام کار  جدیدی را ثبت می نماید
         * یا در صورتیکه کاربر بخواهد بعد از ثبت اطلاعات تغییری اعمال کند تغییرات را ثبت می کند */
        [EntityAuthorize("SEC_JOB_TYPE_DOC>select|EXP_EDOC_INSTRU>select,insert,update|EXP_EXPI_DOC>select,insert,update|EXP_SUPL_DOC>select,insert,update|EXP_RELATION_DOC>select,insert,update|EXP_EITEM_DOC_VALUE>select,insert,update")]
        public ActionResult Insert_Expi_Doc(EXP_EXPI_DOC objecttemp)
        {
            string check = Request.Form["eedoId"];
            int etdo_id = 0;
            string time = string.Empty;
            if (!String.IsNullOrEmpty(Request.Form["EXP_EXPI_DOC.ETDO_ETDO_ID"]))
            {
                etdo_id = Convert.ToInt32(Request.Form["EXP_EXPI_DOC.ETDO_ETDO_ID"]);
            }

            string on_TIME = string.Empty;
            string off_TIME = string.Empty;
            string Qjdti = (from b in Db.SEC_JOB_TYPE_DOC where b.ETDO_ETDO_ID == etdo_id && b.ROWI_ORDE == 1 select b.JDTY_ID).FirstOrDefault().ToString();
            decimal QCURENT = Convert.ToDecimal(Qjdti);
            decimal? epiuid = 0;
            //int? eins = 0;
            int? etby = 0;
            int? ecba = 0;
            int? eunlId = 0;
            string offd = string.Empty;
            string onda = string.Empty;
            int? idinst = 0;
            offd = Request.Form["ofDATEreq"];
            onda = Request.Form["onDATEreq"];

            string POSTINST = string.Empty;
            string detail = string.Empty;
            string bayId = string.Empty;

            int? postcode = 0;
            int typeo = 21;
            if (Request.Form["type_doc"] != "" && Request.Form["type_doc"] != null)
            {
                typeo = Convert.ToInt32(Request.Form["type_doc"].ToString());
            }

            string dateNow = DateTime.Now.GetShamsi();
            if (Request.Form["EXP_EXPI_DOC.EEDO_DATE"].CompareTo(dateNow) < 0 || Request.Form["EXP_EXPI_DOC.EEDO_DATE"] != dateNow)
            {
                return new ServerMessages(ServerOprationType.Failure)
                {
                    ExceptionMessage = string.Format(" امکان ثبت درخواست برای روزهای قبل یا بعد امکان پذیر نمی باشد. \n این خطا ممکن است بدلیل ناهماهنگی تاریخ سیستم شما با تاریخ سرور رخ دهد. \n لطفا تاریخ سیستم خود را با سرور هماهنگ کنید سپس مجددا تلاش کنید. \n تاریخ سرور : {0}", dateNow)
                }.ToJson();
            }


            if (Request.Form["idform"] == "1")
            {
                //if (Request.Form["typeinstREQUEST"] != "0")
                //{
                int instruId = string.IsNullOrEmpty(Request.Form["HiddenInstrID"]) ? 0 : Convert.ToInt32(Request.Form["HiddenInstrID"]);
                int offStat = string.IsNullOrEmpty(Request.Form["offstat"]) ? 0 : Convert.ToInt32(Request.Form["offstat"]);
                string custStat = Request.Form["CUST_STAT"].ToString();
                string typeInst = Request.Form["typeinstREQUEST"].ToString();

                string postId = string.IsNullOrEmpty(Request.Form["EPOL_EPOL_ID_requ"].ToString()) ?
                                Request.Form["postIdno"].ToString() :
                                Request.Form["EPOL_EPOL_ID_requ"].ToString();

                var WorkDate = CheckWorkDate(instruId, offStat, custStat, typeInst, postId);
                if (WorkDate > 0)
                {
                    int day = (Db.Database.SqlQuery<int>("SELECT FDAYS_BETWEEN_U('" + dateNow + "','" + offd + "')  FROM dual").FirstOrDefault());
                    if (WorkDate > day) // اگر تعداد روزهای مورد نیاز بیشتر از مدت زمان انتخاب شده باشد امکان ثبت وجود ندارد
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("برای ثبت این درخواست باید از تاریخ ثبت تا تاریخ شروع انجام کار {0} روز فاصله وجود داشته باشد", WorkDate) }.ToJson();
                }
                //}
            }

            if (etdo_id == 21)
            {
                /*چک ایتم های که مربوط به درخواست حتما بایستی پر شده باشد */
                if (
                    ((((Request.Form["function"] == "" || Request.Form["EPOL_EPOL_ID_requ"] == "" || Request.Form["ORGA_CODE_request"] == "" ||
                        ((Request.Form["HiddenInstrID"] == "" && Request.Form["HiddenInstrDetailID"] == "" && Request.Form["HiddenBayID"] == "" && Request.Form["typeinstREQUEST"] != "0") ||
                           (Request.Form["typeinstREQUEST"] == "0" && Request.Form["EPOL_EPOL_ID_requ"] == ""))
                        )) && typeo == 21) ||
                    (typeo == 2 && Request.Form["defectnumber"] == "") || (typeo == 101 && Request.Form["prognumber"] == ""))

                    ||

                    (Request.Form["EXP_EXPI_DOC.EEDO_DATE"] == "" || Request.Form["ofDATEreq"] == "" || Request.Form["off_TIME"] == "" ||
                     Request.Form["onDATEreq"] == "" || Request.Form["on_TIME"] == "" || Request.Form["EPEX_EPEX_ID"] == "" ||
                     (Request.Form["EPEX_EPEX_ID2"] == "" && Request.Form["EEDO_TYPE"] == "1") || Request.Form["sendidd"] == "" ||
                      Request.Form["offstat"] == "" || Request.Form["CUST_STAT"] == "" || Request.Form["EART_STAT"] == "" ||
                     ((Request.Form["program"] == "" || Request.Form["function"] == "") && typeo == 21))
                    )
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات برای ثبت کامل نیست" }.ToJson();
                }


                if (!string.IsNullOrEmpty(check))
                {
                    var findRequest = Db.EXP_EDOC_INSTRU.Where(x => x.EEDO_EEDO_ID == Convert.ToDecimal(check));
                    if (findRequest.Any())
                    {
                        var postId = findRequest.Select(x => x.EPOL_EPOL_ID).Distinct();
                        if (postId.Count() > 1)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "امکان تغییر پست ثبت شده وجود ندارد، لطفا ابتدا تجهیزات را حذف کنید سپس مجددا جهت تغییر پست اقدام نمایید" }.ToJson();
                        }
                    }
                }

                if (typeo == 2)
                {
                    if (Request.Form["defectnumber"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شماره دیفکت را انتخاب نمایید" }.ToJson();
                    }
                    else
                    {

                        int defectid = Convert.ToInt32(Request.Form["defectnumber"].ToString());
                        var qdefect = (from b in Db.EXP_EXPI_DOC
                                       join k in Db.EXP_EDOC_INSTRU on b.EEDO_ID equals k.EEDO_EEDO_ID
                                       where b.EEDO_ID == defectid
                                       select new { b.EFUN_EFUN_ID, b.ORGA_CODE, k.EERR_EERR_ID, b.EPOL_EPOL_ID, k.EINS_EINS_ID, k.EPIU_EPIU_ID, k.ETBY_ETBY_ID, k.OFF_DATE, k.ON_DATE }).FirstOrDefault();

                        if (Request.Form["idform"] == "3" && qdefect.EFUN_EFUN_ID == 1312)
                        {
                            objecttemp.EFUN_EFUN_ID = 1901;
                        }
                        else
                        {
                            objecttemp.EFUN_EFUN_ID = qdefect.EFUN_EFUN_ID;
                        }
                        objecttemp.EPOL_EPOL_ID = qdefect.EPOL_EPOL_ID;
                        postcode = qdefect.EPOL_EPOL_ID;
                        epiuid = qdefect.EPIU_EPIU_ID;
                        idinst = qdefect.EERR_EERR_ID;

                        offd = Request.Form["ofDATEreq"];
                        onda = Request.Form["onDATEreq"];


                    }
                }

                if (Request.Form["defectnumber"] != null && Request.Form["prognumber"] != null)
                {
                    if (typeo == 21 && (Request.Form["defectnumber"] != "" || Request.Form["prognumber"] != ""))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = " دیفکت و برنامه نباید انتخاب شود" }.ToJson();
                    }
                }

                if (typeo == 21)
                {
                    if (!String.IsNullOrEmpty(Request.Form["function"]))
                    {
                        objecttemp.EFUN_EFUN_ID = Convert.ToInt32(Request.Form["function"]);
                    }

                    if (!String.IsNullOrEmpty(Request.Form["EPOL_EPOL_ID_requ"]))
                    {
                        objecttemp.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID_requ"]);
                        postcode = Convert.ToInt32(Request.Form["EPOL_EPOL_ID_requ"]);
                    }

                    string typeeins = string.Empty;

                    if (Request.Form["HiddenInstrTypeID"] != "" && Request.Form["HiddenInstrTypeID"] != null)
                    {
                        typeeins = Request.Form["HiddenInstrTypeID"].ToString();

                        if (Request.Form["HiddenInstrID"] != "" && Request.Form["HiddenInstrID"] != null)
                        {
                            POSTINST = Request.Form["HiddenInstrID"];
                            epiuid = Convert.ToInt32(POSTINST);
                            bayId = null;
                            etby = null;
                            ecba = null;
                        }

                        if (Request.Form["HiddenInstrDetailID"] != "" && Request.Form["HiddenInstrDetailID"] != null)
                        {
                            detail = Request.Form["HiddenInstrDetailID"];
                            idinst = Convert.ToInt32(detail);
                        }
                    }
                    else
                    {
                        if (Request.Form["HiddenBayID"] != "" && Request.Form["HiddenBayID"] != null)
                        {
                            bayId = Request.Form["HiddenBayID"];
                            ecba = Convert.ToInt32(bayId);
                            var giveEpiu = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == ecba select new { b.EPIU_EPIU_ID, b.ETBY_ETBY_ID }).FirstOrDefault();
                            epiuid = Convert.ToDecimal(giveEpiu.EPIU_EPIU_ID);
                            etby = Convert.ToInt32(giveEpiu.ETBY_ETBY_ID);
                        }
                    }

                    offd = Request.Form["ofDATEreq"];
                    onda = Request.Form["onDATEreq"];
                }

                if (typeo == 101)
                {
                    if (Request.Form["prognumber"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شماره برنامه را انتخاب نمایید" }.ToJson();
                    }
                    else
                    {
                        int progid = Convert.ToInt32(Request.Form["prognumber"].ToString());
                        var qdefect = (from k in Db.EXP_EDOC_INSTRU
                                       where k.EDIN_ID == progid
                                       select new { k.EFUN_EFUN_ID, k.ORGA_CODE, k.EERR_EERR_ID, k.EPOL_EPOL_ID, k.EINS_EINS_ID, k.EPIU_EPIU_ID, k.EUNL_EUNL_ID, k.ETBY_ETBY_ID, k.ON_DATE, k.OFF_DATE }).FirstOrDefault();

                        objecttemp.EFUN_EFUN_ID = qdefect.EFUN_EFUN_ID;
                        objecttemp.EPOL_EPOL_ID = qdefect.EPOL_EPOL_ID;
                        postcode = qdefect.EPOL_EPOL_ID;
                        epiuid = qdefect.EPIU_EPIU_ID;
                        idinst = qdefect.EERR_EERR_ID;
                        eunlId = qdefect.EUNL_EUNL_ID;
                        etby = qdefect.ETBY_ETBY_ID;
                        offd = qdefect.OFF_DATE;
                        onda = qdefect.ON_DATE;

                        var findBay = (from b in Db.EXP_CORE_BAY
                                       where b.EPIU_EPIU_ID == epiuid && b.ETBY_ETBY_ID == etby && b.EPOL_EPOL_ID == postcode && b.EUNL_EUNL_ID == eunlId
                                       select new { b.ECBA_ID }).FirstOrDefault();

                        if (findBay != null)
                        {
                            ecba = findBay.ECBA_ID;
                        }
                        else
                        {
                            ecba = null;
                        }

                    }
                }


                string offdate = offd;
                string onDATE = onda;
                if (offdate == null || onDATE == null)
                {
                    /*بدست اوردن تاریخ شروع و پایان از ثبت در تجهیز اصلی */
                    int eid = Convert.ToInt32(check);
                    var f = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eid && b.CUT_STAT == "1" && b.JDTY_JDTY_ID == QCURENT select b).FirstOrDefault();
                    offdate = f.OFF_DATE;
                    onDATE = f.ON_DATE;
                }



                string off_TIME1 = Request.Form["off_TIME"];
                string on_TIME1 = Request.Form["on_TIME"];

                if (Request.Form["stattime"].ToString() == "0")
                {
                    /*بدست اورد مدت زمان بین تاریخ شروع  پایان درخواست */
                    time = (Db.Database.SqlQuery<string>("SELECT TIME_BETWEEN_U('" + offdate + "','" + off_TIME1 + "','" + onDATE + "','" + on_TIME1 + "')  FROM dual").FirstOrDefault());
                }
                else
                {
                    /*بدست اورد مدت زمان بین تاریخ شروع  پایان درخواست */
                    int day = (Db.Database.SqlQuery<int>("SELECT FDAYS_BETWEEN_U('" + offdate + "','" + onDATE + "')  FROM dual").FirstOrDefault());
                    /*بدست اورد مدت زمان بین تاریخ شروع  پایان درخواست */
                    string time1 = (Db.Database.SqlQuery<string>("SELECT TIME_BETWEEN_U('" + offdate + "','" + off_TIME1 + "','" + offdate + "','" + on_TIME1 + "')  FROM dual").FirstOrDefault());
                    if (day == 0)
                    {
                        time = time1;
                    }
                    else
                    {
                        if (time1 != null && time1 != "")
                        {
                            var val = time1.Split(':');
                            string hhoff = val[0].ToString();
                            string ssoff = val[1].ToString();

                            int hh = Convert.ToInt32(hhoff) * (day + 1);
                            int ss = Convert.ToInt32(ssoff) * (day + 1);
                            if (ss >= 60)
                            {
                                hh = hh + ss / 60;
                                ss = ss % 60;
                            }
                            time = hh + ":" + ss;
                        }
                    }
                }

                if (Request.Form["stattime"].ToString() == "0")
                {
                    /*چک تاریخ پایان و تاریخ شروع درخواست */
                    if (offdate.CompareTo(onDATE) > 0)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                    }
                    else if (offdate.CompareTo(onDATE) == 0 && off_TIME1.CompareTo(on_TIME1) > 0)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                    }
                }
                else
                {
                    if (offdate.CompareTo(onDATE) > 0)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                    }
                    else if (offdate.CompareTo(onDATE) == 0 && off_TIME1.CompareTo(on_TIME1) > 0)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                    }
                }
            }

            if (check == "" || check == null)
            {
                /*برای درخواستی که هنوز ثبت نشده است */
                int not_id = 0;
                objecttemp.EEDO_ID = objecttemp.EEDO_ID;
                objecttemp.ACTI_NACT = Request.Form["coordinationWithTehran"];
                objecttemp.CCNT_CNTR_NO = Request.Form["CCNT_CNTR_NO"];
                objecttemp.CONF_TYPE = Request.Form["EXP_EXPI_DOC.CONF_TYPE"];
                objecttemp.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];
                objecttemp.EEDO_DATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
                objecttemp.EEDO_TIME = Request.Form["EEDO_TIME"];
                objecttemp.EEDO_DESC = Request.Form["EXP_EXPI_DOC.EEDO_DESC"];
                objecttemp.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];

                if (!String.IsNullOrEmpty(Request.Form["ANPT_ANPT_ID"]))
                    objecttemp.ANPT_ANPT_ID = Convert.ToInt32(Request.Form["ANPT_ANPT_ID"]);

                if (!String.IsNullOrEmpty(Request.Form["CPRO_CPLA_PLN_CODE"]))
                    objecttemp.CPRO_CPLA_PLN_CODE = Convert.ToInt16(Request.Form["CPRO_CPLA_PLN_CODE"]);

                if (!String.IsNullOrEmpty(Request.Form["CPRO_PRJ_CODE"]))
                    objecttemp.CPRO_PRJ_CODE = Convert.ToInt16(Request.Form["CPRO_PRJ_CODE"]);

                if (!String.IsNullOrEmpty(Request.Form["DMAN_DMAN_ID"]))
                    objecttemp.DMAN_DMAN_ID = Convert.ToInt32(Request.Form["DMAN_DMAN_ID"]);

                if (!String.IsNullOrEmpty(Request.Form["sendidd"]))
                    objecttemp.EANA_EANA_ROW = Convert.ToInt32(Request.Form["sendidd"]);

                if (!String.IsNullOrEmpty(Request.Form["EEDO_TYPE"]))
                    objecttemp.EEDO_TYPE = Request.Form["EEDO_TYPE"];

                if (!String.IsNullOrEmpty(Request.Form["EXP_EXPI_DOC.ETDO_ETDO_ID"]))
                    objecttemp.ETDO_ETDO_ID = Convert.ToInt32(Request.Form["EXP_EXPI_DOC.ETDO_ETDO_ID"]);

                if (postcode != 0)
                {
                    objecttemp.EPOL_EPOL_ID = postcode;
                }

                objecttemp.ORGA_CODE = Request.Form["ORGA_CODE_request"];
                objecttemp.ORGA_MANA_ASTA_CODE = "7";
                objecttemp.ORGA_MANA_CODE = "6";
                objecttemp.FIRS_DATE = Request.Form["FDATE"];
                objecttemp.FIRS_TIME = Request.Form["EXP_EXPI_DOC.FIRS_TIME"];
                objecttemp.EEDO_YEAR = Request.Form["EXP_EXPI_DOC.EEDO_YEAR"];

                if (!String.IsNullOrEmpty(Request.Form["EEOD_EEOD_ID"]))
                    objecttemp.EEOD_EEOD_ID = Convert.ToInt32(Request.Form["EEOD_EEOD_ID"]);

                if (!String.IsNullOrEmpty(Request.Form["EEVO_EEVO_ID"]))
                    objecttemp.EEVO_EEVO_ID = Convert.ToInt32(Request.Form["EEVO_EEVO_ID"]);

                objecttemp.EVEN_TYPE = Request.Form["EXP_EXPI_DOC.EVEN_TYPE"];
                objecttemp.INFL_TYPE = Request.Form["EXP_EXPI_DOC.INFL_TYPE"];
                objecttemp.LETT_TYPE = Request.Form["EXP_EXPI_DOC.LETT_TYPE"];
                objecttemp.OUT_FUNC = Request.Form["DESC"];
                objecttemp.SEND_TYPE = Request.Form["EXP_EXPI_DOC.SEND_TYPE"];
                objecttemp.TIME_STAT = Request.Form["EXP_EXPI_DOC.TIME_STAT"];
                objecttemp.TWRQ_YEAR = Request.Form["EXP_EXPI_DOC.TWRQ_YEAR"];
                objecttemp.DOC_NUMB = "-1000R";
                Db.EXP_EXPI_DOC.Add(objecttemp);
                Db.SaveChanges();
                objecttemp.DOC_NUMB = /*"R" +*/ objecttemp.EEDO_ID.ToString();

                Db.SaveChanges();

                var rel1 = new EXP_EDOC_INSTRU();

                string tyepinst = Request.Form["typeinstREQUEST"].ToString();
                if (((epiuid != 0 || idinst != 0) && tyepinst != "0") || (postcode != 0 && tyepinst == "0"))
                {
                    int id = (from b in Db.EXP_EDOC_INSTRU
                              where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EPOL_EPOL_ID == postcode &&
                                    (b.EPIU_EPIU_ID == epiuid || b.EERR_EERR_ID == idinst)
                              select b.EDIN_ID).Count();

                    if (id == 0)
                    {
                        rel1.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                        if (epiuid != 0)
                        {
                            rel1.EPIU_EPIU_ID = epiuid;
                        }

                        if (idinst != 0)
                        {
                            rel1.EERR_EERR_ID = idinst;
                        }

                        // جدید اضافه شده، بعد از اعمال تغییرات انتخاب تجهیزات
                        if (etby != 0 && etby != null)
                        {
                            rel1.ETBY_ETBY_ID = etby;
                        }

                        if (ecba != 0 && ecba != null)
                        {
                            rel1.ECBA_ECBA_ID = ecba;
                        }

                        if (eunlId != 0 && eunlId != null) // برای حالت برنامه زمانبندی
                        {
                            rel1.EUNL_EUNL_ID = eunlId;
                        }

                        if (postcode != 0)
                        {
                            rel1.EPOL_EPOL_ID = postcode;
                        }

                        if (offd != null)
                        {
                            rel1.OFF_DATE = offd;
                        }

                        if (onda != null)
                        {
                            rel1.ON_DATE = onda;
                        }

                        rel1.JDTY_JDTY_ID = Convert.ToDecimal(QCURENT.ToString());
                        if (Request.Form["descd"] != null && Request.Form["descd"] != "")
                        {
                            rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                        }

                        if (Request.Form["etbytype"] != null && Request.Form["etbytype"] != "")
                        {
                            rel1.ETBY_ETBY_ID = Convert.ToInt32(Request.Form["etbytype"]);
                        }

                        rel1.OFF_TIME = Request.Form["off_TIME"];
                        rel1.ON_TIME = Request.Form["on_TIME"];
                        rel1.TIME_ISTA = Request.Form["stattime"];
                        rel1.INST_STAT = Request.Form["INST_STAT"];
                        rel1.EART_STAT = Request.Form["EART_STAT"];
                        rel1.CUST_STAT = Request.Form["CUST_STAT"];
                        rel1.ETDO_ETDO_ID = objecttemp.ETDO_ETDO_ID;
                        rel1.CUT_STAT = "1";
                        rel1.CONT_FUN = time;

                        if (Request.Form["Unitvolt"] != "")
                        {
                            rel1.EUNL_EUNL_ID = Convert.ToInt32(Request.Form["Unitvolt"].ToString());
                        }

                        if (Request.Form["offstat"] != "")
                        {
                            rel1.EOFS_EOFS_ID = Convert.ToInt32(Request.Form["offstat"]);
                        }
                        /*ثبت تجهیز اصلی */
                        Db.EXP_EDOC_INSTRU.Add(rel1);
                        Db.SaveChanges();
                    }
                }

                int sup = 0;
                int sup1 = 0;
                int sup2 = 0;
                int sup3 = 0;

                var rel2 = new EXP_SUPL_DOC();

                if (Request.Form["EPEX_EPEX_ID"] != "" && Request.Form["EPEX_EPEX_ID"] != null)
                    sup = Convert.ToInt32(Request.Form["EPEX_EPEX_ID"].ToString());
                if (Request.Form["EPEX_EPEX_ID1"] != "" && Request.Form["EPEX_EPEX_ID1"] != null)
                    sup1 = Convert.ToInt32(Request.Form["EPEX_EPEX_ID1"].ToString());
                if (Request.Form["EPEX_EPEX_ID2"] != "" && Request.Form["EPEX_EPEX_ID2"] != null)
                    sup2 = Convert.ToInt32(Request.Form["EPEX_EPEX_ID2"].ToString());
                if (Request.Form["EPEX_EPEX_ID3"] != "" && Request.Form["EPEX_EPEX_ID3"] != null)
                    sup3 = Convert.ToInt32(Request.Form["EPEX_EPEX_ID3"].ToString());

                if (sup != 0)
                {
                    /*ثبت اطلاعات سرپرست گروه */
                    int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EURP_EURP_ID == sup select b.ESUD_ID).Count();
                    if (idm == 0)
                    {
                        rel2.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                        rel2.POSI_TYEP = "2";
                        rel2.EURP_EURP_ID = sup;
                        rel2.ESUD_DESC = Request.Form["group"];
                        rel2.ESUD_TEL = Request.Form["PhoneNumber"];
                        Db.EXP_SUPL_DOC.Add(rel2);
                        Db.SaveChanges();
                    }
                }

                var rel3 = new EXP_SUPL_DOC();
                if (sup1 != 0)
                {
                    int idm1 = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EURP_EURP_ID == sup1 select b.ESUD_ID).Count();
                    if (idm1 == 0)
                    {
                        /*ثبت اطلاعات جانشین سرپرست گروه */
                        rel3.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                        rel3.POSI_TYEP = "5";
                        rel3.EURP_EURP_ID = sup1;
                        Db.EXP_SUPL_DOC.Add(rel3);
                        Db.SaveChanges();
                    }
                }

                var rel4 = new EXP_SUPL_DOC();
                if (sup2 != 0)
                {
                    int idm2 = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EURP_EURP_ID == sup2 select b.ESUD_ID).Count();

                    if (idm2 == 0)
                    {
                        /*ثبت اطلاعات ناظر */
                        rel4.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                        rel4.POSI_TYEP = "3";
                        rel4.EURP_EURP_ID = sup2;
                        //rel4.EURP_EURP_ID = eurpID;
                        Db.EXP_SUPL_DOC.Add(rel4);
                        Db.SaveChanges();
                    }
                }

                var rel5 = new EXP_SUPL_DOC();
                if (sup3 != 0)
                {
                    int idm3 = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EURP_EURP_ID == sup3 select b.ESUD_ID).Count();

                    if (idm3 == 0)
                    {
                        /*ثبت اطلاعات جانشین ناظر */
                        rel5.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                        rel5.POSI_TYEP = "6";
                        rel5.EURP_EURP_ID = sup3;
                        //rel5.EURP_EURP_ID = eurpID;
                        Db.EXP_SUPL_DOC.Add(rel5);
                        Db.SaveChanges();
                    }
                }

                /*ثبت اطلاعات درخواست برای تمدیدی ها */
                var rel = new EXP_RELATION_DOC();
                string EEDO_EEDO_ID_R = Request.Form["EEDO_EEDO_ID_R"];
                if (!string.IsNullOrEmpty(EEDO_EEDO_ID_R))
                {
                    rel.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                    rel.EEDO_EEDO_ID_R = Convert.ToInt32(EEDO_EEDO_ID_R);
                    Db.EXP_RELATION_DOC.Add(rel);
                    Db.SaveChanges();
                }

                if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                {
                    rel.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                    rel.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                    Db.EXP_RELATION_DOC.Add(rel);
                    Db.SaveChanges();
                }

                /*ثبت اطلاعات ردیف برنامه زمانبندی در صورتیکه درخواست بروی برنامه زمانبندی باشد */
                if (!string.IsNullOrEmpty(Request.Form["prognumber"]))
                {
                    rel.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                    rel.EDIN_EDIN_ID = Convert.ToInt32(Request.Form["prognumber"]);
                    Db.EXP_RELATION_DOC.Add(rel);
                    Db.SaveChanges();
                }

                /*ثبت اطلاعات دیفکت در صورتیکه درخواست بروی دیفکت باشد */
                if (!string.IsNullOrEmpty(Request.Form["defectnumber"]))
                {
                    rel.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                    rel.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["defectnumber"]);
                    Db.EXP_RELATION_DOC.Add(rel);
                    Db.SaveChanges();
                }

                /*برای ثبت اطلاعات ایتم های متغییر فرم که اطلاعات و مقادیر ان در جدول exp_ei*/
                string srow = Request.Form["count"];
                int row = Convert.ToInt32(srow);
                var value = new EXP_EITEM_DOC_VALUE();
                for (int i = 0; i <= row; i++)
                {
                    string val = Request.Form[i.ToString()];
                    string EITY_ID = Request.Form["EITY_ID" + i.ToString()];
                    if (string.IsNullOrEmpty(val))
                    {
                        val = Request.Form["dman" + i.ToString()];
                    }
                    if (!string.IsNullOrEmpty(val))
                    {
                        value.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                        value.EITY_EITY_ID = Convert.ToInt32(EITY_ID);
                        value.EIDR_VALUE = val;
                        Db.EXP_EITEM_DOC_VALUE.Add(value);
                        Db.SaveChanges();
                    }
                }

                string bodymessage = string.Empty;
                string doc_name = string.Empty;

                switch (etdo_id)
                {
                    case (2):
                        {
                            string postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == objecttemp.EPOL_EPOL_ID select b.EPOL_NAME).FirstOrDefault().ToString();
                            var w = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == idinst select b);
                            string instn = w.FirstOrDefault().CODE_NAME.ToString();
                            string insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();
                            if (insttype == "1")
                                instn = " خط " + instn;
                            else
                                instn = " تجهیز " + instn;

                            doc_name = "درخواست انجام کار (دیفکت)";
                            string smessage = " دیفکت " + "به شماره" + objecttemp.DOC_NUMB + " در تاریخ " + objecttemp.EEDO_DATE + " مربوط به " + postn + " و " + instn + " میباشد ";
                            bodymessage = smessage;
                            break;
                        }
                    case (21):
                        {
                            string postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == objecttemp.EPOL_EPOL_ID select b.EPOL_NAME).FirstOrDefault().ToString();

                            string instrdoc = string.Empty;

                            if (epiuid != 0)
                            {
                                var w = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == epiuid select b);
                                string instn = string.Empty;
                                instn = w.FirstOrDefault().CODE_NAME.ToString();
                                string insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();
                                var haveBay = (from b in Db.EXP_TYPE_BAY where b.ETBY_ID == etby select b).FirstOrDefault();
                                if (haveBay != null)
                                {
                                    if (insttype == "1")
                                        instn = " بی خط " + instn;
                                    else
                                        instn = " تجهیز " + haveBay.ETBY_DESC + " " + instn;
                                }
                                else
                                {
                                    if (insttype == "1")
                                        instn = " خط " + instn;
                                    else
                                        instn = " تجهیز " + instn;
                                }
                                instrdoc = instn + " " + instrdoc;
                            }

                            /*بدست اوردن اطلاعات برای مسچ که در کارتابل می خواهد نمایش داده شود */
                            int iddfrom = 1;
                            string smessage = string.Empty;
                            if (!string.IsNullOrEmpty(Request.Form["idform"]))
                            {
                                iddfrom = Convert.ToInt32(Request.Form["idform"].ToString());
                            }

                            if (iddfrom == 1)
                            {
                                doc_name = "درخواست انجام کار";
                                smessage = " درخواست " + "به شماره" + objecttemp.DOC_NUMB + " در تاریخ " + objecttemp.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
                            }

                            if (iddfrom == 2)
                            {
                                doc_name = "درخواست انجام کار اضطراری";
                                smessage = " درخواست اضطراری " + "به شماره" + objecttemp.DOC_NUMB + " در تاریخ " + objecttemp.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
                            }

                            if (iddfrom == 3)
                            {
                                doc_name = "درخواست انجام کار خدماتی";
                                smessage = " درخواست خدماتی / فنی / تاسیساتی / بازديدها " + "به شماره" + objecttemp.DOC_NUMB + " در تاریخ " + objecttemp.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
                            }

                            if (iddfrom == 4)
                            {
                                doc_name = "درخواست انجام کار اضطراری / خدماتی";
                                smessage = " درخواست اضطراری / خدماتی " + "به شماره" + objecttemp.DOC_NUMB + " در تاریخ " + objecttemp.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
                            }

                            bodymessage = smessage;
                            break;
                        }
                }

                try
                {
                    /*ایجاد یک ردیف جدید کارتابل */
                    AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                    wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, bodymessage, etdo_id, objecttemp.EEDO_ID);
                    not_id = wp.NoteId;

                    if (etdo_id == 2)
                    {
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = not_id.ToString() }.ToJson();
                    }
                    else
                    {
                        /* پیغام ثبت اطلاعات به کاربر و ارسال شماره ردیف دیفکت و ردیف کارتابل به ویو */
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = objecttemp.EEDO_ID.ToString() + "%" + not_id.ToString() }.ToJson();
                    }
                }
                catch (Exception ex)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                }
            }
            else
            {
                /*در صورتیکه اطلاعات درج شده بخواهند دوباره ثبت شوند */
                /*ثبت اطلاعات تجهیزات */
                decimal edin = 0;
                decimal eprog = 0;
                if (Request.Form["defectnumber"] != "" && Request.Form["defectnumber"] != null)
                {
                    edin = Convert.ToDecimal(Request.Form["defectnumber"]);
                }

                if (Request.Form["prognumber"] != "" && Request.Form["prognumber"] != null)
                {
                    eprog = Convert.ToDecimal(Request.Form["prognumber"]);
                }

                /*ثبت تغییرات در برنامه زمانبندی و دیفکت */
                var rel = new EXP_RELATION_DOC();
                int eedoid = Convert.ToInt32(check);
                if (eprog != 0)
                {
                    string cou = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedoid && b.EDIN_EDIN_ID == eprog select b).Count().ToString();
                    int rc = Convert.ToInt32(cou);
                    if (rc == 0)
                    {
                        rel.EEDO_EEDO_ID = eedoid;
                        rel.EDIN_EDIN_ID = eprog;
                        Db.EXP_RELATION_DOC.Add(rel);
                        Db.SaveChanges();
                    }
                }

                if (edin != 0)
                {
                    string cou = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedoid && b.EEDO_EEDO_ID_R == edin select b).Count().ToString();
                    int rrc = Convert.ToInt32(cou);
                    if (rrc == 0)
                    {
                        rel.EEDO_EEDO_ID = eedoid;
                        rel.EEDO_EEDO_ID_R = edin;
                        Db.EXP_RELATION_DOC.Add(rel);
                        Db.SaveChanges();
                    }
                }

                var rel1 = new EXP_EDOC_INSTRU();
                rel1 = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedoid && b.CUT_STAT == "1" select b).FirstOrDefault();

                /*ثبت تغییرات تجهیزات اصلی که در فرم اصلی قرار دارد */
                if (epiuid != 0)
                {
                    rel1.EPIU_EPIU_ID = epiuid;
                }
                else
                {
                    rel1.EPIU_EPIU_ID = null;
                }

                if (idinst != 0)
                {
                    rel1.EERR_EERR_ID = idinst;
                }
                else
                {
                    rel1.EERR_EERR_ID = null;
                }

                // اضافه شده، بعد از اعمال تغییر مربوط به انتخاب تجهیزات
                if (etby != 0 && etby != null)
                {
                    rel1.ETBY_ETBY_ID = etby;
                }
                else
                {
                    rel1.ETBY_ETBY_ID = null;
                }

                if (ecba != 0 && ecba != null)
                {
                    rel1.ECBA_ECBA_ID = ecba;
                }
                else
                {
                    rel1.ECBA_ECBA_ID = null;
                }

                // ****************

                if (Request.Form["etbytype"] != null && Request.Form["etbytype"] != "")
                {
                    rel1.ETBY_ETBY_ID = Convert.ToInt32(Request.Form["etbytype"]);
                }

                if (Request.Form["descd"] != null && Request.Form["descd"] != "")
                {
                    rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                }

                if (postcode != 0)
                {
                    rel1.EPOL_EPOL_ID = postcode;
                }
                else
                {
                    rel1.EPOL_EPOL_ID = null;
                }

                if (offd != null)
                {
                    rel1.OFF_DATE = offd;
                }

                if (onda != null)
                {
                    rel1.ON_DATE = onda;
                }

                if (Request.Form["Unitvolt"] != "" && Request.Form["Unitvolt"] != null)
                {
                    rel1.EUNL_EUNL_ID = Convert.ToInt32(Request.Form["Unitvolt"].ToString());
                }

                if (Request.Form["offstat"] != "" && Request.Form["offstat"] != null)
                {
                    rel1.EOFS_EOFS_ID = Convert.ToInt32(Request.Form["offstat"]);
                }

                if (Request.Form["off_TIME"] != "" && Request.Form["off_TIME"] != null)
                {
                    rel1.OFF_TIME = Request.Form["off_TIME"];
                }

                if (Request.Form["on_TIME"] != "" && Request.Form["on_TIME"] != null)
                {
                    rel1.ON_TIME = Request.Form["on_TIME"];
                }

                if (Request.Form["stattime"] != "" && Request.Form["stattime"] != null)
                {
                    rel1.TIME_ISTA = Request.Form["stattime"];
                    rel1.CONT_FUN = time;
                }

                if (Request.Form["INST_STAT"] != "" && Request.Form["INST_STAT"] != null)
                {
                    rel1.INST_STAT = Request.Form["INST_STAT"];
                }

                if (Request.Form["EART_STAT"] != "" && Request.Form["EART_STAT"] != null)
                {
                    rel1.EART_STAT = Request.Form["EART_STAT"];
                }

                if (Request.Form["CUST_STAT"] != "" && Request.Form["CUST_STAT"] != null)
                {
                    rel1.CUST_STAT = Request.Form["CUST_STAT"];
                }

                if (Request.Form["ofDATEprog"] != "" && Request.Form["ofDATEprog"] != null)
                {
                    rel1.OFF_DATE = Request.Form["ofDATEprog"];
                }

                if (Request.Form["off_TIMEprog"] != "" && Request.Form["off_TIMEprog"] != null)
                {
                    rel1.PROF_TIME = Request.Form["off_TIMEprog"];
                }

                if (Request.Form["onDATEprog"] != "" && Request.Form["onDATEprog"] != null)
                {
                    rel1.ON_DATE = Request.Form["onDATEprog"];
                }

                if (Request.Form["on_TIMEprog"] != "" && Request.Form["on_TIMEprog"] != null)
                {
                    rel1.PROE_TIME = Request.Form["on_TIMEprog"];
                }

                Db.SaveChanges();

                /*ثبت تغییرات سرپرست گروه و جانشین سرپرست گروه */
                var suplier = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "2" select b).FirstOrDefault();
                var suplierj = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "5" select b).FirstOrDefault();

                if (suplier != null)
                {
                    if (Request.Form["EPEX_EPEX_ID"] != "" && Request.Form["EPEX_EPEX_ID"] != null)
                        suplier.EURP_EURP_ID = Convert.ToInt32(Request.Form["EPEX_EPEX_ID"].ToString());

                    if (Request.Form["group"] != "" && Request.Form["group"] != null)
                        suplier.ESUD_DESC = Request.Form["group"];
                }
                else
                {
                    if (Request.Form["EPEX_EPEX_ID"] != "" && Request.Form["EPEX_EPEX_ID"] != null)
                    {
                        int sup = Convert.ToInt32(Request.Form["EPEX_EPEX_ID"].ToString());
                        var rel2 = new EXP_SUPL_DOC();
                        rel2.EEDO_EEDO_ID = eedoid;
                        rel2.POSI_TYEP = "2";
                        rel2.EURP_EURP_ID = sup;
                        rel2.ESUD_DESC = Request.Form["group"];
                        Db.EXP_SUPL_DOC.Add(rel2);
                        Db.SaveChanges();
                    }
                }

                if (suplierj != null)
                {
                    if (Request.Form["EPEX_EPEX_ID1"] != "" && Request.Form["EPEX_EPEX_ID1"] != null)
                        suplierj.EURP_EURP_ID = Convert.ToInt32(Request.Form["EPEX_EPEX_ID1"].ToString());
                }
                else
                {
                    if (Request.Form["EPEX_EPEX_ID1"] != "" && Request.Form["EPEX_EPEX_ID1"] != null)
                    {
                        int sup1 = Convert.ToInt32(Request.Form["EPEX_EPEX_ID1"].ToString());
                        var rel3 = new EXP_SUPL_DOC();
                        rel3.EEDO_EEDO_ID = eedoid;
                        rel3.POSI_TYEP = "5";
                        rel3.EURP_EURP_ID = sup1;
                        Db.EXP_SUPL_DOC.Add(rel3);
                        Db.SaveChanges();
                    }
                }

                var nazer = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "3" select b).FirstOrDefault();
                var nazerj = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "6" select b).FirstOrDefault();
                var nazer_emp = Convert.ToInt32(Request.Form["EPEX_EPEX_ID2"].ToString());
                var nazerj_emp = Convert.ToInt32(Request.Form["EPEX_EPEX_ID3"].ToString());
                var nazer_Value = (from b in Db.EXP_USER_V where b.EMP_NUMB == nazer_emp && !string.IsNullOrEmpty(b.USER_NAME) && b.USER_NAME == b.USER_NAME.ToUpper() select b).FirstOrDefault();
                var nazerj_Value = (from b in Db.EXP_USER_V where b.EMP_NUMB == nazerj_emp && !string.IsNullOrEmpty(b.USER_NAME) && b.USER_NAME == b.USER_NAME.ToUpper() select b).FirstOrDefault();
                int? eurpIDnazer = 0;
                int? eurpIDnazerj = 0;

                if (nazer_Value != null)
                {
                    if (nazer_Value.EURP_ID != null)
                    {
                        eurpIDnazer = nazer_Value.EURP_ID;
                    }
                    else
                    {
                        eurpIDnazer = 0;
                    }
                }

                if (nazerj_Value != null)
                {
                    if (nazerj_Value.EURP_ID != null)
                    {
                        eurpIDnazerj = nazerj_Value.EURP_ID;
                    }
                    else
                    {
                        eurpIDnazerj = 0;
                    }
                }

                if (nazer != null)
                {
                    if (nazer_emp.ToString() != "" && nazer_emp != null)
                        nazer.EURP_EURP_ID = eurpIDnazer;
                }
                else
                {
                    if (nazer_Value.EURP_ID == null)
                    {
                        var userTypePost = new SEC_USER_TYPE_POST();
                        userTypePost.SCSU_ROW_NO = nazer_Value.ROW_NO;
                        userTypePost.EURP_TYPE = 4; // به عنوان ناظر درنظر گرفته شده
                        userTypePost.EURP_ACTV = 1; // یوزرهای فعال
                        Db.SEC_USER_TYPE_POST.Add(userTypePost);
                        Db.SaveChanges();
                        eurpIDnazer = userTypePost.EURP_ID;
                    }
                    if (nazer_emp.ToString() != "" && nazer_emp != null)
                    {
                        var rel2 = new EXP_SUPL_DOC();
                        rel2.EEDO_EEDO_ID = eedoid;
                        rel2.POSI_TYEP = "3";
                        rel2.EURP_EURP_ID = eurpIDnazer;
                        Db.EXP_SUPL_DOC.Add(rel2);
                        Db.SaveChanges();
                    }
                }

                if (nazerj != null)
                {
                    if (nazerj_emp.ToString() != "" && nazerj_emp != null)
                        nazerj.EURP_EURP_ID = eurpIDnazerj;
                }
                else
                {
                    if (nazerj_Value.EURP_ID == null)
                    {
                        var userTypePost = new SEC_USER_TYPE_POST();
                        userTypePost.SCSU_ROW_NO = nazerj_Value.ROW_NO;
                        userTypePost.EURP_TYPE = 5; // به عنوان جانشین ناظر درنظر گرفته شده
                        userTypePost.EURP_ACTV = 1; // یوزرهای فعال
                        Db.SEC_USER_TYPE_POST.Add(userTypePost);
                        Db.SaveChanges();
                        eurpIDnazerj = userTypePost.EURP_ID;
                    }

                    if (nazerj_emp.ToString() != "" && nazerj_emp != null)
                    {
                        var rel3 = new EXP_SUPL_DOC();
                        rel3.EEDO_EEDO_ID = eedoid;
                        rel3.POSI_TYEP = "6";
                        rel3.EURP_EURP_ID = eurpIDnazerj;
                        Db.EXP_SUPL_DOC.Add(rel3);
                        Db.SaveChanges();
                    }
                }

                Db.SaveChanges();

                /*ثبت اطلاعات فرم درخواست */
                var chkl = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b).FirstOrDefault();
                if (Request.Form["EXP_EXPI_DOC.EEDO_DESC"] != "" && Request.Form["EXP_EXPI_DOC.EEDO_DESC"] != null)
                    chkl.EEDO_DESC = Request.Form["EXP_EXPI_DOC.EEDO_DESC"];

                if (Request.Form["EXP_EXPI_DOC.EEDO_DATE"] != "" && Request.Form["EXP_EXPI_DOC.EEDO_DATE"] != null)
                    chkl.EEDO_DATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];

                if (Request.Form["ORGA_CODE_request"] != "" && Request.Form["ORGA_CODE_request"] != null)
                    chkl.ORGA_CODE = Request.Form["ORGA_CODE_request"];

                chkl.EFUN_EFUN_ID = objecttemp.EFUN_EFUN_ID;
                if (postcode != 0)
                    chkl.EPOL_EPOL_ID = postcode;

                if (!String.IsNullOrEmpty(Request.Form["sendidd"]))
                    chkl.EANA_EANA_ROW = Convert.ToInt32(Request.Form["sendidd"]);

                if (Request.Form["DESC"] != "" && Request.Form["DESC"] != null)
                    chkl.OUT_FUNC = Request.Form["DESC"];

                if (!string.IsNullOrEmpty(Request.Form["EEDO_TYPE"]))
                    chkl.EEDO_TYPE = Request.Form["EEDO_TYPE"];

                Db.SaveChanges();

                /*ثبت اطلاعات و تغییرات درخواست تمدیدی */
                string relation = (from b in Db.EXP_RELATION_DOC
                                   join x in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals x.EEDO_ID
                                   where b.EEDO_EEDO_ID == eedoid && x.ETDO_ETDO_ID == 21
                                   select b.ERED_ID).FirstOrDefault().ToString();

                int rccc = Convert.ToInt32(relation);
                if (rccc == 0)
                {
                    if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                    {
                        rel.EEDO_EEDO_ID = eedoid;
                        rel.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                        Db.EXP_RELATION_DOC.Add(rel);
                        Db.SaveChanges();
                    }
                }
                else
                {
                    var qrelattd = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedoid && b.ERED_ID == rccc select b).FirstOrDefault();
                    if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                        qrelattd.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                    Db.SaveChanges();
                }

                string postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == postcode select b.EPOL_NAME).FirstOrDefault().ToString();
                var document = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b).FirstOrDefault();
                string instrdoc = string.Empty;

                if (epiuid != 0)
                {
                    var w = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == epiuid select b);
                    string instn = string.Empty;
                    instn = w.FirstOrDefault().CODE_NAME.ToString();
                    string insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();
                    var haveBay = (from b in Db.EXP_TYPE_BAY where b.ETBY_ID == etby select b).FirstOrDefault();
                    if (haveBay != null)
                    {
                        if (insttype == "1")
                            instn = " بی خط " + instn;
                        else
                            instn = " تجهیز " + haveBay.ETBY_DESC + " " + instn;
                    }
                    else
                    {
                        if (insttype == "1")
                            instn = " خط " + instn;
                        else
                            instn = " تجهیز " + instn;
                    }

                    instrdoc = instn + " " + instrdoc;
                }

                /*بدست اوردن اطلاعات برای مسچ که در کارتابل می خواهد نمایش داده شود */
                int iddfrom = 1;
                string smessage = string.Empty;
                string doc_name = string.Empty;
                if (!string.IsNullOrEmpty(Request.Form["idform"]))
                {
                    iddfrom = Convert.ToInt32(Request.Form["idform"].ToString());
                }

                if (iddfrom == 1)
                {
                    doc_name = "درخواست انجام کار";
                    smessage = " درخواست " + "به شماره" + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
                }

                if (iddfrom == 2)
                {
                    doc_name = "درخواست انجام کار اضطراری";
                    smessage = " درخواست اضطراری " + "به شماره" + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
                }

                if (iddfrom == 3)
                {
                    doc_name = "درخواست انجام کار خدماتی";
                    smessage = " درخواست خدماتی / فنی / تاسیساتی / بازديدها " + "به شماره" + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
                }

                if (iddfrom == 4)
                {
                    doc_name = "درخواست انجام کار اضطراری / خدماتی";
                    smessage = " درخواست اضطراری / خدماتی " + "به شماره" + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
                }

                int nod = 0;
                if (Request.Form["notId"] != null && Request.Form["notId"] != "")
                {
                    nod = Convert.ToInt32(Request.Form["notId"].ToString());
                    AsrWorkFlowProcess wp = new AsrWorkFlowProcess(nod);
                    //wp.SetKeyValue("SUBJECT", document.DOC_NUMB);
                    wp.SetKeyValue("SUBJECT", doc_name);
                    wp.SetKeyValue("BODY", smessage);
                    wp.Dispose();
                }

                string upCommand = string.Format("UPDATE WF_ITEM_ATTRIBUTE_VALUES SET TEXT_VALUE = '{0}' WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^{1}' AND NAME = 'BODY'", smessage, eedoid);
                Db.Database.ExecuteSqlCommand(upCommand);
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", document.DOC_NUMB), CoustomData = eedoid.ToString() + "%" + nod.ToString() }.ToJson();
            }
        }

        /// <summary>
        /// بررسی ارسال درخواست به واحد مطالعات و دیاگرام
        /// </summary>
        /// <param name="eedoId">شماره درخواست</param>
        public string CheckForSendToCoordination(decimal eedoId)
        {
            //2 => مطالعات شبکه = 158
            //7 => دیاگرام = 1261
            string msg = string.Empty;
            string stateName = string.Empty;
            bool checkAccept = false;

            int hasCoordinationCartable = Db.Database.SqlQuery<int>(string.Format("SELECT COUNT(NOT_ID) FROM WF_NOTE_V WHERE ITEM_KEY LIKE 'FLW_REHA.PFLW_REHA^{0}-2' OR ITEM_KEY LIKE 'FLW_REHA.PFLW_REHA^{0}-7'", eedoId)).FirstOrDefault();

            // اگر ردیف کارتابلی برای هماهنگی ایجاد شده باشد
            if (hasCoordinationCartable > 0)
            {
                //var allCoordinationState = (from b in Db.SEC_JOB_TYPE_DOC where b.ETDO_ETDO_ID == 183 select b.JDTY_ID).ToList();
                //var hasCoordinationRow = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedoId && allCoordinationState.Contains(b.JDTY_JDTY_ID.Value) select b);
                var hasCoordinationRow = (from b in Db.EXP_EDOC_INSTRU
                                          where b.EEDO_EEDO_ID == eedoId && b.ATTG_STATT == "1" &&
                                                (b.JDTY_JDTY_ID == 158 || b.JDTY_JDTY_ID == 1261)
                                          select b);

                if (hasCoordinationRow.Any())
                {
                    foreach (var item in hasCoordinationRow)
                    {
                        if (item.EDIN_STIN == "0") // موافق
                        {
                            // Add Accept State Code Here
                        }
                        else if (item.EDIN_STIN == "1") // مخالف
                        {
                            var name = Db.SEC_JOB_TYPE_DOC.Where(b => b.ETDO_ETDO_ID == 183 && b.JDTY_ID == item.JDTY_JDTY_ID).Select(b => b.ACTIV_FNAM).FirstOrDefault();
                            stateName += name + " و ";
                            checkAccept = true;
                        }
                        else // نامشخص
                        {
                            //new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "وضعیت اظهار نظر نامشخص است" }.ToJson();
                            msg = "وضعیت اظهار نظر نامشخص است";
                        }
                    }
                }
                else
                {
                    using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                    {
                        var coordinationCartableName = conn.Query(@"SELECT DISTINCT MESSAGE_NAME FROM WF_NOTE_V WHERE ITEM_KEY LIKE 'FLW_REHA.PFLW_REHA^' || :Param || '-%'", eedoId)
                                                           .Select(b => new { MESSAGE_NAME = (string)b.MESSAGE_NAME }).ToList();

                        foreach (var item in coordinationCartableName)
                        {
                            if (item.MESSAGE_NAME == "DISBANDAR")
                                stateName += "مطالعات شبکه" + " و ";
                            else if (item.MESSAGE_NAME == "DIAGRAM")
                                stateName += "دیاگرام" + " و ";
                            else
                                stateName += "نامشخصی" + " و ";
                        }

                        if (!coordinationCartableName.Any())
                        {
                            stateName = "*********";
                        }
                    }

                    //new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "درخواست شما در واحد مطالعات و دیاگرام درحال بررسی می باشد" }.ToJson();
                    //msg = "درخواست شما در واحد مطالعات و دیاگرام درحال بررسی می باشد";
                    msg = string.Format("درخواست شما در واحد {0} درحال بررسی می باشد", stateName.Substring(0, stateName.Length - 3));
                }
            }
            //else
            //{
            //    //new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "درخواست برای واحد مطالعات و دیاگرام ارسال نشده" }.ToJson();
            //    msg = "درخواست برای واحد مطالعات و دیاگرام ارسال نشده";
            //}

            if (checkAccept)
            {
                //new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("درخواست شما توسط {0} مورد تایید نمی باشد", stateName) }.ToJson();
                msg = string.Format("درخواست شما توسط {0} مورد تایید نمی باشد", stateName.Substring(0, stateName.Length - 3));
            }

            return msg;
        }


        //[EntityAuthorize("EXP_EDOC_INSTRU>select,insert,update|SEC_JOB_TYPE_DOC>select|EXP_EXPI_DOC>select,update|SEC_JOB_TYPE_DOC>select|SEC_JOB_TYPE_ITEM>select|EXP_ITEM_TYPE_DOC>select|EXP_SUPL_DOC>delete,select,insert,update|EXP_RELATION_DOC>delete,insert,select")]
        public ActionResult Update_Expi_Doc(EXP_EXPI_DOC objecttemp)
        {
            int etdo_id = 21;
            string Qjdti = (from b in Db.SEC_JOB_TYPE_DOC where b.ETDO_ETDO_ID == etdo_id && b.ROWI_ORDE == 1 select b.JDTY_ID).FirstOrDefault().ToString();
            decimal QCURENT = Convert.ToDecimal(Qjdti);
            string on_TIME = string.Empty;
            string off_TIME = string.Empty;
            decimal? epiuid = 1;
            //int? eins = 0;
            int? etby = 0;
            int? ecba = 0;
            string offd = string.Empty;
            string onda = string.Empty;
            int? idinst = 1;
            offd = Request.Form["ofDATEreq"];
            onda = Request.Form["onDATEreq"];
            string POSTINST = string.Empty;
            string detail = string.Empty;
            string bayId = string.Empty;
            int? postcode = 0;
            int notid = 0;

            if (Request.Form["notId"] != null)
                notid = Convert.ToInt32(Request.Form["notId"].ToString());
            else
                notid = Convert.ToInt32(Session["notid"]);

            AsrWorkFlowProcess p1 = new AsrWorkFlowProcess(Convert.ToInt32(notid));

            string curent = p1.CurrentStat;
            int idtype = 0;
            string flows = p1.FlowName;
            /*مشخص شدن نوع مدرک که درخواست یا هاهنگی درخواست است */
            if (flows == "FLW_REHA")
            {/*در صورتیکه هماهنگی درخواست باشد */
                idtype = 183;
            }
            else
            {/*درخواست انجام کار است */
                idtype = etdo_id;// Convert.ToInt32(Session["etdo_id"]);
            }

            if (curent == "?")
            {
                if (idtype == 2)
                {
                    curent = "CRATEOR";
                }
                if (idtype == 21)
                {
                    curent = "CREATOR";
                }
            }

            string EEDO_ID = Request.Form["EXP_EXPI_DOC.EEDO_ID"];
            objecttemp.EEDO_ID = Convert.ToInt32(EEDO_ID);
            decimal ideedo = Convert.ToDecimal(EEDO_ID);
            int typeo1 = 21;
            if (Request.Form["type_doc"] != "" && Request.Form["type_doc"] != null)
            {
                typeo1 = Convert.ToInt32(Request.Form["type_doc"].ToString());
            }

            //if (/*curent == "DISPACHMANEG"*/ curent == "PROGRAMER" || curent == "ENTEGHALC" || curent == "MENAGORGAN") // دراین حالت وقتی بدست "برنامه ریزی دیسپاچینگ" و یا "مدیر امور انتقال" برسد شماره واقعی میگیرد
            //{
            //    var q = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == ideedo select b).FirstOrDefault();
            //    q.DOC_NUMB = "R" + objecttemp.EEDO_ID;
            //    Db.SaveChanges();
            //}

            // دراین حالت وقتی بدست "مرکز کنترل" و یا "مدیر امور انتقال" و یا "رئیس ناحیه" برسد و وضعیت هم تایید باشد شماره واقعی میگیرد
            if ((curent == "CONTROLCENTER" && Request.Form["run"] == "0" /* && Request.Form["confcheck1"] == "0"*/) || 
                ((curent == "ENTEGHALC" || curent == "MENAGORGAN") && Request.Form["confrole"] == "0")
               )
            {
                var q = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == ideedo select b).FirstOrDefault();
                q.DOC_NUMB = "R" + objecttemp.EEDO_ID;
                Db.SaveChanges();
            }

            string dateNow = DateTime.Now.GetShamsi();
            if (curent == "CREATOR" || curent == "MANEGERCR")
            {
                if (offd.CompareTo(dateNow) < 0 || onda.CompareTo(dateNow) < 0)
                {
                    return new ServerMessages(ServerOprationType.Failure)
                    {
                        ExceptionMessage = string.Format(" امکان ثبت درخواست برای روزهای قبل امکان پذیر نمی باشد. \n این خطا ممکن است بدلیل ناهماهنگی تاریخ سیستم شما با تاریخ سرور رخ دهد. \n لطفا تاریخ سیستم خود را با سرور هماهنگ کنید سپس مجددا تلاش کنید. \n تاریخ سرور : {0}", dateNow)
                    }.ToJson();
                }

                if (Request.Form["idform"] == "1" /*&& curent == "CREATOR"*/)
                {
                    //if (Request.Form["typeinstREQUEST"] != "0")
                    //{
                    int instruId = string.IsNullOrEmpty(Request.Form["HiddenInstrID"]) ? 0 : Convert.ToInt32(Request.Form["HiddenInstrID"]);
                    int offStat = string.IsNullOrEmpty(Request.Form["offstat"]) ? 0 : Convert.ToInt32(Request.Form["offstat"]);
                    string custStat = Request.Form["CUST_STAT"].ToString();
                    string typeInst = Request.Form["typeinstREQUEST"].ToString();
                    string requestSaveDate = Request.Form["EXP_EXPI_DOC.EEDO_DATE"].ToString();

                    string postId = string.IsNullOrEmpty(Request.Form["EPOL_EPOL_ID_requ"].ToString()) ?
                                    Request.Form["postIdno"].ToString() :
                                    Request.Form["EPOL_EPOL_ID_requ"].ToString();

                    var WorkDate = CheckWorkDate(instruId, offStat, custStat, typeInst, postId);
                    if (WorkDate > 0)
                    {
                        int day = (Db.Database.SqlQuery<int>("SELECT FDAYS_BETWEEN_U('" + requestSaveDate + "','" + offd + "')  FROM dual").FirstOrDefault());
                        if (WorkDate > day) // اگر تعداد روزهای مورد نیاز بیشتر از مدت زمان انتخاب شده باشد امکان ثبت وجود ندارد
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("برای ثبت این درخواست باید از تاریخ ثبت تا تاریخ شروع انجام کار {0} روز فاصله وجود داشته باشد", WorkDate) }.ToJson();
                    }
                    //}
                }
            }

            string time = string.Empty;
            if (idtype == 21)
            {
                /*چک ایتم های درخواست که انهای که لازم است حتما پر شده باشد */
                if (((((Request.Form["function1"] == "" || Request.Form["EPOL_EPOL_ID_requ"] == "" || Request.Form["ORGA_CODE_request"] == "" ||
                     ((Request.Form["HiddenInstrID"] == "" && Request.Form["HiddenInstrDetailID"] == "" && Request.Form["HiddenBayID"] == "" && Request.Form["typeinstREQUEST"] != "0") ||
                      (Request.Form["typeinstREQUEST"] == "0" && Request.Form["EPOL_EPOL_ID_requ"] == ""))
                           )) && typeo1 == 21) ||
                         (typeo1 == 2 && Request.Form["defectnumber"] == "" || Request.Form["lfuncname"] == "") ||
                         (typeo1 == 101 && Request.Form["prognumber"] == "")) ||
                (Request.Form["EXP_EXPI_DOC.EEDO_DATE"] == "" || Request.Form["ofDATEreq"] == "" || Request.Form["off_TIME"] == "" ||
                   Request.Form["onDATEreq"] == "" || Request.Form["on_TIME"] == "" || Request.Form["EPEX_EPEX_ID"] == "" ||
                    /*Request.Form["type_doc"] == "" ||*/ Request.Form["sendidd"] == "" || Request.Form["offstat"] == "" || Request.Form["CUST_STAT"] == "" || Request.Form["EART_STAT"] == "" ||
                   Request.Form["EPEX_EPEX_ID"] == "" || (Request.Form["EPEX_EPEX_ID2"] == "" && Request.Form["EEDO_TYPE"] == "1") || //Request.Form["DD_Contractor"] == "" ||  
                   ((Request.Form["program1"] == "" || Request.Form["function1"] == "") && typeo1 == 21)
                   ))
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات برای ثبت کامل نیست" }.ToJson();
                }

                var iidd = Convert.ToDecimal(EEDO_ID);
                var findRequest = Db.EXP_EDOC_INSTRU.Where(x => x.EEDO_EEDO_ID == iidd);
                if (findRequest.Any())
                {
                    var postId = findRequest.Select(x => x.EPOL_EPOL_ID).Distinct();
                    if (postId.Count() > 1 || (objecttemp.EPOL_EPOL_ID != null && !postId.Contains(objecttemp.EPOL_EPOL_ID)))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "امکان تغییر پست ثبت شده وجود ندارد، لطفا ابتدا تجهیزات را حذف کنید سپس مجددا جهت تغییر پست اقدام نمایید" }.ToJson();
                    }
                }

                string offdate = string.Empty;
                string onDATE = string.Empty;

                if (Request.Form["ofDATEreq"] == null || Request.Form["onDATEreq"] == null)
                {
                    /*در صورتیکه تاریخ شروع و پایان مشخص نباشد از تاریخ های تجهیز اصلی استفاده می شود */
                    int eid = Convert.ToInt32(EEDO_ID);
                    var f = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eid && b.CUT_STAT == "1" select b).FirstOrDefault();
                    offdate = f.OFF_DATE;
                    onDATE = f.ON_DATE;
                }
                else
                {
                    offdate = Request.Form["ofDATEreq"];
                    onDATE = Request.Form["onDATEreq"];
                }

                if (Request.Form["off_TIME"] != null && Request.Form["on_TIME"] != null)
                {
                    string off_TIME1 = Request.Form["off_TIME"];
                    string on_TIME1 = Request.Form["on_TIME"];
                    /*مشخص شدن زمان قطع تجهیز براساس پیوسته و ناپیوسته بودن زمان ها */
                    if (Request.Form["stattime"].ToString() == "0")
                    {
                        time = (Db.Database.SqlQuery<string>("SELECT TIME_BETWEEN_U('" + offdate + "','" + off_TIME1 + "','" + onDATE + "','" + on_TIME1 + "')  FROM dual").FirstOrDefault());
                    }
                    else
                    {
                        int day = (Db.Database.SqlQuery<int>("SELECT FDAYS_BETWEEN_U('" + offdate + "','" + onDATE + "')  FROM dual").FirstOrDefault());

                        string time1 = (Db.Database.SqlQuery<string>("SELECT TIME_BETWEEN_U('" + offdate + "','" + off_TIME1 + "','" + offdate + "','" + on_TIME1 + "')  FROM dual").FirstOrDefault());
                        if (day == 0)
                        {
                            time = time1;
                        }
                        else
                        {
                            var val = time1.Split(':');
                            string hhoff = val[0].ToString();
                            string ssoff = val[1].ToString();

                            int hh = Convert.ToInt32(hhoff) * (day + 1);
                            int ss = Convert.ToInt32(ssoff) * (day + 1);
                            if (ss >= 60)
                            {
                                hh = hh + ss / 60;
                                ss = ss % 60;
                            }
                            time = hh + ":" + ss;
                        }
                    }
                    if (Request.Form["stattime"].ToString() == "0")
                    {
                        /*چک تاریخ ها و زمان که پایان از شروع کوچکتر نباشد */
                        if (offdate.CompareTo(onDATE) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else if (offdate.CompareTo(onDATE) == 0 && off_TIME1.CompareTo(on_TIME1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                    }
                    else
                    {
                        /*چک زمان های که پایان از شروع کروچکتر نباشد */
                        if (offdate.CompareTo(onDATE) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else if (offdate.CompareTo(onDATE) == 0 && off_TIME1.CompareTo(on_TIME1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                    }
                }

                if (Request.Form["off_TIMEprog"] != null && Request.Form["on_TIMEprog"] != null && Request.Form["ofDATEprog"] != null && Request.Form["onDATEprog"] != null)
                {
                    /*مشخص شدن تاریخ های برنامه ریزی */
                    string offdate2 = Request.Form["ofDATEprog"];
                    string onDATE2 = Request.Form["onDATEprog"];

                    string off_TIME2 = Request.Form["off_TIMEprog"];
                    string on_TIME2 = Request.Form["on_TIMEprog"];

                    var einst = (from p in Db.EXP_EDOC_INSTRU
                                 join b in Db.SEC_JOB_TYPE_DOC on p.JDTY_JDTY_ID equals b.JDTY_ID
                                 where p.EEDO_EEDO_ID == ideedo && p.CUT_STAT == "1" && b.ETDO_ETDO_ID == 21 && b.ACTIV_NAME == "CREATOR"
                                 select p).FirstOrDefault();

                    string stime = einst.TIME_ISTA.ToString();

                    if (stime == "0")
                    {
                        if (offdate2.CompareTo(onDATE2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else if (offdate2.CompareTo(onDATE2) == 0 && off_TIME2.CompareTo(on_TIME2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                    }
                    else
                    {
                        if (offdate2.CompareTo(onDATE2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        //else if (off_TIME2.CompareTo(on_TIME2) > 0)
                        else if (offdate2.CompareTo(onDATE2) == 0 && off_TIME2.CompareTo(on_TIME2) > 0)
                        {
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                        }
                    }
                }

                if (Request.Form["off_TIMEh"] != null && Request.Form["on_TIMEh"] != null)
                {
                    /*چک تاریخ های نهایی انجام */
                    string offdate2 = Request.Form["offDATEh"];
                    string onDATE2 = Request.Form["onDATEh"];

                    string off_TIME2 = Request.Form["off_TIMEh"];
                    string on_TIME2 = Request.Form["on_TIMEh"];

                    var einst2 = (from p in Db.EXP_EDOC_INSTRU
                                  join b in Db.SEC_JOB_TYPE_DOC on p.JDTY_JDTY_ID equals b.JDTY_ID
                                  where p.EEDO_EEDO_ID == ideedo && p.CUT_STAT == "1" && b.ETDO_ETDO_ID == 21 && b.ACTIV_NAME == "CREATOR"
                                  select p).FirstOrDefault();

                    string stime = einst2.TIME_ISTA.ToString();

                    if (stime == "0")
                    {
                        if (offdate2.CompareTo(onDATE2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else if (offdate2.CompareTo(onDATE2) == 0 && off_TIME2.CompareTo(on_TIME2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                    }
                    else
                    {
                        if (offdate2.CompareTo(onDATE2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        //else if (off_TIME2.CompareTo(on_TIME2) > 0)
                        else if (offdate2.CompareTo(onDATE2) == 0 && off_TIME2.CompareTo(on_TIME2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                    }
                }

                //if (Request.Form["type_doc"] != "" && Request.Form["type_doc"] != null)
                //{/*براساس دیفکت و برنامه زمانبندی بودن ایتم های درخواست با ایتم های انها چک می شود */
                // int typeo = Convert.ToInt32(Request.Form["type_doc"].ToString());
                if (typeo1 == 2)
                {
                    if (Request.Form["defectnumber"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شماره دیفکت را انتخاب نمایید" }.ToJson();
                    }
                    else
                    {

                        int defectid = Convert.ToInt32(Request.Form["defectnumber"].ToString());
                        var qdefect = (from b in Db.EXP_EXPI_DOC
                                       join k in Db.EXP_EDOC_INSTRU on b.EEDO_ID equals k.EEDO_EEDO_ID
                                       where b.EEDO_ID == defectid
                                       select new { b.EFUN_EFUN_ID, b.ORGA_CODE, k.EERR_EERR_ID, b.EPOL_EPOL_ID, k.EINS_EINS_ID, k.EPIU_EPIU_ID, k.ETBY_ETBY_ID, k.OFF_DATE, k.ON_DATE }).FirstOrDefault();

                        if (Request.Form["idform"] == "3" && qdefect.EFUN_EFUN_ID == 1312)
                        {
                            objecttemp.EFUN_EFUN_ID = 1901;
                        }
                        else
                        {
                            objecttemp.EFUN_EFUN_ID = qdefect.EFUN_EFUN_ID;
                        }

                        objecttemp.EPOL_EPOL_ID = qdefect.EPOL_EPOL_ID;
                        postcode = qdefect.EPOL_EPOL_ID;
                        epiuid = qdefect.EPIU_EPIU_ID;
                        idinst = qdefect.EERR_EERR_ID;
                        offd = Request.Form["ofDATEreq"];
                        onda = Request.Form["onDATEreq"];
                    }

                    string offdate1 = offd;
                    string onDATE1 = onda;
                    if (offdate1 == null || onDATE1 == null)
                    {
                        /*بدست اوردن تاریخ شروع و پایان از ثبت در تجهیز اصلی */
                        var f = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.CUT_STAT == "1" && b.JDTY_JDTY_ID == QCURENT select b).FirstOrDefault();
                        offdate = f.OFF_DATE;
                        onDATE = f.ON_DATE;
                    }

                }

                if (typeo1 == 21)
                {
                    if (!String.IsNullOrEmpty(Request.Form["function1"]))
                        objecttemp.EFUN_EFUN_ID = Convert.ToInt32(Request.Form["function1"]);

                    if (!String.IsNullOrEmpty(Request.Form["EPOL_EPOL_ID_requ"]))
                    {
                        objecttemp.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID_requ"]);
                        postcode = Convert.ToInt32(Request.Form["EPOL_EPOL_ID_requ"]);
                    }

                    string typeeins = string.Empty;

                    if (Request.Form["HiddenInstrTypeID"] != "" && Request.Form["HiddenInstrTypeID"] != null)
                    {
                        typeeins = Request.Form["HiddenInstrTypeID"].ToString();
                    }

                    // اگر آپدیت در فرم اول باشه مقادیر ست میشوند اما اگر فرم های بعدی باشه دیگه امکان تغییر وجود نداره و مقادیر قبلی ثابت هستند
                    if (Request.Form["typeinstREQUEST"] != "" && Request.Form["typeinstREQUEST"] != null)
                    {
                        if (Request.Form["HiddenInstrTypeID"] != "" && Request.Form["HiddenInstrTypeID"] != null)
                        {
                            if (Request.Form["HiddenInstrID"] != "" && Request.Form["HiddenInstrID"] != null)
                            {
                                POSTINST = Request.Form["HiddenInstrID"];
                                epiuid = Convert.ToInt32(POSTINST);
                                bayId = null;
                                etby = null;
                                ecba = null;
                            }

                            if (Request.Form["HiddenInstrDetailID"] != "" && Request.Form["HiddenInstrDetailID"] != null)
                            {
                                detail = Request.Form["HiddenInstrDetailID"];
                                idinst = Convert.ToInt32(detail);
                            }
                        }
                        else
                        {
                            if (Request.Form["HiddenBayID"] != "" && Request.Form["HiddenBayID"] != null)
                            {
                                bayId = Request.Form["HiddenBayID"];
                                ecba = Convert.ToInt32(bayId);
                                var giveEpiu = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == ecba select new { b.EPIU_EPIU_ID, b.ETBY_ETBY_ID }).FirstOrDefault();
                                epiuid = Convert.ToDecimal(giveEpiu.EPIU_EPIU_ID);
                                etby = Convert.ToInt32(giveEpiu.ETBY_ETBY_ID);
                            }
                        }
                    }
                    else
                    {
                        // حالتی که امکان ویرایش تجهیزات و ریز تجهیزات وجود ندارد
                        epiuid = 0;
                        idinst = 0;
                        etby = 0;
                        ecba = 0;
                    }

                    offd = Request.Form["ofDATEreq"];
                    onda = Request.Form["onDATEreq"];
                    string offdate1 = offd;
                    string onDATE1 = onda;
                    if (offdate1 == null || onDATE1 == null)
                    {
                        /*بدست اوردن تاریخ شروع و پایان از ثبت در تجهیز اصلی */
                        var f = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.CUT_STAT == "1" && b.JDTY_JDTY_ID == QCURENT select b).FirstOrDefault();
                        offdate = f.OFF_DATE;
                        onDATE = f.ON_DATE;
                    }
                }

                if (typeo1 == 101)
                {
                    if (Request.Form["prognumber"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شماره برنامه را انتخاب نمایید" }.ToJson();
                    }
                    else
                    {
                        int progid = Convert.ToInt32(Request.Form["prognumber"].ToString());
                        var qdefect = (from k in Db.EXP_EDOC_INSTRU
                                       where k.EDIN_ID == progid
                                       select new { k.EFUN_EFUN_ID, k.ORGA_CODE, k.EERR_EERR_ID, k.EPOL_EPOL_ID, k.EINS_EINS_ID, k.EPIU_EPIU_ID, k.ETBY_ETBY_ID, k.ON_DATE, k.OFF_DATE }).FirstOrDefault();


                        objecttemp.EFUN_EFUN_ID = qdefect.EFUN_EFUN_ID;
                        objecttemp.EPOL_EPOL_ID = qdefect.EPOL_EPOL_ID;
                        postcode = qdefect.EPOL_EPOL_ID;
                        epiuid = qdefect.EPIU_EPIU_ID;
                        idinst = qdefect.EERR_EERR_ID;
                        offd = qdefect.OFF_DATE;
                        onda = qdefect.ON_DATE;
                    }

                    string offdate1 = offd;
                    string onDATE1 = onda;
                    if (offdate1 == null || onDATE1 == null)
                    {
                        /*بدست اوردن تاریخ شروع و پایان از ثبت در تجهیز اصلی */
                        var f = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.CUT_STAT == "1" && b.JDTY_JDTY_ID == QCURENT select b).FirstOrDefault();
                        offdate = f.OFF_DATE;
                        onDATE = f.ON_DATE;
                    }
                }

                if (curent == "CONTROLCENTER")
                {
                    /*در صورتیکه وظیفه ای که در ان هستیم مرکز کنترل باشد چک تاریخ ها براساس پیوسته و ناپیوسته */
                    string offdatep = Request.Form["offdatep"];
                    string offtimep = Request.Form["offtimep"];
                    string ondatep = Request.Form["ondatep"];
                    string ontimep = Request.Form["ontimep"];
                    string offDATEc = string.Empty;
                    string off_TIMEcontrol = string.Empty;
                    string onDATEc = string.Empty;
                    string on_TIMEcontrol = string.Empty;

                    if (Request.Form["offDATEc"] != "" && Request.Form["offDATEc"] != null)
                    {
                        offDATEc = Request.Form["offDATEc"];
                    }
                    else
                    {
                        if (Request.Form["datecheck"] != "" && Request.Form["datecheck"] != null)
                        {
                            offDATEc = Request.Form["datecheck"];
                        }
                    }

                    if (Request.Form["off_TIMEcontrol"] != "" && Request.Form["off_TIMEcontrol"] != null)
                    {
                        off_TIMEcontrol = Request.Form["off_TIMEcontrol"];
                    }

                    if (Request.Form["onDATEc"] != "" && Request.Form["onDATEc"] != null)
                    {
                        onDATEc = Request.Form["onDATEc"];
                    }
                    else
                    {
                        if (Request.Form["datecheck"] != "" && Request.Form["datecheck"] != null)
                        {
                            onDATEc = Request.Form["datecheck"];
                        }
                    }

                    if (Request.Form["on_TIMEcontrol"] != "" && Request.Form["on_TIMEcontrol"] != null)
                    {
                        on_TIMEcontrol = Request.Form["on_TIMEcontrol"];
                    }


                    //این قسمت به درخواست مهندس حسین زاده به شماره گاما 9868 در تاریخ 10/10/99 غیرفعال شد
                    //با غیرفعال شدن این قسمت مرکز کنترل قادر به ثبت تاریخ بدون درنظر گرفتن بازه زمانی تاییده شده توسط برنامه ریزی دیسپاچینگ میباشد
                    //if (Request.Form["run"] == "0") // یعنی اگر حالت "اجرا شد" باشد
                    //{
                    //    if (Request.Form["stime1"] == "0")
                    //    {
                    //        if (offDATEc.CompareTo(offdatep) < 0 || offDATEc.CompareTo(ondatep) > 0 || onDATEc.CompareTo(offdatep) < 0 || onDATEc.CompareTo(ondatep) > 0)
                    //        {
                    //            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع و پایان اجرا بایستی مساوی یا فی بین تاریخ های شروع و پایان برنامه  باشد " }.ToJson();
                    //        }

                    //        if (offDATEc.CompareTo(offdatep) == 0)
                    //        {
                    //            if (off_TIMEcontrol.CompareTo(offtimep) < 0)
                    //            {
                    //                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع اجرا از زمان شروع برنامه بزرگتر و مساوی باید باشد" }.ToJson();
                    //            }
                    //        }

                    //        if (offDATEc.CompareTo(ondatep) == 0)
                    //        {
                    //            if (off_TIMEcontrol.CompareTo(ontimep) > 0)
                    //            {
                    //                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع اجرا از زمان پایان برنامه کوچکتر و مساوی باید باشد" }.ToJson();
                    //            }
                    //        }

                    //        if (onDATEc.CompareTo(offdatep) == 0)
                    //        {
                    //            if (on_TIMEcontrol.CompareTo(offtimep) < 0)
                    //            {
                    //                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان پایان اجرا از زمان شروع برنامه یزرگتر و مساوی باید باشد" }.ToJson();
                    //            }
                    //        }

                    //        if (onDATEc.CompareTo(ondatep) == 0)
                    //        {
                    //            if (on_TIMEcontrol.CompareTo(ontimep) > 0)
                    //            {
                    //                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان پایان اجرا از زمان پایان برنامه کوچکتر و مساوی باید باشد" }.ToJson();
                    //            }
                    //        }

                    //        if (offDATEc.CompareTo(onDATEc) > 0)
                    //        {
                    //            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع اجرا باید مساوی یاکوچکتراز پایان اجرا  باشد " }.ToJson();
                    //        }

                    //        if (offDATEc.CompareTo(onDATEc) == 0)
                    //        {
                    //            if (off_TIMEcontrol.CompareTo(on_TIMEcontrol) > 0)
                    //            {
                    //                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان پایان اجرا از زمان شروع اجرا یزرگتر و مساوی باید باشد" }.ToJson();
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (off_TIMEcontrol.CompareTo(on_TIMEcontrol) > 0)
                    //        {
                    //            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان پایان اجرا از زمان شروع اجرا یزرگتر و مساوی باید باشد" }.ToJson();
                    //        }

                    //        if (off_TIMEcontrol.CompareTo(offtimep) < 0)
                    //        {
                    //            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع اجرا از زمان شروع برنامه یزرگتر و مساوی باید باشد" }.ToJson();
                    //        }

                    //        if (off_TIMEcontrol.CompareTo(ontimep) > 0)
                    //        {
                    //            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع اجرا از زمان پایان برنامه کوچکتر و مساوی باید باشد" }.ToJson();
                    //        }

                    //        if (on_TIMEcontrol.CompareTo(offtimep) < 0)
                    //        {
                    //            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان پایان اجرا از زمان شروع برنامه یزرگتر و مساوی باید باشد" }.ToJson();
                    //        }

                    //        if (on_TIMEcontrol.CompareTo(ontimep) > 0)
                    //        {
                    //            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان پایان اجرا از زمان پایان برنامه کوچکتر و مساوی باید باشد" }.ToJson();
                    //        }
                    //    }
                    //}
                }
            }

            /*مشخص شدن ایتم های فرم براساس وظیفه ای که در ان هستیم */
            var item_type_doc = from b in Db.SEC_JOB_TYPE_DOC
                                join c in Db.SEC_JOB_TYPE_ITEM on b.JDTY_ID equals c.JDTY_JDTY_ID
                                join k in Db.EXP_ITEM_TYPE_DOC on c.EITY_EITY_ID equals k.EITY_ID
                                orderby k.EITY_ORDE
                                where k.ETDO_ETDO_ID == idtype && k.ACTV_TYPE == "1" && b.ACTIV_NAME == curent && c.ACTI_TYPE == 0 && k.EITY_TYPE == "248"
                                select k;

            var chkl = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == ideedo select b).FirstOrDefault();

            foreach (EXP_ITEM_TYPE_DOC IType in item_type_doc)
            {
                switch (IType.EITY_DESC)
                {
                    case "EEDO_DESC":
                        chkl.EEDO_DESC = Request.Form["EXP_EXPI_DOC.EEDO_DESC"];
                        break;
                    case "DEFC_DESC":
                        chkl.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];

                        break;
                    case "WORK_DESC":
                        chkl.WORK_DESC = Request.Form["EXP_EXPI_DOC.WORK_DESC"];

                        break;
                    case "DOC_NUMB":
                        chkl.DOC_NUMB = Request.Form["EXP_EXPI_DOC.DOC_NUMB"];
                        break;
                    case "FIRS_DATE":
                        chkl.FIRS_DATE = Request.Form["FDATE"];
                        break;
                    case "FIRS_TIME":
                        chkl.FIRS_TIME = Request.Form["FIRS_TIME"];
                        break;
                    case "END_DATE":
                        chkl.END_DATE = Request.Form["EDATE"];
                        break;
                    case "END_TIME":
                        chkl.END_TIME = Request.Form["END_TIME"];
                        break;
                    case "EEDO_DATE":
                        chkl.EEDO_DATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
                        break;
                    case "EEDO_TIME":
                        chkl.EEDO_TIME = Request.Form["EEDO_TIME"];
                        break;
                    case "EEDO_YEAR":
                        chkl.EEDO_YEAR = Request.Form["EEDO_YEAR"];
                        break;
                    //case "ACTI_NACT":
                    //    chkl.ACTI_NACT = Request.Form["EXP_EXPI_DOC.ACTI_NACT"];
                        break;
                    case "LETT_TYPE":
                        chkl.LETT_TYPE = Request.Form["nfix"];
                        chkl.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];
                        break;
                    case "EVEN_TYPE":
                        chkl.EVEN_TYPE = Request.Form["respletttype"];
                        break;
                    case "EPOL_EPOL_ID":
                        if (postcode != 0)
                        {
                            chkl.EPOL_EPOL_ID = postcode;
                        }
                        break;
                    case "EFUN_EFUN_ID":
                        chkl.EFUN_EFUN_ID = objecttemp.EFUN_EFUN_ID;
                        break;
                    case "ORGAN_CODE":
                        if (idtype == 21 && Request.Form["ORGA_CODE_request"] != null)
                        {
                            chkl.ORGA_MANA_ASTA_CODE = "7";
                            chkl.ORGA_MANA_CODE = "6";
                            chkl.ORGA_CODE = Request.Form["ORGA_CODE_request"];
                        }
                        else
                        {
                            if (idtype == 2)
                            {
                                chkl.ORGA_MANA_ASTA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_MANA_ASTA_CODE"];
                                chkl.ORGA_MANA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_MANA_CODE"];
                                chkl.ORGA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_CODE"];
                            }
                        }
                        break;
                    case "CPRO_PRJ_CODE":
                        chkl.CPRO_CPLA_PLN_CODE = Convert.ToInt16(Request.Form["EXP_EXPI_DOC.CPRO_CPLA_PLN_CODE"]);
                        chkl.CPRO_PRJ_CODE = Convert.ToInt16(Request.Form["EXP_EXPI_DOC.CPRO_PRJ_CODE"]);
                        break;
                    case "CONF_TYPE":
                        chkl.CONF_TYPE = Request.Form["confcheck"];
                        break;
                    case "ANPT_ANPT_ID":
                        chkl.ANPT_ANPT_ID = Convert.ToInt32(Request.Form["EXP_EXPI_DOC.ANPT_ANPT_ID"]);
                        break;
                    case "OUT_FUNC":
                        chkl.OUT_FUNC = Request.Form["DESC"];
                        break;
                    case "sendcenter":
                        chkl.EANA_EANA_ROW = Convert.ToInt32(Request.Form["sendidd"].ToString());
                        break;
                    case "descpost":
                        chkl.WORK_DESC = Request.Form["EXP_EXPI_DOC.WORK_DESC"];
                        break;
                    case "cancelresnprogram":
                        chkl.INFL_TYPE = Request.Form["confcheck1"];
                        break;
                    case "CONFroled":
                        chkl.SEND_TYPE = Request.Form["confrole"];
                        break;
                }
            }

            if (curent == "PROGRAMER")
                chkl.ACTI_NACT = Request.Form["coordinationWithTehran"];

            if (!String.IsNullOrEmpty(Request.Form["EEDO_TYPE"]))
                chkl.EEDO_TYPE = Request.Form["EEDO_TYPE"];

            Db.SaveChanges();
            /*ثبت اطلاعات ایتم های فرم */

            var defectrelation = (from b in Db.EXP_RELATION_DOC
                                  join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals c.EEDO_ID
                                  where b.EEDO_EEDO_ID == ideedo && c.ETDO_ETDO_ID == 2
                                  select c);

            if (defectrelation.FirstOrDefault() != null)
            {
                defectrelation.FirstOrDefault().EVEN_TYPE = chkl.EVEN_TYPE;
                defectrelation.FirstOrDefault().LETT_TYPE = chkl.LETT_TYPE;
                defectrelation.FirstOrDefault().WORK_DESC = chkl.DEFC_DESC;
                defectrelation.FirstOrDefault().END_TIME = chkl.END_TIME;
                defectrelation.FirstOrDefault().END_DATE = chkl.END_DATE;
                Db.SaveChanges();
            }

            if (idtype == 2)
            {
                /*این قسمت مربوط به دیفکت می باشد که در این قسمت کارای ندارد */
                var rel1 = new EXP_EDOC_INSTRU();
                POSTINST = Request.Form["POSTINSTRUMEN"];

                if (!string.IsNullOrEmpty(POSTINST))
                {
                    string sql = string.Format("delete from EXP_EDOC_INSTRU  where  EEDO_EEDO_ID={0}", objecttemp.EEDO_ID);
                    Db.Database.ExecuteSqlCommand(sql);

                    idinst = Convert.ToInt32(POSTINST);
                    int id = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                    if (id == 0)
                    {
                        rel1.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);
                        rel1.ETDO_ETDO_ID = objecttemp.ETDO_ETDO_ID;
                        Db.EXP_EDOC_INSTRU.Add(rel1);
                        Db.SaveChanges();
                    }
                }

                string Org1 = string.Empty;
                short Ope1 = 0;
                int per = 0;
                string organn = Request.Form["ORGA_CODEconf1"];
                if (!string.IsNullOrEmpty(organn))
                {
                    if (Request.Form["ORGA_CODEconf1"] != "")
                        Org1 = Request.Form["ORGA_CODEconf1"].ToString();
                    if (Request.Form["PRSN_EMP_NUMB1"] != "")
                        Ope1 = short.Parse(Request.Form["PRSN_EMP_NUMB1"].ToString());
                    if (Request.Form["PRSN_EMP_out"] != "")
                        per = Convert.ToInt32(Request.Form["PRSN_EMP_out"].ToString());

                    var rel2 = new EXP_SUPL_DOC();

                    string sqlsupl = string.Format("delete from EXP_SUPL_DOC  where POSI_TYEP='0' and  EEDO_EEDO_ID={0}", objecttemp.EEDO_ID);
                    Db.Database.ExecuteSqlCommand(sqlsupl);

                    if (Ope1 != 0)
                    {
                        int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.PRSN_EMP_NUMB == Ope1 select b.ESUD_ID).Count();
                        if (idm == 0)
                        {
                            rel2.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                            rel2.ORGA_CODE = Org1;
                            rel2.ORGA_MANA_CODE = "6";
                            rel2.ORGA_MANA_ASTA_CODE = "7";
                            rel2.POSI_TYEP = "0";
                            rel2.PRSN_EMP_NUMB = Ope1;

                            Db.EXP_SUPL_DOC.Add(rel2);
                            Db.SaveChanges();
                        }
                    }
                    else
                    {
                        if (per != 0)
                        {
                            int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.OUTP_OUTP_ID == per select b.ESUD_ID).Count();
                            if (idm == 0)
                            {
                                rel2.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                                rel2.ORGA_CODE = Org1;
                                rel2.ORGA_MANA_CODE = "6";
                                rel2.ORGA_MANA_ASTA_CODE = "7";
                                rel2.POSI_TYEP = "0";
                                rel2.OUTP_OUTP_ID = per;

                                Db.EXP_SUPL_DOC.Add(rel2);
                                Db.SaveChanges();
                            }
                        }
                    }
                }

                var rel3 = new EXP_RELATION_DOC();
                string EEDO_EEDO_ID_R = Request.Form["EEDO_EEDO_ID_R"];
                if (!string.IsNullOrEmpty(EEDO_EEDO_ID_R))
                {
                    string sql = string.Format("delete from EXP_RELATION_DOC  where EEDO_EEDO_ID_R in (select eedo_id from EXP_EXPI_DOC where etdo_etdo_id!=21) and  EEDO_EEDO_ID={0}", EEDO_ID);
                    Db.Database.ExecuteSqlCommand(sql);
                    rel3.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                    rel3.EEDO_EEDO_ID_R = Convert.ToInt32(EEDO_EEDO_ID_R);
                    Db.EXP_RELATION_DOC.Add(rel3);
                    Db.SaveChanges();
                }
            }
            else
            {
                /*ثبت ایتم های ردیف تجهیز در درخواست انجام کار */
                decimal edin = 0;
                decimal eprog = 0;
                if (Request.Form["defectnumber"] != "" && Request.Form["defectnumber"] != null)
                {
                    edin = Convert.ToDecimal(Request.Form["defectnumber"]);
                }

                if (Request.Form["prognumber"] != "" && Request.Form["prognumber"] != null)
                {
                    eprog = Convert.ToDecimal(Request.Form["prognumber"]);
                }

                /*ثبت اطلاعات دیفکت و یا برنامه زمانبندی بروی درخواست انجام کار */
                var rel = new EXP_RELATION_DOC();
                int eedoid = Convert.ToInt32(EEDO_ID);
                if (eprog != 0)
                {
                    /*ثبت برنامه زمانبندی*/
                    string cou = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedoid && b.EDIN_EDIN_ID == eprog select b).Count().ToString();
                    int rc = Convert.ToInt32(cou);
                    if (rc == 0)
                    {
                        rel.EEDO_EEDO_ID = eedoid;
                        rel.EDIN_EDIN_ID = eprog;
                        Db.EXP_RELATION_DOC.Add(rel);
                        Db.SaveChanges();
                    }
                }

                if (edin != 0)
                {
                    /*ثبت دیفکت */
                    string cou = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedoid && b.EEDO_EEDO_ID_R == edin select b).Count().ToString();
                    int rrc = Convert.ToInt32(cou);
                    if (rrc == 0)
                    {
                        rel.EEDO_EEDO_ID = eedoid;
                        rel.EEDO_EEDO_ID_R = edin;
                        Db.EXP_RELATION_DOC.Add(rel);
                        Db.SaveChanges();
                    }
                }

                string sqc = (from b in Db.SEC_JOB_TYPE_DOC where b.ACTIV_NAME == curent && b.ETDO_ETDO_ID == idtype select b.JDTY_ID).FirstOrDefault().ToString();
                int isgc = Convert.ToInt32(sqc);
                int icheck = 0;
                var typeOfRequest = 1;
                if (!string.IsNullOrEmpty(Request.Form["idform"]))
                {
                    typeOfRequest = Convert.ToInt32(Request.Form["idform"].ToString());
                }

                /*ثبت اطلاعات ردیف تجهیز براساس وظیفه ای که در ان هستیم */
                int ccount = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.CUT_STAT == "1" && b.ATTG_STATT == null && b.JDTY_JDTY_ID == isgc select b).Count();
                var rel1 = new EXP_EDOC_INSTRU();
                if (curent == "CONTROLCENTER" && typeOfRequest != 3)
                {
                    if (Request.Form["stime1"] == "0")
                    {
                        icheck = 0;
                    }
                    else
                    {
                        /*چک این که در تاریخ مشخص برای مرکز کنترل اطلاعاتی است */
                        var sqprog = (from b in Db.EXP_EDOC_INSTRU
                                      join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals k.EEDO_ID
                                      join c in Db.EXP_PFUNCTION on k.EFUN_EFUN_ID equals c.EFUN_ID
                                      where b.EEDO_EEDO_ID == ideedo &&
                                            b.CUT_STAT == "1" && (b.JDTY_JDTY_ID == 97 || (b.JDTY_JDTY_ID == 91 && c.EPRO_EPRO_ID == 250) || (b.JDTY_JDTY_ID == 92 && c.EPRO_EPRO_ID == 252))
                                      select b).FirstOrDefault();

                        if (sqprog.OFF_DATE == sqprog.ON_DATE)
                        {
                            icheck = 0;
                        }
                        else
                        {
                            string currentday = Request.Form["datecheck"];
                            icheck = 1;
                            ccount = (from b in Db.EXP_EDOC_INSTRU
                                      where b.EEDO_EEDO_ID == ideedo &&
                                            b.CUT_STAT == "1" && b.ATTG_STATT == null && b.JDTY_JDTY_ID == isgc && b.OFF_DATE == currentday
                                      select b).Count();
                        }
                    }
                }

                if (ccount == 0 && typeOfRequest != 3 && (curent == "DISKERMAN" || curent == "DISBANDAR" || curent == "DISHORMOZGAN" ||
                                                          curent == "SECCONTROL" || curent == "LINEORGAN" || curent == "ENTEGHAL" ||
                                                          curent == "FIXORGANE" || curent == "DIAGRAM"))
                {

                    /*ثبت اطلاعات مربوط به هماهنگی ها */
                    var qrel = (from b in Db.EXP_EDOC_INSTRU
                                join j in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals j.JDTY_ID
                                where b.EEDO_EEDO_ID == ideedo && j.ACTIV_NAME == "CREATOR" && j.ETDO_ETDO_ID == 21
                                orderby b.EDIN_ID descending
                                select b);

                    foreach (EXP_EDOC_INSTRU inst in qrel)
                    {
                        inst.JDTY_JDTY_ID = isgc;
                        inst.ETDO_ETDO_ID = 21;

                        decimal eedin = inst.EDIN_ID;

                        if (Request.Form["accept"] != "" && Request.Form["accept"] != null)
                        {
                            inst.EDIN_STIN = "0";
                        }

                        if (Request.Form["diac"] != "" && Request.Form["diac"] != null)
                        {
                            inst.EDIN_STIN = "1";
                        }

                        if (Request.Form["PROGDESC"] != "" && Request.Form["PROGDESC"] != null)
                        {
                            inst.ATTG_SPIC = Request.Form["PROGDESC"];
                        }

                        if (Request.Form["ofDATEprog"] != "" && Request.Form["ofDATEprog"] != null)
                        {
                            inst.OFF_DATE = Request.Form["ofDATEprog"];
                        }

                        if (Request.Form["off_TIMEprog"] != "" && Request.Form["off_TIMEprog"] != null)
                        {
                            inst.OFF_TIME = Request.Form["off_TIMEprog"];
                        }

                        if (Request.Form["onDATEprog"] != "" && Request.Form["onDATEprog"] != null)
                        {
                            inst.ON_DATE = Request.Form["onDATEprog"];
                        }

                        if (Request.Form["on_TIMEprog"] != "" && Request.Form["on_TIMEprog"] != null)
                        {
                            inst.ON_TIME = Request.Form["on_TIMEprog"];
                        }

                        if (Request.Form["offDATEh"] != "" && Request.Form["offDATEh"] != null)
                        {
                            inst.OFF_DATE = Request.Form["offDATEh"];
                        }

                        if (Request.Form["off_TIMEh"] != "" && Request.Form["off_TIMEh"] != null)
                        {
                            inst.OFF_TIME = Request.Form["off_TIMEh"];
                        }

                        if (Request.Form["onDATEh"] != "" && Request.Form["onDATEh"] != null)
                        {
                            inst.ON_DATE = Request.Form["onDATEh"];
                        }

                        if (Request.Form["on_TIMEh"] != "" && Request.Form["on_TIMEh"] != null)
                        {
                            inst.ON_TIME = Request.Form["on_TIMEh"];
                        }

                        if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                        {
                            inst.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                        }

                        if (Request.Form["HDESC"] != "" && Request.Form["HDESC"] != null)
                        {
                            inst.ATTG_SPIC = Request.Form["HDESC"];
                        }

                        if (Request.Form["hcancel"] != "" && Request.Form["hcancel"] != null)
                        {
                            inst.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["hcancel"].ToString());
                        }

                        var einst2 = (from p in Db.EXP_EDOC_INSTRU
                                      join b in Db.SEC_JOB_TYPE_DOC on p.JDTY_JDTY_ID equals b.JDTY_ID
                                      where p.EEDO_EEDO_ID == ideedo && p.CUT_STAT == "1" && b.ETDO_ETDO_ID == 21 && b.ACTIV_NAME == "CREATOR"
                                      select p).FirstOrDefault();

                        string stime = einst2.TIME_ISTA.ToString();
                        if (stime == "0")
                        {
                            /*چک تاریخ ها و زمان که پایان از شروع کوچکتر نباشد */
                            if (inst.OFF_DATE.CompareTo(inst.ON_DATE) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                            else if (inst.OFF_DATE.CompareTo(inst.ON_DATE) == 0 && inst.OFF_TIME.CompareTo(inst.ON_TIME) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                        }
                        else
                        {
                            /*چک زمان های که پایان از شروع کروچکتر نباشد */
                            if (inst.OFF_DATE.CompareTo(inst.ON_DATE) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                            else if (inst.OFF_DATE.CompareTo(inst.ON_DATE) == 0 && inst.OFF_TIME.CompareTo(inst.ON_TIME) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                        }

                        Db.EXP_EDOC_INSTRU.Add(inst);
                        Db.SaveChanges();
                        var q = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == inst.EDIN_ID select b).FirstOrDefault();
                        q.EDIN_EDIN_ID = eedin;
                        Db.SaveChanges();
                    }
                }

                else if (ccount > 0 && typeOfRequest != 3 && (curent == "DISKERMAN" || curent == "DISBANDAR" || curent == "DISHORMOZGAN" ||
                                                     curent == "SECCONTROL" || curent == "LINEORGAN" || curent == "ENTEGHAL" ||
                                                     curent == "FIXORGANE" || curent == "DIAGRAM"))
                {
                    var updateRecord = (from b in Db.EXP_EDOC_INSTRU
                                        join j in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals j.JDTY_ID
                                        where b.EEDO_EEDO_ID == ideedo && j.ACTIV_NAME == curent && b.ETDO_ETDO_ID == 21
                                        orderby b.EDIN_ID descending
                                        select b).FirstOrDefault();

                    updateRecord.JDTY_JDTY_ID = isgc;
                    updateRecord.ETDO_ETDO_ID = 21;
                    decimal eedin = updateRecord.EDIN_ID;

                    if (Request.Form["accept"] != "" && Request.Form["accept"] != null)
                    {
                        updateRecord.EDIN_STIN = "0";
                    }

                    if (Request.Form["diac"] != "" && Request.Form["diac"] != null)
                    {
                        updateRecord.EDIN_STIN = "1";
                    }

                    if (Request.Form["PROGDESC"] != "" && Request.Form["PROGDESC"] != null)
                    {
                        updateRecord.ATTG_SPIC = Request.Form["PROGDESC"];
                    }

                    if (Request.Form["ofDATEprog"] != "" && Request.Form["ofDATEprog"] != null)
                    {
                        updateRecord.OFF_DATE = Request.Form["ofDATEprog"];
                    }

                    if (Request.Form["off_TIMEprog"] != "" && Request.Form["off_TIMEprog"] != null)
                    {
                        updateRecord.OFF_TIME = Request.Form["off_TIMEprog"];
                    }

                    if (Request.Form["onDATEprog"] != "" && Request.Form["onDATEprog"] != null)
                    {
                        updateRecord.ON_DATE = Request.Form["onDATEprog"];
                    }

                    if (Request.Form["on_TIMEprog"] != "" && Request.Form["on_TIMEprog"] != null)
                    {
                        updateRecord.ON_TIME = Request.Form["on_TIMEprog"];
                    }

                    if (Request.Form["offDATEh"] != "" && Request.Form["offDATEh"] != null)
                    {
                        updateRecord.OFF_DATE = Request.Form["offDATEh"];
                    }

                    if (Request.Form["off_TIMEh"] != "" && Request.Form["off_TIMEh"] != null)
                    {
                        updateRecord.OFF_TIME = Request.Form["off_TIMEh"];
                    }

                    if (Request.Form["onDATEh"] != "" && Request.Form["onDATEh"] != null)
                    {
                        updateRecord.ON_DATE = Request.Form["onDATEh"];
                    }

                    if (Request.Form["on_TIMEh"] != "" && Request.Form["on_TIMEh"] != null)
                    {
                        updateRecord.ON_TIME = Request.Form["on_TIMEh"];
                    }

                    if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                    {
                        updateRecord.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                    }

                    if (Request.Form["HDESC"] != "" && Request.Form["HDESC"] != null)
                    {
                        updateRecord.ATTG_SPIC = Request.Form["HDESC"];
                    }

                    if (Request.Form["hcancel"] != "" && Request.Form["hcancel"] != null)
                    {
                        updateRecord.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["hcancel"].ToString());
                    }

                    var einst2 = (from p in Db.EXP_EDOC_INSTRU
                                  join b in Db.SEC_JOB_TYPE_DOC on p.JDTY_JDTY_ID equals b.JDTY_ID
                                  where p.EEDO_EEDO_ID == ideedo && p.CUT_STAT == "1" && b.ETDO_ETDO_ID == 21 && b.ACTIV_NAME == "CREATOR"
                                  select p).FirstOrDefault();

                    string stime = einst2.TIME_ISTA.ToString();
                    if (stime == "0")
                    {
                        /*چک تاریخ ها و زمان که پایان از شروع کوچکتر نباشد */
                        if (updateRecord.OFF_DATE.CompareTo(updateRecord.ON_DATE) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else if (updateRecord.OFF_DATE.CompareTo(updateRecord.ON_DATE) == 0 && updateRecord.OFF_TIME.CompareTo(updateRecord.ON_TIME) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                    }
                    else
                    {
                        /*چک زمان های که پایان از شروع کروچکتر نباشد */
                        if (updateRecord.OFF_DATE.CompareTo(updateRecord.ON_DATE) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else if (updateRecord.OFF_DATE.CompareTo(updateRecord.ON_DATE) == 0 && updateRecord.OFF_TIME.CompareTo(updateRecord.ON_TIME) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                    }

                    Db.SaveChanges();

                }
                else if (ccount == 0 && typeOfRequest != 3 && curent == "PROGRAMER")
                {
                    // بررسی تایید واحد مطالعات و دیاگرام
                    var msg = CheckForSendToCoordination(ideedo);
                    if (!string.IsNullOrEmpty(msg))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = msg }.ToJson();
                    }

                    /*ثبت اطلاعات برنامه ریزی */
                    int m = 0;

                    m = Db.Database.SqlQuery<int>("select EXP_EDIN_Q.nextval from dual").FirstOrDefault();

                    string sql = "insert into EXP_EDOC_INSTRU(EDIN_ID, CRET_BY, CRET_DATE,EERR_EERR_ID_R1, OFF_DATE, OFF_TIME, ON_DATE, ON_TIME, TIME_ISTA, " +
                                 "EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, " +
                                 "EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID,EERR_EERR_ID, EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_EDIN_ID,JDTY_JDTY_ID,ECBA_ECBA_ID)" +
                                 " select " + m + "+rownum, user,sysdate,EERR_EERR_ID_R1, OFF_DATE, OFF_TIME, ON_DATE, ON_TIME, TIME_ISTA, EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, " +
                                 "MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID,EERR_EERR_ID, EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, " +
                                 "OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_ID,97,ECBA_ECBA_ID  from (select user,sysdate,EERR_EERR_ID_R1,OFF_DATE, OFF_TIME, ON_DATE, ON_TIME, TIME_ISTA, " +
                                 "EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID,EERR_EERR_ID, " +
                                 "EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_ID,ECBA_ECBA_ID from EXP_EDOC_INSTRU where EEDO_EEDO_ID=" + ideedo + " and JDTY_JDTY_ID=91 and ETDO_ETDO_ID=21)";
                    Db.Database.ExecuteSqlCommand(sql);

                    var q1 = (from b in Db.EXP_EDOC_INSTRU
                              where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 97
                              select b);
                    foreach (EXP_EDOC_INSTRU q in q1)
                    {
                        m = Db.Database.SqlQuery<int>("select EXP_EDIN_Q.nextval from dual").FirstOrDefault();
                        q.JDTY_JDTY_ID = isgc;

                        if (Request.Form["PROGDESC"] != "" && Request.Form["PROGDESC"] != null)
                        {
                            q.ATTG_SPIC = Request.Form["PROGDESC"];
                        }

                        if (Request.Form["ofDATEprog"] != "" && Request.Form["ofDATEprog"] != null)
                        {
                            q.OFF_DATE = Request.Form["ofDATEprog"];
                        }

                        if (Request.Form["off_TIMEprog"] != "" && Request.Form["off_TIMEprog"] != null)
                        {
                            q.OFF_TIME = Request.Form["off_TIMEprog"];
                        }

                        if (Request.Form["onDATEprog"] != "" && Request.Form["onDATEprog"] != null)
                        {
                            q.ON_DATE = Request.Form["onDATEprog"];
                        }

                        if (Request.Form["on_TIMEprog"] != "" && Request.Form["on_TIMEprog"] != null)
                        {
                            q.ON_TIME = Request.Form["on_TIMEprog"];
                        }

                        if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                        {
                            q.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                        }

                        Db.SaveChanges();
                    }
                }
                else if (curent == "CONTROLCENTER" && ccount == 0 && typeOfRequest != 3)
                {
                    /*ثبت اطلاعات مرکزکنتنرل */
                    int m = 0;
                    m = Db.Database.SqlQuery<int>("select EXP_EDIN_Q.nextval from dual").FirstOrDefault();

                    string sql = "insert into EXP_EDOC_INSTRU(EDIN_ID, CRET_BY, CRET_DATE, EERR_EERR_ID_R1, TIME_ISTA, " +
                                 "EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, " +
                                 "EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID, EERR_EERR_ID,EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_EDIN_ID,JDTY_JDTY_ID,ECBA_ECBA_ID)" +
                                 " select " + m + "+rownum, user,sysdate,EERR_EERR_ID_R1,  TIME_ISTA, EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, " +
                                 "MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID, EERR_EERR_ID,EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, " +
                                 "OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_ID,101,ECBA_ECBA_ID  from (select user,sysdate, EERR_EERR_ID_R1,TIME_ISTA, " +
                                 "EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID, EERR_EERR_ID," +
                                 "EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_ID,ECBA_ECBA_ID from EXP_EDOC_INSTRU where EEDO_EEDO_ID=" + ideedo +
                                 " and JDTY_JDTY_ID=91 and ETDO_ETDO_ID=21)";

                    Db.Database.ExecuteSqlCommand(sql);

                    var q1 = (from b in Db.EXP_EDOC_INSTRU
                              where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 101 && b.OFF_DATE == null && b.ON_DATE == null
                              select b);

                    foreach (EXP_EDOC_INSTRU q in q1)
                    {
                        m = Db.Database.SqlQuery<int>("select EXP_EDIN_Q.nextval from dual").FirstOrDefault();
                        q.JDTY_JDTY_ID = isgc;

                        if (Request.Form["stop"] != "" && Request.Form["stop"] != null)
                        {
                            q.EDIN_STIN = "1";
                            if (Request.Form["ccancel"] != "" && Request.Form["ccancel"] != null)
                            {
                                q.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["ccancel"].ToString());
                            }
                            else
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "دلیل لغو را مشخص نمایید" }.ToJson();
                            }
                        }

                        if (Request.Form["run"] != "" && Request.Form["run"] != null)
                        {
                            q.EDIN_STIN = "0";

                            if (Request.Form["offDATEc"] != "" && Request.Form["offDATEc"] != null)
                            {
                                q.OFF_DATE = Request.Form["offDATEc"];
                            }
                            else
                            {
                                if (Request.Form["datecheck"] != "" && Request.Form["datecheck"] != null)
                                {
                                    q.OFF_DATE = Request.Form["datecheck"];
                                }
                            }

                            if (Request.Form["off_TIMEcontrol"] != "" && Request.Form["off_TIMEcontrol"] != null)
                            {
                                q.OFF_TIME = Request.Form["off_TIMEcontrol"];
                            }

                            if (Request.Form["onDATEc"] != "" && Request.Form["onDATEc"] != null)
                            {
                                q.ON_DATE = Request.Form["onDATEc"];
                            }
                            else
                            {
                                if (Request.Form["datecheck"] != "" && Request.Form["datecheck"] != null)
                                {
                                    q.ON_DATE = Request.Form["datecheck"];
                                }
                            }

                            if (Request.Form["on_TIMEcontrol"] != "" && Request.Form["on_TIMEcontrol"] != null)
                            {
                                q.ON_TIME = Request.Form["on_TIMEcontrol"];
                            }

                            if (Request.Form["EDIN_MW"] != "" && Request.Form["EDIN_MW"] != null)
                            {
                                q.EDIN_MW = Request.Form["EDIN_MW"].ToString();
                            }

                            if (Request.Form["EDIN_OFF"] != "" && Request.Form["EDIN_OFF"] != null)
                            {
                                q.EDIN_OFF = Request.Form["EDIN_OFF"].ToString();
                            }

                            if (Request.Form["EDIN_MVH"] != "" && Request.Form["EDIN_MVH"] != null)
                            {
                                q.EDIN_MVH = Request.Form["EDIN_MVH"].ToString();
                            }
                        }

                        if (Request.Form["cDESC"] != "" && Request.Form["cDESC"] != null)
                        {
                            q.ATTG_SPIC = Request.Form["cDESC"];
                        }

                        Db.SaveChanges();
                    }
                }
                else if (curent == "WORKER" && ccount == 0 && typeOfRequest != 3)
                {
                    /*ثبت اطلاعات مرکزکنتنرل */
                    int m = 0;
                    string j = string.Empty;
                    m = Db.Database.SqlQuery<int>("select EXP_EDIN_Q.nextval from dual").FirstOrDefault();
                    int checkinst = (from b in Db.EXP_EDOC_INSTRU
                                     where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 101
                                     select b).Count();

                    if (checkinst == 0)
                    {
                        checkinst = (from b in Db.EXP_EDOC_INSTRU
                                     where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 97
                                     select b).Count();

                        if (checkinst == 0)
                        {
                            checkinst = (from b in Db.EXP_EDOC_INSTRU
                                         where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 91
                                         select b).Count();
                            j = "91";
                        }
                        else
                        {
                            j = "97";
                        }
                    }
                    else
                    {
                        j = "101";
                    }

                    string sql = "insert into EXP_EDOC_INSTRU(EDIN_ID, CRET_BY, CRET_DATE, OFF_DATE,  ON_DATE, EERR_EERR_ID_R1, TIME_ISTA, " +
                                  "EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, " +
                                  "EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID, EERR_EERR_ID,EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_EDIN_ID,JDTY_JDTY_ID,ECBA_ECBA_ID)" +
                                  " select " + m + "+rownum, user,sysdate, OFF_DATE,  ON_DATE,EERR_EERR_ID_R1, TIME_ISTA, EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, " +
                                  "MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID, EERR_EERR_ID,EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, " +
                                  "OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_ID,102,ECBA_ECBA_ID  from (select user,sysdate,OFF_DATE,  ON_DATE,EERR_EERR_ID_R1, TIME_ISTA, " +
                                  "EDIN_STIN, INST_STAT, EART_STAT, CUST_STAT, MDFY_BY, MDFY_DATE, EEDO_EEDO_ID, EFUN_EFUN_ID, EINS_EINS_ID, EOFS_EOFS_ID, EPIU_EPIU_ID,ETBY_ETBY_ID, EERR_EERR_ID," +
                                  "EPOL_EPOL_ID, EUNL_EUNL_ID, CONT_FUN, CUT_STAT, OPER_STAT, FUNC_TYPE, ETDO_ETDO_ID,EDIN_ID,ECBA_ECBA_ID from EXP_EDOC_INSTRU where EEDO_EEDO_ID=" + ideedo +
                                  " and JDTY_JDTY_ID=" + j + " and ETDO_ETDO_ID=21)";
                    Db.Database.ExecuteSqlCommand(sql);

                    var q1 = (from b in Db.EXP_EDOC_INSTRU
                              where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 102
                              select b);

                    foreach (EXP_EDOC_INSTRU q in q1)
                    {
                        m = Db.Database.SqlQuery<int>("select EXP_EDIN_Q.nextval from dual").FirstOrDefault();
                        q.JDTY_JDTY_ID = isgc;
                        q.EDIN_STIN = "0";

                        if (Request.Form["offDATEc"] != "" && Request.Form["offDATEc"] != null)
                        {
                            q.OFF_DATE = Request.Form["offDATEc"];
                        }

                        if (Request.Form["off_TIMEprog"] != "" && Request.Form["off_TIMEprog"] != null)
                        {
                            q.OFF_TIME = Request.Form["off_TIMEprog"];
                        }

                        if (Request.Form["onDATEc"] != "" && Request.Form["onDATEc"] != null)
                        {
                            q.ON_DATE = Request.Form["onDATEc"];
                        }

                        if (Request.Form["on_TIMEprog"] != "" && Request.Form["on_TIMEprog"] != null)
                        {
                            q.ON_TIME = Request.Form["on_TIMEprog"];
                        }

                        if (Request.Form["EDIN_MW"] != "" && Request.Form["EDIN_MW"] != null)
                        {
                            q.EDIN_MW = Request.Form["EDIN_MW"].ToString();
                        }

                        if (Request.Form["EDIN_OFF"] != "" && Request.Form["EDIN_OFF"] != null)
                        {
                            q.EDIN_OFF = Request.Form["EDIN_OFF"].ToString();
                        }

                        if (Request.Form["EDIN_MVH"] != "" && Request.Form["EDIN_MVH"] != null)
                        {
                            q.EDIN_MVH = Request.Form["EDIN_MVH"].ToString();
                        }

                        if (Request.Form["cDESC"] != "" && Request.Form["cDESC"] != null)
                        {
                            q.ATTG_SPIC = Request.Form["cDESC"];
                        }

                        var defectrelation1 = (from b in Db.EXP_RELATION_DOC
                                               join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals c.EEDO_ID
                                               where b.EEDO_EEDO_ID == ideedo && c.ETDO_ETDO_ID == 2
                                               select c);

                        if (defectrelation1.FirstOrDefault() != null)
                        {
                            defectrelation1.FirstOrDefault().EVEN_TYPE = chkl.EVEN_TYPE;
                            defectrelation1.FirstOrDefault().LETT_TYPE = chkl.LETT_TYPE;
                            defectrelation1.FirstOrDefault().WORK_DESC = chkl.DEFC_DESC;
                            defectrelation1.FirstOrDefault().END_TIME = q.OFF_TIME;
                            defectrelation1.FirstOrDefault().END_DATE = q.OFF_DATE;
                            //Db.SaveChanges();
                        }

                        Db.SaveChanges();
                    }
                }
                else if (curent == "WORKER" && ccount != 0 && typeOfRequest != 3)
                {
                    /*ثبت اطلاعات مرکزکنتنرل */
                    int j;

                    int checkinst = (from b in Db.EXP_EDOC_INSTRU
                                     where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 101
                                     select b).Count();

                    if (checkinst == 0)
                    {
                        checkinst = (from b in Db.EXP_EDOC_INSTRU
                                     where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 97
                                     select b).Count();

                        if (checkinst == 0)
                        {
                            checkinst = (from b in Db.EXP_EDOC_INSTRU
                                         where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 91
                                         select b).Count();
                            j = 91;
                        }
                        else
                        {
                            j = 97;
                        }
                    }
                    else
                    {
                        j = 101;
                    }

                    rel1 = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.CUT_STAT == "1" && b.JDTY_JDTY_ID == j select b).FirstOrDefault();


                    var q1 = (from b in Db.EXP_EDOC_INSTRU
                              where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 102
                              select b);
                    foreach (EXP_EDOC_INSTRU q in q1)
                    {
                        if (Request.Form["onDATEc"] != "" && Request.Form["onDATEc"] != null)
                        {
                            q.ON_DATE = Request.Form["onDATEc"];
                        }
                        else
                        {
                            q.ON_DATE = rel1.ON_DATE;
                        }

                        if (Request.Form["offDATEc"] != "" && Request.Form["offDATEc"] != null)
                        {
                            q.OFF_DATE = Request.Form["offDATEc"];
                        }
                        else
                        {
                            q.OFF_DATE = rel1.OFF_DATE;
                        }

                        if (Request.Form["off_TIMEprog"] != "" && Request.Form["off_TIMEprog"] != null)
                        {
                            q.OFF_TIME = Request.Form["off_TIMEprog"];
                        }

                        if (Request.Form["on_TIMEprog"] != "" && Request.Form["on_TIMEprog"] != null)
                        {
                            q.ON_TIME = Request.Form["on_TIMEprog"];
                        }

                        if (Request.Form["EDIN_MW"] != "" && Request.Form["EDIN_MW"] != null)
                        {
                            q.EDIN_MW = Request.Form["EDIN_MW"].ToString();
                        }

                        if (Request.Form["EDIN_OFF"] != "" && Request.Form["EDIN_OFF"] != null)
                        {
                            q.EDIN_OFF = Request.Form["EDIN_OFF"].ToString();
                        }

                        if (Request.Form["EDIN_MVH"] != "" && Request.Form["EDIN_MVH"] != null)
                        {
                            q.EDIN_MVH = Request.Form["EDIN_MVH"].ToString();
                        }

                        if (Request.Form["cDESC"] != "" && Request.Form["cDESC"] != null)
                        {
                            q.ATTG_SPIC = Request.Form["cDESC"];
                        }


                        var defectrelation1 = (from b in Db.EXP_RELATION_DOC
                                               join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals c.EEDO_ID
                                               where b.EEDO_EEDO_ID == ideedo && c.ETDO_ETDO_ID == 2
                                               select c);

                        if (defectrelation1.FirstOrDefault() != null)
                        {
                            defectrelation1.FirstOrDefault().EVEN_TYPE = chkl.EVEN_TYPE;
                            defectrelation1.FirstOrDefault().LETT_TYPE = chkl.LETT_TYPE;
                            defectrelation1.FirstOrDefault().WORK_DESC = chkl.DEFC_DESC;
                            defectrelation1.FirstOrDefault().END_TIME = q.OFF_TIME;
                            defectrelation1.FirstOrDefault().END_DATE = q.OFF_DATE;
                            //Db.SaveChanges();
                        }

                        if (rel1.TIME_ISTA == "0")
                        {
                            /*چک تاریخ ها و زمان که پایان از شروع کوچکتر نباشد */
                            if (rel1.OFF_DATE.CompareTo(rel1.ON_DATE) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                            else if (rel1.OFF_DATE.CompareTo(rel1.ON_DATE) == 0 && rel1.OFF_TIME.CompareTo(rel1.ON_TIME) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                        }
                        else
                        {
                            /*چک زمان های که پایان از شروع کروچکتر نباشد */
                            if (rel1.OFF_DATE.CompareTo(rel1.ON_DATE) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                            else if (rel1.OFF_DATE.CompareTo(rel1.ON_DATE) == 0 && rel1.OFF_TIME.CompareTo(rel1.ON_TIME) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                        }

                        Db.SaveChanges();
                    }
                }
                else if (curent == "MENAGPOST" && typeOfRequest == 3)
                {
                    var tempData = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 91 select b);
                    var checkHasData = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == isgc select b);
                    if (checkHasData.Count() > 0)
                    {
                        foreach (var item in checkHasData)
                        {
                            item.EDIN_STIN = Request.Form["EXP_EXPI_DOC.CONF_TYPE"];
                            Db.Entry(item).State = System.Data.EntityState.Modified;
                            //Db.SaveChanges();
                        }
                    }
                    else
                    {
                        var newData = new EXP_EDOC_INSTRU();
                        foreach (var item in tempData)
                        {
                            newData = item;
                            newData.JDTY_JDTY_ID = isgc;
                            newData.EDIN_STIN = Request.Form["EXP_EXPI_DOC.CONF_TYPE"];
                            Db.EXP_EDOC_INSTRU.Add(newData);
                            //Db.SaveChanges();
                        }
                    }

                    Db.SaveChanges();
                }
                else
                {
                    /*ثبت اطلاعات برای حالت های به غیر از حالت های قبل */
                    if (curent == "PROGRAMER")
                    {
                        // بررسی تایید واحد مطالعات و دیاگرام
                        var msg = CheckForSendToCoordination(ideedo);
                        if (!string.IsNullOrEmpty(msg))
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = msg }.ToJson();
                        }
                    }

                    int j;
                    int checkinst = (from b in Db.EXP_EDOC_INSTRU
                                     where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 102
                                     select b).Count();

                    if (checkinst == 0)
                    {
                        checkinst = (from b in Db.EXP_EDOC_INSTRU
                                     where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 101
                                     select b).Count();

                        if (checkinst == 0)
                        {
                            checkinst = (from b in Db.EXP_EDOC_INSTRU
                                         where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 97
                                         select b).Count();

                            if (checkinst == 0)
                            {
                                checkinst = (from b in Db.EXP_EDOC_INSTRU
                                             where b.EEDO_EEDO_ID == ideedo && b.JDTY_JDTY_ID == 91
                                             select b).Count();
                                j = 91;
                            }
                            else
                            {
                                j = 97;
                            }
                        }
                        else
                        {
                            j = 101;
                        }
                    }

                    else
                    {
                        j = 102;
                    }

                    int c = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.CUT_STAT == "1" && b.JDTY_JDTY_ID == j select b).Count();
                    if (c > 0)
                    {
                        rel1 = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == ideedo && b.CUT_STAT == "1" && b.JDTY_JDTY_ID == j select b).FirstOrDefault();
                    }
                    else if (c == 0)
                    {
                        rel1.EEDO_EEDO_ID = ideedo;
                        rel1.JDTY_JDTY_ID = Convert.ToDecimal(QCURENT.ToString());
                        rel1.ETDO_ETDO_ID = 21;
                        rel1.CUT_STAT = "1";
                        rel1.CONT_FUN = time;
                    }

                    // اگر مقدار 0 نباشد یعنی باید مقادیر قبلی جایگزین شود و اگر نباشد یعنی تغییر کرده و کل پست انتخاب شده
                    if (epiuid != 0 && epiuid != 1)
                    {
                        rel1.EPIU_EPIU_ID = epiuid;
                    }
                    else if (epiuid == 1)
                    {
                        rel1.EPIU_EPIU_ID = null;
                    }

                    if (idinst != 0 && idinst != 1)
                    {
                        rel1.EERR_EERR_ID = idinst;
                    }
                    else if (idinst == 1)
                    {
                        rel1.EERR_EERR_ID = null;
                    }

                    if (postcode != 0)
                    {
                        rel1.EPOL_EPOL_ID = postcode;
                    }

                    if (Request.Form["etbytype"] != null && Request.Form["etbytype"] != "")
                    {
                        rel1.ETBY_ETBY_ID = Convert.ToInt32(Request.Form["etbytype"]);
                    }

                    // برای انتخاب تجهیز جدیدی اضافه شده
                    if (etby != 0 && etby != null) // اگر 0 چک کنم توی وضعیت های معاونت به بعد وارد کد پایین میشه و مقدار خالی میکنه
                    {
                        rel1.ETBY_ETBY_ID = Convert.ToInt32(etby);
                    }
                    else if (etby != 0 && typeo1 != 101)
                    {
                        rel1.ETBY_ETBY_ID = null;
                    }

                    if (ecba != 0 && ecba != null)
                    {
                        rel1.ECBA_ECBA_ID = Convert.ToInt32(ecba);
                    }
                    else if (ecba != 0 && typeo1 != 101)
                    {
                        rel1.ECBA_ECBA_ID = null;
                    }

                    if (Request.Form["descd"] != null && Request.Form["descd"] != "" && Request.Form["descd"] != "0")
                    {
                        rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                    }

                    if (Request.Form["Unitvolt"] != "" && Request.Form["Unitvolt"] != null && typeo1 != 101)
                    {
                        rel1.EUNL_EUNL_ID = Convert.ToInt32(Request.Form["Unitvolt"].ToString());
                    }

                    if (Request.Form["offstat"] != "" && Request.Form["offstat"] != null)
                    {
                        rel1.EOFS_EOFS_ID = Convert.ToInt32(Request.Form["offstat"]);
                    }

                    if (Request.Form["ofDATEreq"] != "" && Request.Form["ofDATEreq"] != null)
                    {
                        rel1.OFF_DATE = Request.Form["ofDATEreq"];
                    }

                    if (Request.Form["off_TIME"] != "" && Request.Form["off_TIME"] != null)
                    {

                        rel1.OFF_TIME = Request.Form["off_TIME"];
                    }

                    if (Request.Form["onDATEreq"] != "" && Request.Form["onDATEreq"] != null)
                    {
                        rel1.ON_DATE = Request.Form["onDATEreq"];
                    }

                    if (Request.Form["on_TIME"] != "" && Request.Form["on_TIME"] != null)
                    {
                        rel1.ON_TIME = Request.Form["on_TIME"];
                    }

                    if (Request.Form["stattime"] != "" && Request.Form["stattime"] != null)
                    {
                        rel1.TIME_ISTA = Request.Form["stattime"];
                        rel1.CONT_FUN = time;
                    }

                    if (Request.Form["INST_STAT"] != "" && Request.Form["INST_STAT"] != null)
                    {
                        rel1.INST_STAT = Request.Form["INST_STAT"];
                    }

                    if (Request.Form["EART_STAT"] != "" && Request.Form["EART_STAT"] != null)
                    {
                        rel1.EART_STAT = Request.Form["EART_STAT"];
                    }

                    if (Request.Form["CUST_STAT"] != "" && Request.Form["CUST_STAT"] != null)
                    {
                        rel1.CUST_STAT = Request.Form["CUST_STAT"];
                    }

                    if (Request.Form["ofDATEprog"] != "" && Request.Form["ofDATEprog"] != null)
                    {
                        rel1.OFF_DATE = Request.Form["ofDATEprog"];
                    }

                    if (Request.Form["off_TIMEprog"] != "" && Request.Form["off_TIMEprog"] != null)
                    {
                        rel1.OFF_TIME = Request.Form["off_TIMEprog"];
                    }

                    if (Request.Form["onDATEprog"] != "" && Request.Form["onDATEprog"] != null)
                    {
                        rel1.ON_DATE = Request.Form["onDATEprog"];
                    }

                    if (Request.Form["on_TIMEprog"] != "" && Request.Form["on_TIMEprog"] != null)
                    {
                        rel1.ON_TIME = Request.Form["on_TIMEprog"];
                    }

                    if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                    {
                        rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                    }

                    if (Request.Form["accept"] != "" && Request.Form["accept"] != null)
                    {
                        rel1.EDIN_STIN = "0";
                        rel1.OFF_DATE = null;
                        rel1.OFF_TIME = null;
                        rel1.ON_DATE = null;
                        rel1.ON_TIME = null;
                        rel1.EREJ_EREJ_ID = null;
                    }

                    if (Request.Form["diac"] != "" && Request.Form["diac"] != null)
                    {
                        rel1.EDIN_STIN = "1";

                        if (Request.Form["offDATEh"] != "" && Request.Form["offDATEh"] != null)
                        {
                            rel1.OFF_DATE = Request.Form["offDATEh"];
                        }

                        if (Request.Form["off_TIMEh"] != "" && Request.Form["off_TIMEh"] != null)
                        {
                            rel1.OFF_TIME = Request.Form["off_TIMEh"];
                        }

                        if (Request.Form["onDATEh"] != "" && Request.Form["onDATEh"] != null)
                        {
                            rel1.ON_DATE = Request.Form["onDATEh"];
                        }

                        if (Request.Form["on_TIMEh"] != "" && Request.Form["on_TIMEh"] != null)
                        {
                            rel1.ON_TIME = Request.Form["on_TIMEh"];
                        }

                        if (Request.Form["hcancel"] != "" && Request.Form["hcancel"] != null)
                        {
                            rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["hcancel"].ToString());
                        }
                    }

                    if (Request.Form["HDESC"] != "" && Request.Form["HDESC"] != null)
                    {
                        rel1.ATTG_SPIC = Request.Form["HDESC"];
                    }

                    if (Request.Form["stop"] != "" && Request.Form["stop"] != null)
                    {
                        rel1.EDIN_STIN = "1";
                        rel1.OFF_DATE = null;
                        rel1.OFF_TIME = null;
                        rel1.ON_DATE = null;
                        rel1.ON_TIME = null;
                        rel1.EDIN_MW = null;
                        rel1.EDIN_MVH = null;
                        rel1.EDIN_OFF = null;

                        if (Request.Form["ccancel"] != "" && Request.Form["ccancel"] != null)
                        {
                            rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["ccancel"].ToString());
                        }
                        else
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "دلیل لغو را مشخص نمایید" }.ToJson();
                        }
                    }

                    if (Request.Form["run"] != "" && Request.Form["run"] != null)
                    {
                        rel1.EDIN_STIN = "0";
                        rel1.EREJ_EREJ_ID = null;

                        if (Request.Form["offDATEc"] != "" && Request.Form["offDATEc"] != null)
                        {
                            rel1.OFF_DATE = Request.Form["offDATEc"];
                        }
                        else
                        {
                            if (Request.Form["datecheck"] != "" && Request.Form["datecheck"] != null)
                            {
                                rel1.OFF_DATE = Request.Form["datecheck"];
                            }
                        }

                        if (Request.Form["off_TIMEcontrol"] != "" && Request.Form["off_TIMEcontrol"] != null)
                        {
                            rel1.OFF_TIME = Request.Form["off_TIMEcontrol"];
                        }

                        if (Request.Form["onDATEc"] != "" && Request.Form["onDATEc"] != null)
                        {
                            rel1.ON_DATE = Request.Form["onDATEc"];
                        }
                        else
                        {
                            if (Request.Form["datecheck"] != "" && Request.Form["datecheck"] != null)
                            {
                                rel1.ON_DATE = Request.Form["datecheck"];
                            }
                        }

                        if (Request.Form["on_TIMEcontrol"] != "" && Request.Form["on_TIMEcontrol"] != null)
                        {
                            rel1.ON_TIME = Request.Form["on_TIMEcontrol"];
                        }

                        if (Request.Form["EDIN_MW"] != "" && Request.Form["EDIN_MW"] != null)
                        {
                            rel1.EDIN_MW = Request.Form["EDIN_MW"].ToString();
                        }

                        if (Request.Form["EDIN_OFF"] != "" && Request.Form["EDIN_OFF"] != null)
                        {
                            rel1.EDIN_OFF = Request.Form["EDIN_OFF"].ToString();
                        }

                        if (Request.Form["EDIN_MVH"] != "" && Request.Form["EDIN_MVH"] != null)
                        {
                            rel1.EDIN_MVH = Request.Form["EDIN_MVH"].ToString();
                        }
                    }

                    if (Request.Form["cDESC"] != "" && Request.Form["cDESC"] != null)
                    {
                        rel1.ATTG_SPIC = Request.Form["cDESC"];
                    }

                    if (Request.Form["PROGDESC"] != "" && Request.Form["PROGDESC"] != null)
                    {
                        rel1.ATTG_SPIC = Request.Form["PROGDESC"];
                    }

                    if (rel1 != null)
                    {
                        if (rel1.TIME_ISTA != null && Request.Form["run"] == "0")
                        {
                            if (rel1.TIME_ISTA == "0")
                            {
                                /*چک تاریخ ها و زمان که پایان از شروع کوچکتر نباشد */
                                if (rel1.OFF_DATE.CompareTo(rel1.ON_DATE) > 0)
                                {
                                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                                }
                                else if (rel1.OFF_DATE.CompareTo(rel1.ON_DATE) == 0 && rel1.OFF_TIME.CompareTo(rel1.ON_TIME) > 0)
                                {
                                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                                }
                            }
                            else
                            {
                                /*چک زمان های که پایان از شروع کروچکتر نباشد */
                                if (rel1.OFF_DATE.CompareTo(rel1.ON_DATE) > 0)
                                {
                                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                                }
                                else if (rel1.OFF_DATE.CompareTo(rel1.ON_DATE) == 0 && rel1.OFF_TIME.CompareTo(rel1.ON_TIME) > 0)
                                {
                                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                                }
                            }
                        }
                    }

                    if (c == 0)
                    {
                        Db.EXP_EDOC_INSTRU.Add(rel1);
                        Db.SaveChanges();
                    }
                    else
                    {
                        Db.SaveChanges();
                    }
                }

                /*ثبت اطلاعات سرپرست، گروه و جانشین او */
                var suplier = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "2" select b).FirstOrDefault();
                var suplierj = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "5" select b).FirstOrDefault();

                if (Request.Form["EPEX_EPEX_ID"] != "" && Request.Form["EPEX_EPEX_ID"] != null)
                {
                    if (suplier != null)
                    {
                        suplier.EURP_EURP_ID = Convert.ToInt32(Request.Form["EPEX_EPEX_ID"].ToString());
                        if (Request.Form["group"] != "" && Request.Form["group"] != null)
                            suplier.ESUD_DESC = Request.Form["group"];

                        if (Request.Form["PhoneNumber"] != "" && Request.Form["PhoneNumber"] != null)
                            suplier.ESUD_TEL = Request.Form["PhoneNumber"];
                    }
                    else
                    {
                        int sup = Convert.ToInt32(Request.Form["EPEX_EPEX_ID"].ToString());
                        var rel2 = new EXP_SUPL_DOC();
                        rel2.EEDO_EEDO_ID = eedoid;
                        rel2.POSI_TYEP = "2";
                        rel2.EURP_EURP_ID = sup;
                        rel2.ESUD_DESC = Request.Form["group"];
                        rel2.ESUD_TEL = Request.Form["PhoneNumber"];
                        Db.EXP_SUPL_DOC.Add(rel2);
                        Db.SaveChanges();
                    }
                }

                if (Request.Form["EPEX_EPEX_ID1"] != "" && Request.Form["EPEX_EPEX_ID1"] != null)
                {
                    if (suplierj != null)
                    {
                        suplierj.EURP_EURP_ID = Convert.ToInt32(Request.Form["EPEX_EPEX_ID1"].ToString());
                    }
                    else
                    {
                        int sup1 = Convert.ToInt32(Request.Form["EPEX_EPEX_ID1"].ToString());
                        var rel3 = new EXP_SUPL_DOC();
                        rel3.EEDO_EEDO_ID = eedoid;

                        rel3.POSI_TYEP = "5";
                        rel3.EURP_EURP_ID = sup1;

                        Db.EXP_SUPL_DOC.Add(rel3);
                        Db.SaveChanges();
                    }
                }

                var nazer = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "3" select b).FirstOrDefault();
                var nazerj = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "6" select b).FirstOrDefault();

                if (Request.Form["EPEX_EPEX_ID2"] != "" && Request.Form["EPEX_EPEX_ID2"] != null)
                {
                    if (nazer != null)
                    {
                        nazer.EURP_EURP_ID = Convert.ToInt32(Request.Form["EPEX_EPEX_ID2"].ToString());
                    }
                    else
                    {
                        int sup = Convert.ToInt32(Request.Form["EPEX_EPEX_ID2"].ToString());

                        var rel2 = new EXP_SUPL_DOC();
                        rel2.EEDO_EEDO_ID = eedoid;

                        rel2.POSI_TYEP = "3";
                        rel2.EURP_EURP_ID = sup;

                        Db.EXP_SUPL_DOC.Add(rel2);
                        Db.SaveChanges();

                    }
                }

                if (Request.Form["EPEX_EPEX_ID3"] != "" && Request.Form["EPEX_EPEX_ID3"] != null)
                {
                    if (nazerj != null)
                    {
                        nazerj.EURP_EURP_ID = Convert.ToInt32(Request.Form["EPEX_EPEX_ID3"].ToString());
                    }
                    else
                    {
                        int sup1 = Convert.ToInt32(Request.Form["EPEX_EPEX_ID3"].ToString());
                        var rel3 = new EXP_SUPL_DOC();
                        rel3.EEDO_EEDO_ID = eedoid;
                        rel3.POSI_TYEP = "6";
                        rel3.EURP_EURP_ID = sup1;
                        Db.EXP_SUPL_DOC.Add(rel3);
                        Db.SaveChanges();
                    }
                }

                Db.SaveChanges();

                if (curent == "CREATOR")
                {
                    string relation = (from b in Db.EXP_RELATION_DOC
                                       join x in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals x.EEDO_ID
                                       where b.EEDO_EEDO_ID == ideedo && x.ETDO_ETDO_ID == 21
                                       select b.ERED_ID).FirstOrDefault().ToString();

                    int rccc = Convert.ToInt32(relation);

                    if (Request.Form["DESC"] == "0")
                    {
                        var rel4 = new EXP_RELATION_DOC();

                        /*ثبت اطلاعات درخواست های اصلی در حالت تمدیدی */
                        if (rccc == 0)
                        {
                            if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                            {
                                rel4.EEDO_EEDO_ID = ideedo;
                                rel4.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                                Db.EXP_RELATION_DOC.Add(rel4);
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            var qrelattd = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == ideedo && b.ERED_ID == rccc select b).FirstOrDefault();
                            if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                                qrelattd.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                            Db.SaveChanges();
                        }
                    }
                    else
                    {
                        if (rccc != 0)
                        {
                            var r = (from b in Db.EXP_RELATION_DOC where b.ERED_ID == rccc select b).FirstOrDefault();

                            Db.EXP_RELATION_DOC.Remove(r);
                            Db.SaveChanges();
                        }
                    }
                }

                //string Org1 = string.Empty;
                //short Ope1 = 0;
                //short Open1 = 0;
                /*ثبت اطلاعات ناظر و جانشین او*/
            }

            /*ثبت اطلاعات مربوط به ایتم های متغییر فرم */
            string srow = Request.Form["count"];
            int row = Convert.ToInt32(srow);
            var value = new EXP_EITEM_DOC_VALUE();
            for (int i = 0; i <= row; i++)
            {
                string val = Request.Form[i.ToString()];
                if (string.IsNullOrEmpty(val))
                {
                    val = Request.Form["dman" + i.ToString()];
                }

                string EITY_ID = Request.Form["EITY_ID" + i.ToString()];
                if (!string.IsNullOrEmpty(EITY_ID))
                {
                    int eeit = Convert.ToInt32(EITY_ID);
                    int cic = (from b in Db.EXP_EITEM_DOC_VALUE where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EITY_EITY_ID == eeit select b).Count();
                    if (cic > 0)
                    {
                        if (!string.IsNullOrEmpty(val))
                        {
                            //string sql = string.Format("DELETE FROM EXP_EITEM_DOC_VALUE WHERE EEDO_EEDO_ID={0} and EITY_EITY_ID={1}", EEDO_ID, EITY_ID);
                            string sql = string.Format("UPDATE EXP_EITEM_DOC_VALUE SET EIDR_VALUE='{0}' WHERE EEDO_EEDO_ID={1} and EITY_EITY_ID={2}", val, EEDO_ID, EITY_ID);
                            Db.Database.ExecuteSqlCommand(sql);
                        }
                    }
                    else
                    {
                        value.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                        value.EITY_EITY_ID = Convert.ToInt32(EITY_ID);
                        value.EIDR_VALUE = string.IsNullOrEmpty(val) ? "---" : val;
                        Db.EXP_EITEM_DOC_VALUE.Add(value);
                        Db.SaveChanges();
                    }
                }
            }

            etdo_id = Convert.ToInt32(objecttemp.ETDO_ETDO_ID);
            string bodymessage = string.Empty;
            string postn = (from b in Db.EXP_POST_LINE
                            join c in Db.EXP_EXPI_DOC on b.EPOL_ID equals c.EPOL_EPOL_ID
                            where c.EEDO_ID == objecttemp.EEDO_ID
                            select b.EPOL_NAME).FirstOrDefault().ToString();

            string instrdoc = string.Empty;

            var w = (from b in Db.EXP_POST_LINE_INSTRU
                     join c in Db.EXP_EDOC_INSTRU on b.EPIU_ID equals c.EPIU_EPIU_ID
                     where c.EEDO_EEDO_ID == objecttemp.EEDO_ID && c.CUT_STAT == "1" && c.JDTY_JDTY_ID == 91
                     select b);

            string instn = string.Empty;
            if (w.FirstOrDefault() != null)
            {
                instn = w.FirstOrDefault().CODE_NAME.ToString();
                string insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();
                var haveBay = (from b in Db.EXP_TYPE_BAY where b.ETBY_ID == etby select b).FirstOrDefault();
                if (haveBay != null)
                {
                    if (insttype == "1")
                        instn = " بی خط " + instn;
                    else
                        instn = " تجهیز " + haveBay.ETBY_DESC + " " + instn;
                }
                else
                {
                    if (insttype == "1")
                        instn = " خط " + instn;
                    else
                        instn = " تجهیز " + instn;
                }

                if (!string.IsNullOrEmpty(instn))
                    instrdoc = instn.Trim();
                else
                    instrdoc = "کل پست";

            }

            var document = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == ideedo select b).FirstOrDefault();

            /*بدست اوردن اطلاعات برای مسچ که در کارتابل می خواهد نمایش داده شود */
            int iddfrom = 1;
            string smessage = string.Empty;
            string doc_name = string.Empty;
            if (!string.IsNullOrEmpty(Request.Form["idform"]))
            {
                iddfrom = Convert.ToInt32(Request.Form["idform"].ToString());
            }
            if (iddfrom == 1)
            {
                doc_name = "درخواست انجام کار";
                smessage = " درخواست " + " به شماره " + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
            }
            if (iddfrom == 2)
            {
                doc_name = "درخواست انجام کار اضطراری";
                smessage = " درخواست اضطراری " + " به شماره " + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
            }
            if (iddfrom == 3)
            {
                doc_name = "درخواست انجام کار خدماتی";
                smessage = " درخواست خدماتی / فنی / تاسیساتی / بازديدها " + " به شماره " + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
            }
            if (iddfrom == 4)
            {
                doc_name = "درخواست انجام کار اضطراری / خدماتی";
                smessage = " درخواست اضطراری / خدماتی " + " به شماره " + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
            }

            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notid);
            wp.SetKeyValue("SUBJECT", doc_name);
            wp.SetKeyValue("BODY", smessage.Trim());
            wp.Dispose();

            string upCommand = string.Format("UPDATE WF_ITEM_ATTRIBUTE_VALUES SET TEXT_VALUE = '{0}' WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^{1}' AND NAME = 'BODY'", smessage.Trim(), ideedo);
            Db.Database.ExecuteSqlCommand(upCommand);
            upCommand = string.Format("UPDATE WF_NOTIFICATION_ATTRIBUTES SET TEXT_VALUE = '{0}' WHERE NOTIFICATION_ID = {1} AND NAME = 'BODY'", smessage, notid);
            Db.Database.ExecuteSqlCommand(upCommand);
            Db.SaveChanges();

            // اگر در مرکز کنترل تیک تغییر اطلاعات تجهیزات روشن باشد پیام به خادمی و حسین زاده ارسال می شود.
            if (curent == "CONTROLCENTER" && Request.Form["hasChangeData"] == "1")
            {
                AsrWorkFlowMessage message = new AsrWorkFlowMessage(User.Identity.Name, new string[] { "S-KHADEMI", "H-HOSEINZADE" }, "اصلاحیه اطلاعات تجهیزات", " جهت اطلاع شما، در فرم درخواست انجام کار شماره " + document.DOC_NUMB + " مربوط به پست " + postn + " روی " + instrdoc + " اصلاحات و یا تغییراتی صورت گرفته که باید درسیستم بروز رسانی شوند ");
                message.Send();
                message.Dispose();               
            }

            /*پیغام به کاربر برای ثبت اطلاعات */
            //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", doc_name), CoustomData = ideedo.ToString() }.ToJson();
            return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد", CoustomData = ideedo.ToString() }.ToJson();
        }

        /*نوع مدارک فقط برنامه زمانبندی –دیفکت و درخواست انجام کار را برمیگرداند*/
        //[EntityAuthorize("EXP_TYPE_DOC>select")]
        public ActionResult Get_Type_Doc_DP()
        {
            var RetVal = (from q in Db.EXP_TYPE_DOC where q.ETDO_ID == 2 || q.ETDO_ID == 21 || q.ETDO_ID == 101 select new { q.ETDO_DESC, q.ETDO_ID }).OrderBy(b => b.ETDO_DESC);
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Get_Type_Doc_DP2()
        {
            var RetVal = (from q in Db.EXP_TYPE_DOC where q.ETDO_ID == 2 select new { q.ETDO_DESC, q.ETDO_ID }).OrderBy(b => b.ETDO_DESC);
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        /*این اکشن اطلاعات مربوط به پرسنل بهره برداری را برمی گرداند */
        //[EntityAuthorize("EXP_PERSON_EXPLI>select")]
        public ActionResult getperson()
        {
            var RetVal = from b in Db.EXP_PERSON_EXPLI select new { b.EPEX_ID, b.EPEX_NAME };
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        //[EntityAuthorize("SEC_USER_TYPE_POST>select|SEC_USERS>select")]
        public ActionResult getpersonEana(int? eana, int? Contractor, string EEDO_TYPE)
        {
            if (EEDO_TYPE == "0")
            {
                var RetVal = (from b in Db.EXP_USER_V
                              where b.EANA_EANA_ROW == eana && b.CCOR_CNOR_ID == null && b.EURP_ACTV == 1
                              select new
                              {
                                  b.EURP_ID,
                                  FullName = b.FIRS_NAME + " " + b.FAML_NAME,
                                  OrclName = b.ORCL_NAME
                              }).OrderBy(b => b.FullName).ToList();

                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var RetVal = (from b in Db.EXP_OUT_PERSONEL
                              join c in Db.SEC_USER_TYPE_POST on b.OUTP_ID equals c.OUTP_OUTP_ID
                              where b.EICO_EICO_ID == Contractor && c.EURP_ACTV == 1 // یوزرهای فعال هستند
                              select new
                              {
                                  c.EURP_ID,
                                  FullName = b.OUTP_FNAME + " " + b.OUTP_LNAME
                              }).OrderBy(b => b.FullName).ToList();

                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult getpersonEana_Grid([DataSourceRequest] DataSourceRequest request, int? eana, int? Contractor, string EEDO_TYPE, string filterInput)
        {
            bool filterDisable = string.IsNullOrEmpty(filterInput);
            string filter = string.IsNullOrEmpty(filterInput.ToUpper()) ? "" : filterInput.ToUpper().ToArabicUtf8();

            if (EEDO_TYPE == "0")
            {
                var RetVal = (from b in Db.EXP_USER_V
                              where b.EANA_EANA_ROW == eana && b.CCOR_CNOR_ID == null && b.EURP_ACTV == 1
                                    && (b.FIRS_NAME.ToUpper().Contains(filter) || b.FAML_NAME.ToUpper().Contains(filter) || filterDisable)
                              select new
                              {
                                  id_Supervisor = b.EURP_ID,
                                  name_Supervisor = b.FIRS_NAME,
                                  family_Supervisor = b.FAML_NAME,
                                  ocrlName_Supervisor = b.ORCL_NAME
                              });

                return Json(RetVal.ToDataSourceResult(request));
            }
            else
            {
                var RetVal = (from b in Db.EXP_OUT_PERSONEL
                              join c in Db.SEC_USER_TYPE_POST on b.OUTP_ID equals c.OUTP_OUTP_ID
                              where b.EICO_EICO_ID == Contractor && c.EURP_ACTV == 1 // یوزرهای فعال هستند
                                    && (b.OUTP_FNAME.ToUpper().Contains(filter) || b.OUTP_LNAME.ToUpper().Contains(filter) || filterDisable)
                              select new
                              {
                                  id_Supervisor = c.EURP_ID,
                                  name_Supervisor = b.OUTP_FNAME,
                                  family_Supervisor = b.OUTP_LNAME,
                                  ocrlName_Supervisor = ""
                              });

                return Json(RetVal.ToDataSourceResult(request));
            }
        }

        //[EntityAuthorize("SEC_USER_TYPE_POST>select|SEC_USERS>select")]
        public ActionResult getpersonEanan(/*int? epol,*/ int? eana, int? Contractor, string EEDO_TYPE)
        {
            if (EEDO_TYPE == "0")
            {
                var RetVal = (from b in Db.EXP_USER_V
                              where b.EANA_EANA_ROW == eana && b.EURP_TYPE == 0 && b.EURP_ACTV == 1
                              select new
                              {
                                  b.EURP_ID,
                                  FullName = b.FIRS_NAME + " " + b.FAML_NAME,
                                  OrclName = b.ORCL_NAME
                              }).ToList();

                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var RetVal = (from b in Db.EXP_USER_V
                              where b.EANA_EANA_ROW == eana && b.EURP_ACTV == 1
                              select new
                              {
                                  b.EURP_ID,
                                  FullName = b.FIRS_NAME + " " + b.FAML_NAME,
                                  OrclName = b.ORCL_NAME
                              }).ToList();

                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
        }

        //[EntityAuthorize("SEC_USER_TYPE_POST>select|SEC_USERS>select")]
        public ActionResult getpersonEana2(int? eana)
        {
            var RetVal = (from b in Db.SEC_USER_TYPE_POST //.AsEnumerable()
                          join v in Db.SEC_USERS //.AsEnumerable() 
                           on b.SCSU_ROW_NO equals v.ROW_NO
                          join p in Db.PAY_PERSONEL
                          on v.PRSN_EMP_NUMB equals p.EMP_NUMB
                          where b.EANA_EANA_ROW == eana && b.EURP_ACTV == 1 // یوزرهای فعال هستند
                          //&& q.Contains(b.SCSU_ROW_NO)
                          //&& b.EURP_TYPE == 2
                          select new
                          {
                              b.EURP_ID,
                              FullName = p.FIRS_NAME + " " + p.FAML_NAME,
                              OrclName = v.ORCL_NAME
                          }).ToList();
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }


        /*پست های مربوط به درخواست انجام کار این کاربر را برمی گرداند به طوری که این پست ها مربوط به اداره بهره برداری که به این اکشن پاس داده شده باشند */
        //[EntityAuthorize("SEC_USER_TYPE_POST>select|SEC_USERS>select|EXP_POST_LINE>select")]
        //[EntityAuthorize("EXP_POST_LINE>select")]
        public ActionResult getpostrequest(int code, string oragan)
        {
            var RetVal = from p in Db.EXP_POST_LINE
                         where p.ORGA_CODE == oragan && p.ORGA_MANA_ASTA_CODE == "7" && p.ORGA_MANA_CODE == "6"
                         select new { p.EPOL_ID, p.EPOL_NAME };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }


        /*پست های مربوط به کاربر را برمی گرداند */
        //[EntityAuthorize("SEC_USER_TYPE_POST>select|SEC_USERS>select|EXP_POST_LINE>select")]
        public ActionResult getpost(int code)
        {
            var RetVal = from p in Db.EXP_POST_LINE
                         where p.EPOL_STAT != "3" // یعنی حالت جمع آوری نباشد
                         select new { p.EPOL_NAME, p.EPOL_ID };
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        /*اطلاعات مربوط به درخواست را برمی گرداند */
        //[EntityAuthorize("EXP_EXPI_DOC>select")]
        public ActionResult Get_Expi_Doc([DataSourceRequest] DataSourceRequest request, int ETDO_ID)
        {
            var query = from p in Db.EXP_EXPI_DOC.OrderByDescending(b => b.EEDO_ID)
                        where (p.ETDO_ETDO_ID == ETDO_ID)
                        select new
                        {
                            EEDO_ID = p.EEDO_ID,
                            p.DOC_NUMB,
                            p.EEDO_DESC,
                            p.ACTI_NACT,
                            p.EPOL_EPOL_ID,
                            p.CPRO_CPLA_PLN_CODE,
                            p.CPRO_PRJ_CODE,
                            p.ORGA_CODE,
                            ETDO_DESC = p.EXP_TYPE_DOC.ETDO_DESC,
                            ETDO_ETDO_ID = p.ETDO_ETDO_ID,
                            p.EEDO_DATE
                        }
                        ;
            return Json(query.ToDataSourceResult(request));
        }

        /*تاریخ درخواست دهنده را برمی گرداند */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select")]
        private string time_reques(decimal? p, int i)
        {
            string curent = string.Empty;
            var q = from j in Db.EXP_EDOC_INSTRU
                    where j.EDIN_ID == p
                    select j;

            if (q.FirstOrDefault() != null)
            {
                if (i == 1)
                {
                    curent = q.FirstOrDefault().OFF_DATE + " - " + q.FirstOrDefault().OFF_TIME;
                }
                if (i == 2)
                {
                    curent = q.FirstOrDefault().ON_DATE + " - " + q.FirstOrDefault().ON_TIME;
                }
            }
            return curent;
        }

        /*تاریخ برنامه ریزی را برمی گرداند */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|SEC_JOB_TYPE_DOC>select")]
        private string time_prog(decimal? p, int i)
        {
            string curent = string.Empty;
            var q = from j in Db.EXP_EDOC_INSTRU
                    join k in Db.SEC_JOB_TYPE_DOC on j.JDTY_JDTY_ID equals k.JDTY_ID
                    where j.EDIN_EDIN_ID == p && k.ACTIV_NAME == "PROGRAMER"
                    select j;

            /*تاریخ برنامه ریزی را برمی گرداند */
            if (q.FirstOrDefault() != null)
            {
                if (i == 1)
                {
                    curent = q.FirstOrDefault().OFF_DATE + " - " + q.FirstOrDefault().OFF_TIME;
                }
                if (i == 2)
                {
                    curent = q.FirstOrDefault().ON_DATE + " - " + q.FirstOrDefault().ON_TIME;
                }
            }
            return curent;
        }

        /*تاریخ برنامه ریزی را برمی گرداند */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|SEC_JOB_TYPE_DOC>select")]
        private string time_progout(decimal? p, int i)
        {
            /*برای هر ردیف تجهیز تاریخ برنامه ریزی ان ردیف را در صورت وجود برمی گرداند */
            string curent = string.Empty;
            var q = from j in Db.EXP_EDOC_INSTRU
                    join k in Db.SEC_JOB_TYPE_DOC on j.JDTY_JDTY_ID equals k.JDTY_ID
                    where j.EDIN_EDIN_ID == p && k.ACTIV_NAME == "PROGRAMER"
                    select j;

            if (q.FirstOrDefault() == null)
            {
                /*در صورتیکه برنامه برنامه ریزی وجود نداشته باشد تاریخ درخواست دهنده ان ردیف را برمی گرداند */
                var q1 = from j in Db.EXP_EDOC_INSTRU
                         where j.EDIN_ID == p
                         select j;

                if (q1.FirstOrDefault() != null)
                {
                    if (i == 1)
                    {
                        curent = q1.FirstOrDefault().OFF_DATE + " - " + q1.FirstOrDefault().OFF_TIME;
                    }
                    if (i == 2)
                    {
                        curent = q1.FirstOrDefault().ON_DATE + " - " + q1.FirstOrDefault().ON_TIME;
                    }
                }
                return curent;
            }
            else
            {
                if (q.FirstOrDefault() != null)
                {
                    if (i == 1)
                    {
                        curent = q.FirstOrDefault().OFF_DATE + " - " + q.FirstOrDefault().OFF_TIME;
                    }
                    if (i == 2)
                    {
                        curent = q.FirstOrDefault().ON_DATE + " - " + q.FirstOrDefault().ON_TIME;
                    }
                }
                return curent;
            }
        }

        /*مقدار خالی برای زمان برمی گرداند */
        private string time_null()
        {
            return null;
        }

        /*تاریخ های مرکزکنترل را برمی گرداند */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|SEC_JOB_TYPE_DOC>select")]
        private string timcenter(decimal? p, int i, string Date)
        {
            string curent = string.Empty;
            var q = from j in Db.EXP_EDOC_INSTRU
                    join k in Db.SEC_JOB_TYPE_DOC on j.JDTY_JDTY_ID equals k.JDTY_ID
                    where j.EEDO_EEDO_ID == p && j.CUT_STAT == "1" && k.ACTIV_NAME == "CONTROLCENTER"
                    select j;

            if (q.FirstOrDefault() != null)
            {
                /*در صورتیکه تجهیز اصلی مرکزکنترل اطلاعات داشته باشد اطلاعات ان را برمی گرداند */
                string timei = q.FirstOrDefault().TIME_ISTA.ToString();
                if (timei == "0")
                {
                    if (i == 1)
                    {
                        curent = q.FirstOrDefault().OFF_DATE + " - " + q.FirstOrDefault().OFF_TIME;
                    }
                    if (i == 2)
                    {
                        curent = q.FirstOrDefault().ON_DATE + " - " + q.FirstOrDefault().ON_TIME;
                    }
                }
                else
                {
                    /*در صورتیکه تاریخ خاصی مد نظر باشد اطلاعات ان تاریخ برگردانده می شود*/
                    var q1 = from j in Db.EXP_EDOC_INSTRU
                             join k in Db.SEC_JOB_TYPE_DOC on j.JDTY_JDTY_ID equals k.JDTY_ID
                             where j.EEDO_EEDO_ID == p && j.CUT_STAT == "1" && k.ACTIV_NAME == "CONTROLCENTER" && j.OFF_DATE == Date
                             select j;

                    if (q1.FirstOrDefault() != null)
                    {
                        if (i == 1)
                        {
                            curent = q1.FirstOrDefault().OFF_DATE + " - " + q1.FirstOrDefault().OFF_TIME;
                        }
                        if (i == 2)
                        {
                            curent = q1.FirstOrDefault().ON_DATE + " - " + q1.FirstOrDefault().ON_TIME;
                        }
                    }
                }
            }

            return curent;
        }

        /*اطلاعا ت کد ذپدیسپاچینگی تجهیزات و نوع تجهیز را برای حالت های مختلف برمی گرداند برای یک درخواست */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|EXP_TYPE_BAY>select|EXP_POST_LINE_INSTRU>select|EXP_INSTRUMENT>select")]
        private string returninst(decimal? p)
        {
            string curentinst = string.Empty;
            var qp = (from j in Db.EXP_EDOC_INSTRU
                      where j.EDIN_ID == p
                      select j);

            if (qp != null)
            {
                var q = qp.FirstOrDefault();

                if (q != null)
                {
                    if (q.ETBY_ETBY_ID != null)
                    {
                        int idetby = Convert.ToInt32(q.ETBY_ETBY_ID);
                        string bayid = (from b in Db.EXP_TYPE_BAY where b.ETBY_ID == idetby select b.ETBY_DESC).FirstOrDefault().ToString();
                        int idepiu = Convert.ToInt32(q.EPIU_EPIU_ID);
                        string postinst = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == idepiu select b.CODE_NAME).FirstOrDefault().ToString();
                        curentinst = bayid + " " + postinst;
                    }
                    else
                    {
                        if (q.EPIU_EPIU_ID != null)
                        {
                            int idepiu = Convert.ToInt32(q.EPIU_EPIU_ID);
                            curentinst = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == idepiu select b.CODE_NAME).FirstOrDefault().ToString();
                        }
                        else
                        {
                            if (q.EINS_EINS_ID != null)
                            {
                                int ideins = Convert.ToInt32(q.EINS_EINS_ID);
                                curentinst = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == ideins select b.EINS_DESC).FirstOrDefault().ToString();
                            }
                            else
                            {
                                curentinst = "کل پست";
                            }
                        }
                    }
                }
            }

            return curentinst;
        }

        /*پست ها را برمی گرداند */
        //[EntityAuthorize("EXP_POST_LINE>select")]
        public ActionResult getpostdefectre()
        {
            var RetVal = from p in Db.EXP_POST_LINE
                         where p.EPOL_TYPE == "0" && p.EPOL_EPOL_ID == null && p.EPOL_STAT != "3"
                         select new { p.EPOL_NAME, p.EPOL_ID };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        /*این اکشن براساس پارامترهای که برای ان از ورودی پاس داده می شود اطلراعات درخواست انجام کار را برمیگرداند */
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Get_center([DataSourceRequest] DataSourceRequest request, string DateStart, string DateEnd, string type)
        {
            string userid = this.HttpContext.User.Identity.Name;

            if ((DateStart == null || DateStart == "") && (DateEnd == null || DateEnd == ""))
            {
                /*اطلاعات درخواست از ویوی استفاده می وشد که اطلاعات کارتابل درخواست نیز در ان است */
                /*در صورتیکه تاریخ مشخص نباشد تمام اطلاعات در وضعیت مرکزکنترل مربوط به کاربر برگرداند */
                var query = (from b in Db.EXP_RCEN_V.AsEnumerable()
                             where b.OWFSTAT == "OPEN" && ((b.EDOCJDTYID == 97 /*||(b.EDOCJDTYID == 91 && !query97.Contains(b.EEDOID))*/
                             ) ||
                             (b.EDOCJDTYID == 91 && b.EPROID == 250) || (b.EDOCJDTYID == 92 && b.EPROID == 252)) && b.SUPLPOSITYEP == "2" &&
                                   b.EDOCCUTSTAT == "1" && (b.OWFNEXTSTAT == "INFOCENTECONT" || b.OWFNEXTSTAT == "WORKER") && b.OWFRECIPIENTROLE == userid
                             select new
                             {
                                 b.EEDOID,
                                 b.EDOCNUM,
                                 b.ETDOID,
                                 b.EFUNID,
                                 b.EFUNDESC,
                                 b.EPRODESC,
                                 b.EPROID,
                                 b.ETIPID,
                                 b.SUPLESUDID,
                                 b.SUPLEMPNUMB,
                                 b.SUPLOUTPID,
                                 b.SUPLEPEXID,
                                 b.SUPLPOSITYEP,
                                 b.SUPLESUDDESC,
                                 b.EDOCEDINID,
                                 //inst = b.EDOCEDINID,
                                 //off =b.EEDOID, 
                                 //on = b.EEDOID,
                                 inst = returninst(b.EDOCEDINID),
                                 off = timcenter(b.EEDOID, 1, DateStart),
                                 on1 = timcenter(b.EEDOID, 2, DateStart),
                                 offprog = b.EDOCOFFDATE + " - " + b.EDOCOFFTIME,
                                 onprog = b.EDOCONDATE + " - " + b.EDOCONTIME,
                                 progfunc = b.EPRODESC + " " + b.EFUNDESC,
                                 b.EDOCOFFDATE,
                                 b.EDOCOFFTIME,
                                 b.EDOCONDATE,
                                 b.EDOCONTIME,
                                 b.EDOCCONN_TAT,
                                 b.EDOCTIMEISTA,
                                 b.EDOCEDINTYPE,
                                 b.EDOCEARTSTAT,
                                 b.EDOCCUSTSTAT,
                                 b.EDOCATTGSTJA,
                                 b.EDOCATTGSPIC,
                                 b.EDOCATTGSTATT,
                                 b.EDOCEINSID,
                                 b.EDOCEOFSID,
                                 b.EDOCEPIUID,
                                 b.EDOCEPOLID,
                                 b.EDOCEPTIID,
                                 b.EDOCETBYID,
                                 b.EDOCEUNLID,
                                 b.EDOCEFUNID,
                                 b.EDOCCUTSTAT,
                                 b.EDOCETDOID,
                                 b.EDOCJDTYID,
                                 b.OWFITEMKEY,
                                 b.OWFNOT_ID,
                                 b.OWFNEXTSTAT,
                                 b.OWFMESSAGETYPE,
                                 b.OWFRECIPIENTROLE,
                                 b.OWFSTAT,
                                 b.EDOCEDINEDINID
                             });

                return Json(query.ToList().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            else
            {
                // تایپ ها مربوط به دکمه های روی فرم هستند
                if (type == "0")
                {
                    /* تمام اطلاعات در وضعیت مرکزکنترل مربوط به کاربر و در تاریخ تعریف شده را برگرداند این تاریخ در بازده زمانی شروع تا پایان را در نظر می گیرد  */
                    var query = (from b in Db.EXP_RCEN_V.AsEnumerable()
                                 where b.OWFSTAT == "OPEN" && ((b.EDOCJDTYID == 97 /*|| (b.EDOCJDTYID == 91 && !query97.Contains(b.EEDOID))*/ ) ||
                                       (b.EDOCJDTYID == 91 && b.EPROID == 250) || (b.EDOCJDTYID == 92 && b.EPROID == 252)) && b.SUPLPOSITYEP == "2" &&
                                       b.EDOCCUTSTAT == "1" && (b.OWFNEXTSTAT == "INFOCENTECONT" || b.OWFNEXTSTAT == "WORKER")
                                     //&& (DateStart.CompareTo(b.EDOCOFFDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0)
                                       && ((DateStart.CompareTo(b.EDOCOFFDATE) <= 0 && b.EDOCOFFDATE.CompareTo(DateEnd) <= 0) ||
                                       (DateStart.CompareTo(b.EDOCOFFDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) ||
                                       (DateEnd.CompareTo(b.EDOCONDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) ||
                                       (DateEnd.CompareTo(b.EDOCONDATE) <= 0 && b.EDOCOFFDATE.CompareTo(DateEnd) <= 0))
                                       && b.OWFRECIPIENTROLE == userid
                                 select new
                                 {
                                     b.EEDOID,
                                     b.EDOCNUM,
                                     b.ETDOID,
                                     b.EFUNID,
                                     b.EFUNDESC,
                                     b.EPRODESC,
                                     b.EPROID,
                                     b.ETIPID,
                                     b.SUPLESUDID,
                                     b.SUPLEMPNUMB,
                                     b.SUPLOUTPID,
                                     b.SUPLEPEXID,
                                     b.SUPLPOSITYEP,
                                     b.SUPLESUDDESC,
                                     b.EDOCEDINID,
                                     off = timcenter(b.EEDOID, 1, DateStart),
                                     on1 = timcenter(b.EEDOID, 2, DateStart),
                                     inst = returninst(b.EDOCEDINID),
                                     offprog = b.EDOCOFFDATE + " - " + b.EDOCOFFTIME,
                                     onprog = b.EDOCONDATE + " - " + b.EDOCONTIME,
                                     progfunc = b.EPRODESC + " " + b.EFUNDESC,
                                     b.EDOCOFFDATE,
                                     b.EDOCOFFTIME,
                                     b.EDOCONDATE,
                                     b.EDOCONTIME,
                                     b.EDOCCONN_TAT,
                                     b.EDOCTIMEISTA,
                                     b.EDOCEDINTYPE,
                                     b.EDOCEARTSTAT,
                                     b.EDOCCUSTSTAT,
                                     b.EDOCATTGSTJA,
                                     b.EDOCATTGSPIC,
                                     b.EDOCATTGSTATT,
                                     b.EDOCEINSID,
                                     b.EDOCEOFSID,
                                     b.EDOCEPIUID,
                                     b.EDOCEPOLID,
                                     b.EDOCEPTIID,
                                     b.EDOCETBYID,
                                     b.EDOCEUNLID,
                                     b.EDOCEFUNID,
                                     b.EDOCCUTSTAT,
                                     b.EDOCETDOID,
                                     b.EDOCJDTYID,
                                     b.OWFITEMKEY,
                                     b.OWFNOT_ID,
                                     b.OWFNEXTSTAT,
                                     b.OWFMESSAGETYPE,
                                     b.OWFRECIPIENTROLE,
                                     b.OWFSTAT,
                                     b.EDOCEDINEDINID
                                 });

                    return Json(query.ToList().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }
                else if (type == "1")
                {
                    /* تمام اطلاعات در وضعیت مبایگانی مربوط به کاربر 
                  * و در تاریخ تعریف شده را برگرداند این تاریخ در بازده زمانی شروع تا پایان را در نظر می گیرد  */

                    var query = (from b in Db.EXP_RCEN_V.AsEnumerable()
                                 where b.OWFSTAT == "OPEN" && b.EDOCJDTYID == 101 && b.SUPLPOSITYEP == "2" &&
                                       b.EDOCCUTSTAT == "1" && (b.OWFNEXTSTAT == "ARCHEIVE" || b.OWFNEXTSTAT == "INFOGROUPWORK")
                                     //&& (DateStart.CompareTo(b.EDOCOFFDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0)
                                       && ((DateStart.CompareTo(b.EDOCOFFDATE) <= 0 && b.EDOCOFFDATE.CompareTo(DateEnd) <= 0) ||
                                       (DateStart.CompareTo(b.EDOCOFFDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) ||
                                       (DateEnd.CompareTo(b.EDOCONDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) ||
                                       (DateEnd.CompareTo(b.EDOCONDATE) <= 0 && b.EDOCOFFDATE.CompareTo(DateEnd) <= 0))
                                       && b.OWFRECIPIENTROLE == userid
                                 select new
                                 {
                                     b.EEDOID,
                                     b.EDOCNUM,
                                     b.ETDOID,
                                     b.EFUNID,
                                     b.EFUNDESC,
                                     b.EPRODESC,
                                     b.EPROID,
                                     b.ETIPID,
                                     b.SUPLESUDID,
                                     b.SUPLEMPNUMB,
                                     b.SUPLOUTPID,
                                     b.SUPLEPEXID,
                                     b.SUPLPOSITYEP,
                                     b.SUPLESUDDESC,
                                     b.EDOCEDINID,
                                     off = timcenter(b.EEDOID, 1, DateStart),
                                     on1 = timcenter(b.EEDOID, 2, DateStart),
                                     inst = returninst(b.EDOCEDINID),
                                     offprog = b.EDOCOFFDATE + " - " + b.EDOCOFFTIME,
                                     onprog = b.EDOCONDATE + " - " + b.EDOCONTIME,
                                     progfunc = b.EPRODESC + " " + b.EFUNDESC,
                                     b.EDOCOFFDATE,
                                     b.EDOCOFFTIME,
                                     b.EDOCONDATE,
                                     b.EDOCONTIME,
                                     b.EDOCCONN_TAT,
                                     b.EDOCTIMEISTA,
                                     b.EDOCEDINTYPE,
                                     b.EDOCEARTSTAT,
                                     b.EDOCCUSTSTAT,
                                     b.EDOCATTGSTJA,
                                     b.EDOCATTGSPIC,
                                     b.EDOCATTGSTATT,
                                     b.EDOCEINSID,
                                     b.EDOCEOFSID,
                                     b.EDOCEPIUID,
                                     b.EDOCEPOLID,
                                     b.EDOCEPTIID,
                                     b.EDOCETBYID,
                                     b.EDOCEUNLID,
                                     b.EDOCEFUNID,
                                     b.EDOCCUTSTAT,
                                     b.EDOCETDOID,
                                     b.EDOCJDTYID,
                                     b.OWFITEMKEY,
                                     b.OWFNOT_ID,
                                     b.OWFNEXTSTAT,
                                     b.OWFMESSAGETYPE,
                                     b.OWFRECIPIENTROLE,
                                     b.OWFSTAT,
                                     b.EDOCEDINEDINID
                                 });

                    return Json(query.ToList().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }
                else if (type == "2")
                {
                    /* تمام اطلاعات در وضعیت بایگانی و مرکزکنترل مربوط به کاربر 
                  * و در تاریخ تعریف شده را برگرداند این تاریخ در بازده زمانی شروع تا پایان را در نظر می گیرد  */
                    var query = (from b in Db.EXP_RCEN_V.AsEnumerable()
                                 where b.OWFSTAT == "OPEN" && b.SUPLPOSITYEP == "2" &&
                                       b.EDOCCUTSTAT == "1" && (((b.OWFNEXTSTAT == "ARCHEIVE" || b.OWFNEXTSTAT == "INFOGROUPWORK") && b.EDOCJDTYID == 101) ||
                                       ((b.OWFNEXTSTAT == "INFOCENTECONT" || b.OWFNEXTSTAT == "WORKER") && ((b.EDOCJDTYID == 97
                                     /*|| (b.EDOCJDTYID == 91 && !query97.Contains(b.EEDOID))*/) ||
                                       (b.EDOCJDTYID == 91 && b.EPROID == 250) || (b.EDOCJDTYID == 92 && b.EPROID == 252))))
                                     //&& (DateStart.CompareTo(b.EDOCOFFDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0)
                                       && ((DateStart.CompareTo(b.EDOCOFFDATE) <= 0 && b.EDOCOFFDATE.CompareTo(DateEnd) <= 0) ||
                                       (DateStart.CompareTo(b.EDOCOFFDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) ||
                                       (DateEnd.CompareTo(b.EDOCONDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) ||
                                       (DateEnd.CompareTo(b.EDOCONDATE) <= 0 && b.EDOCOFFDATE.CompareTo(DateEnd) <= 0))
                                       && b.OWFRECIPIENTROLE == userid
                                 select new
                                 {
                                     b.EEDOID,
                                     b.EDOCNUM,
                                     b.ETDOID,
                                     b.EFUNID,
                                     b.EFUNDESC,
                                     b.EPRODESC,
                                     b.EPROID,
                                     b.ETIPID,
                                     b.SUPLESUDID,
                                     b.SUPLEMPNUMB,
                                     b.SUPLOUTPID,
                                     b.SUPLEPEXID,
                                     b.SUPLPOSITYEP,
                                     b.SUPLESUDDESC,
                                     b.EDOCEDINID,
                                     off = timcenter(b.EEDOID, 1, DateStart),
                                     on1 = timcenter(b.EEDOID, 2, DateStart),
                                     inst = returninst(b.EDOCEDINID),
                                     offprog = b.EDOCOFFDATE + " - " + b.EDOCOFFTIME,
                                     onprog = b.EDOCONDATE + " - " + b.EDOCONTIME,
                                     progfunc = b.EPRODESC + " " + b.EFUNDESC,
                                     b.EDOCOFFDATE,
                                     b.EDOCOFFTIME,
                                     b.EDOCONDATE,
                                     b.EDOCONTIME,
                                     b.EDOCCONN_TAT,
                                     b.EDOCTIMEISTA,
                                     b.EDOCEDINTYPE,
                                     b.EDOCEARTSTAT,
                                     b.EDOCCUSTSTAT,
                                     b.EDOCATTGSTJA,
                                     b.EDOCATTGSPIC,
                                     b.EDOCATTGSTATT,
                                     b.EDOCEINSID,
                                     b.EDOCEOFSID,
                                     b.EDOCEPIUID,
                                     b.EDOCEPOLID,
                                     b.EDOCEPTIID,
                                     b.EDOCETBYID,
                                     b.EDOCEUNLID,
                                     b.EDOCEFUNID,
                                     b.EDOCCUTSTAT,
                                     b.EDOCETDOID,
                                     b.EDOCJDTYID,
                                     b.OWFITEMKEY,
                                     b.OWFNOT_ID,
                                     b.OWFNEXTSTAT,
                                     b.OWFMESSAGETYPE,
                                     b.OWFRECIPIENTROLE,
                                     b.OWFSTAT,
                                     b.EDOCEDINEDINID
                                 });

                    return Json(query.ToList().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    /* تمام اطلاعات در بهینه سازی که زمان اتمام درخواست مشخص نیست  مربوط به کاربر 
                   * و در تاریخ تعریف شده را برگرداند این تاریخ در بازده زمانی شروع تا پایان را در نظر می گیرد  */

                    var query = (from b in Db.EXP_RCEN_V.AsEnumerable()
                                 where b.OWFSTAT == "OPEN" && (b.EDOCJDTYID == 97 ||
                                       (b.EDOCJDTYID == 91 && b.EPROID == 250) || (b.EDOCJDTYID == 92 && b.EPROID == 252)) && b.SUPLPOSITYEP == "2" &&
                                       b.EDOCCUTSTAT == "1" && (b.OWFNEXTSTAT == "INFOMANEGDIS" || b.OWFNEXTSTAT == "WORKER")
                                     //&& (DateStart.CompareTo(b.EDOCOFFDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) && 
                                       && ((DateStart.CompareTo(b.EDOCOFFDATE) <= 0 && b.EDOCOFFDATE.CompareTo(DateEnd) <= 0) ||
                                       (DateStart.CompareTo(b.EDOCOFFDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) ||
                                       (DateEnd.CompareTo(b.EDOCONDATE) >= 0 && b.EDOCONDATE.CompareTo(DateStart) >= 0) ||
                                       (DateEnd.CompareTo(b.EDOCONDATE) <= 0 && b.EDOCOFFDATE.CompareTo(DateEnd) <= 0))
                                       && (b.EDOCOFFDATE != null && b.EDOCOFFTIME != null && (b.EDOCONDATE == null || b.EDOCONTIME == null))
                                       && b.OWFRECIPIENTROLE == userid
                                 select new
                                 {
                                     b.EEDOID,
                                     b.EDOCNUM,
                                     b.ETDOID,
                                     b.EFUNID,
                                     b.EFUNDESC,
                                     b.EPRODESC,
                                     b.EPROID,
                                     b.ETIPID,
                                     b.SUPLESUDID,
                                     b.SUPLEMPNUMB,
                                     b.SUPLOUTPID,
                                     b.SUPLEPEXID,
                                     b.SUPLPOSITYEP,
                                     b.SUPLESUDDESC,
                                     b.EDOCEDINID,
                                     off = timcenter(b.EEDOID, 1, DateStart),
                                     on1 = timcenter(b.EEDOID, 2, DateStart),
                                     inst = returninst(b.EDOCEDINID),
                                     offprog = b.EDOCOFFDATE + " - " + b.EDOCOFFTIME,
                                     onprog = b.EDOCONDATE + " - " + b.EDOCONTIME,
                                     progfunc = b.EPRODESC + " " + b.EFUNDESC,
                                     b.EDOCOFFDATE,
                                     b.EDOCOFFTIME,
                                     b.EDOCONDATE,
                                     b.EDOCONTIME,
                                     b.EDOCCONN_TAT,
                                     b.EDOCTIMEISTA,
                                     b.EDOCEDINTYPE,
                                     b.EDOCEARTSTAT,
                                     b.EDOCCUSTSTAT,
                                     b.EDOCATTGSTJA,
                                     b.EDOCATTGSPIC,
                                     b.EDOCATTGSTATT,
                                     b.EDOCEINSID,
                                     b.EDOCEOFSID,
                                     b.EDOCEPIUID,
                                     b.EDOCEPOLID,
                                     b.EDOCEPTIID,
                                     b.EDOCETBYID,
                                     b.EDOCEUNLID,
                                     b.EDOCEFUNID,
                                     b.EDOCCUTSTAT,
                                     b.EDOCETDOID,
                                     b.EDOCJDTYID,
                                     b.OWFITEMKEY,
                                     b.OWFNOT_ID,
                                     b.OWFNEXTSTAT,
                                     b.OWFMESSAGETYPE,
                                     b.OWFRECIPIENTROLE,
                                     b.OWFSTAT,
                                     b.EDOCEDINEDINID
                                 });

                    return Json(query.ToList().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult Get_center2([DataSourceRequest] DataSourceRequest request, string DateStart, string DateEnd, string type)
        {
            string userName = this.HttpContext.User.Identity.Name;
            string newDateStart = DateStart;

            if ((DateStart == null || DateStart == "") && (DateEnd == null || DateEnd == ""))
            {
                using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                {
                    var RetVal = conn.Query(@"select EEDOID, EDOCNUM, ETDOID, EFUNID, EFUNDESC, EPRODESC, EPROID, EPOLNAME, ETIPID, SUPLESUDID, SUPLEMPNUMB, SUPLOUTPID,SUPLEPEXID,
                                                     SUPLPOSITYEP, SUPLESUDDESC, EDOCEDINID,
                                                     EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 1, :startDate) as offDate,
                                                     EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 2, :startDate) as onDate,
                                                     EXP_INSTRU_NAME_U(EDOCEDINID) as instruName,
                                                     (EDOCOFFDATE || ' - ' || EDOCOFFTIME) as offProg,
                                                     (EDOCONDATE || ' - ' || EDOCONTIME) as onProg,
                                                     (EPRODESC || ' - ' || EFUNDESC) as progFunc,
                                                     EDOCOFFDATE, EDOCOFFTIME, EDOCONDATE, EDOCONTIME, EDOCCONN_TAT, EDOCTIMEISTA, EDOCEDINTYPE, EDOCEARTSTAT, EDOCCUSTSTAT, EDOCATTGSTJA,
                                                     EDOCATTGSPIC, EDOCATTGSTATT, EDOCEINSID, EDOCEOFSID, EDOCEPIUID, EDOCEPOLID, EDOCEPTIID, EDOCETBYID, EDOCEUNLID, EDOCEFUNID, EDOCCUTSTAT,
                                                     EDOCETDOID, EDOCJDTYID, OWFITEMKEY, OWFNOT_ID, OWFNEXTSTAT, OWFMESSAGETYPE, OWFRECIPIENTROLE, OWFSTAT, EDOCEDINEDINID
                                               from EXP_RCEN_V
                                               where OWFSTAT = 'OPEN' and ((EDOCJDTYID = 97) or (EDOCJDTYID = 91 and EPROID = 250) or (EDOCJDTYID = 92 and EPROID = 252))
                                               and SUPLPOSITYEP = '2' and EDOCCUTSTAT = '1' and (OWFNEXTSTAT = 'INFOCENTECONT' or OWFNEXTSTAT = 'WORKER')
                                               and OWFRECIPIENTROLE = :UserName", DateStart, DateStart, DateStart, DateStart, userName)
                                 .Select(b => new
                                 {
                                     b.OWFNOT_ID,
                                     b.EEDOID,
                                     b.EDOCNUM,
                                     b.instruName,
                                     b.EPOLNAME,
                                     b.offProg,
                                     b.onProg,
                                     b.offDate,
                                     b.onDate,
                                     b.EDOCTIMEISTA,
                                     b.progFunc,
                                     b.SUPLEPEXID
                                 }).OrderByDescending(b => b.EEDOID).ToList();

                    return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                // تایپ ها مربوط به دکمه های روی فرم هستند
                if (type == "0")
                {
                    using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                    {
                        var RetVal = conn.Query(@"select EEDOID, EDOCNUM, ETDOID, EFUNID, EFUNDESC, EPRODESC, EPROID, EPOLNAME, ETIPID, SUPLESUDID, SUPLEMPNUMB, SUPLOUTPID,SUPLEPEXID,
                                                         SUPLPOSITYEP, SUPLESUDDESC, EDOCEDINID,
                                                         EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 1, :startDate) as offDate,
                                                         EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 2, :startDate) as onDate,
                                                         EXP_INSTRU_NAME_U(EDOCEDINID) as instruName,
                                                         (EDOCOFFDATE || ' - ' || EDOCOFFTIME) as offProg,
                                                         (EDOCONDATE || ' - ' || EDOCONTIME) as onProg,
                                                         (EPRODESC || ' - ' || EFUNDESC) as progFunc,                                                 
                                                         EDOCOFFDATE, EDOCOFFTIME, EDOCONDATE, EDOCONTIME, EDOCCONN_TAT, EDOCTIMEISTA, EDOCEDINTYPE, EDOCEARTSTAT, EDOCCUSTSTAT, EDOCATTGSTJA,
                                                         EDOCATTGSPIC, EDOCATTGSTATT, EDOCEINSID, EDOCEOFSID, EDOCEPIUID, EDOCEPOLID, EDOCEPTIID, EDOCETBYID, EDOCEUNLID, EDOCEFUNID, EDOCCUTSTAT,
                                                         EDOCETDOID, EDOCJDTYID, OWFITEMKEY, OWFNOT_ID, OWFNEXTSTAT, OWFMESSAGETYPE, OWFRECIPIENTROLE, OWFSTAT, EDOCEDINEDINID
                                                   from EXP_RCEN_V
                                                   where OWFSTAT = 'OPEN' and ((EDOCJDTYID = 91) or (EDOCJDTYID = 91 and EPROID = 250) or (EDOCJDTYID = 92 and EPROID = 252))
                                                   and SUPLPOSITYEP = '2' and EDOCCUTSTAT = '1' and (OWFNEXTSTAT = 'INFOCENTECONT' or OWFNEXTSTAT = 'WORKER')
                                                   and OWFRECIPIENTROLE = :UserName
                                                   and (:startDate >= EDOCOFFDATE and EDOCONDATE >= :startDate)", DateStart, DateStart, userName, DateStart, DateStart)
                                     .Select(b => new
                                     {
                                         b.OWFNOT_ID,
                                         b.EEDOID,
                                         b.EDOCNUM,
                                         b.instruName,
                                         b.EPOLNAME,
                                         b.offProg,
                                         b.onProg,
                                         b.offDate,
                                         b.onDate,
                                         b.EDOCTIMEISTA,
                                         b.progFunc,
                                         b.SUPLEPEXID
                                     }).OrderByDescending(b => b.EEDOID).ToList();

                        return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                    }
                }
                else if (type == "1")
                {
                    using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                    {
                        var RetVal = conn.Query(@"select EEDOID, EDOCNUM, ETDOID, EFUNID, EFUNDESC, EPRODESC, EPROID, EPOLNAME, ETIPID, SUPLESUDID, SUPLEMPNUMB, SUPLOUTPID,SUPLEPEXID,
                                                         SUPLPOSITYEP, SUPLESUDDESC, EDOCEDINID,
                                                         EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 1, :startDate) as offDate,
                                                         EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 2, :startDate) as onDate,
                                                         EXP_INSTRU_NAME_U(EDOCEDINID) as instruName,
                                                         (EDOCOFFDATE || ' - ' || EDOCOFFTIME) as offProg,
                                                         (EDOCONDATE || ' - ' || EDOCONTIME) as onProg,
                                                         (EPRODESC || ' - ' || EFUNDESC) as progFunc,
                                                         EDOCOFFDATE, EDOCOFFTIME, EDOCONDATE, EDOCONTIME, EDOCCONN_TAT, EDOCTIMEISTA, EDOCEDINTYPE, EDOCEARTSTAT, EDOCCUSTSTAT, EDOCATTGSTJA,
                                                         EDOCATTGSPIC, EDOCATTGSTATT, EDOCEINSID, EDOCEOFSID, EDOCEPIUID, EDOCEPOLID, EDOCEPTIID, EDOCETBYID, EDOCEUNLID, EDOCEFUNID, EDOCCUTSTAT,
                                                         EDOCETDOID, EDOCJDTYID, OWFITEMKEY, OWFNOT_ID, OWFNEXTSTAT, OWFMESSAGETYPE, OWFRECIPIENTROLE, OWFSTAT, EDOCEDINEDINID
                                                   from EXP_RCEN_V
                                                   where OWFSTAT = 'OPEN' and EDOCJDTYID = 101 
                                                   and SUPLPOSITYEP = '2' and EDOCCUTSTAT = '1' and (OWFNEXTSTAT = 'ARCHEIVE' or OWFNEXTSTAT = 'INFOGROUPWORK')
                                                   and OWFRECIPIENTROLE = :UserName
                                                   and (:startDate >= EDOCOFFDATE and EDOCONDATE >= :startDate)", DateStart, DateStart, userName, DateStart, DateStart)
                                     .Select(b => new
                                     {
                                         b.OWFNOT_ID,
                                         b.EEDOID,
                                         b.EDOCNUM,
                                         b.instruName,
                                         b.EPOLNAME,
                                         b.offProg,
                                         b.onProg,
                                         b.offDate,
                                         b.onDate,
                                         b.EDOCTIMEISTA,
                                         b.progFunc,
                                         b.SUPLEPEXID
                                     }).OrderByDescending(b => b.EEDOID).ToList();

                        return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                    }
                }
                else if (type == "2")
                {
                    using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                    {
                        var RetVal = conn.Query(@"select EEDOID, EDOCNUM, ETDOID, EFUNID, EFUNDESC, EPRODESC, EPROID, EPOLNAME, ETIPID, SUPLESUDID, SUPLEMPNUMB, SUPLOUTPID,SUPLEPEXID,
                                                         SUPLPOSITYEP, SUPLESUDDESC, EDOCEDINID,
                                                         EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 1, :startDate) as offDate,
                                                         EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 2, :startDate) as onDate,
                                                         EXP_INSTRU_NAME_U(EDOCEDINID) as instruName,
                                                         (EDOCOFFDATE || ' - ' || EDOCOFFTIME) as offProg,
                                                         (EDOCONDATE || ' - ' || EDOCONTIME) as onProg,
                                                         (EPRODESC || ' - ' || EFUNDESC) as progFunc,
                                                         EDOCOFFDATE, EDOCOFFTIME, EDOCONDATE, EDOCONTIME, EDOCCONN_TAT, EDOCTIMEISTA, EDOCEDINTYPE, EDOCEARTSTAT, EDOCCUSTSTAT, EDOCATTGSTJA,
                                                         EDOCATTGSPIC, EDOCATTGSTATT, EDOCEINSID, EDOCEOFSID, EDOCEPIUID, EDOCEPOLID, EDOCEPTIID, EDOCETBYID, EDOCEUNLID, EDOCEFUNID, EDOCCUTSTAT,
                                                         EDOCETDOID, EDOCJDTYID, OWFITEMKEY, OWFNOT_ID, OWFNEXTSTAT, OWFMESSAGETYPE, OWFRECIPIENTROLE, OWFSTAT, EDOCEDINEDINID
                                                   from EXP_RCEN_V
                                                   where OWFSTAT = 'OPEN' and SUPLPOSITYEP = '2' and EDOCCUTSTAT = '1' 
                                                   and (((OWFNEXTSTAT = 'ARCHEIVE' or OWFNEXTSTAT = 'INFOGROUPWORK') and EDOCJDTYID = 101) 
                                                       or 
                                                       ((OWFNEXTSTAT = 'INFOCENTECONT' or OWFNEXTSTAT = 'WORKER') and ((EDOCJDTYID = 97) or (EDOCJDTYID = 91 and EPROID = 250) or (EDOCJDTYID = 92 and EPROID = 252))))
                                                   and OWFRECIPIENTROLE = :UserName
                                                   and (:startDate >= EDOCOFFDATE and EDOCONDATE >= :startDate)", DateStart, DateStart, userName, DateStart, DateStart)
                                     .Select(b => new
                                     {
                                         b.OWFNOT_ID,
                                         b.EEDOID,
                                         b.EDOCNUM,
                                         b.instruName,
                                         b.EPOLNAME,
                                         b.offProg,
                                         b.onProg,
                                         b.offDate,
                                         b.onDate,
                                         b.EDOCTIMEISTA,
                                         b.progFunc,
                                         b.SUPLEPEXID
                                     }).OrderByDescending(b => b.EEDOID).ToList();

                        return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                    {
                        var RetVal = conn.Query(@"select EEDOID, EDOCNUM, ETDOID, EFUNID, EFUNDESC, EPRODESC, EPROID, EPOLNAME, ETIPID, SUPLESUDID, SUPLEMPNUMB, SUPLOUTPID,SUPLEPEXID,
                                                         SUPLPOSITYEP, SUPLESUDDESC, EDOCEDINID,
                                                         EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 1, :startDate) as offDate,
                                                         EXP_REQU_CONTROLCENTER_DATE_U(EEDOID, 2, :startDate) as onDate,
                                                         EXP_INSTRU_NAME_U(EDOCEDINID) as instruName,
                                                         (EDOCOFFDATE || ' - ' || EDOCOFFTIME) as offProg,
                                                         (EDOCONDATE || ' - ' || EDOCONTIME) as onProg,
                                                         (EPRODESC || ' - ' || EFUNDESC) as progFunc,
                                                         EDOCOFFDATE, EDOCOFFTIME, EDOCONDATE, EDOCONTIME, EDOCCONN_TAT, EDOCTIMEISTA, EDOCEDINTYPE, EDOCEARTSTAT, EDOCCUSTSTAT, EDOCATTGSTJA,
                                                         EDOCATTGSPIC, EDOCATTGSTATT, EDOCEINSID, EDOCEOFSID, EDOCEPIUID, EDOCEPOLID, EDOCEPTIID, EDOCETBYID, EDOCEUNLID, EDOCEFUNID, EDOCCUTSTAT,
                                                         EDOCETDOID, EDOCJDTYID, OWFITEMKEY, OWFNOT_ID, OWFNEXTSTAT, OWFMESSAGETYPE, OWFRECIPIENTROLE, OWFSTAT, EDOCEDINEDINID
                                                  from EXP_RCEN_V
                                                  where OWFSTAT = 'OPEN' and (EDOCJDTYID = 97 or (EDOCJDTYID = 91 and EPROID = 250) or (EDOCJDTYID = 92 and EPROID = 252))
                                                  and SUPLPOSITYEP = '2' and EDOCCUTSTAT = '1' and (OWFNEXTSTAT = 'INFOMANEGDIS' or OWFNEXTSTAT = 'WORKER')
                                                  and OWFRECIPIENTROLE = :UserName
                                                  and (:startDate >= EDOCOFFDATE and EDOCONDATE >= :startDate)
                                                  and EDOCOFFDATE is not null and EDOCOFFTIME is not null and (EDOCONDATE is null or EDOCONTIME is null)", DateStart, DateStart, userName, DateStart, DateStart)
                                     .Select(b => new
                                     {
                                         b.OWFNOT_ID,
                                         b.EEDOID,
                                         b.EDOCNUM,
                                         b.instruName,
                                         b.EPOLNAME,
                                         b.offProg,
                                         b.onProg,
                                         b.offDate,
                                         b.onDate,
                                         b.EDOCTIMEISTA,
                                         b.progFunc,
                                         b.SUPLEPEXID
                                     }).OrderByDescending(b => b.EEDOID).ToList();

                        return Json(RetVal.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                    }

                }
            }
        }

        /*اطلاعات درخواست مربوط به برنامه ریزی را برمیگرداند */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|SEC_JOB_TYPE_DOC>select")]
        public ActionResult Get_EXP_EDOC_INSTRUcenter([DataSourceRequest] DataSourceRequest request, string Date)
        {
            var query = (from b in Db.EXP_EDOC_INSTRU.AsEnumerable()
                         join j in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals j.JDTY_ID
                         where b.CUT_STAT == "1" && j.ACTIV_NAME == "PROGRAMER" && (b.OFF_DATE.CompareTo(Date) == 0 || b.ON_DATE.CompareTo(Date) == 0)
                         orderby b.EDIN_ID
                         select b).Select(p => new
                         {
                             p.EDIN_ID,
                             inst = returninst(p.EDIN_ID),
                             p.EDIN_OFF,
                             off = p.OFF_DATE + " " + p.OFF_TIME,
                             on1 = p.ON_DATE + " " + p.ON_TIME,
                             offreq = time_reques(p.EDIN_EDIN_ID, 1),
                             onreq = time_reques(p.EDIN_EDIN_ID, 2),
                             offprog = time_progout(p.EDIN_EDIN_ID, 1),
                             onprog = time_progout(p.EDIN_EDIN_ID, 2),
                             p.OFF_DATE,
                             p.OFF_TIME,
                             p.ON_DATE,
                             p.ON_TIME,
                             p.EINS_EINS_ID,
                             d = p.CONT_FUN,
                             p.EPIU_EPIU_ID,
                             p.EDIN_STIN,
                             p.JDTY_JDTY_ID,
                             p.EPOL_EPOL_ID,
                             p.EUNL_EUNL_ID,
                             p.ETBY_ETBY_ID,
                             p.EOFS_EOFS_ID,
                             p.TIME_ISTA,
                             p.INST_STAT,
                             p.EART_STAT,
                             p.CUST_STAT,
                             p.CUT_STAT
                         });

            var d = new DataSourceResult
            {
                Data = query
            };
            return Json(d);
        }


        /*این اکشن اطلاعات مربوط به درخواست های هماهنگی را برمی گرداند
        * اطلاعات مربوط به تجهیزات و تاریخ قطع انها در هر هماهنگی که اطلاعات ان ایجاد شده است
        * مثلا دیسپاچینگ کرمان و توزیع ها هر چه تاریخ ایجاد کرده باشند در این اکشن قابل مشاهده است */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|SEC_JOB_TYPE_DOC>select")]
        public ActionResult Get_EXP_EDOC_INSTRUout([DataSourceRequest] DataSourceRequest request, int? eedo_id)
        {
            var query = (from b in Db.EXP_REQU_TIME_V
                         where b.EDOC_EEDOID == eedo_id && eedo_id.HasValue && b.EDOC_CUTSTAT == "1" && b.EDOC_ATTGSTAT == "1"
                         && (b.JOBDOC_ACTIVNAME == "DISKERMAN" || b.JOBDOC_ACTIVNAME == "DISBANDAR" ||
                             b.JOBDOC_ACTIVNAME == "DISHORMOZGAN" || b.JOBDOC_ACTIVNAME == "SECCONTROL" ||
                             b.JOBDOC_ACTIVNAME == "LINEORGAN" || b.JOBDOC_ACTIVNAME == "ENTEGHAL" ||
                             b.JOBDOC_ACTIVNAME == "FIXORGANE" || b.JOBDOC_ACTIVNAME == "DIAGRAM")
                         orderby b.EDOC_EDINID
                         select new
                         {
                             b.EDOC_EDINID,
                             b.JOBDOC_ACTIVFNAM,
                             b.POST_EPOLNAME,
                             inst = b.INSTRUNAME,
                             b.INSTRU_EUNLID,
                             b.EDOC_EDINOFF,
                             b.EDOC_EDINSTIN,
                             off = b.EDOC_OFFDATE + " " + b.EDOC_OFFTIME,
                             on1 = b.EDOC_ONDATE + " " + b.EDOC_ONTIME,
                             offreq = b.OFF_DATE_NEW + " " + b.OFF_TIME_NEW,
                             onreq = b.ON_DATE_NEW + " " + b.ON_TIME_NEW,
                             offprog = b.OFF_DATE_PROG_NEW + " " + b.OFF_TIME_PROG_NEW,
                             onprog = b.ON_DATE_PROG_NEW + " " + b.ON_TIME_PROG_NEW,
                             b.EDOC_OFFDATE,
                             b.EDOC_OFFTIME,
                             b.EDOC_ONDATE,
                             b.EDOC_ONTIME,
                             b.INSTRU_EINSID,
                             d = b.EDOC_CONTFUN,
                             b.EDOC_EPIUID,
                             b.EDOC_JDTYID,
                             b.EXPI_EPOLID,
                             b.EDOC_EUNLID,
                             b.EDOC_ETBYID,
                             b.EDOC_EOFSID,
                             b.EDOC_TIMEISTA,
                             b.EDOC_INSTSTAT,
                             b.EDOC_EARTSTAT,
                             b.EDOC_CUSTSTAT,
                             b.EDOC_CUTSTAT,
                             b.EDOC_ATTGSPIC,
                             b.ECRE_DESC
                         });

            return Json(query.ToDataSourceResult(request));
        }

        /*این اکشن براساس ردیف درخواست و وظیفه ای که این اکشن را صدا می زند
         * اطلاعات مربوط به ردیف تجهیز و تاریخ قطع انها را مشخص می نماید 
         * مثلا برای برنامه ریزی تمام اطلاعات هماهنگی ها را نمایش می دهد
         * ولی برای دیسپاچینگ کرمان فقط اطلاعات مربوط به خودش را نمایش می دهد 
        */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|SEC_JOB_TYPE_DOC>select")]
        public ActionResult Get_EXP_EDOC_INSTRUoutall([DataSourceRequest] DataSourceRequest request, int? eedo_id, string currentcheck)
        {
            var query = (from b in Db.EXP_REQU_TIME_V
                         where eedo_id.HasValue && b.EDOC_EEDOID == eedo_id && b.EDOC_CUTSTAT == "1" && b.EDOC_ATTGSTAT == "1"
                                && (b.JOBDOC_ACTIVNAME == "DISKERMAN" || b.JOBDOC_ACTIVNAME == "DISBANDAR" ||
                                b.JOBDOC_ACTIVNAME == "DISHORMOZGAN" || b.JOBDOC_ACTIVNAME == "SECCONTROL" ||
                                b.JOBDOC_ACTIVNAME == "LINEORGAN" || b.JOBDOC_ACTIVNAME == "ENTEGHAL" ||
                                b.JOBDOC_ACTIVNAME == "FIXORGANE" || b.JOBDOC_ACTIVNAME == "DIAGRAM")
                         orderby b.EDOC_EDINID
                         select new
                         {
                             b.EDOC_EDINID,
                             b.JOBDOC_ACTIVFNAM,
                             b.POST_EPOLNAME,
                             inst = b.INSTRUNAME,
                             b.INSTRU_EUNLID,
                             b.EDOC_EDINOFF,
                             b.EDOC_EDINSTIN,
                             off = b.EDOC_OFFDATE + " " + b.EDOC_OFFTIME,
                             on1 = b.EDOC_ONDATE + " " + b.EDOC_ONTIME,
                             offreq = b.OFF_DATE_NEW + " " + b.OFF_TIME_NEW,
                             onreq = b.ON_DATE_NEW + " " + b.ON_TIME_NEW,
                             offprog = b.OFF_DATE_PROG_NEW + " " + b.OFF_TIME_PROG_NEW,
                             onprog = b.ON_DATE_PROG_NEW + " " + b.ON_TIME_PROG_NEW,
                             b.EDOC_OFFDATE,
                             b.EDOC_OFFTIME,
                             b.EDOC_ONDATE,
                             b.EDOC_ONTIME,
                             b.INSTRU_EINSID,
                             d = b.EDOC_CONTFUN,
                             b.EDOC_EPIUID,
                             b.EDOC_JDTYID,
                             b.EXPI_EPOLID,
                             b.EDOC_EUNLID,
                             b.EDOC_ETBYID,
                             b.EDOC_EOFSID,
                             b.EDOC_TIMEISTA,
                             b.EDOC_INSTSTAT,
                             b.EDOC_EARTSTAT,
                             b.EDOC_CUSTSTAT,
                             b.EDOC_CUTSTAT,
                             b.EDOC_ATTGSPIC,
                             b.ECRE_DESC
                         });

            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult deletrequest(decimal? idd)
        {
            var inst = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == idd select b);
            foreach (var q in inst)
            {
                Db.EXP_EDOC_INSTRU.Remove(q);
            }

            var eed = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == idd select b);
            foreach (var q1 in eed)
            {
                Db.EXP_EXPI_DOC.Remove(q1);
            }

            Db.SaveChanges();
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] حذف شد.", idd) }.ToJson();
        }

        /*براساس وظیفه ای که به این اکشن پاس داده می شود اطلاعات درخواست را برمی گرداند */
        //[EntityAuthorize("EXP_EDOC_INSTRU > select | SEC_JOB_TYPE_DOC > select")]
        public ActionResult Get_EXP_EDOC_INSTRU([DataSourceRequest] DataSourceRequest request, int? eedo_id, string curents, string showgrid, string date)
        {
            int flag = 0;
            /*پیدا کردن وضعیتی که براساس وظیفه ای که دران فرم نمایش داده می شود و نمایش اطلاعات تجهیز براساس ان وضعیت  */
            var qflag = (from b in Db.EXP_EXPI_DOC
                         join p in Db.EXP_PFUNCTION on b.EFUN_EFUN_ID equals p.EFUN_ID
                         join t in Db.EXP_PROGRAM on p.EPRO_EPRO_ID equals t.EPRO_ID
                         where b.EEDO_ID == eedo_id
                         select t).FirstOrDefault();

            string prog = string.Empty;
            if (qflag != null)
            {
                prog = qflag.EPRO_ID.ToString();
            }

            if (curents == "MANEGERCR" || curents == "ENTEGHALC" || curents == "EXPERTENTEGHAL" || curents == "FANIC" || curents == "MANEGCONFIRM" || curents == "CREATOR" || curents == "MESSAGECENTER" || curents == "MENAGORGAN" || curents == null)
            {
                /*در حالت های بالا تجهیزات درخواست دهنده را نشان دهد */
                curents = "CREATOR";
                flag = 1;
            }
            else if (curents == "DISPACHMANEG" || curents == "PROGRAMER")
            { /*در وظیفه های بالا تجهیزات و اطلاعات برنامه ریزی را نشان داده شود */
                curents = "PROGRAMER";
            }

            int cquery = (from b in Db.EXP_EDOC_INSTRU
                          join j in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals j.JDTY_ID
                          where b.EEDO_EEDO_ID == eedo_id && b.ATTG_STATT == null && eedo_id.HasValue && j.ACTIV_NAME == curents
                          orderby b.EDIN_ID
                          select b).Count();

            if (cquery == 0 && curents == "PROGRAMER")
            {
                /*در صورتیکه هنوز برنامه ریزی اظهار نظری نکرده است همان تجهیزات درخواست دهنده نمایش داده شود */
                curents = "CREATOR";
                flag = 1;
            }

            if (cquery == 0 && curents == "CONTROLCENTER")
            {
                /*برای مر کزکنترل تجهیزات برنامه ریزی تا زمانی که مرکز اظهار نظر نکرده است */
                if (prog == "250") /* اضطراري*/
                {
                    curents = "CREATOR";
                    flag = 1;
                }
                else
                {
                    curents = "PROGRAMER";
                    flag = 1;
                }
            }

            if (cquery == 0 && (curents == "DISKERMAN" || curents == "DISBANDAR" || curents == "DISHORMOZGAN" || curents == "STARTPROC" ||
                                curents == "SECCONTROL" || curents == "LINEORGAN" || curents == "ENTEGHAL" || curents == "FIXORGANE" || curents == "DIAGRAM"))
            {
                /*برای وظیفه های هماهنگی همان تجهیزات برنامه رزی و در صورتیکه برنامه ریزی اظهار نظر نکرده درخواست دهنده را نشان دهد */

                curents = "PROGRAMER";
                flag = 1;
                cquery = (from b in Db.EXP_EDOC_INSTRU
                          join j in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals j.JDTY_ID
                          where b.EEDO_EEDO_ID == eedo_id && b.ATTG_STATT == null && eedo_id.HasValue && j.ACTIV_NAME == curents
                          orderby b.EDIN_ID
                          select b).Count();

                if (cquery == 0 && curents == "PROGRAMER")
                {
                    curents = "CREATOR";
                    flag = 0;
                }
            }

            if (cquery != 0 && curents == "CONTROLCENTER" && showgrid == "0")
            {
                cquery = (from b in Db.EXP_EDOC_INSTRU
                          join j in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals j.JDTY_ID
                          where b.EEDO_EEDO_ID == eedo_id && b.ATTG_STATT == null && eedo_id.HasValue && j.ACTIV_NAME == curents && b.OFF_DATE == date
                          orderby b.EDIN_ID
                          select b).Count();

                if (cquery == 0)
                {
                    /*بدون اظهار نظر مرکزکنترل*/
                    curents = "PROGRAMER";
                    flag = 1;
                }
                if (cquery != 0)
                {
                    /*با اظهار نظر مرکزکنترل */
                    curents = "CONTROLCENTER";
                    flag = 1;
                }
            }

            if (curents == "WORKER" && prog == "252")
            {
                /*برای اجرا کننده بایستی اطلاعات مرکزکنترل مشاهده شود */
                curents = "CREATOR";
            }

            if (curents == "WORKER" && prog != "252")
            {
                /*برای اجرا کننده بایستی اطلاعات مرکزکنترل مشاهده شود */
                curents = "CONTROLCENTER";
            }

            if (curents == "MENAGPOST")
            {
                if (prog == "252" || prog == "321")
                {
                    curents = "CREATOR";
                }
                else
                {
                    /*برای اجرا کننده بایستی اطلاعات مرکزکنترل مشاهده شود */
                    curents = "WORKER";
                }
            }

            /*براساس وضعیت ها و فلگ ها اطلراعات ردیف تجهیزات برگردانده میشود */
            if (curents == "CREATOR" && flag == 1)
            {
                var query = (from b in Db.EXP_REQU_TIME_V
                             where b.EDOC_EEDOID == eedo_id && eedo_id.HasValue && b.EDOC_ATTGSTAT == null && b.JOBDOC_ACTIVNAME == curents
                             orderby b.EDOC_EDINID
                             select new
                             {
                                 b.EDOC_EDINID,
                                 b.JOBDOC_ACTIVFNAM,
                                 b.POST_EPOLNAME,
                                 b.INSTRUNAME,
                                 b.EDOC_EDINOFF,
                                 b.EDOC_EDINSTIN,
                                 off = b.EDOC_OFFDATE + " - " + b.EDOC_OFFTIME,
                                 on1 = b.EDOC_ONDATE + " - " + b.EDOC_ONTIME,
                                 offreq = b.EDOC_OFFDATE + " - " + b.EDOC_OFFTIME,
                                 onreq = b.EDOC_ONDATE + " - " + b.EDOC_ONTIME,
                                 b.INSTRU_EINSID,
                                 d = b.EDOC_CONTFUN,
                                 b.EDOC_EPIUID,
                                 b.EDOC_JDTYID,
                                 b.EXPI_EPOLID,
                                 b.EDOC_EUNLID,
                                 b.EDOC_ETBYID,
                                 b.EDOC_EOFSID,
                                 b.EDOC_TIMEISTA,
                                 b.EDOC_INSTSTAT,
                                 b.EDOC_EARTSTAT,
                                 b.EDOC_CUSTSTAT,
                                 b.EDOC_CUTSTAT
                             });

                return Json(query.ToDataSourceResult(request));
            }
            else if (curents == "CREATOR" && flag == 0)
            {
                var query = (from b in Db.EXP_REQU_TIME_V
                             where b.EDOC_EEDOID == eedo_id && eedo_id.HasValue && b.EDOC_ATTGSTAT == null && b.JOBDOC_ACTIVNAME == curents
                             orderby b.EDOC_EDINID
                             select new
                             {
                                 b.EDOC_EDINID,
                                 b.JOBDOC_ACTIVFNAM,
                                 b.POST_EPOLNAME,
                                 b.INSTRUNAME,
                                 b.EDOC_EDINOFF,
                                 b.EDOC_EDINSTIN,
                                 off = b.OFF_DATE_PROGRAMER + " - " + b.OFF_TIME_PROGRAMER,
                                 on1 = b.ON_DATE_PROGRAMER + " - " + b.ON_TIME_PROGRAMER,
                                 offprog = b.EDOC_OFFDATE + " - " + b.EDOC_OFFTIME,
                                 onprog = b.EDOC_ONDATE + " - " + b.EDOC_ONTIME,
                                 b.INSTRU_EINSID,
                                 d = b.EDOC_CONTFUN,
                                 b.EDOC_EPIUID,
                                 b.EDOC_JDTYID,
                                 b.EXPI_EPOLID,
                                 b.EDOC_EUNLID,
                                 b.EDOC_ETBYID,
                                 b.EDOC_EOFSID,
                                 b.EDOC_TIMEISTA,
                                 b.EDOC_INSTSTAT,
                                 b.EDOC_EARTSTAT,
                                 b.EDOC_CUSTSTAT,
                                 b.EDOC_CUTSTAT
                             });

                return Json(query.ToDataSourceResult(request));
            }
            else if (curents == "PROGRAMER" && flag == 1)
            {
                var query = (from b in Db.EXP_REQU_TIME_V
                             where b.EDOC_EEDOID == eedo_id && eedo_id.HasValue && b.EDOC_ATTGSTAT == null && b.JOBDOC_ACTIVNAME == curents
                             orderby b.EDOC_EDINID
                             select new
                             {
                                 b.EDOC_EDINID,
                                 b.JOBDOC_ACTIVFNAM,
                                 b.POST_EPOLNAME,
                                 b.INSTRUNAME,
                                 b.EDOC_EDINOFF,
                                 b.EDOC_EDINSTIN,
                                 off = "", //time_null(),
                                 on1 = "", //time_null(),
                                 offreq = b.OFF_DATE_NEW + " - " + b.OFF_TIME_NEW,
                                 onreq = b.ON_DATE_NEW + " - " + b.ON_TIME_NEW,
                                 offprog = b.EDOC_OFFDATE + " - " + b.EDOC_OFFTIME,
                                 onprog = b.EDOC_ONDATE + " - " + b.EDOC_ONTIME,
                                 b.INSTRU_EINSID,
                                 d = b.EDOC_CONTFUN,
                                 b.EDOC_EPIUID,
                                 b.EDOC_JDTYID,
                                 b.EXPI_EPOLID,
                                 b.EDOC_EUNLID,
                                 b.EDOC_ETBYID,
                                 b.EDOC_EOFSID,
                                 b.EDOC_TIMEISTA,
                                 b.EDOC_INSTSTAT,
                                 b.EDOC_EARTSTAT,
                                 b.EDOC_CUSTSTAT,
                                 b.EDOC_CUTSTAT
                             });

                return Json(query.ToDataSourceResult(request));
            }
            else if (curents == "CONTROLCENTER" && flag == 1)
            {
                var query = (from b in Db.EXP_REQU_TIME_V
                             where b.EDOC_EEDOID == eedo_id && eedo_id.HasValue && b.EDOC_ATTGSTAT == null && b.JOBDOC_ACTIVNAME == curents && b.EDOC_OFFDATE == date
                             orderby b.EDOC_EDINID
                             select new
                             {
                                 b.EDOC_EDINID,
                                 b.JOBDOC_ACTIVFNAM,
                                 b.POST_EPOLNAME,
                                 b.INSTRUNAME,
                                 b.EDOC_EDINOFF,
                                 b.EDOC_EDINSTIN,
                                 off = b.EDOC_OFFDATE + " - " + b.EDOC_OFFTIME,
                                 on1 = b.EDOC_ONDATE + " - " + b.EDOC_ONTIME,
                                 offreq = b.OFF_DATE_NEW + " - " + b.OFF_TIME_NEW,
                                 onreq = b.ON_DATE_NEW + " - " + b.ON_TIME_NEW,
                                 offprog = b.OFF_DATE_PROG_NEW + " - " + b.OFF_TIME_PROG_NEW,
                                 onprog = b.ON_DATE_PROG_NEW + " - " + b.ON_TIME_PROG_NEW,
                                 b.INSTRU_EINSID,
                                 d = b.EDOC_CONTFUN,
                                 b.EDOC_EPIUID,
                                 b.EDOC_JDTYID,
                                 b.EXPI_EPOLID,
                                 b.EDOC_EUNLID,
                                 b.EDOC_ETBYID,
                                 b.EDOC_EOFSID,
                                 b.EDOC_TIMEISTA,
                                 b.EDOC_INSTSTAT,
                                 b.EDOC_EARTSTAT,
                                 b.EDOC_CUSTSTAT,
                                 b.EDOC_CUTSTAT
                             });

                return Json(query.ToDataSourceResult(request));
            }
            else
            {
                var query = (from b in Db.EXP_REQU_TIME_V
                             where b.EDOC_EEDOID == eedo_id && eedo_id.HasValue && b.EDOC_ATTGSTAT == null && b.JOBDOC_ACTIVNAME == curents
                             orderby b.EDOC_EDINID
                             select new
                             {
                                 b.EDOC_EDINID,
                                 b.JOBDOC_ACTIVFNAM,
                                 b.POST_EPOLNAME,
                                 b.INSTRUNAME,
                                 b.EDOC_EDINOFF,
                                 b.EDOC_EDINSTIN,
                                 off = b.EDOC_OFFDATE + " - " + b.EDOC_OFFTIME,
                                 on1 = b.EDOC_ONDATE + " - " + b.EDOC_ONTIME,
                                 offreq = b.OFF_DATE_NEW + " - " + b.OFF_TIME_NEW,
                                 onreq = b.ON_DATE_NEW + " - " + b.ON_TIME_NEW,
                                 offprog = b.OFF_DATE_PROG_NEW + " - " + b.OFF_TIME_PROG_NEW,
                                 onprog = b.ON_DATE_PROG_NEW + " - " + b.ON_TIME_PROG_NEW,
                                 b.INSTRU_EINSID,
                                 d = b.EDOC_CONTFUN,
                                 b.EDOC_EPIUID,
                                 b.EDOC_JDTYID,
                                 b.EXPI_EPOLID,
                                 b.EDOC_EUNLID,
                                 b.EDOC_ETBYID,
                                 b.EDOC_EOFSID,
                                 b.EDOC_TIMEISTA,
                                 b.EDOC_INSTSTAT,
                                 b.EDOC_EARTSTAT,
                                 b.EDOC_CUSTSTAT,
                                 b.EDOC_CUTSTAT
                             });

                return Json(query.ToDataSourceResult(request));
            }
        }

        //[EntityAuthorize("EXP_EDOC_INSTRU>select")]
        public ActionResult Get_Inst([DataSourceRequest] DataSourceRequest request, int? EEDO_ID)
        {
            var query1 = from b in Db.EXP_EXPI_DOC where (b.ETDO_ETDO_ID == 21) select b;

            var query = from q in Db.EXP_EDOC_INSTRU
                        where (!Db.EXP_EDOC_INSTRU.Any(p => p.EDIN_EDIN_ID == q.EDIN_ID))
                        select q;

            var d = new DataSourceResult
            {
                Data = query.Select(b => new
                {
                    b.EDIN_ID,
                    inst = returninst(b.EDIN_ID),
                    b.EPIU_EPIU_ID,
                    b.EPOL_EPOL_ID,
                    b.EUNL_EUNL_ID,
                    b.EFUN_EFUN_ID,
                    b.OFF_DATE,
                    b.ON_DATE,
                    b.EOFS_EOFS_ID,
                    b.EEDO_EEDO_ID
                }).Where(p => p.EEDO_EEDO_ID == EEDO_ID && EEDO_ID.HasValue)
            };

            return Json(d);
        }

        /*اطلاعا ت کد ذپدیسپاچینگی تجهیزات را برمی گرداند برای یک درخواست */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|EXP_POST_LINE_INSTRU>select")]
        private string Returninstrument(decimal p)
        {
            int c = Convert.ToInt32(p);
            string curent = string.Empty;
            var q = (from b in Db.EXP_EDOC_INSTRU
                     join i in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals i.EPIU_ID
                     where b.EEDO_EEDO_ID == c
                     select i.CODE_NAME);

            if (q.FirstOrDefault() != null)
                curent = q.FirstOrDefault().ToString();

            return curent;
        }

        //[EntityAuthorize("EXP_EDOC_INSTRU>select|EXP_POST_LINE_INSTRU>select")]
        private string Returninstrumentdet(decimal p)
        {
            int c = Convert.ToInt32(p);
            string curent = string.Empty;
            var q = (from b in Db.EXP_EDOC_INSTRU
                     join i in Db.EXP_ERROR_INST on b.EERR_EERR_ID equals i.EERR_ID
                     where b.EEDO_EEDO_ID == c
                     select i.EERR_DESC);

            if (q.FirstOrDefault() != null)
                curent = q.FirstOrDefault().ToString();

            return curent;
        }

        /*اطلاعا ت تجهیزات را برمی گرداند برای یک درخواست */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|EXP_POST_LINE_INSTRU>select")]
        private int Returninstrumentid(decimal p)
        {
            int c = Convert.ToInt32(p);
            int curent = 0;
            var q = (from b in Db.EXP_EDOC_INSTRU
                     join i in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals i.EPIU_ID
                     where b.EEDO_EEDO_ID == c
                     select i.EPIU_ID);

            if (q.FirstOrDefault() != null)
                curent = Convert.ToInt32(q.FirstOrDefault().ToString());

            return curent;
        }

        public class yearSearchModel
        {
            public int EEDO_YEAR2 { get; set; }

            public int post { get; set; }

            public int line { get; set; }

            public int EINS_ID2 { get; set; }

            public int ETBY_ID2 { get; set; }

            public int EUNL_ID2 { get; set; }

            public int EOFS_ID2 { get; set; }

            public int EXP_PROGRAM1 { get; set; }

            public int efun { get; set; }

            public int linepost { get; set; }

            public string azDate1 { get; set; }

            public string taDate1 { get; set; }

            public string ORGA_CODE { get; set; }

            public int Unitvolt { get; set; }

            public int inst { get; set; }
        }

        /*سازمان های پست های که در درخواست امده است را مشخص می کند */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select|EXP_POST_LINE>select")]
        private string organpost(decimal? p)
        {
            int c = Convert.ToInt32(p);
            string curent = string.Empty;
            var q = from d in Db.EXP_POST_LINE
                    join j in Db.EXP_EDOC_INSTRU on d.EPOL_ID equals j.EPOL_EPOL_ID
                    where j.EDIN_ID == c
                    select d.ORGA_CODE;

            if (q.FirstOrDefault() != null)
                curent = q.FirstOrDefault().ToString();

            return curent;
        }

        /*عملیات های مربوط به برنامه ها را برمیگرداند */
        //[EntityAuthorize("EXP_PFUNCTION>select")]
        private string programid(decimal? p)
        {
            string curent = string.Empty;
            var q = from d in Db.EXP_PFUNCTION
                    join c in Db.EXP_PROGRAM on d.EPRO_EPRO_ID equals c.EPRO_ID
                    where d.EFUN_ID == p
                    select c.EPRO_DESC;

            if (q.FirstOrDefault() != null)
                curent = q.FirstOrDefault().ToString();

            return curent;
        }

        /*براساس پارامترهای که به این اکشن ارسال می شود رکوردهای برنامه زمانبندی پیدا شده و برای گرید مورد استفاده برگردانده می شود */
        //[EntityAuthorize("EXP_RELATION_DOC>select|SEC_USER_TYPE_POST>select|SEC_USERS>select|EXP_EXPI_DOC>select|EXP_EDOC_INSTRU>select|EXP_POST_LINE_INSTRU>select")]
        public ActionResult Exp_TimeProg_R([DataSourceRequest] DataSourceRequest request, yearSearchModel yearSearchModel1)
        {
            string EEDO_YEAR2Param = yearSearchModel1.EEDO_YEAR2.ToString();
            int postparam = yearSearchModel1.post;
            int etbyparam = yearSearchModel1.ETBY_ID2;
            int eofsparam = yearSearchModel1.EOFS_ID2;
            int efunparam = yearSearchModel1.efun;
            int elinepost = yearSearchModel1.linepost;
            string organi = yearSearchModel1.ORGA_CODE;
            int Unitvolt = yearSearchModel1.Unitvolt;
            int inst = yearSearchModel1.inst;
            int lineParam = yearSearchModel1.line;
            int einsparam = yearSearchModel1.EINS_ID2;
            int eunlparam = yearSearchModel1.EUNL_ID2;
            int progparam = yearSearchModel1.EXP_PROGRAM1;

            var qnotinst = (from x in Db.EXP_RELATION_DOC where x.EDIN_EDIN_ID != null select x.EDIN_EDIN_ID);

            /** برنامه های  پست های که در درخواست انجام کار این کاربر گرفته است قابل مشاهده است */
            var query = from k in Db.EXP_EXPI_DOC.AsEnumerable()
                        join b in Db.EXP_EDOC_INSTRU.AsEnumerable() on k.EEDO_ID equals b.EEDO_EEDO_ID
                        join c in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals c.EPOL_ID
                        join d in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals d.EPIU_ID
                        where (k.EEDO_YEAR == EEDO_YEAR2Param && k.EEDO_YEAR != null) &&
                              (b.EPOL_EPOL_ID == postparam || postparam == 0) &&
                               (b.EPIU_EPIU_ID == elinepost || elinepost == 0) &&
                              (b.ETBY_ETBY_ID == etbyparam || etbyparam == 0) &&
                              (b.EOFS_EOFS_ID == eofsparam || eofsparam == 0) &&
                              (d.EUNL_EUNL_ID == Unitvolt || Unitvolt == 0) &&
                              (c.ORGA_CODE == organi || organi == null || organi == "") &&
                              (b.EFUN_EFUN_ID == efunparam || efunparam == 0) && b.OFF_DATE != null && b.ON_DATE != null
                              && !qnotinst.Contains(b.EDIN_ID) //&&
                        //  (c.ORGA_CODE == organi) &&
                        //  (c.EUNL_EUNL_ID == Unitvolt || Unitvolt == 0)
                        select new
                        {
                            b.EDIN_ID,
                            b.EPOL_EPOL_ID,
                            //organprog = organpost(b.EDIN_ID),
                            inst = b.EXP_TYPE_BAY.ETBY_DESC + "  " + b.EXP_POST_LINE_INSTRU.CODE_NAME,
                            postp = b.EXP_POST_LINE.EPOL_NAME,
                            b.ETBY_ETBY_ID,
                            b.EPIU_EPIU_ID,
                            b.EUNL_EUNL_ID,
                            b.EFUN_EFUN_ID,
                            //prog1 = programid(b.EFUN_EFUN_ID),
                            func = b.EXP_PFUNCTION.EFUN_DESC,
                            b.OFF_DATE,
                            b.ON_DATE,
                            b.EOFS_EOFS_ID
                        };

            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult Exp_TimeProg_R2([DataSourceRequest] DataSourceRequest request, string year, string organ, int? volt, int? post, int? inst, int? bay, int? prog, int? func)
        {
            var query = (from b in Db.EXP_TIPR_V
                         where (b.EXPI_EEDO_YEAR == year) //.Equals(year) || year == null)
                                && (b.POST_ORGA_CODE == organ || organ == null)
                                && (b.POST_EUNL_EUNL_ID == volt || volt == null)
                                && (b.POST_EPOL_ID == post || post == null)
                                && ((b.INST_EINS_EINS_ID == inst && b.BAY_ETBY_ID == null) || inst == null)
                                && (b.BAY_ETBY_ID == bay || bay == null)
                                && (b.PROG_EPRO_ID == prog || prog == null)
                                && (b.FUNC_EFUN_ID == func || func == null)
                                && (b.EDOC_OFF_DATE != null && b.EDOC_ON_DATE != null)
                         select new
                         {
                             b.EDOC_EDIN_ID,
                             b.ORGN_ORGA_DESC,
                             b.POST_EPOL_ID,
                             b.POST_EPOL_NAME,
                             b.EDOC_ETBY_ETBY_ID,
                             b.BAY_ETBY_DESC,
                             b.INST_CODE_NAME,
                             b.EDOC_EUNL_EUNL_ID,
                             b.PROG_EPRO_ID,
                             b.PROG_EPRO_DESC,
                             b.EDOC_EFUN_EFUN_ID,
                             b.FUNC_EFUN_DESC,
                             b.EDOC_OFF_DATE,
                             b.EDOC_ON_DATE,
                             b.EDOC_EOFS_EOFS_ID
                         });

            return Json(query.ToDataSourceResult(request));
        }

        //[EntityAuthorize("EXP_POST_LINE>select|EXP_EXPI_DOC>select")]        
        private string organpostexpi(decimal? p)
        {
            int c = Convert.ToInt32(p);
            string curent = string.Empty;
            var q = from d in Db.EXP_POST_LINE
                    join j in Db.EXP_EXPI_DOC on d.EPOL_ID equals j.EPOL_EPOL_ID
                    where j.EEDO_ID == c
                    select d.ORGA_CODE;

            if (q.FirstOrDefault() != null)
                curent = q.FirstOrDefault().ToString();
            return curent;
        }

        public class defectreqModel
        {
            public int post { get; set; }

            public int EINS_Inst { get; set; }

            public int EXP_PROGRAM1 { get; set; }

            public int efun1 { get; set; }

            public string azdate { get; set; }

            public string tadate { get; set; }
        }

        private string postname(decimal p)
        {
            int c = Convert.ToInt32(p);
            string curent = string.Empty;
            var q = (from b in Db.EXP_EDOC_INSTRU
                     join i in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals i.EPOL_ID
                     where b.EEDO_EEDO_ID == c
                     select i.EPOL_NAME);

            if (q.FirstOrDefault() != null)
                curent = q.FirstOrDefault().ToString();

            return curent;
        }

        /*این اکشن اطلاعات دیفکت های که بروی انها درخواست انجام کار نیامده است را برمی گرداند */
        //[EntityAuthorize("EXP_RELATION_DOC>select|SEC_USER_TYPE_POST>select|SEC_USERS>select|EXP_EXPI_DOC>select")]
        public ActionResult defect_form([DataSourceRequest] DataSourceRequest request, defectreqModel defectreqModel1)
        {
            int postparam = defectreqModel1.post;
            int einsparam = defectreqModel1.EINS_Inst;
            int progparam = defectreqModel1.EXP_PROGRAM1;
            int efunparam = defectreqModel1.efun1;
            string azdate = defectreqModel1.azdate;
            string tadate = defectreqModel1.tadate;
            if (azdate == null)
                azdate = "";

            if (tadate == null)
                tadate = "";
            var qnotinst = (from x in Db.EXP_RELATION_DOC where x.EEDO_EEDO_ID_R != null select x.EEDO_EEDO_ID_R);
            /** دیفکت های  پست های که در درخواست انجام کار این کاربر گرفته است قابل مشاهده است */
            var i = this.UserInfo().Username;
            var q = from b in Db.SEC_USER_TYPE_POST
                    join s in Db.SEC_USERS on b.SCSU_ROW_NO equals s.ROW_NO
                    where b.ETDO_ETDO_ID == 21 && s.ORCL_NAME == i && b.EURP_ACTV == 1 // یوزرهای فعال هستند
                    select b.EPOL_EPOL_ID;

            /*دیفکت های که بروی انها درخواستی نیامده براساس پارامترهای پاس داده شده به این اکشن */
            var query = (from p in Db.EXP_EXPI_DOC.AsEnumerable()
                         where p.ETDO_ETDO_ID == 2 && (p.EPOL_EPOL_ID == postparam || postparam == 0) && (p.EFUN_EFUN_ID == efunparam || efunparam == 0) &&
                               (Returninstrumentid(p.EEDO_ID) == einsparam || einsparam == 0) &&
                               ((azdate.CompareTo(p.EEDO_DATE) <= 0 && p.EEDO_DATE.CompareTo(tadate) <= 0) || azdate == "" || tadate == "") &&
                               !qnotinst.Contains(p.EEDO_ID) //&&
                         //q.Contains(b.EPOL_EPOL_ID)
                         // orderby p.DOC_NUMB
                         select new
                         {
                             p.EEDO_ID,
                             p.DOC_NUMB,
                             off = p.EEDO_DATE + " " + p.EEDO_TIME,
                             p.EPOL_EPOL_ID,
                             postpdef = postname(p.EEDO_ID),
                             inst = Returninstrument(p.EEDO_ID),
                             func = p.EXP_PFUNCTION.EFUN_DESC,
                             instd = Returninstrumentdet(p.EEDO_ID),
                             // instid = Returninstrumentid(p.EEDO_ID),
                             p.EFUN_EFUN_ID,
                             p.DEFC_DESC,
                             organprog = organpostexpi(p.EEDO_ID),
                             prog1 = programid(p.EFUN_EFUN_ID)
                         });

            return Json(query.ToList().ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        //[EntityAuthorize("EXP_EITEM_DOC_VALUE>select")]
        /*اطلاعات قطعی ها را برمی گرداند */
        public ActionResult Get_Value_Doc([DataSourceRequest] DataSourceRequest request, int id)
        {
            var query = from dman in Db.EXP_EITEM_DOC_VALUE where (dman.EEDO_EEDO_ID == id) select dman;
            var d = new DataSourceResult
            {
                Data = query.Select(p => new
                {
                    p.EIDR_ID,
                    p.EIDR_VALUE,
                    EITY_DESC = p.EXP_ITEM_TYPE_DOC.EITY_DESC
                }),
            };

            return Json(d, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Get_DomainValue(int? dman_id, int? formId)
        {
            if (formId == 4 || formId == 3) // 3 = khadamati , 4 = ezterari khadamati
            {
                var RetVal = from dman in Db.CHK_DOMAIN
                             where (dman.DMAN_DMAN_ID == dman_id) && dman.DMAN_STAT == "1" && dman.ACTV_TYPE == "1"
                             orderby dman.DMAN_ID
                             select new { dman.DMAN_TITL, dman.DMAN_ID };
                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var RetVal = from dman in Db.CHK_DOMAIN
                             where (dman.DMAN_DMAN_ID == dman_id) && dman.ACTV_TYPE == "1"
                             orderby dman.DMAN_ID
                             select new { dman.DMAN_TITL, dman.DMAN_ID };
                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
        }

        /*این اکشن فرم جوابیه هماهنگی ها را به نمایش در می اورد */
        //[EntityAuthorize("EXP_POST_LINE>select|CGT_PRO>select|PAY_ORGAN>select|PAY_ORGAN>select|EXP_EXPI_DOC>select|EXP_EITEM_DOC_VALUE>select|EXP_POST_LINE_INSTRU>select|SEC_JOB_TYPE_DOC>select|EXP_INSTRUMENT>select|EXP_TYPE_BAY>select|EXP_UNIT_LEVEL>select|EXP_OFF_STAT>select|EXP_PFUNCTION>select")]
        public ActionResult select_all(int? id, string current)
        {
            ViewData["post_line"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
            ViewData["project"] = Db.CGT_PRO.Where(o => o.CPRO_PRJ_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_PRJ_CODE).FirstOrDefault())
                                            .Where(o => o.CPLA_PLN_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_CPLA_PLN_CODE).FirstOrDefault())
                                            .Select(o => new { o.PRJ_CODE, o.PRJ_DESC })
                                            .AsEnumerable();
            ViewData["Organ"] = Db.PAY_ORGAN.Select(o => new { o.CODE, o.ORGA_DESC }).AsEnumerable();
            ViewData["Type_Doc"] = Db.EXP_EXPI_DOC.Select(o => new { o.EEDO_ID, o.EXP_TYPE_DOC, o.ETDO_ETDO_ID, o.EXP_TYPE_DOC.ETDO_DESC }).Where(o => o.ETDO_ETDO_ID == o.EXP_TYPE_DOC.ETDO_ID).AsEnumerable();
            ViewData["Doc_val"] = Db.EXP_EITEM_DOC_VALUE.Select(o => new { o.EIDR_ID, o.EIDR_VALUE });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EINS_EINS_ID, o.CODE_DISP });
            ViewData["JDTYid"] = Db.SEC_JOB_TYPE_DOC.Select(o => new { o.JDTY_ID, o.ACTIV_FNAM });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID != null).Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Bay = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
            ViewBag.UniteV = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.EXP_OFF_STAT.Select(c => new { c.EOFS_ID, c.EOFS_DESC });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            Session["eedo_id"] = id;
            ViewBag.current = current;
            return View();
        }

        /*براساس شماره و ردیف کارتابل اطلاعات درخواست را برمی گرداند */
        [EntityAuthorize("EXP_POST_LINE>select|CGT_PRO>select|PAY_ORGAN>select|EXP_EXPI_DOC>select|EXP_EITEM_DOC_VALUE>select|EXP_POST_LINE_INSTRU>select|SEC_JOB_TYPE_DOC>select|EXP_INSTRUMENT>select|EXP_TYPE_BAY>select|EXP_UNIT_LEVEL>select|EXP_OFF_STAT>select|EXP_PFUNCTION>select")]
        public ActionResult ViewForm(string id, string notId, string dateStart, string dateEnd)
        {
            ViewData["post_line"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
            ViewData["project"] = Db.CGT_PRO.Where(o => o.CPRO_PRJ_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_PRJ_CODE).FirstOrDefault())
                                            .Where(o => o.CPLA_PLN_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_CPLA_PLN_CODE).FirstOrDefault())
                                            .Select(o => new { o.PRJ_CODE, o.PRJ_DESC })
                                            .AsEnumerable();
            ViewData["Organ"] = Db.PAY_ORGAN.Select(o => new { o.CODE, o.ORGA_DESC }).AsEnumerable();
            ViewData["Type_Doc"] = Db.EXP_EXPI_DOC.Select(o => new { o.EEDO_ID, o.EXP_TYPE_DOC, o.ETDO_ETDO_ID, o.EXP_TYPE_DOC.ETDO_DESC }).Where(o => o.ETDO_ETDO_ID == o.EXP_TYPE_DOC.ETDO_ID).AsEnumerable();
            ViewData["Doc_val"] = Db.EXP_EITEM_DOC_VALUE.Select(o => new { o.EIDR_ID, o.EIDR_VALUE });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EINS_EINS_ID, o.CODE_DISP });
            ViewData["JDTYid"] = Db.SEC_JOB_TYPE_DOC.Select(o => new { o.JDTY_ID, o.ACTIV_FNAM });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID != null).Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Bay = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
            ViewBag.UniteV = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.EXP_OFF_STAT.Select(c => new { c.EOFS_ID, c.EOFS_DESC });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.exp_doc = Db.EXP_EXPI_DOC;

            EXP_EXPI_DOC cm = new EXP_EXPI_DOC();
            EXP_ITEM_TYPE_DOC cmitem = new EXP_ITEM_TYPE_DOC();
            EXP_EDOC_INSTRU cminstru = new EXP_EDOC_INSTRU();
            Equipment.Models.PartialClass.MultiModelPrj multicm = new Equipment.Models.PartialClass.MultiModelPrj();

            string ssend = string.Empty;

            if (id != "0")
            {
                cm = Db.Database.SqlQuery<EXP_EXPI_DOC>("select * from EXP_EXPI_DOC where " + id).FirstOrDefault();
                multicm.EXP_EXPI_DOC = cm;
                int i = 0;

                while (i <= 7)
                {
                    string ci = "FLW_REHA.PFLW_REHA^" + multicm.EXP_EXPI_DOC.EEDO_ID + "-" + i;
                    int si = Db.Database.SqlQuery<int>("select count(NOT_ID) from WF_NOTE_V where ITEM_KEY='" + ci + "'").FirstOrDefault();

                    if (si > 0)
                    {
                        if (i == 0)
                            ssend += "دیسپاچینگ کرمان - ";

                        if (i == 1)
                            ssend += "دیسپاچینگ هرمزگان - ";

                        if (i == 2)
                            ssend += "مطالعات شبکه - ";

                        if (i == 3)
                            ssend += "حفاظت و کنترل - ";

                        if (i == 4)
                            ssend += "اداره تعمیرات - ";

                        if (i == 5)
                            ssend += "اداره خط - ";

                        if (i == 6)
                            ssend += "انتقال - ";

                        if (i == 7)
                            ssend += "دیاگرام - ";
                    }

                    i = i + 1;
                }

                Session["notid"] = notId;
                ViewBag.key = notId;
                Session["etdo_id"] = multicm.EXP_EXPI_DOC.ETDO_ETDO_ID;
                Session["eedo_id"] = multicm.EXP_EXPI_DOC.EEDO_ID;
                ViewBag.stringsend = string.IsNullOrEmpty(ssend) ? "" : ssend.Substring(0, ssend.Length - 3);
                ViewBag.stringdate = dateStart;
                ViewBag.stringdate2 = dateEnd;
                return View("PartialViewForm", multicm);
            }
            else
            {
                return View("ErrorNotFound");
            }
        }

        /*حذف ردیف های تجهیزات درخواست در گرید */
        //[EntityAuthorize("EXP_EDOC_INSTRU>delete")]
        public ActionResult deleteedin(int? r)
        {
            string sql = string.Format("DELETE FROM EXP_EDOC_INSTRU WHERE EDIN_ID ={0}", r.ToString());
            Db.Database.ExecuteSqlCommand(sql);
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] حذف شد.", r) }.ToJson();
        }

        /*باز کردن فرم مرکزکنترل */
        //[MenuAuthorize]
        [EntityAuthorize("EXP_POST_LINE>select|CGT_PRO>select|PAY_ORGAN>select|EXP_EXPI_DOC>select|EXP_EITEM_DOC_VALUE>select|EXP_POST_LINE_INSTRU>select|SEC_JOB_TYPE_DOC>select|EXP_INSTRUMENT>select|EXP_TYPE_BAY>select|EXP_UNIT_LEVEL>select|EXP_OFF_STAT>select|EXP_PFUNCTION>select")]
        public ActionResult FormCentercontrol()
        {
            ViewData["post_line"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
            ViewData["project"] = Db.CGT_PRO.Where(o => o.CPRO_PRJ_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_PRJ_CODE).FirstOrDefault())
                                            .Where(o => o.CPLA_PLN_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_CPLA_PLN_CODE).FirstOrDefault())
                                            .Select(o => new { o.PRJ_CODE, o.PRJ_DESC })
                                            .AsEnumerable();
            ViewData["Organ"] = Db.PAY_ORGAN.Select(o => new { o.CODE, o.ORGA_DESC }).AsEnumerable();
            ViewData["Type_Doc"] = Db.EXP_EXPI_DOC.Select(o => new { o.EEDO_ID, o.EXP_TYPE_DOC, o.ETDO_ETDO_ID, o.EXP_TYPE_DOC.ETDO_DESC }).Where(o => o.ETDO_ETDO_ID == o.EXP_TYPE_DOC.ETDO_ID).AsEnumerable();
            ViewData["Doc_val"] = Db.EXP_EITEM_DOC_VALUE.Select(o => new { o.EIDR_ID, o.EIDR_VALUE });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EINS_EINS_ID, o.CODE_DISP });
            ViewData["JDTYid"] = Db.SEC_JOB_TYPE_DOC.Select(o => new { o.JDTY_ID, o.ACTIV_FNAM });
            ViewData["epix"] = Db.EXP_PERSON_EXPLI.Select(o => new { o.EPEX_ID, o.EPEX_NAME });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID != null).Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Bay = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
            ViewBag.UniteV = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.EXP_OFF_STAT.Select(c => new { c.EOFS_ID, c.EOFS_DESC });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            return View();
        }

        /*با این اکشن فرم های مربوط به هماهنگی را برمی گرداند */
        [EntityAuthorize("EXP_POST_LINE>select|CGT_PRO>select|PAY_ORGAN>select|PAY_ORGAN>select|EXP_EXPI_DOC>select|EXP_EITEM_DOC_VALUE>select|EXP_POST_LINE_INSTRU>select|SEC_JOB_TYPE_DOC>select|EXP_INSTRUMENT>select|EXP_TYPE_BAY>select|EXP_UNIT_LEVEL>select|EXP_OFF_STAT>select|EXP_PFUNCTION>select")]
        public ActionResult ViewFormRequest(string id, string notId)
        {
            ViewData["post_line"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
            ViewData["project"] = Db.CGT_PRO.Where(o => o.CPRO_PRJ_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_PRJ_CODE).FirstOrDefault())
                                            .Where(o => o.CPLA_PLN_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_CPLA_PLN_CODE).FirstOrDefault())
                                            .Select(o => new { o.PRJ_CODE, o.PRJ_DESC })
                                            .AsEnumerable();
            ViewData["Organ"] = Db.PAY_ORGAN.Select(o => new { o.CODE, o.ORGA_DESC }).AsEnumerable();
            ViewData["Type_Doc"] = Db.EXP_EXPI_DOC.Select(o => new { o.EEDO_ID, o.EXP_TYPE_DOC, o.ETDO_ETDO_ID, o.EXP_TYPE_DOC.ETDO_DESC }).Where(o => o.ETDO_ETDO_ID == o.EXP_TYPE_DOC.ETDO_ID).AsEnumerable();
            ViewData["Doc_val"] = Db.EXP_EITEM_DOC_VALUE.Select(o => new { o.EIDR_ID, o.EIDR_VALUE });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EINS_EINS_ID, o.CODE_DISP });
            ViewData["JDTYid"] = Db.SEC_JOB_TYPE_DOC.Select(o => new { o.JDTY_ID, o.ACTIV_FNAM });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID != null).Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Bay = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
            ViewBag.UniteV = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.EXP_OFF_STAT.Select(c => new { c.EOFS_ID, c.EOFS_DESC });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.exp_doc = Db.EXP_EXPI_DOC;

            EXP_EXPI_DOC cm = new EXP_EXPI_DOC();
            EXP_ITEM_TYPE_DOC cmitem = new EXP_ITEM_TYPE_DOC();
            EXP_EDOC_INSTRU cminstru = new EXP_EDOC_INSTRU();
            Equipment.Models.PartialClass.MultiModelPrj multicm = new Equipment.Models.PartialClass.MultiModelPrj();

            var ui = id.Split('A');
            string idd = ui[0].ToString();
            cm = Db.Database.SqlQuery<EXP_EXPI_DOC>("select * from EXP_EXPI_DOC where " + idd).FirstOrDefault();
            multicm.EXP_EXPI_DOC = cm;
            Session["notid"] = notId;
            ViewBag.key = notId;
            Session["etdo_id"] = multicm.EXP_EXPI_DOC.ETDO_ETDO_ID;
            Session["eedo_id"] = multicm.EXP_EXPI_DOC.EEDO_ID;
            ViewBag.stedokey = 183;
            return View("PartialViewForm", multicm);
        }

        /*برنامه های مربوط به مدرک که مشخص کردیم را برمیگرداند */
        //[EntityAuthorize("EXP_PROGRAM>select")]
        public ActionResult programgete(string etdo_id)
        {
            int i = Convert.ToInt32(etdo_id);
            var query = from k in Db.EXP_PROGRAM
                        where k.ETDO_ETDO_ID == i
                        select new { k.EPRO_ID, k.EPRO_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*بی های مربوط به پست را برمی گرداند */
        //[EntityAuthorize("EXP_POST_LINE>select|EXP_POST_LINE_INSTRU>select|EXP_INSTRU_BAY>select|EXP_TYPE_BAY>select|EXP_CORE_BAY>select")]
        public ActionResult Getbay(int post)
        {
            var q = from b in Db.EXP_POST_LINE join j in Db.EXP_POST_LINE_INSTRU on b.EPOL_ID equals j.EPOL_EPOL_ID select j;
            var q1 = from b in q join j in Db.EXP_INSTRU_BAY on b.EPIU_ID equals j.EPIU_EPIU_ID select j.ECBA_ECBA_ID;
            var query = (from b in Db.EXP_TYPE_BAY
                         join j in Db.EXP_CORE_BAY on b.ETBY_ID equals j.ETBY_ETBY_ID
                         where q1.Contains(j.ECBA_ID)
                         select new { b.ETBY_ID, b.ETBY_DESC }).Distinct();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public class CustomerSearchModel
        {
            public string Type_Instrument { get; set; }

            public int etby { get; set; }

            public int post3 { get; set; }
        }

        // [EntityAuthorize("EXP_UNIT_LEVEL > select")]
        public ActionResult GetUnitLevelpost(string code)
        {
            var query = (from b in Db.EXP_UNIT_LEVEL
                         join p in Db.EXP_POST_LINE on b.EUNL_ID equals p.EUNL_EUNL_ID
                         orderby b.EUNL_NUM descending
                         where p.ORGA_CODE == code
                         select new { b.EUNL_ID, b.EUNL_DESC, b.EUNL_NUM }).Distinct().OrderByDescending(b => b.EUNL_NUM);

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetUnitLevelpostOnly(string code)
        {
            var query = (from b in Db.EXP_UNIT_LEVEL
                         join p in Db.EXP_POST_LINE on b.EUNL_ID equals p.EUNL_EUNL_ID
                         orderby b.EUNL_NUM descending
                         where p.ORGA_CODE == code && b.EUNL_NUM != 20
                         select new { b.EUNL_ID, b.EUNL_DESC, b.EUNL_NUM }).Distinct().OrderByDescending(b => b.EUNL_NUM);

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*تجهیزات و خط های مربوط به پست مورد نظ در صورتیکه بی نباشد و در صورتیکه بی باشد تجهیزات بی را برمی گرداند */
        //[EntityAuthorize("EXP_POST_LINE>select|EXP_POST_LINE_INSTRU>select|EXP_INSTRU_BAY>select|EXP_TYPE_BAY>select|EXP_CORE_BAY>select")]
        public ActionResult GetPostInstrument(CustomerSearchModel customerSearchModel)
        {
            string Type_Instrument = customerSearchModel.Type_Instrument;
            int etby = customerSearchModel.etby;
            int postpo = customerSearchModel.post3;

            if (etby == 0)
            {
                var RetVal = from b in Db.EXP_POST_LINE_INSTRU
                             join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID
                             where (p.EPOL_TYPE == "1" && (b.EPOL_EPOL_ID_INSLIN == postpo || b.EPOL_EPOL_ID_LINE == postpo) &&
                                    (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null) && b.EPIU_EPIU_ID_SAVABEGH == null) ||
                                   (p.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == postpo && b.EPIU_EPIU_ID_SAVABEGH == null)
                             select new
                             {
                                 b.EPIU_ID,
                                 b.CODE_NAME,
                                 b.PHAS_TYPE,
                                 b.PHAS_STAT,
                                 cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC
                             };

                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var query = from b in Db.EXP_TYPE_BAY
                            join j in Db.EXP_CORE_BAY on b.ETBY_ID equals j.ETBY_ETBY_ID
                            where b.ETBY_ID == etby
                            select j.EPIU_EPIU_ID;

                var q = from b in Db.EXP_POST_LINE
                        join j in Db.EXP_POST_LINE_INSTRU on b.EPOL_ID equals j.EPOL_EPOL_ID
                        where b.EPOL_ID == postpo && query.Contains(j.EPIU_ID) && j.EPIU_EPIU_ID_SAVABEGH == null
                        select new
                        {
                            j.EPIU_ID,
                            j.CODE_NAME,
                            j.PHAS_TYPE,
                            j.PHAS_STAT,
                            cexecdesc = j.EXP_TYPE_EQUIP.ETEX_DESC
                        };

                return Json(q, JsonRequestBehavior.AllowGet);
            }
        }

        /*براساس وظیفه ای که مشخص شدهاست ایتم های دلیل لغو ان وظیفه نمایش داده می شود
         * مثلا برای برنامه ریزی یک سری ایتم برای لغو وجودد ارد که انها برای مرکز کنترل نیست */
        //[EntityAuthorize("EXP_CANCEL_RESN>select|EXP_CRESN_JOB>select|SEC_JOB_TYPE_DOC>select")]
        public ActionResult getcancelresn(string curents)
        {
            var query1 = from b in Db.EXP_CANCEL_RESN
                         join j in Db.EXP_CRESN_JOB on b.ECRE_ID equals j.ECRE_ECRE_ID
                         join k in Db.SEC_JOB_TYPE_DOC on j.JDTY_JDTY_ID equals k.JDTY_ID
                         where k.ACTIV_NAME == curents
                         select new { j.EREJ_ID, b.ECRE_DESC };

            return Json(query1, JsonRequestBehavior.AllowGet);
        }

        /*ین اکشن نوع تجهیزات مربوط به این پست را برمیگرداند */
        //[EntityAuthorize("EXP_INSTRUMENT>select|EXP_POST_LINE_INSTRU>select")]
        public ActionResult Getinstrument(int post)
        {
            var query1 = (from b in Db.EXP_INSTRUMENT
                          join y in Db.EXP_POST_LINE_INSTRU on b.EINS_ID equals y.EINS_EINS_ID
                          where b.EINS_EINS_ID != null && y.EPOL_EPOL_ID == post
                          select new { b.EINS_ID, b.EINS_DESC }).Distinct();

            return Json(query1, JsonRequestBehavior.AllowGet);
        }

        /*عملیات های مربوط به برنامه ها*/
        public ActionResult functiongete(string epro_id)
        {
            if (epro_id == "")
                epro_id = "0";

            int epro_epro_id = Convert.ToInt32(epro_id);
            var RetVal = (from b in PublicRepository.get_function() where (b.EPRO_EPRO_ID == epro_epro_id) orderby b.EFUN_DESC select b).AsEnumerable().Select(b => new { b.EFUN_ID, b.EFUN_DESC });
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        /*تمام برنامه ها را برمیگرداند */
        //[EntityAuthorize("EXP_PROGRAM>select")]
        public ActionResult Getprogram1()
        {
            var query = from k in Db.EXP_PROGRAM
                        select new { k.EPRO_ID, k.EPRO_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*با این اکشن ها می توان تجهیز جدید ایجاد نمود برای درخواست یا ردیف تجهیز ایجاد شده را تغییرو ویرایش کرد
         * در صورتیکه تایپ برای 1 باشد برای ویرایش اطلاعات است و در صورتیکه صفر باشد برای ایجاد تجهیز جدید است */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select")]
        public ActionResult insertinstru_new(int? id, int type, string idform, string current)
        {
            Session["typeidinstrument"] = type;
            ViewBag.idform = idform;
            ViewBag.current = current;

            if (id != 0)
            {                
                if (type == 0)
                {
                    Session["requid"] = id;
                    Session["idinstrument"] = 0;
                    ViewBag.requestSaveDate = Db.EXP_EXPI_DOC.Find(id.Value).EEDO_DATE.ToString();
                    return View();
                }
                else
                {
                    string q = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b.EEDO_EEDO_ID).FirstOrDefault().ToString();
                    Session["requid"] = Convert.ToInt32(q);
                    Session["idinstrument"] = id;
                    ViewBag.requestSaveDate = Db.EXP_EDOC_INSTRU.Find(id.Value).EXP_EXPI_DOC.EEDO_DATE.ToString();
                    EXP_EDOC_INSTRU EXPNEW = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b).FirstOrDefault();
                    return View(EXPNEW);
                }
            }
            else
            {
                return View("ErrorNotFound");
            }
        }

        /*این اکشن یک ردیف جدید تجهیزات را در سیستم ایجاد و ثبت می نماید */
        [EntityAuthorize("EXP_EDOC_INSTRU>select,update,insert|EXP_EXPI_DOC>select|SEC_JOB_TYPE_DOC>select")]
        public ActionResult Inserinstrumentnew(EXP_EDOC_INSTRU objecttemp)
        {
            if (Request.Form["off_TIME"] == "" || Request.Form["on_TIME"] == "" || Request.Form["offstat"] == "" || Request.Form["CUST_STAT"] == "" || Request.Form["EART_STAT"] == "")
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات برای ثبت کامل نیست" }.ToJson();
            }
            try
            {
                int requid = Convert.ToInt32(Session["requid"].ToString());
                int idinstrument = Convert.ToInt32(Session["idinstrument"].ToString());
                //int idinst = 0;
                //int idetby1 = 0;
                //int idinstt = 0;
                int? ecba = 0;
                int postcode = 0;

                var findRequest = Db.EXP_EDOC_INSTRU.Where(x => x.EEDO_EEDO_ID == requid);
                if (findRequest.Any())
                {
                    var newPostId = Convert.ToInt32(Request.Form["EPOL_EPOL_ID_requ"]);
                    var postId = findRequest.Select(x => x.EPOL_EPOL_ID).Distinct();
                    if (postId.Count() > 1 || !postId.Contains(newPostId))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "امکان تغییر پست ثبت شده وجود ندارد، لطفا ابتدا تجهیزات را حذف کنید سپس مجددا جهت تغییر پست اقدام نمایید" }.ToJson();
                    }
                }

                if (Request.Form["idform"] == "1" && Request.Form["current"] == "CREATOR")
                {
                    //if (Request.Form["typeinstREQUEST"] != "0")
                    //{                    
                    int instruId = string.IsNullOrEmpty(Request.Form["HiddenInstrID"]) ? 0 : Convert.ToInt32(Request.Form["HiddenInstrID"]);
                    int offStat = string.IsNullOrEmpty(Request.Form["offstat"]) ? 0 : Convert.ToInt32(Request.Form["offstat"]);
                    string custStat = Request.Form["CUST_STAT"].ToString();
                    string typeInst = "2";
                    string offd = Request.Form["requOffDate"].ToString();

                    string requestSaveDate = Request.Form["requestSaveDate"].ToString();

                    string postId = Request.Form["EPOL_EPOL_ID_requ"].ToString();

                    var WorkDate = CheckWorkDate(instruId, offStat, custStat, typeInst, postId);
                    if (WorkDate > 0)
                    {
                        int day = (Db.Database.SqlQuery<int>("SELECT FDAYS_BETWEEN_U('" + requestSaveDate + "','" + offd + "')  FROM dual").FirstOrDefault());
                        if (WorkDate > day) // اگر تعداد روزهای مورد نیاز بیشتر از مدت زمان انتخاب شده باشد امکان ثبت وجود ندارد
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("برای ثبت این درخواست باید از تاریخ ثبت تا تاریخ شروع انجام کار {0} روز فاصله وجود داشته باشد", WorkDate) }.ToJson();
                    }
                    //}
                }

                var rel1 = new EXP_EDOC_INSTRU();
                string POSTINST = string.Empty;
                string detail = string.Empty;
                string etby1 = string.Empty;
                string eins = string.Empty;
                string ETDO = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == requid select b.ETDO_ETDO_ID).FirstOrDefault().ToString();
                if (idinstrument != 0)
                {
                    rel1 = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == idinstrument select b).FirstOrDefault();
                }

                var einst = (from p in Db.EXP_EDOC_INSTRU where p.EEDO_EEDO_ID == requid && p.CUT_STAT == "1" select p).FirstOrDefault();
                string offdate = einst.OFF_DATE.ToString();
                string onDATE = einst.ON_DATE.ToString();
                /*بدست اوردن ردیف تجهیز اصلی و تاریخ ردیف تجهیز اصلی */
                string time = string.Empty;
                if (Request.Form["off_TIME"] != null && Request.Form["on_TIME"] != null)
                {
                    string off_TIME1 = Request.Form["off_TIME"];
                    string on_TIME1 = Request.Form["on_TIME"];

                    /*بدست اوردن مدت زمان بین زمان شروع درخواست  پایان درخواست براساس پیوسته و ناپیوسته بودن */
                    if (Request.Form["stattime"].ToString() == "0")
                    {
                        time = (Db.Database.SqlQuery<string>("SELECT TIME_BETWEEN_U('" + offdate + "','" + off_TIME1 + "','" + onDATE + "','" + on_TIME1 + "')  FROM dual").FirstOrDefault());
                    }
                    else
                    {
                        int day = (Db.Database.SqlQuery<int>("SELECT FDAYS_BETWEEN_U('" + offdate + "','" + onDATE + "')  FROM dual").FirstOrDefault());
                        string time1 = (Db.Database.SqlQuery<string>("SELECT TIME_BETWEEN_U('" + offdate + "','" + off_TIME1 + "','" + offdate + "','" + on_TIME1 + "')  FROM dual").FirstOrDefault());
                        if (day == 0)
                        {
                            time = time1;
                        }
                        else
                        {
                            var val = time1.Split(':');
                            string hhoff = val[0].ToString();
                            string ssoff = val[1].ToString();

                            int hh = Convert.ToInt32(hhoff) * (day + 1);
                            int ss = Convert.ToInt32(ssoff) * (day + 1);
                            if (ss >= 60)
                            {
                                hh = hh + ss / 60;
                                ss = ss % 60;
                            }
                            time = hh + ":" + ss;
                        }
                    }
                    rel1.CONT_FUN = time;
                    if (Request.Form["stattime"].ToString() == "0")
                    {
                        /*چک تاریخ شروع و پایان درخواست */
                        if (offdate.CompareTo(onDATE) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else
                        {
                            if (offdate.CompareTo(onDATE) == 0)
                            {
                                if (off_TIME1.CompareTo(on_TIME1) > 0)
                                {
                                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                                }
                            }
                        }
                    }
                    else
                    {
                        if (offdate.CompareTo(onDATE) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else
                        {
                            if (off_TIME1.CompareTo(on_TIME1) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                        }
                    }
                }

                /*بدست اوردن زمان برنامه ریزی */
                if (Request.Form["off_TIMEprog"] != null && Request.Form["on_TIMEprog"] != null)
                {
                    string offdate2 = Request.Form["ofDATEprog"];
                    string onDATE2 = Request.Form["onDATEprog"];
                    string off_TIME2 = Request.Form["off_TIMEprog"];
                    string on_TIME2 = Request.Form["on_TIMEprog"];
                    /*بدست اوردن ردیف تجهیز اصلی */
                    var einst1 = (from p in Db.EXP_EDOC_INSTRU
                                  join b in Db.SEC_JOB_TYPE_DOC on p.JDTY_JDTY_ID equals b.JDTY_ID
                                  where p.EEDO_EEDO_ID == requid && p.CUT_STAT == "1" && b.ETDO_ETDO_ID == 21 && b.ACTIV_NAME == "CREATOR"
                                  select p).FirstOrDefault();

                    string stime = einst1.TIME_ISTA.ToString();

                    if (stime == "0")
                    {
                        if (offdate2.CompareTo(onDATE2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else
                        {
                            if (offdate2.CompareTo(onDATE2) == 0)
                            {
                                if (off_TIME2.CompareTo(on_TIME2) > 0)
                                {
                                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                                }
                            }
                        }
                    }
                    else
                    {
                        if (offdate2.CompareTo(onDATE2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else
                        {
                            if (off_TIME2.CompareTo(on_TIME2) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                        }
                    }
                }

                /*بدست اوردن تاریخ شروع و پایان هماهنگی ها */
                if (Request.Form["off_TIMEh"] != null && Request.Form["on_TIMEh"] != null)
                {
                    string offdate2 = Request.Form["offDATEh"];
                    string onDATE2 = Request.Form["onDATEh"];
                    string off_TIME2 = Request.Form["off_TIMEh"];
                    string on_TIME2 = Request.Form["on_TIMEh"];
                    var einst2 = (from p in Db.EXP_EDOC_INSTRU
                                  join b in Db.SEC_JOB_TYPE_DOC on p.JDTY_JDTY_ID equals b.JDTY_ID
                                  where p.EEDO_EEDO_ID == requid && p.CUT_STAT == "1" && b.ETDO_ETDO_ID == 21 && b.ACTIV_NAME == "CREATOR"
                                  select p).FirstOrDefault();

                    string stime = einst2.TIME_ISTA.ToString();

                    if (stime == "0")
                    {
                        if (offdate2.CompareTo(onDATE2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else
                        {
                            if (offdate2.CompareTo(onDATE2) == 0)
                            {
                                if (off_TIME2.CompareTo(on_TIME2) > 0)
                                {
                                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                                }
                            }
                        }
                    }
                    else
                    {
                        if (offdate2.CompareTo(onDATE2) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        else
                        {
                            if (off_TIME2.CompareTo(on_TIME2) > 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان شروع از پایان بزرگتر نمی تواند باشد" }.ToJson();
                            }
                        }
                    }
                }                

                /*بدست اوردن تجهیزات مورد نظر */
                string typeeins = string.Empty;
                if (Request.Form["HiddenInstrTypeID"] != "" && Request.Form["HiddenInstrTypeID"] != null)
                {
                    typeeins = Request.Form["HiddenInstrTypeID"].ToString();

                    if (Request.Form["HiddenInstrID"] != "" && Request.Form["HiddenInstrID"] != null)
                    {
                        POSTINST = Request.Form["HiddenInstrID"];
                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                        etby1 = null;
                        ecba = null;
                    }

                    if (Request.Form["HiddenInstrDetailID"] != "" && Request.Form["HiddenInstrDetailID"] != null)
                    {
                        detail = Request.Form["HiddenInstrDetailID"];
                        rel1.EERR_EERR_ID = Convert.ToInt32(detail);
                    }
                }
                else
                {
                    if (Request.Form["HiddenBayID"] != "" && Request.Form["HiddenBayID"] != null)
                    {
                        etby1 = Request.Form["HiddenBayID"];
                        ecba = Convert.ToInt32(etby1);
                        var giveEpiu = (from b in Db.EXP_CORE_BAY where b.ECBA_ID == ecba select new { b.EPIU_EPIU_ID, b.ETBY_ETBY_ID }).FirstOrDefault();
                        rel1.EPIU_EPIU_ID = Convert.ToDecimal(giveEpiu.EPIU_EPIU_ID);
                        rel1.ETBY_ETBY_ID = Convert.ToInt32(giveEpiu.ETBY_ETBY_ID);
                        rel1.ECBA_ECBA_ID = ecba;
                    }
                }

                /*بدست اوردن پست */
                if (Request.Form["EPOL_EPOL_ID_requ"] != "" && Request.Form["EPOL_EPOL_ID_requ"] != null)
                {
                    postcode = Convert.ToInt32(Request.Form["EPOL_EPOL_ID_requ"]);
                    rel1.EPOL_EPOL_ID = postcode;
                }

                rel1.EEDO_EEDO_ID = requid;
                rel1.OFF_DATE = offdate;
                rel1.ON_DATE = onDATE;

                /*بدست اوردن زمانها و بقیه اطلاعات مورد نظر */
                if (Request.Form["on_TIME"] != "" && Request.Form["on_TIME"] != null)
                {
                    rel1.ON_TIME = Request.Form["on_TIME"];
                }

                if (Request.Form["off_TIME"] != "" && Request.Form["off_TIME"] != null)
                {
                    rel1.OFF_TIME = Request.Form["off_TIME"];
                }

                if (Request.Form["stattime"] != "" && Request.Form["stattime"] != null)
                {
                    rel1.TIME_ISTA = Request.Form["stattime"];
                }

                if (Request.Form["INST_STAT"] != "" && Request.Form["INST_STAT"] != null)
                {
                    rel1.INST_STAT = Request.Form["INST_STAT"];
                }

                if (Request.Form["EART_STAT"] != "" && Request.Form["EART_STAT"] != null)
                {
                    rel1.EART_STAT = Request.Form["EART_STAT"];
                }

                if (Request.Form["CUST_STAT"] != "" && Request.Form["CUST_STAT"] != null)
                {
                    rel1.CUST_STAT = Request.Form["CUST_STAT"];
                }

                if (Request.Form["ofDATEprog"] != "" && Request.Form["ofDATEprog"] != null)
                {
                    rel1.OFF_DATE = Request.Form["ofDATEprog"];
                }

                if (Request.Form["off_TIMEprog"] != "" && Request.Form["off_TIMEprog"] != null)
                {
                    rel1.OFF_TIME = Request.Form["off_TIMEprog"];
                }

                if (Request.Form["onDATEprog"] != "" && Request.Form["onDATEprog"] != null)
                {
                    rel1.ON_DATE = Request.Form["onDATEprog"];
                }

                if (Request.Form["on_TIMEprog"] != "" && Request.Form["on_TIMEprog"] != null)
                {
                    rel1.ON_TIME = Request.Form["on_TIMEprog"];
                }

                if (Request.Form["offDATEh"] != "" && Request.Form["offDATEh"] != null)
                {
                    rel1.OFF_DATE = Request.Form["offDATEh"];
                }

                if (Request.Form["off_TIMEh"] != "" && Request.Form["off_TIMEh"] != null)
                {
                    rel1.OFF_TIME = Request.Form["off_TIMEh"];
                }

                if (Request.Form["onDATEh"] != "" && Request.Form["onDATEh"] != null)
                {
                    rel1.ON_DATE = Request.Form["onDATEh"];
                }

                if (Request.Form["on_TIMEh"] != "" && Request.Form["on_TIMEh"] != null)
                {
                    rel1.ON_TIME = Request.Form["on_TIMEh"];
                }

                if (Request.Form["Unitvolt"] != "" && Request.Form["Unitvolt"] != null)
                {
                    rel1.EUNL_EUNL_ID = Convert.ToInt32(Request.Form["Unitvolt"].ToString());
                }

                if (Request.Form["offstat"] != "" && Request.Form["offstat"] != null)
                {
                    rel1.EOFS_EOFS_ID = Convert.ToInt32(Request.Form["offstat"]);
                }

                if (Request.Form["EDIN_MW"] != "" && Request.Form["EDIN_MW"] != null)
                {
                    rel1.EDIN_MW = Request.Form["EDIN_MW"];
                }

                if (Request.Form["EDIN_OFF"] != "" && Request.Form["EDIN_OFF"] != null)
                {
                    rel1.EDIN_OFF = Request.Form["EDIN_OFF"];
                }

                if (Request.Form["EDIN_MVH"] != "" && Request.Form["EDIN_MVH"] != null)
                {
                    rel1.EDIN_MVH = Request.Form["EDIN_MVH"];
                }

                if (Request.Form["postvolt"] != "" && Request.Form["postvolt"] != null)
                {
                    rel1.EUNL_EUNL_ID = Convert.ToInt32(Request.Form["postvolt"]);
                }

                // بعد از اعمال تغییرات مربوط به ثبت تجهیزات اضافه شده - مربوط به آپدیت بی
                if (etby1 == "" || etby1 == null || etby1 == "0")
                {
                    rel1.ETBY_ETBY_ID = null;
                }

                if (ecba == 0 || ecba == null)
                {
                    rel1.ECBA_ECBA_ID = null;
                }

                if (idinstrument == 0)
                {    /* در صورتیکه تجهیز جدید باشد ان را ثبت می نماید */
                    int ETDOi = Convert.ToInt32(ETDO);
                    string Qjdti = (from b in Db.SEC_JOB_TYPE_DOC where b.ETDO_ETDO_ID == ETDOi && b.ROWI_ORDE == 1 select b.JDTY_ID).FirstOrDefault().ToString();
                    decimal QCURENT = Convert.ToDecimal(Qjdti);
                    rel1.JDTY_JDTY_ID = Convert.ToDecimal(QCURENT.ToString());
                    rel1.ETDO_ETDO_ID = ETDOi;
                    Db.EXP_EDOC_INSTRU.Add(rel1);
                    Db.SaveChanges();
                }
                else
                {
                    /*ثبت تغییرات مورد نظر */
                    Db.SaveChanges();
                }

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", rel1.EDIN_ID) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "لطفا اطلاعات را کامل وارد نمائید." }.ToJson();
            }
        }

        /* با این اکشن حذف برنامه زمانبندی یا دیفکت ثبت شده بروی درخواست انجام کار */
        [EntityAuthorize("EXP_RELATION_DOC>select,delete")]
        public ActionResult deletedoc(decimal? eedo_id, decimal? edin, decimal? eprog)
        {
            if (eedo_id != null)
            {
                if (eprog != 0)
                {
                    var relation = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedo_id && b.EDIN_EDIN_ID == eprog select b).FirstOrDefault();
                    if (relation != null)
                    {
                        Db.EXP_RELATION_DOC.Remove(relation);
                    }
                }

                if (edin != 0)
                {
                    var relation = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedo_id && b.EEDO_EEDO_ID_R == edin select b).FirstOrDefault();
                    if (relation != null)
                    {
                        Db.EXP_RELATION_DOC.Remove(relation);
                    }
                }

                var inst = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedo_id select b);
                foreach (var q in inst)
                {
                    Db.EXP_EDOC_INSTRU.Remove(q);
                }

                Db.SaveChanges();
            }

            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] حذف شد.", eedo_id) }.ToJson();
        }

        /*با این اکشن اطلاعات درخواست انجام کار تغییر می نماید */
        [EntityAuthorize("EXP_RELATION_DOC>select,insert,delete|EXP_EDOC_INSTRU>select,delete|EXP_SUPL_DOC>select,delete,insert|EXP_EXPI_DOC>select,update")]
        public ActionResult updatedoc(decimal? eedo_id, decimal? edin, decimal? eprog)
        {
            int eedoid = Convert.ToInt32(eedo_id);
            string offdate = Request.Form["ofDATEreq"];
            string onDATE = Request.Form["onDATEreq"];
            string time = string.Empty;
            string off_TIME = Request.Form["off_TIME"];
            string on_TIME = Request.Form["on_TIME"];

            /*پیوسته و ناپیوسته بودن و براساس ان زمان بین شروع و پایان برنامه مشخص می شود برای یک ردیف تجهیز */
            if (Request.Form["stattime"].ToString() == "0")
            {
                time = (Db.Database.SqlQuery<string>("SELECT TIME_BETWEEN_U('" + offdate + "','" + off_TIME + "','" + onDATE + "','" + on_TIME + "')  FROM dual").FirstOrDefault());
            }
            else
            {
                int day = (Db.Database.SqlQuery<int>("SELECT FDAYS_BETWEEN_U('" + offdate + "','" + onDATE + "')  FROM dual").FirstOrDefault());
                string time1 = (Db.Database.SqlQuery<string>("SELECT TIME_BETWEEN_U('" + offdate + "','" + off_TIME + "','" + offdate + "','" + on_TIME + "')  FROM dual").FirstOrDefault());
                if (day == 0)
                {
                    time = time1;
                }
                else
                {
                    var val = time1.Split(':');
                    string hhoff = val[0].ToString();
                    string ssoff = val[1].ToString();
                    int hh = Convert.ToInt32(hhoff) * (day + 1);
                    int ss = Convert.ToInt32(ssoff) * (day + 1);
                    if (ss >= 60)
                    {
                        hh = hh + ss / 60;
                        ss = ss % 60;
                    }
                    time = hh + ":" + ss;
                }
            }

            /*ثبت اطلاعات مربوط به دیفکت و برنامه زمانبندی در صورتیکه ایجاد شده باشد */
            if (eprog != 0)
            {
                string cou = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedo_id && b.EDIN_EDIN_ID == eprog select b).Count().ToString();
                int c = Convert.ToInt32(cou);
                if (c == 0)
                {
                    var rel = new EXP_RELATION_DOC();
                    rel.EEDO_EEDO_ID = eedoid;
                    rel.EDIN_EDIN_ID = eprog;
                    Db.EXP_RELATION_DOC.Add(rel);
                    Db.SaveChanges();
                }
            }

            if (edin != 0)
            {
                string cou = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedo_id && b.EEDO_EEDO_ID_R == edin select b).Count().ToString();
                int c = Convert.ToInt32(cou);
                if (c == 0)
                {
                    var rel = new EXP_RELATION_DOC();
                    rel.EEDO_EEDO_ID = eedoid;
                    rel.EEDO_EEDO_ID_R = edin;
                    Db.EXP_RELATION_DOC.Add(rel);
                    Db.SaveChanges();
                }
            }

            /*حذف تجهیز اصلی */
            string ic = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedoid && b.CUT_STAT == "1" select b).Count().ToString();
            int coi = Convert.ToInt32(ic);
            if (coi != 0)
            {
                var instrument = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedoid && b.CUT_STAT == "1" select b).FirstOrDefault();
                Db.EXP_EDOC_INSTRU.Remove(instrument);
                Db.SaveChanges();
            }

            /*ثبت تجهیز اصلی با اطلاعات تغییر یافته */
            var rel1 = new EXP_EDOC_INSTRU();
            string POSTINST = string.Empty;
            string etby1 = string.Empty;
            string eins = string.Empty;
            int idinst = 0;
            int idetby1 = 0;
            int idinstt = 0;
            int postcode = 0;

            if (Request.Form["POSTINST"] != "")
            {
                POSTINST = Request.Form["POSTINST"];
                idinst = Convert.ToInt32(POSTINST);
            }

            if (Request.Form["etby1"] != "")
            {
                POSTINST = Request.Form["POSTINST1"];
                idinst = Convert.ToInt32(POSTINST);
                etby1 = Request.Form["etby1"];
                idetby1 = Convert.ToInt32(etby1);
            }

            if (Request.Form["einsrequest"] != "")
            {
                eins = Request.Form["einsrequest"];
                idinstt = Convert.ToInt32(eins);
            }

            if (Request.Form["EPOL_EPOL_ID_requ"] != "")
            {
                postcode = Convert.ToInt32(Request.Form["EPOL_EPOL_ID_requ"]);
            }

            if (idinstt != 0 || idinst != 0)
            {
                int id = (from b in Db.EXP_EDOC_INSTRU
                          where b.EEDO_EEDO_ID == eedoid && b.EPOL_EPOL_ID == postcode &&
                                (b.EPIU_EPIU_ID == idinst || b.EINS_EINS_ID == idinstt || b.ETBY_ETBY_ID == idetby1)
                          select b.EDIN_ID).Count();

                if (id == 0)
                {
                    rel1.EEDO_EEDO_ID = eedoid;
                    if (idinst != 0)
                    {
                        rel1.EPIU_EPIU_ID = idinst;
                    }
                    if (idinstt != 0)
                    {
                        rel1.EINS_EINS_ID = idinstt;
                    }
                    if (idetby1 != 0)
                    {
                        rel1.ETBY_ETBY_ID = idetby1;
                    }

                    rel1.EPOL_EPOL_ID = postcode;
                    rel1.OFF_DATE = Request.Form["ofDATEreq"];
                    rel1.OFF_TIME = Request.Form["off_TIME"];
                    rel1.ON_DATE = Request.Form["onDATEreq"];
                    rel1.ON_TIME = Request.Form["on_TIME"];
                    rel1.TIME_ISTA = Request.Form["stattime"];
                    rel1.INST_STAT = Request.Form["INST_STAT"];
                    rel1.EART_STAT = Request.Form["EART_STAT"];
                    rel1.CUST_STAT = Request.Form["CUST_STAT"];
                    rel1.CONT_FUN = time;
                    rel1.CUT_STAT = "1";

                    if (Request.Form["Unitvolt"] != "")
                    {
                        rel1.EUNL_EUNL_ID = Convert.ToInt32(Request.Form["Unitvolt"].ToString());
                    }

                    if (Request.Form["offstat"] != "")
                    {
                        rel1.EOFS_EOFS_ID = Convert.ToInt32(Request.Form["offstat"]);
                    }

                    Db.EXP_EDOC_INSTRU.Add(rel1);
                    Db.SaveChanges();

                    var suplier = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "2" select b).FirstOrDefault();
                    Db.EXP_SUPL_DOC.Remove(suplier);
                    Db.SaveChanges();

                    var suplierj = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "5" select b).FirstOrDefault();
                    Db.EXP_SUPL_DOC.Remove(suplierj);
                    Db.SaveChanges();

                    int sup = 0;
                    int sup1 = 0;

                    /*ثبت اطلاعات سرپرست گروه و جانشین ان */
                    var rel2 = new EXP_SUPL_DOC();
                    var rel3 = new EXP_SUPL_DOC();
                    if (Request.Form["EPEX_EPEX_ID"] != "" && Request.Form["EPEX_EPEX_ID"] != null)
                        sup = Convert.ToInt32(Request.Form["EPEX_EPEX_ID"].ToString());
                    if (Request.Form["EPEX_EPEX_ID1"] != "" && Request.Form["EPEX_EPEX_ID1"] != null)
                        sup1 = Convert.ToInt32(Request.Form["EPEX_EPEX_ID1"].ToString());

                    if (sup != 0)
                    {
                        int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.EURP_EURP_ID == sup select b.ESUD_ID).Count();
                        if (idm == 0)
                        {
                            rel2.EEDO_EEDO_ID = eedoid;
                            rel2.POSI_TYEP = "2";
                            rel2.EURP_EURP_ID = sup;
                            rel2.ESUD_DESC = Request.Form["group"];
                            Db.EXP_SUPL_DOC.Add(rel2);
                            Db.SaveChanges();
                        }

                        int idm1 = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.EURP_EURP_ID == sup1 select b.ESUD_ID).Count();
                        if (idm1 == 0)
                        {
                            rel3.EEDO_EEDO_ID = eedoid;

                            rel3.POSI_TYEP = "5";
                            rel3.EURP_EURP_ID = sup1;

                            Db.EXP_SUPL_DOC.Add(rel3);
                            Db.SaveChanges();
                        }
                    }

                    var chkl = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b).FirstOrDefault();
                    /*ثبت اطلاعات مربوط به فرم و تغییرات ان */
                    chkl.EEDO_DESC = Request.Form["EXP_EXPI_DOC.EEDO_DESC"];
                    chkl.EEDO_DATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
                    chkl.ORGA_CODE = Request.Form["ORGA_CODE_request"];
                    chkl.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID_requ"]);
                    chkl.EFUN_EFUN_ID = Convert.ToInt32(Request.Form["function"]);
                    chkl.OUT_FUNC = Request.Form["EXP_EXPI_DOC.OUT_FUNC"];
                    Db.SaveChanges();

                    /*ثبت اطلاعات مربوط به درخواست های تمدیدی */
                    var relation = (from b in Db.EXP_RELATION_DOC
                                    join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals c.EEDO_ID
                                    where b.EEDO_EEDO_ID == eedo_id && c.ETDO_ETDO_ID == 21
                                    select b).FirstOrDefault();

                    Db.EXP_RELATION_DOC.Remove(relation);

                    var rel = new EXP_RELATION_DOC();
                    if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                    {
                        rel.EEDO_EEDO_ID = eedoid;
                        rel.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                        Db.EXP_RELATION_DOC.Add(rel);
                        Db.SaveChanges();
                    }
                }
            }

            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] حذف شد.", eedo_id) }.ToJson();
        }

        /*وضعیت قطعی ها را برمی گرداند */
        //[EntityAuthorize("EXP_OFF_STAT>select")]
        public ActionResult Getcutoff()
        {
            var query = from b in Db.EXP_OFF_STAT
                        where b.ACTV_TYPE == "1"
                        select new
                        {
                            b.EOFS_ID,
                            b.EOFS_DESC
                        };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult geterjabgroup()
        {
            var RetVal = (from b in Db.EXP_ANALYZOR_EVENT where b.EANA_TYPE == 1 && b.EANA_ROW != 10 orderby b.EANA_DESC select new { b.EANA_ROW, b.EANA_DESC }).OrderBy(b => b.EANA_DESC);
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        public JsonResult sendpersonpostr(int notId, int id)
        {
            var query = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select new { b.EPOL_EPOL_ID, b.EANA_EANA_ROW }).FirstOrDefault();

            AsrWorkFlowProcess wp1 = new AsrWorkFlowProcess(notId);

            string idrole = "MENAGPOST";
            wp1.Dispose();

            var persons = (from c in Db.SEC_USERS.AsEnumerable()
                           join b in Db.SEC_USER_TYPE_POST.AsEnumerable() on c.ROW_NO equals b.SCSU_ROW_NO
                           // join d in Db.PAY_PERSONEL on c.PRSN_EMP_NUMB equals d.EMP_NUMB
                           where b.EPOL_EPOL_ID == query.EPOL_EPOL_ID && b.EURP_TYPE == 0 && b.ETDO_ETDO_ID == 343
                           select new
                           {
                               c.ROW_NO,
                               c.CRET_BY,
                               c.MDFY_BY,
                               c.USER_NAME,
                               c.USER_PASS,
                               c.USER_STATE,
                               c.USER_TYPE,
                               c.SYS_TYPE,
                               c.ORCL_NAME,
                               c.ORCL_PASS,
                               //FIRS_NAME = c.PAY_PERSONEL.FIRS_NAME.HasValue() ? c.PAY_PERSONEL.FIRS_NAME : c.FIRS_NAME,
                               //FAML_NAME = c.PAY_PERSONEL.FAML_NAME.HasValue() ? c.PAY_PERSONEL.FAML_NAME : c.FAML_NAME
                               FIRS_NAME = c.FIRS_NAME.HasValue() ? c.FIRS_NAME : c.PAY_PERSONEL.FIRS_NAME,
                               FAML_NAME = c.FAML_NAME.HasValue() ? c.FAML_NAME : c.PAY_PERSONEL.FAML_NAME
                           }).ToList();


            var defectrelation = (from b in Db.EXP_RELATION_DOC
                                  join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals c.EEDO_ID
                                  where b.EEDO_EEDO_ID == id && c.ETDO_ETDO_ID == 2
                                  select c);

            string[] pn;
            if (defectrelation.FirstOrDefault() != null)
            {
                decimal iddedo = defectrelation.FirstOrDefault().EEDO_ID;
                int noteid = AsrWorkFlowProcess.GetNotId("FLW_DEFE", "PFLW_DEFC", iddedo);
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess(noteid);

                pn = persons.FirstOrDefault().USER_NAME.Split('+');
                wp.Approve(pn, "دیفکت توسط درخواست مربوطه تایید شد ");
                wp.Dispose();
            }

            return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult programmerArchive(int notId, string eedoid, string sid)
        {
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            string idrole = string.Empty;
            if (sid == "PROGRAMER")
            {
                wp.SetKeyValue("MY_FLAG", "1");
                idrole = "ARCHEIVE";
            }

            AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Approvereq(int notId, string eedoid, string sid, int stat, int Ersalstat)
        {
            int eedoid1 = Convert.ToInt32(eedoid);
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            string TEDO = string.Empty;
            string prog = string.Empty;
            string idrole = string.Empty;
            string flowid = string.Empty;

            /*در صورتیکه درخواست در مرحله  مدیر درخواست دهندهباشد براساس برنامه که دارد برای جاهای مختلف ارسال می شود*/
            if (sid == "CREATOR")
            {
                var qflag = (from b in Db.EXP_EXPI_DOC
                             join p in Db.EXP_PFUNCTION on b.EFUN_EFUN_ID equals p.EFUN_ID
                             join t in Db.EXP_PROGRAM on p.EPRO_EPRO_ID equals t.EPRO_ID
                             where b.EEDO_ID == eedoid1
                             select t).FirstOrDefault();

                prog = qflag.EPRO_ID.ToString();
                if (prog == "250") /* اضطراري*/
                {
                    wp.SetKeyValue("MY_FLAG", "0");
                    idrole = "CONTROLCENTER";
                }
                else
                {
                    wp.SetKeyValue("MY_FLAG", "1");
                    idrole = "MANEGERCR";
                }

            }

            if (sid == "MANEGERCR")
            {
                var qflag = (from b in Db.EXP_EXPI_DOC
                             join p in Db.EXP_PFUNCTION on b.EFUN_EFUN_ID equals p.EFUN_ID
                             join t in Db.EXP_PROGRAM on p.EPRO_EPRO_ID equals t.EPRO_ID
                             where b.EEDO_ID == eedoid1
                             select t).FirstOrDefault();

                prog = qflag.EPRO_ID.ToString();
                if (prog == "252") /* خدماتی*/
                {
                    //wp.SetKeyValue("MY_FLAG", "1");
                    //idrole = "ENTEGHALC";
                    wp.SetKeyValue("MY_FLAG", "1");
                    idrole = "EXPERTENTEGHAL"; // کارشناس هماهنگی
                }
                else
                {
                    wp.SetKeyValue("MY_FLAG", "0");
                    idrole = "FANIC";
                }
            }

            if (sid == "EXPERTENTEGHAL") // کارشناس هماهنگی
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "ENTEGHALC";  // امور انتقال
            }

            if (sid == "MESSAGECENTER")
            {
                var qflag = (from b in Db.EXP_EXPI_DOC
                             join p in Db.EXP_PFUNCTION on b.EFUN_EFUN_ID equals p.EFUN_ID
                             join t in Db.EXP_PROGRAM on p.EPRO_EPRO_ID equals t.EPRO_ID
                             where b.EEDO_ID == eedoid1
                             select t).FirstOrDefault();

                prog = qflag.EPRO_ID.ToString();
                if (prog == "250") /* اضطراری*/
                {
                    wp.SetKeyValue("MY_FLAG", "0");
                    idrole = "CONTROLCENTER";
                }
                else
                {
                    wp.SetKeyValue("MY_FLAG", "1");
                    idrole = "WORKER";
                }
            }

            /*اگر درخواست در دفتر فنی باشد */
            // ارسال به معاونت در تاریخ 98/10/15 بنا به درخواست مهندس حسین زاده طبق صورتجلسه ارسالی غیرفعال شد
            //if (sid == "FANIC")
            //{
            //    // CUST_STAT = 0 ==> مشترک بی برق می گردد
            //    var doc = (from b in Db.EXP_EXPI_DOC join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID where b.EEDO_ID == eedoid1 select p).FirstOrDefault();
            //    var instruDoc = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedoid1 && b.CUT_STAT == "1" select b).FirstOrDefault();
            //    string onTime_DecreaseOneMinutes = instruDoc.ON_TIME;
            //    bool flagTime = false;
            //    if (onTime_DecreaseOneMinutes == "24:00")
            //    {
            //        onTime_DecreaseOneMinutes = "23:59";// چون ساعت 24 میشه 00 و باید یک روز به تاریخ اضافه بشه پس 1 دقیقه از آن کم می کنیم
            //        flagTime = true;
            //    }

            //    string sql = string.Format("select TIME_BETWEEN_U('{0}','{1}','{2}','{3}') from dual ", instruDoc.OFF_DATE, instruDoc.OFF_TIME, instruDoc.ON_DATE, onTime_DecreaseOneMinutes);
            //    string time = Db.Database.SqlQuery<string>(sql).FirstOrDefault();
            //    var val = time.Split(':');
            //    string h = val[0].ToString();
            //    string m = val[1].ToString();
            //    int minute = Convert.ToInt16(h) * 60 + Convert.ToInt16(m);
            //    if (flagTime == true)
            //    {
            //        minute = minute + 1;
            //    }

            //    if (doc != null && instruDoc != null)
            //    {
            //        bool flag = false;
            //        var instrument = (from c in Db.EXP_POST_LINE_INSTRU where c.EPIU_ID == instruDoc.EPIU_EPIU_ID select c).FirstOrDefault();

            //        // سطح ولتاژهای 400 و 230
            //        if (doc.EUNL_EUNL_ID == 1 || doc.EUNL_EUNL_ID == 62)
            //        {
            //            //int[] instruId = { 1, 2, 3, 281 };
            //            // کل پست - 1.خط - 2.ترانس قدرت - 3.راکتور - 181.باسبار
            //            /// EOFS_EOFS_ID ==> 182 : قطع تجهیز انتقال
            //            /// EOFS_EOFS_ID ==> 183 :  با خاموش مشترک
            //            /// EOFS_EOFS_ID ==> 181 : قطع تجهیزات فوق توزیع
            //            /// EOFS_EOFS_ID ==> 81 : بدون قطع
            //            if ((instruDoc.EPIU_EPIU_ID == null && (instruDoc.EOFS_EOFS_ID == 182 /*|| instruDoc.EOFS_EOFS_ID == 183)*/)) && instruDoc.CUST_STAT == "0")
            //            {
            //                // ارسال به معاونت
            //                wp.SetKeyValue("MY_FLAG", "1");
            //                idrole = "MANEGCONFIRM";
            //                flag = true;
            //            }
            //            else
            //            {
            //                if (instrument != null)
            //                {
            //                    if ((instrument.EINS_EINS_ID == 1 || instrument.EINS_EINS_ID == 2 || instrument.EINS_EINS_ID == 3 || instrument.EINS_EINS_ID == 281)
            //                        && (instruDoc.EOFS_EOFS_ID == 182 /*|| instruDoc.EOFS_EOFS_ID == 183)*/)
            //                        && instruDoc.CUST_STAT == "0")
            //                    {
            //                        // ارسال به معاونت
            //                        wp.SetKeyValue("MY_FLAG", "1");
            //                        idrole = "MANEGCONFIRM";
            //                        flag = true;
            //                    }
            //                    else
            //                    {
            //                        // ارسال به برنامه ریزی
            //                        wp.SetKeyValue("MY_FLAG", "0");
            //                        idrole = "PROGRAMER";
            //                        flag = true;
            //                    }
            //                }
            //                else
            //                {
            //                    // ارسال به برنامه ریزی
            //                    wp.SetKeyValue("MY_FLAG", "0");
            //                    idrole = "PROGRAMER";
            //                    flag = true;
            //                }
            //            }
            //        }
            //        // سطح ولتاژهای 230 و 132 و 63
            //        if (flag == false && (doc.EUNL_EUNL_ID == 62 || doc.EUNL_EUNL_ID == 63 || doc.EUNL_EUNL_ID == 161))
            //        {
            //            //int[] instruId = { 1, 2, 3, 4, 281 };
            //            if (instruDoc.EPIU_EPIU_ID == null && (instruDoc.EOFS_EOFS_ID == 182 /*|| instruDoc.EOFS_EOFS_ID == 183*/) && instruDoc.CUST_STAT == "0" && minute > 120)
            //            {
            //                // ارسال به معاونت
            //                wp.SetKeyValue("MY_FLAG", "1");
            //                idrole = "MANEGCONFIRM";
            //            }
            //            // کل پست - 1.خط - 2.ترانس قدرت - 3.راکتور - 181.باسبار - 4.خازن
            //            else
            //            {
            //                if (instrument != null)
            //                {
            //                    if (((instrument.EINS_EINS_ID == 1 && instrument.LINE_TYPE == "2") || instrument.EINS_EINS_ID == 2 || instrument.EINS_EINS_ID == 3 || instrument.EINS_EINS_ID == 4 || instrument.EINS_EINS_ID == 281)
            //                        && (instruDoc.EOFS_EOFS_ID == 182 /*|| instruDoc.EOFS_EOFS_ID == 183*/)
            //                        && instruDoc.CUST_STAT == "0"
            //                        && minute > 120
            //                        && instrument.EUNL_EUNL_ID == 201
            //                        )
            //                    {
            //                        // ارسال به معاونت
            //                        wp.SetKeyValue("MY_FLAG", "1");
            //                        idrole = "MANEGCONFIRM";
            //                    }
            //                    else
            //                    {
            //                        // ارسال به برنامه ریزی
            //                        wp.SetKeyValue("MY_FLAG", "0");
            //                        idrole = "PROGRAMER";
            //                    }
            //                }
            //                else
            //                {
            //                    // ارسال به برنامه ریزی
            //                    wp.SetKeyValue("MY_FLAG", "0");
            //                    idrole = "PROGRAMER";
            //                }
            //            }
            //        }
            //    }
            //}

            /*اگر درخواست در دفتر فنی باشد */
            if (sid == "FANIC")
            {
                // ارسال به برنامه ریزی
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "PROGRAMER";                
            }


            /*برنامه ریزی برای بایگانی ارسال نماید */
            if ((sid == "MENAGPOST" || sid == "PROGRAMER") && stat == 1 && Ersalstat == -1)
            {
                wp.SetKeyValue("MY_FLAG", "1");
                idrole = "ARCHEIVE";
            }

            /*برنامه ریزی برای ایجاد کننده درخواست ارسال نماید */
            if ((sid == "MENAGPOST" /*|| sid == "PROGRAMER"*/) && stat == 0 && Ersalstat == -1)
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "CREATOR";
            }

            if (sid == "MESSAGECENTER")
            {
                // wp.SetKeyValue("MY_FLAG", "1");
                idrole = "WORKER";
            }

            if (sid == "DISPACHMANEG")
            {
                wp.SetKeyValue("MY_FLAG", "1");
                idrole = "CONTROLCENTER";
            }

            if (sid == "PROGRAMER" && stat == 0 && Ersalstat == -1)
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "CONTROLCENTER";
            }

            if (sid == "WORKER")
            {
                // wp.SetKeyValue("MY_FLAG", "1");
                idrole = "MENAGPOST";
            }

            string bodymessage = string.Empty;
            string instrdoc = string.Empty;
            string instn = string.Empty;

            string postn = (from b in Db.EXP_POST_LINE
                            join c in Db.EXP_EXPI_DOC on b.EPOL_ID equals c.EPOL_EPOL_ID
                            where c.EEDO_ID == eedoid1
                            select b.EPOL_NAME).FirstOrDefault().ToString();

            var w = (from b in Db.EXP_POST_LINE_INSTRU
                     join c in Db.EXP_EDOC_INSTRU on b.EPIU_ID equals c.EPIU_EPIU_ID
                     where c.EEDO_EEDO_ID == eedoid1 && c.CUT_STAT == "1" && c.JDTY_JDTY_ID == 91
                     select b);

            var document = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid1 select b).FirstOrDefault();

            if (w.FirstOrDefault() != null)
            {
                instn = w.FirstOrDefault().CODE_NAME.ToString();
                string insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();

                if (insttype == "1")
                    instn = " خط " + instn;
                else
                    instn = " تجهیز " + instn;
                instrdoc = instn + " " + instrdoc;
            }

            /*بدست اوردن اطلاعات برای مسچ که در کارتابل می خواهد نمایش داده شود */
            int iddfrom = 1;
            string smessage = string.Empty;
            if (!string.IsNullOrEmpty(Request.Form["idform"]))
            {
                iddfrom = Convert.ToInt32(Request.Form["idform"].ToString());
            }

            if (iddfrom == 1)
            {
                smessage = " درخواست " + "به شماره" + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
            }

            if (iddfrom == 2)
            {
                smessage = " درخواست اظطراری " + "به شماره" + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
            }

            if (iddfrom == 3)
            {
                smessage = " درخواست خدماتی / فنی / تاسیساتی / بازديدها " + "به شماره" + document.DOC_NUMB + " در تاریخ " + document.EEDO_DATE + " مربوط به " + postn + " و " + instrdoc + " میباشد ";
            }

            string doc_name = document.DOC_NUMB;
            wp.SetKeyValue("SUBJECT", doc_name);
            wp.SetKeyValue("BODY", smessage.Trim());
            wp.Dispose();

            string upCommand = string.Format("UPDATE WF_ITEM_ATTRIBUTE_VALUES SET TEXT_VALUE = '{0}' WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^{1}' AND NAME = 'BODY'", smessage.Trim(), eedoid1);
            Db.Database.ExecuteSqlCommand(upCommand);
            upCommand = string.Format("UPDATE WF_NOTIFICATION_ATTRIBUTES SET TEXT_VALUE = '{0}' WHERE NOTIFICATION_ID = {1} AND NAME = 'BODY'", smessage, notId);
            Db.Database.ExecuteSqlCommand(upCommand);
            Db.SaveChanges();

            /*افراد وضعیت بعدی مشخص شود */
            AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult RejectRequest(int notId, string sid, string eedoid, string person /*,  int stat, int Ersalstat*/)
        {
            int eedoid1 = Convert.ToInt32(eedoid);
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            string idrole = string.Empty;

            if (sid == "MANEGERCR" || sid == "MENAGPOST" || sid == "PROGRAMER") // برنامه ریزی دیسپاچینگ - مسئول پست - مدیر درخواست دهنده
            {
                var user = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid1 select b.CRET_BY).FirstOrDefault();
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "CREATOR"; // درخواست دهنده
            }
            else if (sid == "FANIC") // دفتر فنی
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "MANEGERCR"; // مدیر درخواست دهنده                
            }
            else if (sid == "MANEGCONFIRM") // بررسی معاونت
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "FANIC"; // دفتر فنی                
            }
            else if (sid == "DISPACHMANEG") // مدیر دیسپاچینگ
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "PROGRAMER"; // برنامه ریزی دیسپاچینگ
            }
            else if (sid == "CONTROLCENTER") // مرکز کنترل
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "DISPACHMANEG"; // مدیر دیسپاچینگ
            }
            else if (sid == "WORKER") // اجرا کننده
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "CONTROLCENTER"; // مرکز کنترل
            }
            else if (sid == "ENTEGHALC") // امور انتقال
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "MANEGERCR"; // مدیر درخواست دهنده
            }
            else if (sid == "MESSAGECENTER") // مرکز پیام
            {
                wp.SetKeyValue("MY_FLAG", "0");
                idrole = "ENTEGHALC"; // امور انتقال
            }

            /*افراد وضعیت بعدی مشخص شود */
            AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult USERCREATEREQUEST()
        {
            string idrole = "CREATOR";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_REQU");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }

        /*براساس ردیف کارتابل در کارتابل هماهنگی درخواست مشخص می کند در کدام وظیفه هماهنگی فرم قرار دارد*/
        public JsonResult Approvesendreqinreq(string eedoid, int notId)
        {
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            string cm = string.Empty;
            /*پیدا کردن مقدار وظیفه هماهنگی */
            cm = Db.Database.SqlQuery<string>("select ITEM_KEY from WF_NOTE_V where NOT_ID = " + notId).FirstOrDefault();
            var string1 = cm.Split('^');
            string s1 = string1[1].ToString();
            var string2 = s1.Split('-');
            string Ersalstat = string2[1].ToString();
            string idrole = string.Empty;
            /*براساس مقدار مشخص شده تشخیص این که برای کجا ارسال شود */
            if (Ersalstat == "0")
            {
                wp.SetKeyValue("MY_FLAG", "DISKERMAN");
                idrole = "DISKERMAN";
            }
            else if (Ersalstat == "1")
            {
                wp.SetKeyValue("MY_FLAG", "DISTRBUTH");
                idrole = "DISHORMOZGAN";
            }
            else if (Ersalstat == "2")
            {
                wp.SetKeyValue("MY_FLAG", "DISTRBUTEB");
                idrole = "DISBANDAR";
            }
            else if (Ersalstat == "3")
            {
                wp.SetKeyValue("MY_FLAG", "SECCONTROL");
                idrole = "SECCONTROL";
            }
            else if (Ersalstat == "4")
            {
                wp.SetKeyValue("MY_FLAG", "FIXORGAN");
                idrole = "FIXORGAN";
            }
            else if (Ersalstat == "5")
            {
                wp.SetKeyValue("MY_FLAG", "LINEORGAN");
                idrole = "LINEORGAN";
            }
            else if (Ersalstat == "6")
            {
                wp.SetKeyValue("MY_FLAG", "ENTGHAL");
                idrole = "ENTEGHAL";
            }
            else if (Ersalstat == "7")
            {
                wp.SetKeyValue("MY_FLAG", "DIAGRAM");
                idrole = "DIAGRAM";
            }
            /*کاربران فرم های هماهنگی در ان وظیفه که مشخص شده است */
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_REHA");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }

        /*با این اکشن براساس ردیفی که کاربر انتخاب میکند یستم مشخص می کند برای کدام هماهنگ کننده ارسال می کند */
        public JsonResult Approvesendreq(string eedoid, int Ersalstat, int notId)
        {
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);

            string idrole = string.Empty;
            if (Ersalstat == 0)
            {
                wp.SetKeyValue("MY_FLAG", "DISKERMAN");
                idrole = "DISKERMAN";
            }
            else if (Ersalstat == 1)
            {
                wp.SetKeyValue("MY_FLAG", "DISTRBUTH");
                idrole = "DISHORMOZGAN";
            }
            else if (Ersalstat == 2)
            {
                wp.SetKeyValue("MY_FLAG", "DISTRBUTEB");
                idrole = "DISBANDAR";
            }
            else if (Ersalstat == 3)
            {
                wp.SetKeyValue("MY_FLAG", "SECCONTROL");
                idrole = "SECCONTROL";
            }
            else if (Ersalstat == 4)
            {
                wp.SetKeyValue("MY_FLAG", "FIXORGAN");
                idrole = "FIXORGAN";
            }
            else if (Ersalstat == 5)
            {
                wp.SetKeyValue("MY_FLAG", "LINEORGAN");
                idrole = "LINEORGAN";
            }
            else if (Ersalstat == 6)
            {
                wp.SetKeyValue("MY_FLAG", "ENTGHAL");
                idrole = "ENTEGHAL";
            }
            else if (Ersalstat == 7)
            {
                wp.SetKeyValue("MY_FLAG", "DIAGRAM");
                idrole = "DIAGRAM";
            }

            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_REHA");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }

        //[EntityAuthorize("EXP_EDOC_INSTRU>select|SEC_JOB_TYPE_DOC>select")]
        public JsonResult Checkconfirm(int notId, int? id, int? eedoid, string curent)
        {
            decimal ei = Convert.ToDecimal(eedoid.ToString());
            /*چک بررسی اطلاعات */
            int countq = (from b in Db.EXP_EDOC_INSTRU
                          join k in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals k.JDTY_ID
                          where b.EEDO_EEDO_ID == ei && k.ACTIV_NAME == curent
                          select b).Count();

            if (countq == 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات برای ارسال بررسی نشده است " }.ToJson();
            }
            else
            {
                /*چک زمان اجرا برای درخواست های که اجرا وجوددارد*/
                var q = from b in Db.EXP_EDOC_INSTRU
                        join k in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals k.JDTY_ID
                        where b.EEDO_EEDO_ID == ei && k.ACTIV_NAME == curent
                        select b;

                foreach (EXP_EDOC_INSTRU qe in q)
                {
                    if ((qe.OFF_TIME == null || qe.ON_TIME == null) && qe.EDIN_STIN == "0")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان احرا برنامه مشخص نیست " }.ToJson();
                    }
                    else
                    {
                        /*در صورت لغو برنامه چک این که نحوه لغو مشخص است یا خیر */
                        if (qe.EREJ_EREJ_ID == null && qe.EDIN_STIN == "1")
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "نحوه لغو برنامه مشخص نیست  " }.ToJson();
                        }
                        else if (qe.EDIN_STIN == null)
                        {
                            /*چک وضعیت اجرا برنامه */
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "وضعیت اجرا برنامه مشخص نیست" }.ToJson();
                        }
                    }
                }

                /*ارسال اطلاعات در صورت نداشتن مشکل چک های بالا */
                if (id == null)
                {
                    id = 1;
                }

                var requestCreatorUserName = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b.CRET_BY).FirstOrDefault().ToString();
                //var requestCreatorUserID = (from b in Db.EXP_USER_V where b.ORCL_NAME == requestCreatorUserName && b.EURP_ACTV == 1 select b.ROW_NO).FirstOrDefault();
                var requestCreatorUserInfo = (from b in Db.EXP_USER_V //.AsEnumerable()
                                              //where b.ROW_NO == requestCreatorUserID
                                              where b.ORCL_NAME == requestCreatorUserName && b.EURP_ACTV == 1
                                              select new
                                              {
                                                  b.ROW_NO,
                                                  b.USER_NAME,
                                                  //b.ORCL_NAME,
                                                  b.FIRS_NAME,
                                                  b.FAML_NAME,
                                                  completeName = b.FIRS_NAME + " " + b.FAML_NAME
                                              }).Distinct().ToList();

                return this.Json(new { Success = true, data = requestCreatorUserInfo }, JsonRequestBehavior.AllowGet);
            }
        }

        /*این اکشن برای زمان ارسال اطلاعات از هماهنگی فلگ تایید ردیف هماهنگی را ایجاد می کند 
         * که این ردیف ها در هماهنگی برای برنامه ریزی ارسال شده است */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select,update|SEC_JOB_TYPE_DOC>select")]
        public JsonResult confinststat(int? eedoid, string curent)
        {
            decimal ei = Convert.ToDecimal(eedoid.ToString());
            var q = from b in Db.EXP_EDOC_INSTRU
                    join k in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals k.JDTY_ID
                    where b.EEDO_EEDO_ID == ei && k.ACTIV_NAME == curent && b.ATTG_STATT == null
                    select b;

            foreach (EXP_EDOC_INSTRU qe in q)
            {
                qe.ATTG_STATT = "1";
            }

            Db.SaveChanges();
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ارسال شد.", 1) }.ToJson();
        }

        public JsonResult setdayweek(string date)
        {
            string sdate = string.Empty;
            Equipment.Codes.Globalization.PersianDateTime dateper = new Equipment.Codes.Globalization.PersianDateTime(date);
            sdate = dateper.GetDayOfWeek().ToString();
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ارسال شد.", 1), CoustomData = sdate }.ToJson();
        }

        /*این اکشن در صورتیکه دوباره برنامه ریزی بخواهد اطلاعات را برای هماهنگی بفرستد
         * ایتم های ان را مشخص می کند و ردیف کارتابل هماهنگ کننده را پیدا می کند وبرای ارسال برای هماهنگ کننده برمی گرداند */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select,update|SEC_JOB_TYPE_DOC>select")]
        public JsonResult findnotidsend(string eedoid, string eedin, int JDTY)
        {
            int edi = Convert.ToInt32(eedin);
            int id = Convert.ToInt32(eedoid);
            /*مشخص شدن ردیف که از کدام هماهنگ کننده امده است */
            string sq = (from b in Db.EXP_EDOC_INSTRU
                         join j in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals j.JDTY_ID
                         where b.EDIN_ID == edi
                         select j.ACTIV_NAME).FirstOrDefault().ToString();

            int Ersalstat = -1;
            if (sq == "DISKERMAN")
                Ersalstat = 0;
            if (sq == "DISHORMOZGAN")
                Ersalstat = 1;
            if (sq == "DISBANDAR")
                Ersalstat = 2;
            if (sq == "SECCONTROL")
                Ersalstat = 3;
            if (sq == "FIXORGAN")
                Ersalstat = 4;
            if (sq == "LINEORGAN")
                Ersalstat = 5;
            if (sq == "ENTEGHAL")
                Ersalstat = 6;
            if (sq == "DIAGRAM")
                Ersalstat = 7;

            /*پیدا کردن ردیف کارتابل هماهنگ کننده */
            string ci = "FLW_REHA.PFLW_REHA^" + eedoid + "-" + Ersalstat;
            int cm = 0;
            cm = Db.Database.SqlQuery<int>("select max(NOT_ID) from WF_NOTE_V where ITEM_KEY='" + ci.ToString() + "' and STAT='OPEN'").FirstOrDefault();
            int not_id = cm;
            var q = (from b in Db.EXP_EDOC_INSTRU join j in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals j.JDTY_ID where b.EEDO_EEDO_ID == id && j.ACTIV_NAME == sq select b);
            foreach (EXP_EDOC_INSTRU iq in q)
            {
                iq.ATTG_STATT = "2";
                Db.SaveChanges();
            }

            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ارسال شد.", 1), CoustomData = not_id + "%" + Ersalstat }.ToJson();
        }

        /*ارسال اطلاعات برای هماهنگ کننده */
        //[EntityAuthorize("EXP_EXPI_DOC>select|EXP_TYPE_DOC>select|EXP_POST_LINE>select")]
        public JsonResult SendRequestfh(string eedoid, int Ersalstat)
        {
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
            int etdo_id = 183;
            decimal eedoidi = Convert.ToDecimal(eedoid);
            var q = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoidi select b).FirstOrDefault();
            int epol = Convert.ToInt32(q.EPOL_EPOL_ID.ToString());
            string doc_name = "هماهنگی";
            string postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epol select b.EPOL_NAME).FirstOrDefault().ToString();
            string smessage = " درخواست " + "به شماره" + q.DOC_NUMB + " در تاریخ " + q.EEDO_DATE + " مربوط به پست" + postn + " میباشد ";
            string ci = "FLW_REHA.PFLW_REHA^" + eedoid + "-" + Ersalstat;
            int cm = 0;
            cm = Db.Database.SqlQuery<int>("select count(NOT_ID) from WF_NOTE_V where ITEM_KEY='" + ci.ToString() + "'").FirstOrDefault();
            if (cm > 0)
            {
                if (cm == 1)
                {
                    /*چک ارسال ها */
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] قبلا ارسال شده است", 1), CoustomData = -1 }.ToJson();
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] قبلا ارسال شده است", 1), CoustomData = -2 }.ToJson();
                }
            }
            else
            {
                //  eedoid = eedoid + Ersalstat;
                /*ارسال اطلاعات */
                wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, smessage, etdo_id, eedoid, Ersalstat);
                int not_id = wp.NoteId;
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ارسال شد.", 1), CoustomData = not_id }.ToJson();
            }
        }

        /*این اکشن موجب می شود که یک درخواست جدید با تاریخ جدید که کاربر مشخص کرده ایجاد شده و برای درخواست دهنده ارسال شود */
        //[EntityAuthorize("EXP_EXPI_DOC>select,insert|EXP_EDOC_INSTRU>select,insert|EXP_POST_LINE>select|EXP_RELATION_DOC>select,insert")]
        public ActionResult Insertrepdate(EXP_EXPI_DOC objecttemp)
        {
            if (Request.Form["ofdaterep"] != "" && Request.Form["ofdaterep"] != null)
            {
                string dateoff = Request.Form["ofdaterep"].ToString();
                int id = Convert.ToInt32(Session["eedo_id"].ToString());
                var qetdo = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();
                string eedonumb = qetdo.DOC_NUMB;
                string userersal = qetdo.CRET_BY.ToString();
                int eeto_id = qetdo.ETDO_ETDO_ID.Value;
                objecttemp = qetdo;
                //objecttemp.DOC_NUMB = m.ToString();
                objecttemp.DOC_NUMB = "-1000";
                Db.EXP_EXPI_DOC.Add(objecttemp);
                Db.SaveChanges();
                objecttemp.DOC_NUMB = "R" + objecttemp.EEDO_ID.ToString();
                //objecttemp.DOC_NUMB = objecttemp.EEDO_ID.ToString();
                Db.SaveChanges();

                /*ثبت اطلاعات درخواست جدید*/
                decimal eedoidnew = objecttemp.EEDO_ID;
                var qinst = (from b in Db.EXP_EDOC_INSTRU join c in Db.SEC_JOB_TYPE_DOC on b.JDTY_JDTY_ID equals c.JDTY_ID where b.EEDO_EEDO_ID == id && c.ACTIV_NAME == "CREATOR" select b);
                foreach (EXP_EDOC_INSTRU iqinst in qinst)
                {
                    iqinst.OFF_DATE = dateoff;
                    iqinst.ON_DATE = dateoff;
                    iqinst.EEDO_EEDO_ID = eedoidnew;
                    Db.EXP_EDOC_INSTRU.Add(iqinst);
                }

                Db.SaveChanges();
                /*ثبت اطلاعات ردیف تجهیزات */
                var qrelation = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == id select b);
                foreach (EXP_RELATION_DOC irelation in qrelation)
                {
                    irelation.EEDO_EEDO_ID = eedoidnew;
                    Db.EXP_RELATION_DOC.Add(irelation);
                }

                Db.SaveChanges();
                /*ثبت ارتباط بین درخواست ها */
                var rel = new EXP_RELATION_DOC();
                rel.EEDO_EEDO_ID = eedoidnew;
                rel.EEDO_EEDO_ID_R = id;
                Db.EXP_RELATION_DOC.Add(rel);
                Db.SaveChanges();

                string postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == objecttemp.EPOL_EPOL_ID select b.EPOL_NAME).FirstOrDefault().ToString();
                string doc_name = "درخواست تجدید شده درخواست " + eedonumb;
                string smessage = " درخواست " + "به شماره" + objecttemp.DOC_NUMB + " در تاریخ " + objecttemp.EEDO_DATE + " مربوط به " + postn + " میباشد ";

                /* ایجاد درخواست در کارتابل ایجاد کننده درخواست  */
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                wp.StartProcess(userersal, new string[] { userersal }, doc_name, smessage, 21, eedoidnew);
                int not_id = wp.NoteId;
                Session["eedotools"] = objecttemp.EEDO_ID;
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = objecttemp.EEDO_ID }.ToJson();
            }
            else
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات برای ثبت کامل نیست" }.ToJson();
            }
        }

        /*این اکشن فرم لغو اطلاعات رانمایش می دهد */
        public ActionResult Add_Repdate(int? id, int? NOTID)
        {
            Session["NOTID"] = NOTID;
            Session["eedo_id"] = id;

            if (id != 0)
                return View();
            else
                return View("ErrorNotFound");
        }

        /*ویو کارتابلی لوازم یدکی را نمایش می دهد */
        //[EntityAuthorize("EXP_INSTRUMENT>select|EXP_TYPE_EQUIP>select|STR_GOODS>select|EXP_EXPI_DOC>select|EXP_RELATION_DOC>select")]
        public ActionResult viewneedtools(string id, string notId)
        {
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.typeinstrument = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC });
            ViewBag.good = Db.STR_GOODS.Select(c => new { c.GOOD_ID, c.GOOD_DESC });
            ViewBag.exp_doc = Db.EXP_EXPI_DOC;
            EXP_EXPI_DOC cm = new EXP_EXPI_DOC();
            cm = Db.Database.SqlQuery<EXP_EXPI_DOC>("select * from EXP_EXPI_DOC where " + id).FirstOrDefault();

            decimal did = cm.EEDO_ID;
            string sqeedo = (from b in Db.EXP_RELATION_DOC
                             join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals c.EEDO_ID
                             where b.EEDO_EEDO_ID_R == did && c.ETDO_ETDO_ID == 2
                             select b.EEDO_EEDO_ID).FirstOrDefault().ToString();

            Session["eedo_id"] = sqeedo;
            Session["eedotools"] = did;
            Session["notid"] = notId;
            return View("Add_needtools", cm);
        }

        //[EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_bay(int? inst, int? Unitvolt1, int? POSTINSTl, int? instt, int? instta)
        {
            if (instt == 27 || instt == 240 || instt == 379)
            {
                var query = (from i in Db.EXP_INSTRUMENT
                             where i.EINS_EINS_ID == instt
                             select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                return Json(query, JsonRequestBehavior.AllowGet);
            }
            else

                if (((instta == 380 || instta == 376 || instta == 331) && instt == 245) || ((instta == 377 || instta == 25) && instt == 378))
                {
                    var query = (from i in Db.EXP_INSTRUMENT
                                 where i.EINS_EINS_ID == instta
                                 select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                    return Json(query, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    if (inst == 0)
                    {
                        var query1 = from b in Db.EXP_CORE_BAY
                                     join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                                     where b.EPIU_EPIU_ID == POSTINSTl &&
                                           ((b.EUNL_EUNL_ID == Unitvolt1))// && instt!=4) || (instt==4))
                                           && b.HIST_DATE == null
                                     select d;

                        var q = from b in query1
                                join g in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals g.EPIU_ID
                                select g;

                        var query = (from k in q
                                     join i in Db.EXP_INSTRUMENT on k.EINS_EINS_ID equals i.EINS_ID
                                     where (i.ETYI_ETYI_ID == 1 || i.ETYI_ETYI_ID == 181)
                                     select new { i.EINS_ID, i.EINS_DESC }).Distinct();

                        return Json(query, JsonRequestBehavior.AllowGet);
                    }
                    else if (inst == 1)
                    {
                        var query1 = from b in Db.EXP_CORE_BAY
                                     join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                                     where b.EPIU_EPIU_ID == POSTINSTl &&
                                           ((b.EUNL_EUNL_ID == Unitvolt1)) //*&& instt!=4) || (instt==4)) 
                                           && b.HIST_DATE == null
                                     select d;

                        var q = from b in query1
                                join g in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals g.EPIU_ID
                                select g;

                        var query = (from k in q
                                     join i in Db.EXP_INSTRUMENT on k.EINS_EINS_ID equals i.EINS_ID
                                     where (i.ETYI_ETYI_ID == 184)
                                     select new { i.EINS_ID, i.EINS_DESC }).Distinct();

                        return Json(query, JsonRequestBehavior.AllowGet);
                    }

                    else if (inst == 2)
                    {
                        var query1 = from b in Db.EXP_CORE_BAY
                                     join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                                     where b.EPIU_EPIU_ID == POSTINSTl &&
                                           ((b.EUNL_EUNL_ID == Unitvolt1))// && instt!=4) || (instt==4))
                                           && b.HIST_DATE == null
                                     select d;

                        var q = from b in query1
                                join g in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals g.EPIU_ID
                                select g;

                        var query = (from k in q
                                     join i in Db.EXP_INSTRUMENT on k.EINS_EINS_ID equals i.EINS_ID
                                     where (i.ETYI_ETYI_ID == 185)
                                     select new { i.EINS_ID, i.EINS_DESC }).Distinct();

                        return Json(query, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var query1 = from b in Db.EXP_CORE_BAY
                                     join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                                     where b.EPIU_EPIU_ID == POSTINSTl
                                           && ((b.EUNL_EUNL_ID == Unitvolt1))//&& instt!=4) || (instt==4))
                                           && b.HIST_DATE == null
                                     select d;

                        var q = from b in query1
                                join g in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals g.EPIU_ID
                                select g;

                        var query = (from k in q
                                     join i in Db.EXP_INSTRUMENT on k.EINS_EINS_ID equals i.EINS_ID
                                     where (i.ETYI_ETYI_ID == 1 || i.ETYI_ETYI_ID == 181)
                                     select new { i.EINS_ID, i.EINS_DESC }).Distinct();

                        return Json(query, JsonRequestBehavior.AllowGet);
                    }
                }
        }

        /* ویو مربوط به لوازم یدکی را نمایش می دهد */
        //[EntityAuthorize("EXP_INSTRUMENT>select|EXP_TYPE_EQUIP>select|STR_GOODS>select|EXP_EXPI_DOC>select|EXP_RELATION_DOC>select")]
        public ActionResult Add_needtools(int? id)
        {
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.typeinstrument = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC });
            ViewBag.good = Db.STR_GOODS.Select(c => new { c.GOOD_ID, c.GOOD_DESC });
            Session["eedo_id"] = id;
            Session["eedotools"] = null;

            if (id != 0)
            {/*برای این درخواست لوازم یدکی تعریف شده است */
                int counti = (from b in Db.EXP_RELATION_DOC
                              join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                              where b.EEDO_EEDO_ID == id && k.ETDO_ETDO_ID == 164
                              select k).Count();

                if (counti != 0)
                {
                    /*لوازم یدکی برای این درخواست تعریف شه است که ردیف لوازم یدکی در سشن زیر قرار می 
                    گیرد و ویو لوازم یدکی صدا زده می شود */
                    EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_RELATION_DOC
                                           join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                                           where b.EEDO_EEDO_ID == id && k.ETDO_ETDO_ID == 164
                                           select k).FirstOrDefault();

                    Session["eedotools"] = EXPNEW.EEDO_ID.ToString();
                    return View(EXPNEW);
                }
                else
                    /*برای این درخواست هنوز لوازم یدکی ثبت نشده است پس ویو خالی ایجاد می شود */
                    return View();
            }
            else
            {
                return View("ErrorNotFound");
            }
        }

        public JsonResult Userneedtools()
        {
            string idrole = "COFANI";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_TOOL");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }

        /*برای ثبت اطلاعات لوازم یدکی از این اکشن استفاده می شود
         * همچنین در صورتیکه بعد از ثبت اولیه نیاز به تغییرات باشد از همین اکشن استفاده می شود . */
        //[EntityAuthorize("EXP_TYPE_DOC>select|EXP_EXPI_DOC>select,insert,update|EXP_RELATION_DOC>insert")]
        public ActionResult Inserttools(EXP_EXPI_DOC objecttemp)
        {
            int id = Convert.ToInt32(Session["eedo_id"].ToString());
            string qetdo = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b.ETDO_ETDO_ID).FirstOrDefault().ToString();

            int idd = 0;

            /*در صورتیکه لوازم یدکی قبلا ثبت شده باشد در idd مقدارش قرار می گیرد */
            if (Session["eedotools"] != null)
            {
                idd = Convert.ToInt32(Session["eedotools"].ToString());
            }

            if (idd == 0)
            {
                /* لوازم یدکی ردیف مدرک ان 164 می باشد */
                objecttemp.ETDO_ETDO_ID = 164;
                Db.EXP_EXPI_DOC.Add(objecttemp);
                Db.SaveChanges();

                /*ثبت ارتباط لوازم یدکی با دیفکت */
                var rel = new EXP_RELATION_DOC();
                rel.EEDO_EEDO_ID = id;
                rel.EEDO_EEDO_ID_R = objecttemp.EEDO_ID;
                Db.EXP_RELATION_DOC.Add(rel);
                Db.SaveChanges();

                string typedoc = string.Empty;
                if (qetdo == "2")
                    typedoc = "دیفکت به شماره " + id;
                if (qetdo == "21")
                    typedoc = "درخواست انجام کار به شماره " + id;

                string smessage = " فرم لوازم یدکی " + "به شماره" + objecttemp.DOC_NUMB + " مربوط به فرم " + typedoc + " میباشد ";
                //string doc_name = (from b in Db.EXP_TYPE_DOC where b.ETDO_ID == 164 select b.ETDO_DESC).FirstOrDefault();
                string doc_name = "درخواست لوازم یدکی";
                /*ایجاد ردیف کارتابل */
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, smessage, 164, objecttemp.EEDO_ID);
                int not_id = wp.NoteId;
                Session["eedotools"] = objecttemp.EEDO_ID;
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = not_id.ToString() + "%" + objecttemp.EEDO_ID }.ToJson();
            }
            else
            {
                /*ثبت اطلاعات لوازم یدکی در صورتیکه قبلا ایجاد شده ایست */
                var q = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == idd select b).FirstOrDefault();
                q.EEDO_DESC = objecttemp.EEDO_DESC;
                q.EEDO_DATE = objecttemp.EEDO_DATE;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", objecttemp.DOC_NUMB) }.ToJson();
            }
        }

        /*ایجاد ردیف لوازم یدکی */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select")]
        public ActionResult tool_New(int? id)
        {
            if (id == 0)
            {
                Session["tollinst"] = null;
                return View();
            }
            else
            {
                string q = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b.EEDO_EEDO_ID).FirstOrDefault().ToString();
                Session["tollinst"] = id;//Convert.ToInt32(q);
                EXP_EDOC_INSTRU EXPNEW = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b).FirstOrDefault();
                return View(EXPNEW);
            }
        }

        /*نوع تجهیزات را نمایش می دهد*/
        //[EntityAuthorize("EXP_INSTRUMENT>select")]
        public ActionResult EINS_EINS_ID_R()
        {
            var query = (from b in Db.EXP_INSTRUMENT
                         orderby b.EINS_DESC
                         where b.EINS_EINS_ID != null
                         select new { b.EINS_ID, b.EINS_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*کالاهای انبار را نمایش می دهد*/
        //[EntityAuthorize("STR_GOODS>select")]
        public ActionResult SGOD_GOOD_ID_R()
        {
            var query = (from b in Db.STR_GOODS
                         where b.GOOD_CODE_DESC != "M"
                         select new { b.GOOD_ID, b.GOOD_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*با این اکشن اطلاعات مربوط ردیف لوازم یدکی ثبت می شود که این اطلاعات شامل 
       * نوع تجهیز تیپ ان و کد کالای انباری ان و تعدادی که مورد نیاز است می باشد */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select,update")]
        public ActionResult Inserttoolsgood(EXP_EDOC_INSTRU objecttemp)
        {
            int id = Convert.ToInt32(Session["eedotools"].ToString());
            int idd = 0;

            /*در صورتیکه ردیف لوازم یدکی هنوز ایجاد نشده است و برای اولین بار است */
            if (Session["tollinst"] != null)
            {
                idd = Convert.ToInt32(Session["tollinst"].ToString());
            }

            if (idd == 0)
            {
                objecttemp.ETDO_ETDO_ID = 164;
                objecttemp.EEDO_EEDO_ID = id;
                Db.EXP_EDOC_INSTRU.Add(objecttemp);
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.EDIN_ID) }.ToJson();
            }
            else
            {
                /*ثبت تغییرات اطلاعات ردیف لوازم یدکی */
                var q = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == idd select b).FirstOrDefault();
                if (objecttemp.SGOD_GOOD_ID != null)
                {
                    q.SGOD_GOOD_ID = objecttemp.SGOD_GOOD_ID;
                }
                if (objecttemp.ETEX_ETEX_ID != null)
                {
                    q.ETEX_ETEX_ID = objecttemp.ETEX_ETEX_ID;
                }
                if (objecttemp.EINS_EINS_ID != null)
                {
                    q.EINS_EINS_ID = objecttemp.EINS_EINS_ID;
                }

                q.CONT_FUN = objecttemp.CONT_FUN;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", objecttemp.EDIN_ID) }.ToJson();
            }
        }

        /*نمایش ردیف لوازم یدکی دیفکت در گرید مورد نظر با این اکشن انجام میشود */
        //[EntityAuthorize("EXP_EDOC_INSTRU>select")]
        public ActionResult Get_needtool([DataSourceRequest] DataSourceRequest request, int? eedo_id)
        {
            var query = from p in Db.EXP_EDOC_INSTRU.OrderByDescending(b => b.EDIN_ID)
                        where (p.EEDO_EEDO_ID == eedo_id && eedo_id.HasValue)
                        select new
                        {
                            p.EDIN_ID,
                            p.EINS_EINS_ID,
                            p.SGOD_GOOD_ID,
                            p.ETEX_ETEX_ID,
                            p.CONT_FUN
                        };
            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult ReadContractor(/*int? epol,*/ int? eana)
        {
            var query = (from b in Db.SEC_USER_TYPE_POST
                         join c in Db.CNT_CONTRACTOR on b.CCOR_CNOR_ID equals c.CNOR_ID
                         where b.EANA_EANA_ROW == eana && b.EURP_ACTV == 1 // یوزرهای فعال هستند
                         orderby c.COMP_NAME
                         select new
                         {
                             c.CNOR_ID,
                             c.ECON_CODE,
                             c.CNOR_TYPE,
                             c.COMP_NAME
                         }).Distinct();
            return Json(query.ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult ReadContractor2()
        {
            var query = (from b in Db.EXP_INST_COMP select new { b.EICO_ID, b.COMP_NAME }).OrderBy(b => b.COMP_NAME);
            return Json(query.ToList(), JsonRequestBehavior.AllowGet);
        }

        public JsonResult sendcenter(int notId, int? id, int? eedoid, int? docType, bool needToArchive = false)
        {
            var chekProgram = (from b in Db.EXP_EXPI_DOC
                               join p in Db.EXP_PFUNCTION on b.EFUN_EFUN_ID equals p.EFUN_ID
                               join t in Db.EXP_PROGRAM on p.EPRO_EPRO_ID equals t.EPRO_ID
                               where b.EEDO_ID == eedoid
                               select t.EPRO_ID).FirstOrDefault();

            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            string idrole = "";

            if (id == null)
            {
                id = 1;
            }

            if (docType == 101 && needToArchive == false) // برنامه زمانبندی
            {
                // ارسال به برنامه ریزی
                wp.SetKeyValue("MY_FLAG", "2");
                idrole = "PROGRAMER";
                AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);
                wp.Dispose();
                return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
            }
            else if (needToArchive)
            {
                // بایگانی
                wp.SetKeyValue("MY_FLAG", "3");
                idrole = "ARCHEIVE";
                AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);
                wp.Dispose();
                return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                if (chekProgram == 250)
                {
                    wp.SetKeyValue("MY_FLAG", "0");
                    idrole = "CONTROLCENTER";
                    AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);
                    wp.Dispose();
                    return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
                }
                if (chekProgram == 321)
                {
                    wp.SetKeyValue("MY_FLAG", "4");
                    idrole = "MENAGORGAN";
                    var OrganManager = (from expi in Db.EXP_EXPI_DOC
                                        join post in Db.EXP_POST_LINE on expi.EPOL_EPOL_ID equals post.EPOL_ID
                                        join analyzor in Db.EXP_ANALYZOR_EVENT on post.EANA_EANA_ROW equals analyzor.EANA_ROW
                                        join sec in Db.SEC_USER_TYPE_POST on analyzor.EANA_ROW equals sec.EANA_EANA_ROW
                                        join user in Db.EXP_USER_V on sec.EURP_ID equals user.EURP_ID
                                        where expi.EEDO_ID == eedoid && post.EPOL_TYPE == "0" && user.EURP_TYPE == 0 && user.EURP_ACTV == 1
                                        select new
                                        {
                                            user.ROW_NO,
                                            user.USER_NAME,
                                            user.USER_PASS,
                                            user.ORCL_NAME,
                                            user.FIRS_NAME,
                                            user.FAML_NAME
                                        }).ToList();

                    wp.Dispose();
                    return this.Json(new { Success = true, data = OrganManager }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    wp.SetKeyValue("MY_FLAG", "1");
                    idrole = "MANEGERCR";
                    var persons = (from c in Db.EXP_USER_V
                                   where c.EANA_EANA_ROW == id && c.EURP_TYPE == 0 && c.EURP_ACTV == 1
                                   select new
                                   {
                                       c.ROW_NO,
                                       c.USER_NAME,
                                       c.USER_PASS,
                                       c.ORCL_NAME,
                                       c.FIRS_NAME,
                                       c.FAML_NAME
                                   }).ToList();
                    wp.Dispose();
                    return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public JsonResult sendcenter2(int notId, int? id, int? eedoid, string eedotype)
        {
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            wp.SetKeyValue("MY_FLAG", "0");
            wp.Dispose();
            string idrole = "WORKER";

            if (id == null)
            {
                id = 1;
            }

            var supid = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "2" select b.EURP_EURP_ID).FirstOrDefault(); // سرپرست گروه
            var sdvar1 = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "3" select b.EURP_EURP_ID).FirstOrDefault(); // ناظر
            var sup_Janeshin = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "5" select b.EURP_EURP_ID).FirstOrDefault(); // جانشین سرپرست گروه
            var sdvar_Janeshin = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == eedoid && b.POSI_TYEP == "6" select b.EURP_EURP_ID).FirstOrDefault(); // جانشین ناظر

            if (eedotype == "0" && supid.HasValue && supid != null) // برق منطقه ای - باید به سرپرست گروه ارسال شود
            {
                var persons = (from c in Db.EXP_USER_V
                               where c.EURP_ID == supid || c.EURP_ID == sup_Janeshin
                               select new
                               {
                                   c.ROW_NO,
                                   c.USER_NAME,
                                   c.USER_PASS,
                                   c.ORCL_NAME,
                                   c.FIRS_NAME,
                                   c.FAML_NAME
                               }).ToList();

                return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
            }
            else if (eedotype == "1" && sdvar1.HasValue && sdvar1 != null) // پیمانکار - باید به ناظر ارسال شود
            {
                var persons = (from c in Db.EXP_USER_V
                               where c.EURP_ID == sdvar1 || c.EURP_ID == sdvar_Janeshin
                               select new
                               {
                                   c.ROW_NO,
                                   c.USER_NAME,
                                   c.USER_PASS,
                                   c.ORCL_NAME,
                                   c.FIRS_NAME,
                                   c.FAML_NAME
                               }).ToList();

                return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var persons = (from c in Db.EXP_USER_V
                               where c.EANA_EANA_ROW == id && c.EURP_TYPE == 0 && c.EURP_ACTV == 1
                               select new
                               {
                                   c.ROW_NO,
                                   c.USER_NAME,
                                   c.USER_PASS,
                                   c.ORCL_NAME,
                                   c.FIRS_NAME,
                                   c.FAML_NAME
                               }).ToList();

                return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult NazerAndJaneshin()
        {
            var RetVal = (from b in Db.PAY_PERSONEL
                          join c in Db.SEC_USERS on b.EMP_NUMB equals c.PRSN_EMP_NUMB
                          where !string.IsNullOrEmpty(c.USER_NAME) && c.USER_NAME == c.USER_NAME.ToUpper()
                          //and USER_NAME is not null
                          //and USER_NAME = UPPER(USER_NAME)
                          orderby b.FIRS_NAME
                          select new
                          {
                              b.EMP_NUMB,
                              c.ROW_NO,
                              fullname = b.FIRS_NAME + " " + b.FAML_NAME
                          }).Distinct();

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        //[EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadPostInstrumentModal([DataSourceRequest] DataSourceRequest request, int? id, string fdModal)
        {
            // جهت جستجو
            bool filterDisable = string.IsNullOrEmpty(fdModal);
            string filter = string.IsNullOrEmpty(fdModal.ToUpper()) ? "" : fdModal.ToUpper().ToArabicUtf8();
            var query = (from b in Db.EXP_POST_LINE_INSTRU
                         join c in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals c.EINS_ID
                         where (b.EPOL_EPOL_ID == id || b.EPOL_EPOL_ID_LINE == id || b.EPOL_EPOL_ID_INSLIN == id)
                                && b.EPIU_EPIU_ID_SAVABEGH == null
                                && (b.CODE_NAME.ToUpper().Contains(filter) || filterDisable)
                         select new
                         {
                             b.EPIU_ID,
                             b.EINS_EINS_ID,
                             b.CODE_NAME,
                             b.CODE_DISP,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             instruType = c.EINS_DESC
                         });

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        //[EntityAuthorize("EXP_POST_LINE > select|EXP_UNIT_LEVEL > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadPostModal([DataSourceRequest] DataSourceRequest request, int? id, string fdModal)
        {
            // جهت جستجو
            bool filterDisable = string.IsNullOrEmpty(fdModal);
            string filter = string.IsNullOrEmpty(fdModal.ToUpper()) ? "" : fdModal.ToUpper().ToArabicUtf8();
            var query = (from b in Db.EXP_POST_LINE
                         join c in Db.EXP_UNIT_LEVEL on b.EUNL_EUNL_ID equals c.EUNL_ID
                         where b.EANA_EANA_ROW == id && b.EPOL_TYPE == "0" && (b.EPOL_NAME.ToUpper().Contains(filter) || filterDisable)                         
                         select new
                         {
                             b.EPOL_ID,
                             b.EPOL_NAME,
                             b.CODE_DISP,
                             b.EANA_EANA_ROW,
                             b.ORGA_CODE,
                             postVolt = c.EUNL_DESC,
                             c.EUNL_NUM
                         }).ToList().OrderByDescending(x=> x.EUNL_NUM);

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// ریز تجهیزات مربوط به یک تجهیز خاص
        /// جهت استفاده در فرم اصلی ، مربوط به گرید استفاده شده در مدال
        /// </summary>
        /// <param name="request">...</param>
        /// <param name="id">کد تجهیز</param>
        /// <param name="fdModal"></param>
        /// <returns></returns>        
        [EntityAuthorize("EXP_ERROR_INST > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadInstrumentDetailModal([DataSourceRequest] DataSourceRequest request, int? id, string fdModal)
        {
            // جهت جستجو
            bool filterDisable = string.IsNullOrEmpty(fdModal);
            string filter = string.IsNullOrEmpty(fdModal.ToUpper()) ? "" : fdModal.ToUpper().ToArabicUtf8();
            var query = (from b in Db.EXP_ERROR_INST
                         where b.EINS_EINS_ID == id && b.EERR_TYPE == 0 && (b.EERR_DESC.ToUpper().Contains(filter) || filterDisable)
                         orderby b.EERR_DESC descending
                         select new
                         {
                             b.EERR_ID,
                             b.EERR_DESC,
                         });
            // EERR_TYPE = 0 => اشکال تجهیز
            // EERR_TYPE = 1 => شرح اشکال تجهیز 
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadPostBayModal([DataSourceRequest] DataSourceRequest request, int? id, string fdModal)
        {
            // جهت جستجو
            bool filterDisable = string.IsNullOrEmpty(fdModal);
            string filter = string.IsNullOrEmpty(fdModal.ToUpper()) ? "" : fdModal.ToUpper().ToArabicUtf8();

            var query = (from c in Db.EXP_CORE_BAY
                         join p in Db.EXP_POST_LINE_INSTRU on c.EPIU_EPIU_ID equals p.EPIU_ID
                         join d in Db.EXP_TYPE_BAY on c.ETBY_ETBY_ID equals d.ETBY_ID
                         join e in Db.EXP_UNIT_LEVEL on c.EUNL_EUNL_ID equals e.EUNL_ID
                         where (p.EPOL_EPOL_ID == id || c.EPOL_EPOL_ID == id)
                                && (p.CODE_NAME.ToUpper().Contains(filter) || d.ETBY_DESC.ToUpper().Contains(filter) || filterDisable)
                         select new
                         {
                             c.EUNL_EUNL_ID,
                             c.EPIU_EPIU_ID,
                             c.ETBY_ETBY_ID,
                             c.ECBA_TYPE,
                             c.ACTI_NACT,
                             c.ECBA_ID,
                             instruDesc = p.CODE_NAME,
                             bayDesc = d.ETBY_DESC,
                             voltDesc = e.EUNL_DESC
                         }).Distinct();
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        public ActionResult RequestSearchAndReport(string id)
        {
            if (!string.IsNullOrEmpty(id))            
                ViewBag.requestId = id.Split('=')[1].Trim();

            var currentUser = User.Identity.Name;            
            ViewBag.currentUser = currentUser;
            //ViewBag.countAllRequest = (from b in Db.EXP_EXPI_DOC where b.ETDO_ETDO_ID == 21 select b).Count().ToString();
            ViewBag.countAllRequest = Db.Database.SqlQuery<int>("select count(eedo_id) from EXP_EXPI_DOC where ETDO_ETDO_ID = 21").FirstOrDefault();
            //ViewBag.countYourRequestSave = (from b in Db.EXP_EXPI_DOC where b.ETDO_ETDO_ID == 21 && b.CRET_BY == currentUser.ToUpper() select b).Count().ToString();
            ViewBag.countYourRequestSave = Db.Database.SqlQuery<int>(string.Format("select count(eedo_id) from EXP_EXPI_DOC where ETDO_ETDO_ID = 21 and CRET_BY = '{0}'", currentUser.ToUpper())).FirstOrDefault();
            //ViewBag.countYourRequestSend = Db.Database.SqlQuery<int>("select count(*) from WF_NOTE_V where ITEM_KEY like 'FLW_REQU.PFLW_REQU^%' and FROM_USER ='" + currentUser + "'").FirstOrDefault();
            ViewBag.countYourRequestSend = Db.Database.SqlQuery<int>(string.Format("select count(*) from WF_NOTE_V where ITEM_KEY like 'FLW_REQU.PFLW_REQU^%' and RECIPIENT_ROLE = '{0}' and STAT = 'CLOSED'", currentUser)).FirstOrDefault();
            //ViewBag.countYourRequestReceive = Db.Database.SqlQuery<int>("select count(*) from WF_NOTE_V where ITEM_KEY like 'FLW_REQU.PFLW_REQU^%' and TO_USER ='" + currentUser + "'").FirstOrDefault();
            using (Asr.Security.AsrMembershipProvider mp = new Asr.Security.AsrMembershipProvider(User.Identity.Name))
            {
                ViewBag.showGridButton = mp.CheckPermission("EXP_REQUESTSEARCH_FRM_GRIDBTN");
                ViewBag.userName = User.Identity.Name;
            }

            return View();
        }

        public ActionResult ShowRequestDetails(int id)
        {
            ViewBag.RequestID = id;
            var doc = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();
            var docInstru = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == id && b.CUT_STAT == "1" select b).FirstOrDefault();
            var relationDoc = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == id select b);
            //var post = (from b in Db.EXP_POST_LINE where b.EPOL_ID == doc.EPOL_EPOL_ID select b).FirstOrDefault();
            //var instru = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == docInstru.EPIU_EPIU_ID select b).FirstOrDefault();
            //var progAndFunc = from b in Db.EXP_PROGRAM join c in Db.EXP_PFUNCTION on b.EPRO_ID equals c.EPRO_EPRO_ID select 
            var supervisor = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == id && b.POSI_TYEP == "2" select b).FirstOrDefault();
            var successor = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == id && b.POSI_TYEP == "5" select b).FirstOrDefault();
            var Nazer = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == id && b.POSI_TYEP == "3" select b).FirstOrDefault();
            var JaneshinNazer = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == id && b.POSI_TYEP == "6" select b).FirstOrDefault();
            var details = (from b in Db.EXP_RCEN_V where b.EEDOID == id && b.EDOCCUTSTAT == "1" select b).FirstOrDefault();
            var bayType = (from p in Db.EXP_TYPE_BAY
                           join b in Db.EXP_EDOC_INSTRU on p.ETBY_ID equals b.ETBY_ETBY_ID
                           where b.EEDO_EEDO_ID == id
                           select p.ETBY_DESC).FirstOrDefault();

            var requester = (from b in Db.EXP_USER_V where b.ORCL_NAME == doc.CRET_BY select b).Distinct().FirstOrDefault();
            var Warranty = (from b in Db.EXP_EITEM_DOC_VALUE where b.EEDO_EEDO_ID == id && b.EITY_EITY_ID == 278 select b).FirstOrDefault(); // همه ضمانت نامه ها
            // اجرا کننده
            var WorkerDetails = (from p in Db.EXP_EDOC_INSTRU
                                 join b in Db.SEC_JOB_TYPE_DOC on p.JDTY_JDTY_ID equals b.JDTY_ID
                                 where p.EEDO_EEDO_ID == id && p.CUT_STAT == "1" && b.ACTIV_NAME == "WORKER"
                                 select p).FirstOrDefault();

            var description = (from b in Db.EXP_ITEM_TYPE_DOC
                               join c in Db.EXP_EITEM_DOC_VALUE on b.EITY_ID equals c.EITY_EITY_ID
                               where b.ETDO_ETDO_ID == 21 && c.EEDO_EEDO_ID == id
                               select new
                               {
                                   descID = b.EITY_ID,
                                   descLabel = b.EITY_DESC,
                                   descValue = c.EIDR_VALUE
                               }).ToList();

            ViewBag.RequestDocNum = doc.DOC_NUMB;

            ViewBag.WorkDesc = description.Where(s => s.descID == 281).Any() ? description.Where(s => s.descID == 281).FirstOrDefault().descValue : " ... ";//.Select(s => s.descValue).ToString();
            ViewBag.TestDesc = description.Where(s => s.descID == 282).Any() ? description.Where(s => s.descID == 282).FirstOrDefault().descValue : " ... ";//.Select(s => s.descValue).ToString();
            ViewBag.SafetyDesc = description.Where(s => s.descID == 337).Any() ? description.Where(s => s.descID == 337).FirstOrDefault().descValue : " ... ";//.Select(s => s.descValue).ToString();

            ViewBag.BeneficiaryDesc = description.Where(s => s.descID == 319).Any() ? description.Where(s => s.descID == 319).FirstOrDefault().descValue : " ... ";//.Select(s => s.descValue).ToString();
            ViewBag.RequestDesc = string.IsNullOrEmpty(doc.EEDO_DESC) ? " ... " : doc.EEDO_DESC;

            ViewBag.Requester = requester.FIRS_NAME + " " + requester.FAML_NAME;

            string requesterManager = Db.Database.SqlQuery<string>("SELECT (FIRS_NAME || ' ' ||FAML_NAME) FullName from EXP_USER_V where ORCL_NAME = (SELECT RECIPIENT_ROLE FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + id.ToString() + "' AND MESSAGE_NAME = 'MMANEGERCR' AND ROWNUM = 1)").FirstOrDefault();
            string beneficiary = " ";
            string dispachingPlanner = " ";
            ViewBag.RequesterManagerName = requesterManager.HasValue() ? requesterManager : " ... ";
            ViewBag.BeneficiaryName = beneficiary;
            ViewBag.DispachingPlannerName = dispachingPlanner;

            ViewBag.BeneficiaryRequestStatus = doc.SEND_TYPE;
            ViewBag.DispachingPlannerRequestStatus = doc.INFL_TYPE;

            var dispachingPlannerDesc = (from p in Db.EXP_EDOC_INSTRU
                                         join b in Db.SEC_JOB_TYPE_DOC on p.JDTY_JDTY_ID equals b.JDTY_ID
                                         where p.EEDO_EEDO_ID == id && p.CUT_STAT == "1" && b.ETDO_ETDO_ID == doc.ETDO_ETDO_ID && b.ACTIV_NAME == "PROGRAMER"
                                         select p.ATTG_SPIC).FirstOrDefault();
            ViewBag.DispachingPlannerDesc = dispachingPlannerDesc;

            string approvalDocDate_RequesterManager = Db.Database.SqlQuery<string>("SELECT TO_CHAR(BEGIN_DATE) FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + id.ToString() + "' AND MESSAGE_NAME = 'MENTEGHALC' AND ROWNUM = 1").FirstOrDefault();
            string approvalDocDate_Programmer = Db.Database.SqlQuery<string>("SELECT TO_CHAR(BEGIN_DATE) FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + id.ToString() + "' AND MESSAGE_NAME = 'MPROGRAMER' AND ROWNUM = 1").FirstOrDefault();
            //ViewBag.ApprovalDocDate = string.IsNullOrEmpty(approvalDocDate_RequesterManager) ? approvalDocDate_Programmer : approvalDocDate_RequesterManager;            
            if (!string.IsNullOrEmpty(approvalDocDate_RequesterManager))
            {
                ViewBag.ApprovalDocDate = approvalDocDate_RequesterManager;
            }
            else if (!string.IsNullOrEmpty(approvalDocDate_Programmer))
            {
                ViewBag.ApprovalDocDate = approvalDocDate_Programmer;
            }

            string approvalDocDate_DispachinPlanner = Db.Database.SqlQuery<string>("SELECT TO_CHAR(BEGIN_DATE) FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + id.ToString() + "' AND MESSAGE_NAME = 'MPROGRAMER' AND ROWNUM = 1").FirstOrDefault();
            string approvalDocDate_DispachingManager = Db.Database.SqlQuery<string>("SELECT TO_CHAR(BEGIN_DATE) FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + id.ToString() + "' AND MESSAGE_NAME = 'MDISPACHMANEG' AND ROWNUM = 1").FirstOrDefault();
            ViewBag.ApprovalDocDate_DispachinPlanner = !string.IsNullOrEmpty(approvalDocDate_DispachingManager) ? approvalDocDate_DispachingManager : " ";
            ViewBag.ApprovalDocDate_DispachingManager = !string.IsNullOrEmpty(approvalDocDate_DispachingManager) ? approvalDocDate_DispachingManager : " ";

            ViewBag.WarrantyType = description.Where(s => s.descID == 278).Any() ? description.Where(s => s.descID == 278).FirstOrDefault().descValue : " ... ";    //.Select(s => s.descValue).ToString();
            ViewBag.EmergencyTime = description.Where(s => s.descID == 279).Any() ? description.Where(s => s.descID == 279).FirstOrDefault().descValue : " ... ";   //.Select(s => s.descValue).ToString();
            ViewBag.SafetyFeatures = description.Where(s => s.descID == 284).Any() ? description.Where(s => s.descID == 284).FirstOrDefault().descValue : " ... ";  //.Select(s => s.descValue).ToString();            
            ViewBag.WorkTimeInDay = description.Where(s => s.descID == 285).Any() ? description.Where(s => s.descID == 284).FirstOrDefault().descValue : " ... ";  //.Select(s => s.descValue).ToString();

            ViewBag.DocDate = details.EEDO_DATE.HasValue() ? details.EEDO_DATE : " ... ";
            ViewBag.Program = details.EPRODESC.HasValue() ? details.EPRODESC : " ... ";
            ViewBag.ProgramID = (details == null || details.EPROID == null) ? 0 : details.EPROID;
            ViewBag.Function = details.EFUNDESC.HasValue() ? details.EFUNDESC : " ... ";
            ViewBag.Organ = doc.ORGA_CODE.HasValue() ? (from b in Db.PAY_ORGAN where b.MANA_ASTA_CODE == "7" && b.MANA_CODE == "6" && b.CODE == doc.ORGA_CODE select b.ORGA_DESC).FirstOrDefault().ToString() : "";
            ViewBag.PostName = details.EPOLNAME.HasValue() ? details.EPOLNAME : " ... ";
            ViewBag.InstruRoot = details.EDOCEPIUID == null ? "کل پست" : (bayType == null ? details.INSTRU_CODE_NAME : Convert.ToString(bayType) + " " + details.INSTRU_CODE_NAME);
            ViewBag.InstruRootDetai = details.EDOCEERR_ID == null ? " ... " : (from b in Db.EXP_ERROR_INST where b.EERR_ID == details.EDOCEERR_ID select b.EERR_DESC).FirstOrDefault().ToString();
            var OtherInstru = (from b in Db.EXP_RQST_V where b.EXPI_EEDO_ID == id && (b.EDOC_CUT_STAT != "1" || string.IsNullOrEmpty(b.EDOC_CUT_STAT)) && b.EDOC_JDTY_JDTY_ID == 91 select b).ToList(); //EDOC_JDTY_JDTY_ID == 91 => Just "Creator" State
            ViewBag.OtherInstru = OtherInstru;
            ViewBag.OtherInstruCount = OtherInstru.Count();
            ViewBag.InstruPlug = docInstru.INST_STAT == "0" ? "بلی" : "خیر";
            ViewBag.PeoplePlug = docInstru.CUST_STAT == "0" ? "بلی" : "خیر";
            ViewBag.Earth = docInstru.EART_STAT == "0" ? "بلی" : "خیر";
            var CutState = (from b in Db.EXP_OFF_STAT where b.EOFS_ID == docInstru.EOFS_EOFS_ID select b.EOFS_DESC).FirstOrDefault();
            ViewBag.CutState = CutState != "" && CutState != null ? CutState : "...";

            ViewBag.StartDate = Db.Database.SqlQuery<string>("SELECT EXP_DOCDATE_END(" + id + ",3) FROM DUAL").FirstOrDefault(); //docInstru.OFF_DATE;   //details.EDOCOFFDATE;
            ViewBag.StartTime = Db.Database.SqlQuery<string>("SELECT EXP_DOCDATE_END(" + id + ",5) FROM DUAL").FirstOrDefault(); //docInstru.OFF_TIME;   //details.EDOCOFFTIME;
            ViewBag.EndDate = Db.Database.SqlQuery<string>("SELECT EXP_DOCDATE_END(" + id + ",4) FROM DUAL").FirstOrDefault();   //docInstru.ON_DATE;    //details.EDOCONDATE;
            ViewBag.EndTime = Db.Database.SqlQuery<string>("SELECT EXP_DOCDATE_END(" + id + ",6) FROM DUAL").FirstOrDefault();   //docInstru.ON_TIME;    //details.EDOCONTIME;            

            ViewBag.TimeState = docInstru.TIME_ISTA == "0" ? "پیوسته" : "نا پیوسته";
            ViewBag.RequestState = doc.OUT_FUNC == "1" ? "اصلی" : "پیرو";
            ViewBag.GroupExecutive = doc.EANA_EANA_ROW.HasValue ? (from b in Db.EXP_ANALYZOR_EVENT where b.EANA_ROW == doc.EANA_EANA_ROW select b.EANA_DESC).FirstOrDefault().ToString() : "";

            ViewBag.WarrantyName = (Warranty != null && Warranty.EIDR_VALUE.HasValue()) ? Warranty.EIDR_VALUE : " ... ";

            string[] warrantyArray = { "بدون ضمانت", "بدون تضمین", "محیط برقدار" };
            if (Warranty != null && Warranty.EIDR_VALUE.HasValue())
            {
                string warrantyTxt = Warranty.EIDR_VALUE.ToPersianUtf8();
                ViewBag.WarrantyStatus = warrantyArray.Any(x => warrantyTxt.Contains(x)) ? 0 : 1;
            }

            var AllEurp = (from b in Db.SEC_USER_TYPE_POST select b);
            if (supervisor != null && supervisor.EURP_EURP_ID.HasValue)
            {
                //ViewBag.Supervisor = (from b in Db.EXP_USER_V where b.EURP_ID == supervisor.EURP_EURP_ID select new { Name = b.FIRS_NAME + " " + b.FAML_NAME }).Any() ?
                //    (from b in Db.EXP_USER_V where b.EURP_ID == supervisor.EURP_EURP_ID select new { Name = b.FIRS_NAME + " " + b.FAML_NAME }).FirstOrDefault().Name :
                //    " ... ";

                var findUser = AllEurp.Where(b => b.EURP_ID == supervisor.EURP_EURP_ID).Select(b => new { b.SCSU_ROW_NO, b.OUTP_OUTP_ID }).FirstOrDefault();
                if (findUser != null)
                {
                    if (findUser.SCSU_ROW_NO != null)
                    {
                        var person_Supervisor = (from c in Db.SEC_USERS.AsEnumerable()
                                                 where c.ROW_NO == findUser.SCSU_ROW_NO
                                                 select new
                                                 {
                                                     c.ROW_NO,
                                                     FIRS_NAME = c.FIRS_NAME.HasValue() ? c.FIRS_NAME : c.PAY_PERSONEL.FIRS_NAME,
                                                     FAML_NAME = c.FAML_NAME.HasValue() ? c.FAML_NAME : c.PAY_PERSONEL.FAML_NAME
                                                 }).FirstOrDefault();
                        ViewBag.Supervisor = (person_Supervisor != null) ? (person_Supervisor.FIRS_NAME + " " + person_Supervisor.FAML_NAME) : "...";
                    }
                    else if (findUser.OUTP_OUTP_ID != null)
                    {
                        var person_Supervisor = (from b in Db.EXP_OUT_PERSONEL
                                                 where b.OUTP_ID == findUser.OUTP_OUTP_ID
                                                 select new { b.OUTP_FNAME, b.OUTP_LNAME }).FirstOrDefault();
                        ViewBag.Supervisor = (person_Supervisor != null) ? (person_Supervisor.OUTP_FNAME + " " + person_Supervisor.OUTP_LNAME) : "...";
                    }
                }
            }
            else { ViewBag.Supervisor = "ندارد"; }

            if (successor != null && successor.EURP_EURP_ID.HasValue)
            {
                //ViewBag.Successor = (from b in Db.EXP_USER_V where b.EURP_ID == successor.EURP_EURP_ID select new { Name = b.FIRS_NAME + " " + b.FAML_NAME }).Any() ?
                //    (from b in Db.EXP_USER_V where b.EURP_ID == successor.EURP_EURP_ID select new { Name = b.FIRS_NAME + " " + b.FAML_NAME }).FirstOrDefault().Name :
                //    " ... ";
                var findUser = AllEurp.Where(b => b.EURP_ID == successor.EURP_EURP_ID).Select(b => new { b.SCSU_ROW_NO, b.OUTP_OUTP_ID }).FirstOrDefault();
                if (findUser != null)
                {
                    if (findUser.SCSU_ROW_NO != null)
                    {
                        var person_successor = (from c in Db.SEC_USERS.AsEnumerable()
                                                where c.ROW_NO == findUser.SCSU_ROW_NO
                                                select new
                                                {
                                                    c.ROW_NO,
                                                    FIRS_NAME = c.FIRS_NAME.HasValue() ? c.FIRS_NAME : c.PAY_PERSONEL.FIRS_NAME,
                                                    FAML_NAME = c.FAML_NAME.HasValue() ? c.FAML_NAME : c.PAY_PERSONEL.FAML_NAME
                                                }).FirstOrDefault();
                        ViewBag.Successor = (person_successor != null) ? (person_successor.FIRS_NAME + " " + person_successor.FAML_NAME) : "...";
                    }
                    else if (findUser.OUTP_OUTP_ID != null)
                    {
                        var person_successor = (from b in Db.EXP_OUT_PERSONEL
                                                where b.OUTP_ID == findUser.OUTP_OUTP_ID
                                                select new { b.OUTP_FNAME, b.OUTP_LNAME }).FirstOrDefault();
                        ViewBag.Successor = (person_successor != null) ? (person_successor.OUTP_FNAME + " " + person_successor.OUTP_LNAME) : "...";
                    }
                }
            }
            else { ViewBag.Successor = "ندارد"; }

            if (Nazer != null /*&& Nazer.PRSN_EMP_NUMB.HasValue*/)
            {
                //var NazerName = (from b in Db.PAY_PERSONEL where b.EMP_NUMB == Nazer.PRSN_EMP_NUMB select new { Name = b.FIRS_NAME + " " + b.FAML_NAME });
                //ViewBag.Nazer = NazerName.Any() ? NazerName.FirstOrDefault().Name : " ... ";
                ////ViewBag.Nazer = (from b in Db.EXP_USER_V where b.EMP_NUMB == Nazer.PRSN_EMP_NUMB select new { Name = b.FIRS_NAME + " " + b.FAML_NAME }).Any() ?
                ////    (from b in Db.EXP_USER_V where b.EURP_ID == Nazer.PRSN_EMP_NUMB select new { Name = b.FIRS_NAME + " " + b.FAML_NAME }).FirstOrDefault().Name :
                ////    " ... ";
                var findUser = AllEurp.Where(b => b.EURP_ID == Nazer.EURP_EURP_ID).Select(b => new { b.SCSU_ROW_NO, b.OUTP_OUTP_ID }).FirstOrDefault();
                if (findUser != null)
                {
                    if (findUser.SCSU_ROW_NO != null)
                    {
                        var person_Nazer = (from c in Db.SEC_USERS.AsEnumerable()
                                            where c.ROW_NO == findUser.SCSU_ROW_NO
                                            select new
                                            {
                                                c.ROW_NO,
                                                FIRS_NAME = c.FIRS_NAME.HasValue() ? c.FIRS_NAME : c.PAY_PERSONEL.FIRS_NAME,
                                                FAML_NAME = c.FAML_NAME.HasValue() ? c.FAML_NAME : c.PAY_PERSONEL.FAML_NAME
                                            }).FirstOrDefault();
                        ViewBag.Nazer = person_Nazer != null ? person_Nazer.FIRS_NAME + " " + person_Nazer.FAML_NAME : "...";
                    }
                    else if (findUser.OUTP_OUTP_ID != null)
                    {
                        var person_Nazer = (from b in Db.EXP_OUT_PERSONEL
                                            where b.OUTP_ID == findUser.OUTP_OUTP_ID
                                            select new { b.OUTP_FNAME, b.OUTP_LNAME }).FirstOrDefault();
                        ViewBag.Nazer = person_Nazer != null ? person_Nazer.OUTP_FNAME + " " + person_Nazer.OUTP_LNAME : "...";
                    }
                }
            }
            else { ViewBag.Nazer = "ندارد"; }

            if (JaneshinNazer != null /*&& JaneshinNazer.PRSN_EMP_NUMB.HasValue*/)
            {
                //var JaneshinNazerName = (from b in Db.PAY_PERSONEL where b.EMP_NUMB == JaneshinNazer.PRSN_EMP_NUMB select new { Name = b.FIRS_NAME + " " + b.FAML_NAME });
                //ViewBag.JaneshinNazer = JaneshinNazerName.Any() ? JaneshinNazerName.FirstOrDefault().Name : " ... ";
                ////ViewBag.JaneshinNazer = (from b in Db.EXP_USER_V where b.EMP_NUMB == JaneshinNazer.PRSN_EMP_NUMB select new { Name = b.FIRS_NAME + " " + b.FAML_NAME }).Any() ?
                ////    (from b in Db.EXP_USER_V where b.EURP_ID == JaneshinNazer.PRSN_EMP_NUMB select new { Name = b.FIRS_NAME + " " + b.FAML_NAME }).FirstOrDefault().Name :
                ////    " ... ";
                var findUser = AllEurp.Where(b => b.EURP_ID == JaneshinNazer.EURP_EURP_ID).Select(b => new { b.SCSU_ROW_NO, b.OUTP_OUTP_ID }).FirstOrDefault();
                if (findUser != null)
                {
                    if (findUser.SCSU_ROW_NO != null)
                    {
                        var person_JaneshinNazer = (from c in Db.SEC_USERS.AsEnumerable()
                                                    where c.ROW_NO == findUser.SCSU_ROW_NO
                                                    select new
                                                    {
                                                        c.ROW_NO,
                                                        FIRS_NAME = c.FIRS_NAME.HasValue() ? c.FIRS_NAME : c.PAY_PERSONEL.FIRS_NAME,
                                                        FAML_NAME = c.FAML_NAME.HasValue() ? c.FAML_NAME : c.PAY_PERSONEL.FAML_NAME
                                                    }).FirstOrDefault();
                        ViewBag.JaneshinNazer = person_JaneshinNazer != null ? person_JaneshinNazer.FIRS_NAME + " " + person_JaneshinNazer.FAML_NAME : "...";
                    }
                    else if (findUser.OUTP_OUTP_ID != null)
                    {
                        var person_JaneshinNazer = (from b in Db.EXP_OUT_PERSONEL
                                                    where b.OUTP_ID == findUser.OUTP_OUTP_ID
                                                    select new { b.OUTP_FNAME, b.OUTP_LNAME }).FirstOrDefault();
                        ViewBag.JaneshinNazer = person_JaneshinNazer != null ? person_JaneshinNazer.OUTP_FNAME + " " + person_JaneshinNazer.OUTP_LNAME : "...";
                    }
                }
            }
            else { ViewBag.JaneshinNazer = "ندارد"; }

            if (doc != null /*&& doc.CCOR_CNOR_ID.HasValue*/)
            {
                ViewBag.WorkerType = doc.CCOR_CNOR_ID.HasValue || doc.EEDO_TYPE == "1" ? "پیمانکار" : "برق منطقه ای";

                if (doc.CCOR_CNOR_ID.HasValue)
                {
                    var CompanyName = (from b in Db.CNT_CONTRACTOR where b.CNOR_ID == doc.CCOR_CNOR_ID select new { CompName = !string.IsNullOrEmpty(b.COMP_NAME) ? b.COMP_NAME : b.NAME });
                    ViewBag.CompanyExecutive = CompanyName.Any() ? CompanyName.FirstOrDefault().CompName : " ... ";
                    //ViewBag.CompanyExecutive = (from b in Db.CNT_CONTRACTOR where b.CNOR_ID == doc.CCOR_CNOR_ID select new { CompName = !string.IsNullOrEmpty(b.COMP_NAME) ? b.COMP_NAME : b.NAME }).Any() ?
                    //    (from b in Db.CNT_CONTRACTOR where b.CNOR_ID == doc.CCOR_CNOR_ID select new { CompName = !string.IsNullOrEmpty(b.COMP_NAME) ? b.COMP_NAME : b.NAME }).FirstOrDefault().CompName :
                    //    " ... ";
                }
                else
                {
                    if (doc.EEDO_TYPE == "1") // پیمانکار
                    {
                        var findCompany = (from b in Db.SEC_USER_TYPE_POST
                                           join c in Db.EXP_OUT_PERSONEL on b.OUTP_OUTP_ID equals c.OUTP_ID
                                           join e in Db.EXP_INST_COMP on c.EICO_EICO_ID equals e.EICO_ID
                                           where b.EURP_ID == supervisor.EURP_EURP_ID
                                           select e.COMP_NAME).FirstOrDefault();

                        ViewBag.CompanyExecutive = string.IsNullOrEmpty(findCompany) ? "..." : findCompany.ToString();
                    }
                    //else if (doc.EEDO_TYPE == "0") // برق منطقه ای
                    //{ ViewBag.CompanyExecutive = ViewBag.GroupExecutive; } // اگر برق منطقه ای باشد یعنی سرپرست و جانشین از پرسنل گروه اجرایی هستند
                    else // if doc.EEDO_TYPE == "0" => برق منطقه ای
                    { ViewBag.CompanyExecutive = "..."; }
                }

                ViewBag.CompanyExecutiveOrGroupExecutive = ViewBag.CompanyExecutive;
            }
            else { ViewBag.CompanyExecutiveOrGroupExecutive = ViewBag.GroupExecutive; } // برای اینکه در گزارش اگر شرکت اجرایی وجود نداشت بجای آن گروه اجرایی جایگزین شود


            ViewBag.GroupPeople = supervisor.ESUD_DESC.HasValue() ? supervisor.ESUD_DESC : "ندارد";

            ViewBag.WorkerStartDate = (WorkerDetails != null && WorkerDetails.OFF_DATE.HasValue()) ? WorkerDetails.OFF_DATE : " ";
            ViewBag.WorkerStartTime = (WorkerDetails != null && WorkerDetails.OFF_TIME.HasValue()) ? WorkerDetails.OFF_TIME : " ";

            ViewBag.RequestType = "درخواست انجام کار غیر زمانبندی";
            if (relationDoc != null)
            {
                foreach (var item in relationDoc)
                {
                    ViewBag.ExtendedNumber = item.EEDO_EEDO_ID_R.ToString();
                    if (item.EDIN_EDIN_ID.HasValue)
                    {
                        ViewBag.RequestType = "برنامه زمانبندی";
                        ViewBag.ExtendedNumber = item.EDIN_EDIN_ID.ToString();
                    }
                    if (item.EEDO_EEDO_ID_R.HasValue)
                    {
                        var expiDoc = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == item.EEDO_EEDO_ID_R select b.ETDO_ETDO_ID).ToString();
                        if (expiDoc == "2")
                        {
                            ViewBag.RequestType = "دیفکت";
                            ViewBag.ExtendedNumber = item.EEDO_EEDO_ID_R.ToString();
                        }
                    }
                }
            }
            
            ViewBag.PrintBtnStatus = CheckPrintButtonStatus(id, details?.EPROID ?? 0);

            return View();
        }

        /// <summary>
        /// فعال و غیر فعال کردن دکمه پرینت درخواست براساس بررسی تاییدیه درخواست
        /// </summary>
        /// <param name="eedoId">EEDO_ID</param>
        /// <param name="programId">250 = Approve By ControlCenter ==> idform = 2</param>
        /// <param name="programId">252 = Approve By Enteghal ==> idform = 3</param>
        /// <param name="programId">321 = Approve By Organ Management ==> idform = 4</param>
        /// <param name="programId">Not In (250, 252, 321) = Approve Dispaching Programmer ==> idform = 1</param>
        /// <param name="programId">0 = Error ! Return False</param>
        /// <returns>True Or False</returns>
        public bool CheckPrintButtonStatus(int eedoId, int programId)
        {            
            bool retVal = false;            
            if (programId > 0)
            {
                switch (programId)
                {
                    case 250:
                        retVal = Db.EXP_EDOC_INSTRU.Where(x => x.EEDO_EEDO_ID == eedoId && x.JDTY_JDTY_ID == 101 && x.EDIN_STIN == "0").Any();
                        break;

                    case 252:
                        retVal = Db.Database.SqlQuery<int>("SELECT NOT_ID FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + eedoId.ToString() + "' AND MESSAGE_NAME = 'MMESSAGCENTER'").Any();
                        break;

                    case 321:
                        retVal = Db.Database.SqlQuery<int>("SELECT NOT_ID FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + eedoId.ToString() + "' AND MESSAGE_NAME = 'MMANEGPOST'").Any(); ;
                        break;

                    case 0:
                        retVal = false;
                        break;

                    default:
                        retVal = Db.EXP_EXPI_DOC.Where(x => x.EEDO_ID == eedoId && x.INFL_TYPE == "0").Any();
                        break;
                }
            }

            return retVal;
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult RequestSearchGrid2([DataSourceRequest] DataSourceRequest request, string docNum, string dateCreate, string dateStart, string dateEnd,
                                                string cartableState, int? postID, int? instruID, int? groupExecutiveID, int? programID, string peopleGroupExecutive,
                                                string startDateState, string endDateState, string userRequestState, string confirmState, string instruState,
                                                string currentCartableUser, string userState)
        {
            var currentUserName = User.Identity.Name;
            var SpliteCartableStates = cartableState.Split(',').Select(x => string.Format("'{0}'", x.Trim())).ToList().Distinct();
            var SplitecurrentCartableUser = currentCartableUser.Split(',').Select(x => string.Format("'{0}'", x.Trim())).ToList().Distinct();
                                            
            if (!SpliteCartableStates.Contains("'MCONTROLCENTER'"))
                currentCartableUser = string.Empty;    

            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                if (userRequestState == "0") // All Request
                {
                    if (startDateState == "1" && endDateState == "1")
                    {
                        var query = conn.Query(@"select distinct EDOCNUM, EPOLNAME, EDOCCUSTSTAT, --OWFMSGTITEL,
                                                                 CASE WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'M-CONTROL' THEN OWFMSGTITEL || ' AOC'
                                                                      WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'RDC-CONTROL' THEN OWFMSGTITEL || ' RDC'
                                                                      ELSE OWFMSGTITEL
                                                                      END OWFMSGTITEL,                                                                 
                                                                 EDOCCUTSTAT, EANA_DESC, EEDO_DATE, EPRODESC, EFUNDESC, 
                                                                 DECODE(EDOCTIMEISTA,1,'ناپیوسته',0,'پیوسته',EDOCTIMEISTA) DOCTIME_STATE, nvl(INSTRU_CODE_NAME,'کل پست ') instruName, 
                                                                 (EPRODESC || ' - ' || EFUNDESC) progAndFunc, DECODE(EDOCCUTSTAT,1,'اصلی',null,'دیگر تجهیزات',EDOCCUTSTAT) INSTRU_STATE,
                                                                 EXP_DOCDATE_END(EEDOID,1,EDOCTIMEISTA,EPROID) startDateTime, EXP_DOCDATE_END(EEDOID,2,EDOCTIMEISTA,EPROID) endDateTime, 
                                                                 EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) startDate, EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) endDate,
                                                                 EEDOID, EDOCEPOLID, EDOCEINSID, EFUNID, EPROID, EDOCEPIUID, OWFNOT_ID, EDOCEANAROW, 
                                                                 OWFMESSAGENAME, OWFRECIPIENTROLE, EDOCTIMEISTA, ORGADESC, EXP_DOC_CONFIRMSTATE_END(EEDOID) Confirm_State
                                                 from EXP_RCEN_V, EXP_ANALYZOR_EVENT 
                                                 where EXP_RCEN_V.EDOCEANAROW = EXP_ANALYZOR_EVENT.EANA_ROW
                                                 and OWFSTAT = 'OPEN' 
                                                 --and (OWFMESSAGENAME = :cartableState or :cartableState is null)
                                                 and (OWFMESSAGENAME in (" + string.Join(",", SpliteCartableStates) + @") or :cartableState is null)
                                                 --AND  ((','|| :cartableState ||',' LIKE '%,'|| OWFMESSAGENAME ||',%') or :cartableState is null)
                                                 and (EDOCEPOLID = :postID or :postID is null)
                                                 and (EDOCEPIUID = :instruID or :instruID is null)
                                                 and (EDOCEANAROW = :groupExecutiveID or :groupExecutiveID is null)
                                                 and (EPROID = :programID or :programID is null)
                                                 and (EEDO_DATE like '%' || :dateCreate  || '%')
                                                 and (upper(EDOCNUM) like '%' || upper(:docNum) || '%')
                                                 --and (OWFRECIPIENTROLE = :peopleGroupExecutive or :peopleGroupExecutive is null)
                                                 and (OWFRECIPIENTROLE IN(:peopleGroupExecutive," + string.Join(",", SplitecurrentCartableUser) + @") 
                                                      OR (:peopleGroupExecutive is null AND :currentCartableUser is null))
                                                 and ((:dateStart <= EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) AND EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) <= :dateEnd) OR
                                                      (:dateStart >= EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) AND EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) >= :dateStart) OR
                                                      (:dateEnd >= EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) AND EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) >= :dateStart) OR
                                                      (:dateEnd <= EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) AND EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) <= :dateEnd))
                                                 --and (EDOCEDIN_STIN = :confirmState or :confirmState is null)
                                                 and (((EDOCEDIN_STIN = :confirmState or :confirmState is null) AND EPROID <> 252) 
                                                        OR 
                                                      ((LETT_TYPE = :confirmState or :confirmState is null) AND EPROID = 252))
                                                 and (EDOCCUTSTAT = :instruState or :instruState is null)
                                                 and (EDOCCUSTSTAT = :userState or :userState is null)
                                                 order by EEDOID desc", cartableState, postID, postID, instruID, instruID, groupExecutiveID, groupExecutiveID,
                                                                      programID, programID, dateCreate, docNum, peopleGroupExecutive,
                                                                      peopleGroupExecutive, currentCartableUser,
                                                                      dateStart, dateEnd, dateStart, dateStart, dateEnd, dateStart, dateEnd, dateEnd,
                                                                      confirmState, confirmState, confirmState, confirmState, instruState, instruState,
                                                                      userState, userState)
                                     .Select(b => new
                                     {
                                         b.EDOCNUM,
                                         b.EPOLNAME,
                                         b.EDOCCUSTSTAT,
                                         b.instruName,
                                         b.EEDO_DATE,
                                         b.EPRODESC,
                                         b.EFUNDESC,
                                         b.progAndFunc,
                                         b.startDateTime,
                                         b.endDateTime,
                                         b.OWFMSGTITEL,
                                         b.EDOCCUTSTAT,
                                         groupExecutive = b.EANA_DESC,
                                         b.ORGADESC,
                                         b.Confirm_State,
                                         // Hidden item in Grid                                     
                                         b.EEDOID,
                                         b.EDOCEPOLID,
                                         b.EDOCEINSID,
                                         b.EFUNID,
                                         b.EPROID,
                                         b.EDOCEPIUID,
                                         b.OWFNOT_ID,
                                         b.EDOCEANAROW,
                                         b.OWFMESSAGENAME,
                                         b.OWFRECIPIENTROLE,
                                         b.startDate,
                                         b.endDate,
                                         b.EDOCTIMEISTA
                                     }).OrderBy(o => o.EDOCCUTSTAT).ToList();

                        //if (request.Page != null) request.Page = 1;
                        //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (startDateState == "1" && endDateState == "0")
                    {
                        var query = conn.Query(@"select distinct EDOCNUM, EPOLNAME, EDOCCUSTSTAT, --OWFMSGTITEL,
                                                                 CASE WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'M-CONTROL' THEN OWFMSGTITEL || ' AOC'
                                                                      WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'RDC-CONTROL' THEN OWFMSGTITEL || ' RDC'
                                                                      ELSE OWFMSGTITEL
                                                                      END OWFMSGTITEL,                                                                 
                                                                 EDOCCUTSTAT, EANA_DESC, EEDO_DATE, EPRODESC, EFUNDESC, 
                                                                 DECODE(EDOCTIMEISTA,1,'ناپیوسته',0,'پیوسته',EDOCTIMEISTA) DOCTIME_STATE, nvl(INSTRU_CODE_NAME,'کل پست ') instruName, 
                                                                 (EPRODESC || ' - ' || EFUNDESC) progAndFunc, DECODE(EDOCCUTSTAT,1,'اصلی',null,'دیگر تجهیزات',EDOCCUTSTAT) INSTRU_STATE,
                                                                 EXP_DOCDATE_END(EEDOID,1,EDOCTIMEISTA,EPROID) startDateTime, EXP_DOCDATE_END(EEDOID,2,EDOCTIMEISTA,EPROID) endDateTime, 
                                                                 EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) startDate, EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) endDate,
                                                                 EEDOID, EDOCEPOLID, EDOCEINSID, EFUNID, EPROID, EDOCEPIUID, OWFNOT_ID, EDOCEANAROW, 
                                                                 OWFMESSAGENAME, OWFRECIPIENTROLE, EDOCTIMEISTA, ORGADESC, EXP_DOC_CONFIRMSTATE_END(EEDOID) Confirm_State
                                                 from EXP_RCEN_V, EXP_ANALYZOR_EVENT 
                                                 where EXP_RCEN_V.EDOCEANAROW = EXP_ANALYZOR_EVENT.EANA_ROW
                                                 and OWFSTAT = 'OPEN' 
                                                 --and (OWFMESSAGENAME = :cartableState or :cartableState is null)
                                                 and (OWFMESSAGENAME in (" + string.Join(",", SpliteCartableStates) + @") or :cartableState is null)
                                                 --AND  ((','|| :cartableState ||',' LIKE '%,'|| OWFMESSAGENAME ||',%') or :cartableState is null)
                                                 and (EDOCEPOLID = :postID or :postID is null)
                                                 and (EDOCEPIUID = :instruID or :instruID is null)
                                                 and (EDOCEANAROW = :groupExecutiveID or :groupExecutiveID is null)
                                                 and (EPROID = :programID or :programID is null)
                                                 and (EEDO_DATE like '%' || :dateCreate  || '%')
                                                 and (upper(EDOCNUM) like '%' || upper(:docNum) || '%')
                                                 --and (OWFRECIPIENTROLE = :peopleGroupExecutive or :peopleGroupExecutive is null)
                                                 and (OWFRECIPIENTROLE IN(:peopleGroupExecutive," + string.Join(",", SplitecurrentCartableUser) + @") 
                                                      OR (:peopleGroupExecutive is null AND :currentCartableUser is null))
                                                 and (:dateStart = EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID))
                                                 --and (EDOCEDIN_STIN = :confirmState or :confirmState is null)
                                                 and (((EDOCEDIN_STIN = :confirmState or :confirmState is null) AND EPROID <> 252) 
                                                        OR 
                                                      ((LETT_TYPE = :confirmState or :confirmState is null) AND EPROID = 252))
                                                 and (EDOCCUTSTAT = :instruState or :instruState is null)
                                                 and (EDOCCUSTSTAT = :userState or :userState is null)
                                                 order by EEDOID desc", cartableState, postID, postID, instruID, instruID, groupExecutiveID, groupExecutiveID,
                                                                      programID, programID, dateCreate, docNum, peopleGroupExecutive,
                                                                      peopleGroupExecutive, currentCartableUser, dateStart,
                                                                      confirmState, confirmState, confirmState, confirmState, instruState, instruState,
                                                                      userState, userState)
                                     .Select(b => new
                                     {
                                         b.EDOCNUM,
                                         b.EPOLNAME,
                                         b.EDOCCUSTSTAT,
                                         b.instruName,
                                         b.EEDO_DATE,
                                         b.EPRODESC,
                                         b.EFUNDESC,
                                         b.progAndFunc,
                                         b.startDateTime,
                                         b.endDateTime,
                                         b.OWFMSGTITEL,
                                         b.EDOCCUTSTAT,
                                         groupExecutive = b.EANA_DESC,
                                         b.ORGADESC,
                                         b.Confirm_State,
                                         // Hidden item in Grid                                     
                                         b.EEDOID,
                                         b.EDOCEPOLID,
                                         b.EDOCEINSID,
                                         b.EFUNID,
                                         b.EPROID,
                                         b.EDOCEPIUID,
                                         b.OWFNOT_ID,
                                         b.EDOCEANAROW,
                                         b.OWFMESSAGENAME,
                                         b.OWFRECIPIENTROLE,
                                         b.startDate,
                                         b.endDate,
                                         b.EDOCTIMEISTA
                                     }).OrderBy(o => o.EDOCCUTSTAT).ToList();

                        //if (request.Page != null) request.Page = 1;
                        //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (startDateState == "0" && endDateState == "1")
                    {
                        var query = conn.Query(@"select distinct EDOCNUM, EPOLNAME, EDOCCUSTSTAT, --OWFMSGTITEL,
                                                                 CASE WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'M-CONTROL' THEN OWFMSGTITEL || ' AOC'
                                                                      WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'RDC-CONTROL' THEN OWFMSGTITEL || ' RDC'
                                                                      ELSE OWFMSGTITEL
                                                                      END OWFMSGTITEL,                                                                 
                                                                 EDOCCUTSTAT, EANA_DESC, EEDO_DATE, EPRODESC, EFUNDESC, 
                                                                 DECODE(EDOCTIMEISTA,1,'ناپیوسته',0,'پیوسته',EDOCTIMEISTA) DOCTIME_STATE, nvl(INSTRU_CODE_NAME,'کل پست ') instruName, 
                                                                 (EPRODESC || ' - ' || EFUNDESC) progAndFunc, DECODE(EDOCCUTSTAT,1,'اصلی',null,'دیگر تجهیزات',EDOCCUTSTAT) INSTRU_STATE,
                                                                 EXP_DOCDATE_END(EEDOID,1,EDOCTIMEISTA,EPROID) startDateTime, EXP_DOCDATE_END(EEDOID,2,EDOCTIMEISTA,EPROID) endDateTime, 
                                                                 EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) startDate, EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) endDate,
                                                                 EEDOID, EDOCEPOLID, EDOCEINSID, EFUNID, EPROID, EDOCEPIUID, OWFNOT_ID, EDOCEANAROW, 
                                                                 OWFMESSAGENAME, OWFRECIPIENTROLE, EDOCTIMEISTA, ORGADESC, EXP_DOC_CONFIRMSTATE_END(EEDOID) Confirm_State
                                                 from EXP_RCEN_V, EXP_ANALYZOR_EVENT 
                                                 where EXP_RCEN_V.EDOCEANAROW = EXP_ANALYZOR_EVENT.EANA_ROW
                                                 and OWFSTAT = 'OPEN' 
                                                 --and (OWFMESSAGENAME = :cartableState or :cartableState is null)
                                                 and (OWFMESSAGENAME in (" + string.Join(",", SpliteCartableStates) + @") or :cartableState is null)
                                                 --AND  ((','|| :cartableState ||',' LIKE '%,'|| OWFMESSAGENAME ||',%') or :cartableState is null)
                                                 and (EDOCEPOLID = :postID or :postID is null)
                                                 and (EDOCEPIUID = :instruID or :instruID is null)
                                                 and (EDOCEANAROW = :groupExecutiveID or :groupExecutiveID is null)
                                                 and (EPROID = :programID or :programID is null)
                                                 and (EEDO_DATE like '%' || :dateCreate  || '%')
                                                 and (upper(EDOCNUM) like '%' || upper(:docNum) || '%')
                                                 --and (OWFRECIPIENTROLE = :peopleGroupExecutive or :peopleGroupExecutive is null)
                                                 and (OWFRECIPIENTROLE IN(:peopleGroupExecutive," + string.Join(",", SplitecurrentCartableUser) + @") 
                                                      OR (:peopleGroupExecutive is null AND :currentCartableUser is null))
                                                 and (:dateEnd = EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID))
                                                 --and (EDOCEDIN_STIN = :confirmState or :confirmState is null)
                                                 and (((EDOCEDIN_STIN = :confirmState or :confirmState is null) AND EPROID <> 252) 
                                                        OR 
                                                      ((LETT_TYPE = :confirmState or :confirmState is null) AND EPROID = 252))
                                                 and (EDOCCUTSTAT = :instruState or :instruState is null)
                                                 and (EDOCCUSTSTAT = :userState or :userState is null)
                                                 order by EEDOID desc", cartableState, postID, postID, instruID, instruID, groupExecutiveID, groupExecutiveID,
                                                                      programID, programID, dateCreate, docNum, peopleGroupExecutive,
                                                                      peopleGroupExecutive, currentCartableUser,
                                                                      confirmState, confirmState, confirmState, confirmState, instruState, instruState,
                                                                      userState, userState)
                                     .Select(b => new
                                     {
                                         b.EDOCNUM,
                                         b.EPOLNAME,
                                         b.EDOCCUSTSTAT,
                                         b.instruName,
                                         b.EEDO_DATE,
                                         b.EPRODESC,
                                         b.EFUNDESC,
                                         b.progAndFunc,
                                         b.startDateTime,
                                         b.endDateTime,
                                         b.OWFMSGTITEL,
                                         b.EDOCCUTSTAT,
                                         groupExecutive = b.EANA_DESC,
                                         b.ORGADESC,
                                         b.Confirm_State,
                                         // Hidden item in Grid                                     
                                         b.EEDOID,
                                         b.EDOCEPOLID,
                                         b.EDOCEINSID,
                                         b.EFUNID,
                                         b.EPROID,
                                         b.EDOCEPIUID,
                                         b.OWFNOT_ID,
                                         b.EDOCEANAROW,
                                         b.OWFMESSAGENAME,
                                         b.OWFRECIPIENTROLE,
                                         b.startDate,
                                         b.endDate,
                                         b.EDOCTIMEISTA
                                     }).OrderBy(o => o.EDOCCUTSTAT).ToList();

                        //if (request.Page != null) request.Page = 1;
                        //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else // if => startDateState == "0" && endDateState == "0"
                    {
                        var query = conn.Query(@"select distinct EDOCNUM, EPOLNAME, EDOCCUSTSTAT, --OWFMSGTITEL,
                                                                 CASE WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'M-CONTROL' THEN OWFMSGTITEL || ' AOC'
                                                                      WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'RDC-CONTROL' THEN OWFMSGTITEL || ' RDC'
                                                                      ELSE OWFMSGTITEL
                                                                      END OWFMSGTITEL,                                                                 
                                                                 EDOCCUTSTAT, EANA_DESC, EEDO_DATE, EPRODESC, EFUNDESC, 
                                                                 DECODE(EDOCTIMEISTA,1,'ناپیوسته',0,'پیوسته',EDOCTIMEISTA) DOCTIME_STATE, nvl(INSTRU_CODE_NAME,'کل پست ') instruName, 
                                                                 (EPRODESC || ' - ' || EFUNDESC) progAndFunc, DECODE(EDOCCUTSTAT,1,'اصلی',null,'دیگر تجهیزات',EDOCCUTSTAT) INSTRU_STATE,
                                                                 EXP_DOCDATE_END(EEDOID,1,EDOCTIMEISTA,EPROID) startDateTime, EXP_DOCDATE_END(EEDOID,2,EDOCTIMEISTA,EPROID) endDateTime, 
                                                                 EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) startDate, EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) endDate,
                                                                 EEDOID, EDOCEPOLID, EDOCEINSID, EFUNID, EPROID, EDOCEPIUID, OWFNOT_ID, EDOCEANAROW, 
                                                                 OWFMESSAGENAME, OWFRECIPIENTROLE, EDOCTIMEISTA, ORGADESC, EXP_DOC_CONFIRMSTATE_END(EEDOID) Confirm_State
                                                 from EXP_RCEN_V, EXP_ANALYZOR_EVENT 
                                                 where EXP_RCEN_V.EDOCEANAROW = EXP_ANALYZOR_EVENT.EANA_ROW
                                                 and OWFSTAT = 'OPEN' 
                                                 --and (OWFMESSAGENAME in (:cartableState) or :cartableState is null)
                                                 and (OWFMESSAGENAME in (" + string.Join(",", SpliteCartableStates) + @") or :cartableState is null)
                                                 --AND  ((','|| :cartableState ||',' LIKE '%,'|| OWFMESSAGENAME ||',%') or :cartableState is null)
                                                 and (EDOCEPOLID = :postID or :postID is null)
                                                 and (EDOCEPIUID = :instruID or :instruID is null)
                                                 and (EDOCEANAROW = :groupExecutiveID or :groupExecutiveID is null)
                                                 and (EPROID = :programID or :programID is null)
                                                 and (EEDO_DATE like '%' || :dateCreate  || '%')
                                                 and (upper(EDOCNUM) like '%' || upper(:docNum) || '%')
                                                 --and (OWFRECIPIENTROLE = :peopleGroupExecutive or :peopleGroupExecutive is null) 
                                                 and (OWFRECIPIENTROLE IN(:peopleGroupExecutive," + string.Join(",", SplitecurrentCartableUser) + @") 
                                                      OR (:peopleGroupExecutive is null AND :currentCartableUser is null))  
                                                 --and (EDOCEDIN_STIN = :confirmState or :confirmState is null)
                                                 and (((EDOCEDIN_STIN = :confirmState or :confirmState is null) AND EPROID <> 252) 
                                                        OR 
                                                      ((LETT_TYPE = :confirmState or :confirmState is null) AND EPROID = 252))     
                                                 and (EDOCCUTSTAT = :instruState or :instruState is null)    
                                                 and (EDOCCUSTSTAT = :userState or :userState is null)
                                                 order by EEDOID desc", cartableState, postID, postID, instruID, instruID, groupExecutiveID, groupExecutiveID,
                                                                      programID, programID, dateCreate, docNum, peopleGroupExecutive,
                                                                      peopleGroupExecutive, currentCartableUser,
                                                                      confirmState, confirmState, confirmState, confirmState, instruState, instruState,
                                                                      userState, userState)
                                     .Select(b => new
                                     {
                                         b.EDOCNUM,
                                         b.EPOLNAME,
                                         b.EDOCCUSTSTAT,
                                         b.instruName,
                                         b.EEDO_DATE,
                                         b.EPRODESC,
                                         b.EFUNDESC,
                                         b.progAndFunc,
                                         b.startDateTime,
                                         b.endDateTime,
                                         b.OWFMSGTITEL,
                                         b.EDOCCUTSTAT,
                                         groupExecutive = b.EANA_DESC,
                                         b.ORGADESC,
                                         b.Confirm_State,
                                         // Hidden item in Grid                                     
                                         b.EEDOID,
                                         b.EDOCEPOLID,
                                         b.EDOCEINSID,
                                         b.EFUNID,
                                         b.EPROID,
                                         b.EDOCEPIUID,
                                         b.OWFNOT_ID,
                                         b.EDOCEANAROW,
                                         b.OWFMESSAGENAME,
                                         b.OWFRECIPIENTROLE,
                                         b.startDate,
                                         b.endDate,
                                         b.EDOCTIMEISTA
                                     }).OrderBy(o => o.EDOCCUTSTAT).ToList();

                        //if (request.Page != null) request.Page = 1;
                        //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                }
                else // userRequestState == "1" => My Request
                {
                    if (startDateState == "1" && endDateState == "1")
                    {
                        var query = conn.Query(@"select distinct EDOCNUM, EPOLNAME, EDOCCUSTSTAT, --OWFMSGTITEL,
                                                                 CASE WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'M-CONTROL' THEN OWFMSGTITEL || ' AOC'
                                                                      WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'RDC-CONTROL' THEN OWFMSGTITEL || ' RDC'
                                                                      ELSE OWFMSGTITEL
                                                                      END OWFMSGTITEL,                                                                 
                                                                 EDOCCUTSTAT, EANA_DESC, EEDO_DATE, EPRODESC, EFUNDESC, 
                                                                 DECODE(EDOCTIMEISTA,1,'ناپیوسته',0,'پیوسته',EDOCTIMEISTA) DOCTIME_STATE, nvl(INSTRU_CODE_NAME,'کل پست ') instruName, 
                                                                 (EPRODESC || ' - ' || EFUNDESC) progAndFunc, DECODE(EDOCCUTSTAT,1,'اصلی',null,'دیگر تجهیزات',EDOCCUTSTAT) INSTRU_STATE,
                                                                 EXP_DOCDATE_END(EEDOID,1,EDOCTIMEISTA,EPROID) startDateTime, EXP_DOCDATE_END(EEDOID,2,EDOCTIMEISTA,EPROID) endDateTime, 
                                                                 EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) startDate, EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) endDate,
                                                                 EEDOID, EDOCEPOLID, EDOCEINSID, EFUNID, EPROID, EDOCEPIUID, OWFNOT_ID, EDOCEANAROW, 
                                                                 OWFMESSAGENAME, OWFRECIPIENTROLE, EDOCTIMEISTA, ORGADESC, EXP_DOC_CONFIRMSTATE_END(EEDOID) Confirm_State
                                                 from EXP_RCEN_V, EXP_ANALYZOR_EVENT 
                                                 where EXP_RCEN_V.EDOCEANAROW = EXP_ANALYZOR_EVENT.EANA_ROW
                                                 and (OWFMESSAGENAME = 'MCREATOR' and OWFRECIPIENTROLE = :currentUserName)
                                                 --and (OWFMESSAGENAME = :cartableState or :cartableState is null)
                                                 and (OWFMESSAGENAME in (" + string.Join(",", SpliteCartableStates) + @") or :cartableState is null)
                                                 --AND  ((','|| :cartableState ||',' LIKE '%,'|| OWFMESSAGENAME ||',%') or :cartableState is null)
                                                 and (EDOCEPOLID = :postID or :postID is null)
                                                 and (EDOCEPIUID = :instruID or :instruID is null)
                                                 and (EDOCEANAROW = :groupExecutiveID or :groupExecutiveID is null)
                                                 and (EPROID = :programID or :programID is null)
                                                 and (EEDO_DATE like '%' || :dateCreate  || '%')
                                                 and (upper(EDOCNUM) like '%' || upper(:docNum) || '%')
                                                 --and (OWFRECIPIENTROLE = :peopleGroupExecutive or :peopleGroupExecutive is null)
                                                 and (OWFRECIPIENTROLE IN(:peopleGroupExecutive," + string.Join(",", SplitecurrentCartableUser) + @") 
                                                      OR (:peopleGroupExecutive is null AND :currentCartableUser is null))
                                                 and ((:dateStart <= EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) AND EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) <= :dateEnd) OR
                                                      (:dateStart >= EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) AND EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) >= :dateStart) OR
                                                      (:dateEnd >= EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) AND EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) >= :dateStart) OR
                                                      (:dateEnd <= EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) AND EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) <= :dateEnd))
                                                 --and (EDOCEDIN_STIN = :confirmState or :confirmState is null)
                                                 and (((EDOCEDIN_STIN = :confirmState or :confirmState is null) AND EPROID <> 252) 
                                                        OR 
                                                      ((LETT_TYPE = :confirmState or :confirmState is null) AND EPROID = 252))
                                                 and (EDOCCUTSTAT = :instruState or :instruState is null)
                                                 and (EDOCCUSTSTAT = :userState or :userState is null)
                                                 order by EEDOID desc", currentUserName, cartableState, postID, postID, instruID, instruID, groupExecutiveID, groupExecutiveID,
                                                                      programID, programID, dateCreate, docNum, peopleGroupExecutive,
                                                                      peopleGroupExecutive, currentCartableUser,
                                                                      dateStart, dateEnd, dateStart, dateStart, dateEnd, dateStart, dateEnd, dateEnd,
                                                                      confirmState, confirmState, confirmState, confirmState, instruState, instruState,
                                                                      userState, userState)
                                     .Select(b => new
                                     {
                                         b.EDOCNUM,
                                         b.EPOLNAME,
                                         b.EDOCCUSTSTAT,
                                         b.instruName,
                                         b.EEDO_DATE,
                                         b.EPRODESC,
                                         b.EFUNDESC,
                                         b.progAndFunc,
                                         b.startDateTime,
                                         b.endDateTime,
                                         b.OWFMSGTITEL,
                                         b.EDOCCUTSTAT,
                                         groupExecutive = b.EANA_DESC,
                                         b.ORGADESC,
                                         b.Confirm_State,
                                         // Hidden item in Grid                                     
                                         b.EEDOID,
                                         b.EDOCEPOLID,
                                         b.EDOCEINSID,
                                         b.EFUNID,
                                         b.EPROID,
                                         b.EDOCEPIUID,
                                         b.OWFNOT_ID,
                                         b.EDOCEANAROW,
                                         b.OWFMESSAGENAME,
                                         b.OWFRECIPIENTROLE,
                                         b.startDate,
                                         b.endDate,
                                         b.EDOCTIMEISTA
                                     }).OrderBy(o => o.EDOCCUTSTAT).ToList();

                        //if (request.Page != null) request.Page = 1;
                        //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (startDateState == "1" && endDateState == "0")
                    {
                        var query = conn.Query(@"select distinct EDOCNUM, EPOLNAME, EDOCCUSTSTAT, --OWFMSGTITEL,
                                                                 CASE WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'M-CONTROL' THEN OWFMSGTITEL || ' AOC'
                                                                      WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'RDC-CONTROL' THEN OWFMSGTITEL || ' RDC'
                                                                      ELSE OWFMSGTITEL
                                                                      END OWFMSGTITEL,                                                                 
                                                                 EDOCCUTSTAT, EANA_DESC, EEDO_DATE, EPRODESC, EFUNDESC, 
                                                                 DECODE(EDOCTIMEISTA,1,'ناپیوسته',0,'پیوسته',EDOCTIMEISTA) DOCTIME_STATE, nvl(INSTRU_CODE_NAME,'کل پست ') instruName, 
                                                                 (EPRODESC || ' - ' || EFUNDESC) progAndFunc, DECODE(EDOCCUTSTAT,1,'اصلی',null,'دیگر تجهیزات',EDOCCUTSTAT) INSTRU_STATE,
                                                                 EXP_DOCDATE_END(EEDOID,1,EDOCTIMEISTA,EPROID) startDateTime, EXP_DOCDATE_END(EEDOID,2,EDOCTIMEISTA,EPROID) endDateTime, 
                                                                 EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) startDate, EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) endDate,
                                                                 EEDOID, EDOCEPOLID, EDOCEINSID, EFUNID, EPROID, EDOCEPIUID, OWFNOT_ID, EDOCEANAROW, 
                                                                 OWFMESSAGENAME, OWFRECIPIENTROLE, EDOCTIMEISTA, ORGADESC, EXP_DOC_CONFIRMSTATE_END(EEDOID) Confirm_State
                                                 from EXP_RCEN_V, EXP_ANALYZOR_EVENT 
                                                 where EXP_RCEN_V.EDOCEANAROW = EXP_ANALYZOR_EVENT.EANA_ROW
                                                 and (OWFMESSAGENAME = 'MCREATOR' and OWFRECIPIENTROLE = :currentUserName)
                                                 --and (OWFMESSAGENAME = :cartableState or :cartableState is null)
                                                 and (OWFMESSAGENAME in (" + string.Join(",", SpliteCartableStates) + @") or :cartableState is null)
                                                 --AND  ((','|| :cartableState ||',' LIKE '%,'|| OWFMESSAGENAME ||',%') or :cartableState is null)
                                                 and (EDOCEPOLID = :postID or :postID is null)
                                                 and (EDOCEPIUID = :instruID or :instruID is null)
                                                 and (EDOCEANAROW = :groupExecutiveID or :groupExecutiveID is null)
                                                 and (EPROID = :programID or :programID is null)
                                                 and (EEDO_DATE like '%' || :dateCreate  || '%')
                                                 and (upper(EDOCNUM) like '%' || upper(:docNum) || '%')
                                                 --and (OWFRECIPIENTROLE = :peopleGroupExecutive or :peopleGroupExecutive is null)
                                                 and (OWFRECIPIENTROLE IN(:peopleGroupExecutive," + string.Join(",", SplitecurrentCartableUser) + @") 
                                                      OR (:peopleGroupExecutive is null AND :currentCartableUser is null))
                                                 and (:dateStart = EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID))
                                                 --and (EDOCEDIN_STIN = :confirmState or :confirmState is null)
                                                 and (((EDOCEDIN_STIN = :confirmState or :confirmState is null) AND EPROID <> 252) 
                                                        OR 
                                                      ((LETT_TYPE = :confirmState or :confirmState is null) AND EPROID = 252))
                                                 and (EDOCCUTSTAT = :instruState or :instruState is null)
                                                 and (EDOCCUSTSTAT = :userState or :userState is null)
                                                 order by EEDOID desc", currentUserName, cartableState, postID, postID, instruID, instruID, groupExecutiveID, groupExecutiveID,
                                                                      programID, programID, dateCreate, docNum, peopleGroupExecutive,
                                                                      peopleGroupExecutive, currentCartableUser, dateStart,
                                                                      confirmState, confirmState, confirmState, confirmState, instruState, instruState,
                                                                      userState, userState)
                                     .Select(b => new
                                     {
                                         b.EDOCNUM,
                                         b.EPOLNAME,
                                         b.EDOCCUSTSTAT,
                                         b.instruName,
                                         b.EEDO_DATE,
                                         b.EPRODESC,
                                         b.EFUNDESC,
                                         b.progAndFunc,
                                         b.startDateTime,
                                         b.endDateTime,
                                         b.OWFMSGTITEL,
                                         b.EDOCCUTSTAT,
                                         groupExecutive = b.EANA_DESC,
                                         b.ORGADESC,
                                         b.Confirm_State,
                                         // Hidden item in Grid                                     
                                         b.EEDOID,
                                         b.EDOCEPOLID,
                                         b.EDOCEINSID,
                                         b.EFUNID,
                                         b.EPROID,
                                         b.EDOCEPIUID,
                                         b.OWFNOT_ID,
                                         b.EDOCEANAROW,
                                         b.OWFMESSAGENAME,
                                         b.OWFRECIPIENTROLE,
                                         b.startDate,
                                         b.endDate,
                                         b.EDOCTIMEISTA
                                     }).OrderBy(o => o.EDOCCUTSTAT).ToList();

                        //if (request.Page != null) request.Page = 1;
                        //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;

                    }
                    else if (startDateState == "0" && endDateState == "1")
                    {
                        var query = conn.Query(@"select distinct EDOCNUM, EPOLNAME, EDOCCUSTSTAT, --OWFMSGTITEL,
                                                                 CASE WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'M-CONTROL' THEN OWFMSGTITEL || ' AOC'
                                                                      WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'RDC-CONTROL' THEN OWFMSGTITEL || ' RDC'
                                                                      ELSE OWFMSGTITEL
                                                                      END OWFMSGTITEL,                                                                 
                                                                 EDOCCUTSTAT, EANA_DESC, EEDO_DATE, EPRODESC, EFUNDESC, 
                                                                 DECODE(EDOCTIMEISTA,1,'ناپیوسته',0,'پیوسته',EDOCTIMEISTA) DOCTIME_STATE, nvl(INSTRU_CODE_NAME,'کل پست ') instruName, 
                                                                 (EPRODESC || ' - ' || EFUNDESC) progAndFunc, DECODE(EDOCCUTSTAT,1,'اصلی',null,'دیگر تجهیزات',EDOCCUTSTAT) INSTRU_STATE,
                                                                 EXP_DOCDATE_END(EEDOID,1,EDOCTIMEISTA,EPROID) startDateTime, EXP_DOCDATE_END(EEDOID,2,EDOCTIMEISTA,EPROID) endDateTime, 
                                                                 EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) startDate, EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) endDate,
                                                                 EEDOID, EDOCEPOLID, EDOCEINSID, EFUNID, EPROID, EDOCEPIUID, OWFNOT_ID, EDOCEANAROW, 
                                                                 OWFMESSAGENAME, OWFRECIPIENTROLE, EDOCTIMEISTA, ORGADESC, EXP_DOC_CONFIRMSTATE_END(EEDOID) Confirm_State
                                                 from EXP_RCEN_V, EXP_ANALYZOR_EVENT 
                                                 where EXP_RCEN_V.EDOCEANAROW = EXP_ANALYZOR_EVENT.EANA_ROW
                                                 and (OWFMESSAGENAME = 'MCREATOR' and OWFRECIPIENTROLE = :currentUserName)
                                                 --and (OWFMESSAGENAME = :cartableState or :cartableState is null)
                                                 and (OWFMESSAGENAME in (" + string.Join(",", SpliteCartableStates) + @") or :cartableState is null)
                                                 --AND  ((','|| :cartableState ||',' LIKE '%,'|| OWFMESSAGENAME ||',%') or :cartableState is null)
                                                 and (EDOCEPOLID = :postID or :postID is null)
                                                 and (EDOCEPIUID = :instruID or :instruID is null)
                                                 and (EDOCEANAROW = :groupExecutiveID or :groupExecutiveID is null)
                                                 and (EPROID = :programID or :programID is null)
                                                 and (EEDO_DATE like '%' || :dateCreate  || '%')
                                                 and (upper(EDOCNUM) like '%' || upper(:docNum) || '%')
                                                 --and (OWFRECIPIENTROLE = :peopleGroupExecutive or :peopleGroupExecutive is null)
                                                 and (OWFRECIPIENTROLE IN(:peopleGroupExecutive," + string.Join(",", SplitecurrentCartableUser) + @") 
                                                      OR (:peopleGroupExecutive is null AND :currentCartableUser is null))
                                                 and (:dateEnd = EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID))
                                                 --and (EDOCEDIN_STIN = :confirmState or :confirmState is null)
                                                 and (((EDOCEDIN_STIN = :confirmState or :confirmState is null) AND EPROID <> 252) 
                                                        OR 
                                                      ((LETT_TYPE = :confirmState or :confirmState is null) AND EPROID = 252))
                                                 and (EDOCCUTSTAT = :instruState or :instruState is null)
                                                 and (EDOCCUSTSTAT = :userState or :userState is null)
                                                 order by EEDOID desc", currentUserName, cartableState, postID, postID, instruID, instruID, groupExecutiveID, groupExecutiveID,
                                                                      programID, programID, dateCreate, docNum, peopleGroupExecutive,
                                                                      peopleGroupExecutive, currentCartableUser, dateEnd,
                                                                      confirmState, confirmState, confirmState, confirmState, instruState, instruState,
                                                                      userState, userState)
                                     .Select(b => new
                                     {
                                         b.EDOCNUM,
                                         b.EPOLNAME,
                                         b.EDOCCUSTSTAT,
                                         b.instruName,
                                         b.EEDO_DATE,
                                         b.EPRODESC,
                                         b.EFUNDESC,
                                         b.progAndFunc,
                                         b.startDateTime,
                                         b.endDateTime,
                                         b.OWFMSGTITEL,
                                         b.EDOCCUTSTAT,
                                         groupExecutive = b.EANA_DESC,
                                         b.ORGADESC,
                                         b.Confirm_State,
                                         // Hidden item in Grid                                     
                                         b.EEDOID,
                                         b.EDOCEPOLID,
                                         b.EDOCEINSID,
                                         b.EFUNID,
                                         b.EPROID,
                                         b.EDOCEPIUID,
                                         b.OWFNOT_ID,
                                         b.EDOCEANAROW,
                                         b.OWFMESSAGENAME,
                                         b.OWFRECIPIENTROLE,
                                         b.startDate,
                                         b.endDate,
                                         b.EDOCTIMEISTA
                                     }).OrderBy(o => o.EDOCCUTSTAT).ToList();

                        //if (request.Page != null) request.Page = 1;
                        //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else // if => startDateState == "0" && endDateState == "0"
                    {
                        var query = conn.Query(@"select distinct EDOCNUM, EPOLNAME, EDOCCUSTSTAT, --OWFMSGTITEL,
                                                                 CASE WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'M-CONTROL' THEN OWFMSGTITEL || ' AOC'
                                                                      WHEN OWFMESSAGENAME = 'MCONTROLCENTER' AND OWFRECIPIENTROLE = 'RDC-CONTROL' THEN OWFMSGTITEL || ' RDC'
                                                                      ELSE OWFMSGTITEL
                                                                      END OWFMSGTITEL,                                                                 
                                                                 EDOCCUTSTAT, EANA_DESC, EEDO_DATE, EPRODESC, EFUNDESC, 
                                                                 DECODE(EDOCTIMEISTA,1,'ناپیوسته',0,'پیوسته',EDOCTIMEISTA) DOCTIME_STATE, nvl(INSTRU_CODE_NAME,'کل پست ') instruName, 
                                                                 (EPRODESC || ' - ' || EFUNDESC) progAndFunc, DECODE(EDOCCUTSTAT,1,'اصلی',null,'دیگر تجهیزات',EDOCCUTSTAT) INSTRU_STATE,
                                                                 EXP_DOCDATE_END(EEDOID,1,EDOCTIMEISTA,EPROID) startDateTime, EXP_DOCDATE_END(EEDOID,2,EDOCTIMEISTA,EPROID) endDateTime, 
                                                                 EXP_DOCDATE_END(EEDOID,3,EDOCTIMEISTA,EPROID) startDate, EXP_DOCDATE_END(EEDOID,4,EDOCTIMEISTA,EPROID) endDate,
                                                                 EEDOID, EDOCEPOLID, EDOCEINSID, EFUNID, EPROID, EDOCEPIUID, OWFNOT_ID, EDOCEANAROW, 
                                                                 OWFMESSAGENAME, OWFRECIPIENTROLE, EDOCTIMEISTA, ORGADESC, EXP_DOC_CONFIRMSTATE_END(EEDOID) Confirm_State
                                                 from EXP_RCEN_V, EXP_ANALYZOR_EVENT 
                                                 where EXP_RCEN_V.EDOCEANAROW = EXP_ANALYZOR_EVENT.EANA_ROW
                                                 and (OWFMESSAGENAME = 'MCREATOR' and OWFRECIPIENTROLE = :currentUserName)
                                                 --and (OWFMESSAGENAME = :cartableState or :cartableState is null)
                                                 and (OWFMESSAGENAME in (" + string.Join(",", SpliteCartableStates) + @") or :cartableState is null)
                                                 --AND  ((','|| :cartableState ||',' LIKE '%,'|| OWFMESSAGENAME ||',%') or :cartableState is null)
                                                 and (EDOCEPOLID = :postID or :postID is null)
                                                 and (EDOCEPIUID = :instruID or :instruID is null)
                                                 and (EDOCEANAROW = :groupExecutiveID or :groupExecutiveID is null)
                                                 and (EPROID = :programID or :programID is null)
                                                 and (EEDO_DATE like '%' || :dateCreate  || '%')
                                                 and (upper(EDOCNUM) like '%' || upper(:docNum) || '%')
                                                 --and (OWFRECIPIENTROLE = :peopleGroupExecutive or :peopleGroupExecutive is null) 
                                                 and (OWFRECIPIENTROLE IN(:peopleGroupExecutive," + string.Join(",", SplitecurrentCartableUser) + @") 
                                                      OR (:peopleGroupExecutive is null AND :currentCartableUser is null))     
                                                 --and (EDOCEDIN_STIN = :confirmState or :confirmState is null)
                                                 and (((EDOCEDIN_STIN = :confirmState or :confirmState is null) AND EPROID <> 252) 
                                                        OR 
                                                      ((LETT_TYPE = :confirmState or :confirmState is null) AND EPROID = 252))  
                                                 and (EDOCCUTSTAT = :instruState or :instruState is null)  
                                                 and (EDOCCUSTSTAT = :userState or :userState is null)
                                                 order by EEDOID desc", currentUserName, cartableState, postID, postID, instruID, instruID, groupExecutiveID, groupExecutiveID,
                                                                      programID, programID, dateCreate, docNum, peopleGroupExecutive,
                                                                      peopleGroupExecutive, currentCartableUser,
                                                                      confirmState, confirmState, confirmState, confirmState, instruState, instruState,
                                                                      userState, userState)
                                     .Select(b => new
                                     {
                                         b.EDOCNUM,
                                         b.EPOLNAME,
                                         b.EDOCCUSTSTAT,
                                         b.instruName,
                                         b.EEDO_DATE,
                                         b.EPRODESC,
                                         b.EFUNDESC,
                                         b.progAndFunc,
                                         b.startDateTime,
                                         b.endDateTime,
                                         b.OWFMSGTITEL,
                                         b.EDOCCUTSTAT,
                                         groupExecutive = b.EANA_DESC,
                                         b.ORGADESC,
                                         b.Confirm_State,
                                         // Hidden item in Grid                                     
                                         b.EEDOID,
                                         b.EDOCEPOLID,
                                         b.EDOCEINSID,
                                         b.EFUNID,
                                         b.EPROID,
                                         b.EDOCEPIUID,
                                         b.OWFNOT_ID,
                                         b.EDOCEANAROW,
                                         b.OWFMESSAGENAME,
                                         b.OWFRECIPIENTROLE,
                                         b.startDate,
                                         b.endDate,
                                         b.EDOCTIMEISTA
                                     }).OrderBy(o => o.EDOCCUTSTAT).ToList();

                        //if (request.Page != null) request.Page = 1;
                        //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                }
            }
        }

        public int return_noteid(decimal id)
        {
            int not_id = Db.Database.SqlQuery<int>("SELECT NOT_ID FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + id.ToString() + "'").FirstOrDefault();
            return not_id;
        }

        public ActionResult AllGroupExecutivePeople()
        {
            var query = (from b in Db.SEC_USER_TYPE_POST
                         join c in Db.EXP_ANALYZOR_EVENT on b.EANA_EANA_ROW equals c.EANA_ROW
                         join d in Db.SEC_USERS on b.SCSU_ROW_NO equals d.ROW_NO
                         join e in Db.PAY_PERSONEL on d.PRSN_EMP_NUMB equals e.EMP_NUMB
                         where c.EANA_TYPE == 1 && b.EURP_ACTV == 1 // یوزرهای فعال هستند
                         orderby e.FIRS_NAME
                         select new
                         {
                             b.EURP_ID,
                             FullName = e.FIRS_NAME + " " + e.FAML_NAME,
                             OrclName = d.ORCL_NAME
                         }).Distinct().ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteRequest_Admin()
        {
            ViewData["PostName"] = Db.EXP_POST_LINE.Where(p => p.EPOL_TYPE == "0").Select(p => new { p.EPOL_ID, p.EPOL_NAME });
            ViewData["Function"] = Db.EXP_PFUNCTION.Select(p => new { p.EFUN_ID, p.EFUN_DESC });
            ViewData["Analyzor"] = Db.EXP_ANALYZOR_EVENT.Where(p => p.ACTV_TYPE == "1" && p.EANA_TYPE == 1).Select(p => new { p.EANA_ROW, p.EANA_DESC });
            return View();
        }

        private string GetInstruDesc(decimal id)
        {
            var result = Db.Database.SqlQuery<string>(@"SELECT NVL(EXP_POST_LINE_INSTRU.CODE_NAME,'--') 
                                                         FROM EXP_EDOC_INSTRU LEFT JOIN EXP_POST_LINE_INSTRU 
                                                         ON EXP_EDOC_INSTRU.EPIU_EPIU_ID = EXP_POST_LINE_INSTRU.EPIU_ID 
                                                         WHERE EXP_EDOC_INSTRU.CUT_STAT ='1' AND EEDO_EEDO_ID = :p1", id).FirstOrDefault();
            return result;
        }

        private string GetCartableState(decimal id)
        {
            var result = Db.Database.SqlQuery<string>("SELECT NVL(MESSAGE_NAME,'--') FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^" + id.ToString() + "' and STAT ='OPEN'").FirstOrDefault();
            return result;
        }

        private string GetDocEndDate(decimal id)
        {
            var result = Db.Database.SqlQuery<string>("SELECT EXP_DOCDATE_END(:param,1) FROM DUAL", id).FirstOrDefault();
            return result;
        }

        //[EntityAuthorize("EXP_RCEN_V > select")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadForDelete([DataSourceRequest] DataSourceRequest request, string docNum)
        {
            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var query = conn.Query(@"select EEDO_ID, DOC_NUMB, EPOL_EPOL_ID, EFUN_EFUN_ID, EEDO_DATE, EEDO_DESC, EANA_EANA_ROW, CRET_BY,
                                                EXP_INSTRU_NAME_U((select edin_id from exp_edoc_instru where eedo_eedo_id = eedo_id and cut_stat = '1' and rownum = 1)) as CALC_COLUMN 
                                         from EXP_EXPI_DOC 
                                         where ETDO_ETDO_ID = 21 AND ((DOC_NUMB like '%'||:filter||'%') OR (:filter is null))", docNum, docNum).
                             Select(b => new
                             {
                                 b.EEDO_ID,
                                 b.DOC_NUMB,
                                 b.EPOL_EPOL_ID,
                                 b.EFUN_EFUN_ID,
                                 b.EEDO_DATE,
                                 b.EEDO_DESC,
                                 b.EANA_EANA_ROW,
                                 b.CALC_COLUMN,
                                 //CALC_COLUMN = GetInstruDesc(b.EEDO_ID) == "" || GetInstruDesc(b.EEDO_ID) == null ? "کل پست" : GetInstruDesc(b.EEDO_ID),
                                 //CARTABLE = GetCartableState(b.EEDO_ID),
                                 b.CRET_BY
                             }).OrderByDescending(b => b.EEDO_ID).ToList();

                var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
        }

        public ActionResult TimeCalculate(string startDate, string StartTime, string EndDate, string EndTime)
        {
            string endTime_DecreaseOneMinutes = EndTime;
            bool flagTime = false;
            if (endTime_DecreaseOneMinutes == "24:00")
            {
                endTime_DecreaseOneMinutes = "23:59";// چون ساعت 24 میشه 00 و باید یک روز به تاریخ اضافه بشه پس 1 دقیقه از آن کم می کنیم
                flagTime = true;
            }
            string sql = string.Format("select TIME_BETWEEN_U('{0}','{1}','{2}','{3}') from dual ", startDate, StartTime, EndDate, endTime_DecreaseOneMinutes);
            string time = Db.Database.SqlQuery<string>(sql).FirstOrDefault();
            var val = time.Split(':');
            string h = val[0].ToString();
            string m = val[1].ToString();
            int minute = Convert.ToInt16(h) * 60 + Convert.ToInt16(m);
            if (flagTime == true)
            {
                minute = minute + 1;
            }

            return new ServerMessages(ServerOprationType.Success) { CoustomData = minute }.ToJson();
        }

        /// <summary>
        /// ارسال پیام جهت اطلاع در کارتابل
        /// </summary>
        /// <param name="notId">NOT_ID => WF_NOTIFICATIONS</param>
        /// <param name="eedoId">شماره درخواست</param>
        /// <param name="currentStat">وضعیت جاری</param>
        /// <param name="state">تایید = Approve , عدیم تایید = Reject</param>
        /// <param name="msg">متن پیام</param>
        /// <param name="typeDoc">نوع مدرک --- دیفکت = 2 - برنامه زمانبندی = 101 - درخواست غیر زمانبندی = 21</param>
        /// <returns>Message</returns>
        public ActionResult SendMessage(int notId, int eedoId, string currentStat, string state, string msg, int? typeDoc, string userName = "")
        {
            string dateNow = DateTime.Now.GetShamsi();
            var message = new AsrWorkFlowMessage();
            var calcuMsg = string.Empty;
            var calcuMsgOrgan = string.Empty;
            int[] groupId = { 4, 5, 6, 7, 502 };
            var listUsers = new List<string>(); // All User Can Be Recieve Message in Any State

            //int[] DesignAndDevelopmentId = { /*17,*/ 18, 19 }; // مجری خط، مجری پست، مجری ساختمان
            //var typeDoc = Convert.ToInt32(Request.Form["typedocbag"]);

            var creator = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoId select b.CRET_BY).FirstOrDefault().ToString();
            var document = (from m in Db.EXP_RCEN_V
                            where m.ETDOID == 21 && m.EEDOID == eedoId && m.EDOCCUTSTAT == "1"
                            select new
                            {
                                m.EPROID,
                                m.EDOCNUM,
                                m.EPOLNAME,
                                m.INSTRU_CODE_NAME,
                                m.EDOCEANAROW,
                                m.EDOCEPOLID,
                                m.SUPLEURPID,
                                m.INSTRU_EINS_ID,
                                m.EFUNDESC
                            }).FirstOrDefault();

            var PostEanaGroup = (from b in Db.EXP_POST_LINE where b.EPOL_ID == (document.EDOCEPOLID.HasValue ? document.EDOCEPOLID : 0) select b.EANA_EANA_ROW).FirstOrDefault();

            var OrganPersonDetails = (from b in Db.SEC_USERS
                                      join c in Db.SEC_USER_TYPE_POST on b.ROW_NO equals c.SCSU_ROW_NO
                                      where c.EANA_EANA_ROW == PostEanaGroup
                                      select new { b.ROW_NO, b.ORCL_NAME, c.EANA_EANA_ROW, c.EURP_TYPE, c.OUTP_OUTP_ID });

            string StartDate = Db.Database.SqlQuery<string>("SELECT EXP_DOCDATE_END(" + eedoId + ",3) FROM DUAL").FirstOrDefault(); //docInstru.OFF_DATE;          
            string EndDate = Db.Database.SqlQuery<string>("SELECT EXP_DOCDATE_END(" + eedoId + ",4) FROM DUAL").FirstOrDefault();   //docInstru.ON_DATE;

            var manageCreator = (from c in Db.EXP_USER_V
                                 where c.EANA_EANA_ROW == (document.EDOCEANAROW.HasValue ? document.EDOCEANAROW : 0) && c.EURP_TYPE == 0 && c.EURP_ACTV == 1
                                 select c.ORCL_NAME).FirstOrDefault();
            manageCreator = string.IsNullOrEmpty(manageCreator) ? "" : manageCreator;

            var managePost = (from c in Db.SEC_USERS
                              join b in Db.SEC_USER_TYPE_POST on c.ROW_NO equals b.SCSU_ROW_NO
                              where b.EPOL_EPOL_ID == (document.EDOCEPOLID.HasValue ? document.EDOCEPOLID : 0) && b.EURP_TYPE == 0 && b.ETDO_ETDO_ID == 343
                              select c.ORCL_NAME).FirstOrDefault();
            managePost = string.IsNullOrEmpty(managePost) ? "" : managePost;

            var executor = (from c in Db.EXP_USER_V
                            where c.EURP_ID == (document.SUPLEURPID.HasValue ? document.SUPLEURPID : 0) /*&& c.EURP_TYPE == 0 */ && c.EURP_ACTV == 1
                            select c.ORCL_NAME).FirstOrDefault();
            executor = string.IsNullOrEmpty(executor) ? "" : executor;

            //if (document.EDOCEANAROW.HasValue && document.EDOCEANAROW.Value != null)
            //{
            //    manageCreator = (from c in Db.EXP_USER_V
            //                     where c.EANA_EANA_ROW == document.EDOCEANAROW && c.EURP_TYPE == 0 && c.EURP_ACTV == 1
            //                     select c.ORCL_NAME).FirstOrDefault().ToString();
            //}
            //manageCreator = string.IsNullOrEmpty(manageCreator) ? "SHIRAZ" : manageCreator;

            //if (document.EDOCEPOLID.HasValue && document.EDOCEPOLID.Value != null)
            //{
            //    managePost = (from c in Db.SEC_USERS
            //                  join b in Db.SEC_USER_TYPE_POST on c.ROW_NO equals b.SCSU_ROW_NO
            //                  where b.EPOL_EPOL_ID == document.EDOCEPOLID && b.EURP_TYPE == 0 && b.ETDO_ETDO_ID == 343
            //                  select c.ORCL_NAME).FirstOrDefault().ToString();
            //}
            //managePost = string.IsNullOrEmpty(managePost) ? "SHIRAZ" : managePost;

            //if (document.SUPLEURPID.HasValue && document.SUPLEURPID.Value != null)
            //{
            //    executor = (from c in Db.EXP_USER_V
            //                where c.EURP_ID == document.SUPLEURPID  /*&& c.EURP_TYPE == 0 */ && c.EURP_ACTV == 1
            //                select c.ORCL_NAME).FirstOrDefault().ToString();
            //}
            //executor = string.IsNullOrEmpty(executor) ? "SHIRAZ" : executor;

            var userRole = (from b in Db.SEC_JOB_TYPE_DOC
                            join c in Db.SEC_USER_POST_JOB on b.JDTY_ID equals c.JDTY_JDTY_ID
                            join d in Db.SEC_USERS on c.SCSU_ROW_NO equals d.ROW_NO
                            where b.ETDO_ETDO_ID == 21
                            select new { ORCL_NAME = d.ORCL_NAME, JDTY_ID = b.JDTY_ID }).Distinct();

            // گروه های اجرایی
            var executiveGroup = (from b in Db.SEC_USER_TYPE_POST
                                  join c in Db.SEC_USERS on b.SCSU_ROW_NO equals c.ROW_NO
                                  where groupId.Contains(b.EANA_EANA_ROW.Value) && b.EURP_TYPE == 0 && b.EURP_ACTV == 1
                                  select new { ORCL_NAME = c.ORCL_NAME, EANA_EANA_ROW = b.EANA_EANA_ROW, ROW_NO = b.SCSU_ROW_NO });

            // دفتر فنی
            string technicalOffice = userRole.Where(x => x.JDTY_ID == 95).Any() ? userRole.Where(x => x.JDTY_ID == 95).Select(x => x.ORCL_NAME).FirstOrDefault().ToString() : "";
            // معاونت
            string assistance = userRole.Where(x => x.JDTY_ID == 96).Any() ? userRole.Where(x => x.JDTY_ID == 96).Select(x => x.ORCL_NAME).FirstOrDefault().ToString() : "";
            // برنامه ریزی دیسپاچینگ
            string dispachingPlanner = userRole.Where(x => x.JDTY_ID == 97).Any() ? userRole.Where(x => x.JDTY_ID == 97).Select(x => x.ORCL_NAME).FirstOrDefault().ToString() : "";
            // مرکز کنترل
            string controlCenter = userRole.Where(x => x.JDTY_ID == 101).Any() ? userRole.Where(x => x.JDTY_ID == 101).Select(x => x.ORCL_NAME).FirstOrDefault().ToString() : "";
            // مرکز پیام
            string messageCenter = userRole.Where(x => x.JDTY_ID == 100).Any() ? userRole.Where(x => x.JDTY_ID == 100).Select(x => x.ORCL_NAME).FirstOrDefault().ToString() : "";
            // مدیر تعمیرات پست
            string postRepairManager = executiveGroup.Where(x => x.EANA_EANA_ROW == 4).Any() ? executiveGroup.Where(x => x.EANA_EANA_ROW == 4).Select(x => x.ORCL_NAME).FirstOrDefault() : "";
            // مدیر تعمیرات خطوط
            string lineRepairManager = executiveGroup.Where(x => x.EANA_EANA_ROW == 6).Any() ? executiveGroup.Where(x => x.EANA_EANA_ROW == 6).Select(x => x.ORCL_NAME).FirstOrDefault() : "";
            // مدیر حفاظت و کنترل
            string securityAndControlManager = executiveGroup.Where(x => x.EANA_EANA_ROW == 5).Any() ? executiveGroup.Where(x => x.EANA_EANA_ROW == 5).Select(x => x.ORCL_NAME).FirstOrDefault() : "";
            // مدیر دیسپاچینگ و مخابرات
            string DispachingManager = executiveGroup.Where(x => x.EANA_EANA_ROW == 7).Any() ? executiveGroup.Where(x => x.EANA_EANA_ROW == 7).Select(x => x.ORCL_NAME).FirstOrDefault() : "";
            // مدیر HSE
            string HSEManager = executiveGroup.Where(x => x.EANA_EANA_ROW == 502).Any() ? executiveGroup.Where(x => x.EANA_EANA_ROW == 502).Select(x => x.ORCL_NAME).FirstOrDefault() : "";
            // مسئول ناحیه
            string[] OrganManager = OrganPersonDetails.Where(x => x.EURP_TYPE == 0).Any() ? OrganPersonDetails.Where(x => x.EURP_TYPE == 0).Select(x => x.ORCL_NAME).ToArray() : new string[0];
            // جانشین مسئول ناحیه
            string[] OrganSuccessorManager = OrganPersonDetails.Where(x => x.EURP_TYPE == 1).Any() ? OrganPersonDetails.Where(x => x.EURP_TYPE == 1).Select(x => x.ORCL_NAME).ToArray() : new string[0];

            string otherUser = "S-KHADEMI";
            
            string instruType = document.INSTRU_EINS_ID.HasValue ? (document.INSTRU_EINS_ID == 1 ? " خط " : " تجهیز ") : "";

            calcuMsg = " درخواست شماره " + document.EDOCNUM + " مربوط به پست " + document.EPOLNAME + (string.IsNullOrEmpty(document.INSTRU_CODE_NAME) ? "" : (" و " + instruType + document.INSTRU_CODE_NAME)) + " در تاریخ " + dateNow;
            calcuMsgOrgan = " درخواست شماره " + document.EDOCNUM + " مربوط به پست " + document.EPOLNAME + (string.IsNullOrEmpty(document.INSTRU_CODE_NAME) ? "" : (" و " + instruType + document.INSTRU_CODE_NAME)) + " در تاریخ " + StartDate + " الی " + EndDate + " درحال اجرا می باشد ";

            if (state == "Approve")
            {
                switch (currentStat)
                {
                    case "CREATOR":
                        if (typeDoc == 101) // درخواست زمانبندی شده
                        {
                            listUsers = new List<string>();
                            listUsers.Add(technicalOffice);
                            //listUsers.Add(assistance);
                            if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                            {
                                message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "درخواست انجام کار زمانبندی شده", " جهت اطلاعا شما " + calcuMsg + " بصورت زمانبندی ایجاد و درحال بررسی برنامه ریزی دیسپاچینگ می باشد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                                message.Send();
                            }
                            message.Dispose();
                        }
                        else if (document.EPROID == 250) // اضطراری
                        {
                            listUsers = new List<string>();
                            listUsers.Add(technicalOffice);
                            listUsers.Add(assistance);
                            listUsers.Add(dispachingPlanner);
                            listUsers.Add(manageCreator);
                            if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                            {
                                message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "درخواست انجام کار اضطراری", calcuMsg + " بصورت اضطراری ایجاد و به مرکز کنترل جهت بررسی ارسال شد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                                message.Send();
                            }
                            message.Dispose();
                        }
                        break;

                    case "MANEGERCR": // مدیر درخواست دهنده
                        if (document.EPROID == 253) // برنامه طرح و توسعه
                        {
                            listUsers = new List<string>();
                            listUsers.Add(postRepairManager);
                            listUsers.Add(lineRepairManager);
                            listUsers.Add(securityAndControlManager);
                            //listUsers.Add(DispachingManager);
                            if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                            {
                                message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "اطلاعیه درخواست انجام کار", " جهت اطلاعا شما " + calcuMsg + " ایجاد و درحال بررسی در دفتر فنی می باشد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                                message.Send();
                            }
                            message.Dispose();
                        }
                        break;

                    //case "DISPACHMANEG": // مدیر دیسپاچینگ
                    case "PROGRAMER": // برنامه ریزی دیسپاچینگ
                        listUsers = new List<string>();
                        listUsers.Add(creator);
                        listUsers.Add(managePost);
                        listUsers.Add(executor);
                        listUsers.Add(messageCenter);
                        listUsers.Add(HSEManager);
                        listUsers.Add("ME-SHANBEZADE");
                        listUsers.Add("M-MEHRABI");
                        //listUsers.Add(postRepairManager);
                        //listUsers.Add(lineRepairManager);                        
                        //listUsers.Add(securityAndControlManager);
                        //listUsers.Add(otherUser);
                        //message = new Asr.Cartable.AsrWorkFlowMessage(User.Identity.Name, new string[] { creator, managePost, executor, messageCenter, otherUser }, "تاییدیه درخواست انجام کار", calcuMsg + " توسط مدیر دیسپاچینگ تایید شد و آماده جهت اجرا می باشد ");
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {
                            message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "تاییدیه درخواست انجام کار", calcuMsg + " توسط مدیر دیسپاچینگ تایید شد و آماده جهت اجرا می باشد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                            message.Send();
                        }
                        message.Dispose();

                        //ارسال رونوشت برای مرکزکنترل در تاریخ 98/10/15 بنابه درخواست مهندس حسین زاده غیرفعال شد
                        // ارسال پیام برای مرکز کنترل، تعمیرات خطوط، تعمیرات پست، حفاظت و کنترل
                        //string controlCenterUser = (userName == "M-CONTROL" ? "RDC-CONTROL" : userName);
                        //string controlCenterType = (userName == "M-CONTROL" ? "AOC" : "RDC");
                        //message = new AsrWorkFlowMessage(User.Identity.Name, new string[] { controlCenterUser }, "اطلاعیه درخواست انجام کار", " جهت اطلاعا شما " + calcuMsg + " توسط مدیر دیسپاچینگ تأیید و به مرکز کنترل " + controlCenterType + " ارسال شد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                        //message.Send();
                        //message.Dispose();

                        // ارسال پیام برای رئیس و جانشین ناحیه
                        listUsers = new List<string>();
                        listUsers.AddRange(OrganManager);
                        listUsers.AddRange(OrganSuccessorManager);
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {
                            message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "اطلاع رسانی درخواست انجام کار", calcuMsgOrgan + " || " + "نوع عملیات : " + document.EFUNDESC);
                            message.Send();
                        }
                        message.Dispose();

                        break;                    

                    //case "MENAGPOST": // مسئول پست      
                    //    listUsers = new List<string>();
                    //    listUsers.Add(creator);
                    //    if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                    //    {
                    //        message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "بایگانی درخواست", calcuMsg + " بایگانی شد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                    //        message.Send();
                    //    }
                    //    message.Dispose();
                    //    break;

                    case "ENTEGHALC": // امور انتقال
                        if (document.EPROID == 252) // خدماتی
                        {
                            listUsers = new List<string>();
                            listUsers.Add(creator);
                            listUsers.Add(executor);
                            listUsers.Add("ME-SHANBEZADE");
                            listUsers.Add("M-MEHRABI");
                            //listUsers.Add(controlCenter);
                            //listUsers.Add(otherUser);
                            if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                            {
                                message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "تاییدیه درخواست انجام کار خدماتی / فنی / تاسیساتی / بازديدها", calcuMsg + " توسط مدیر امور انتقال تایید شد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                                message.Send();
                            }
                            message.Dispose();

                            // ارسال پیام برای رئیس و جانشین ناحیه
                            listUsers = new List<string>();
                            listUsers.AddRange(OrganManager);
                            listUsers.AddRange(OrganSuccessorManager);
                            if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                            {
                                message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "اطلاع رسانی درخواست انجام کار خدماتی / فنی / تاسیساتی / بازديدها", calcuMsgOrgan + " || " + "نوع عملیات : " + document.EFUNDESC);
                                message.Send();
                            }
                            message.Dispose();
                        }
                        break;

                    //case "MESSAGECENTER": // مرکز پیام
                    //    if (document.EPROID == 252) // خدماتی
                    //    {
                    //        listUsers = new List<string>();
                    //        listUsers.Add(creator);
                    //        listUsers.Add(executor);
                    //        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                    //        {
                    //            message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "تاییدیه درخواست انجام کار خدماتی / فنی / تاسیساتی / بازديدها", calcuMsg + " توسط مرکز پیام تایید و جهت اجرا ارجاع داده شد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                    //            message.Send();
                    //        }
                    //        message.Dispose();
                    //    }
                    //    break;

                    //case "CONTROLCENTER": // مرکز کنترل
                    //    if (DesignAndDevelopmentId.Contains(document.EDOCEANAROW.Value)) // مجری خط - مجری پست - مجری ساختمان
                    //    {
                    //        message = new Asr.Cartable.AsrWorkFlowMessage(User.Identity.Name, new string[] { executor }, "تاییدیه درخواست انجام کار", calcuMsg + " توسط مرکز کنترل تایید و جهت اجرا ارجاع داده شد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                    //        message.Send();
                    //        message.Dispose();
                    //    }
                    //    break;

                    default:
                        message.Dispose();
                        break;
                }
            }
            else if (state == "Reject")
            {
                switch (currentStat)
                {
                    case "PROGRAMER": // برنامه ریزی
                        listUsers = new List<string>();
                        listUsers.Add(creator);
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {
                            message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "مخالفت با درخواست انجام کار", " با " + calcuMsg + " موافقت نشد و توسط برنامه ریزی دیسپاچینگ لغو گردید " + " || " + "نوع عملیات : " + document.EFUNDESC);
                            message.Send();
                        }
                        message.Dispose();
                        break;

                    case "MENAGPOST": // مسئول پست     
                        listUsers = new List<string>();
                        listUsers.Add(executor);
                        //listUsers.Add(manageCreator);
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {
                            message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "عدم تایید درخواست انجام کار", calcuMsg + " انجام نشد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                            message.Send();
                        }
                        message.Dispose();
                        break;

                    case "CONTROLCENTER": // مرکز کنترل    
                        listUsers = new List<string>();
                        listUsers.Add(executor);
                        //listUsers.Add(manageCreator);
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {
                            message = new AsrWorkFlowMessage(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).ToArray(), "عدم تایید درخواست انجام کار", calcuMsg + " انجام نشد " + " || " + "نوع عملیات : " + document.EFUNDESC);
                            message.Send();
                        }
                        message.Dispose();
                        break;

                    default:
                        message.Dispose();
                        break;
                }
            }

            message.Dispose();
            return new ServerMessages(ServerOprationType.Success) { Message = "Send Message Success" }.ToJson();
        }

        public ActionResult MultiCancelRequest()
        {
            return View();
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ReadRequestControlCenter([DataSourceRequest] DataSourceRequest request, string filterInput, string startDate, string endDate)
        {
            bool filterDisable = string.IsNullOrEmpty(filterInput);
            string filter = string.Empty;
            if (filterInput != null)
            {
                filter = string.IsNullOrEmpty(filterInput.ToUpper()) ? "" : filterInput.ToUpper().ToArabicUtf8();
            }

            var query = (from b in Db.EXP_RCEN_V
                         join c in Db.EXP_ANALYZOR_EVENT on b.EDOCEANAROW equals c.EANA_ROW
                         where b.OWFSTAT == "OPEN" && b.EDOCCUTSTAT == "1" && b.OWFMESSAGENAME == "MCONTROLCENTER" && b.EDOCJDTYID == 91 &&
                               (b.EDOCNUM.ToUpper().Contains(filter) || b.EPOLNAME.ToUpper().Contains(filter) || b.INSTRU_CODE_NAME.ToUpper().Contains(filter) || filterDisable)
                         //|| (b.EEDOID == filterDecimal && parsing)
                         orderby b.EEDOID descending
                         select new
                         {
                             b.EEDOID,
                             b.EDOCNUM,
                             b.EPOLNAME,
                             instruName = b.EDOCEPIUID.HasValue ? b.INSTRU_CODE_NAME : "کل پست",
                             b.EEDO_DATE,
                             b.EPRODESC,
                             b.EFUNDESC,
                             startDate = b.EDOCOFFDATE + " - " + b.EDOCOFFTIME,
                             endDate = b.EDOCONDATE + " - " + b.EDOCONTIME,
                             groupExecutive = c.EANA_DESC
                         }).Distinct().OrderByDescending(x => x.EEDOID);

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }


        public ActionResult SaveMultiCancelRequest(decimal[] docId)
        {
            string tt = string.Empty;
            if (docId != null)
            {
                try
                {
                    foreach (var item in docId)
                    {
                        tt += item.ToString() + "*";
                    }
                    return new ServerMessages(ServerOprationType.Success) { Message = "درخواست های انتخابی ثبت و برگشت داده شد" }.ToJson();
                }
                catch (Exception ex)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                }
            }
            else
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "درخواستی جهت ثبت انتخاب نشده" }.ToJson();
            }
        }

        public ActionResult checkControlCenterSaveState(int id)
        {
            int[] array = { 1, 2, 3, 4, 7, 9, 12, 367, 8 };
            var query = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == id where (b.CRET_BY == "M-CONTROL" || b.CRET_BY == "RDC-CONTROL") select new { b.EDIN_ID, b.EPIU_EPIU_ID }).FirstOrDefault();
            if (query == null)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات این درخواست هنوز توسط مرکز کنترل ثبت نشده" }.ToJson();
            }
            else
            {
                if (query.EPIU_EPIU_ID.HasValue)
                {
                    var instruType = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == query.EPIU_EPIU_ID select b.EINS_EINS_ID).FirstOrDefault();
                    if (array.Contains(instruType.Value))
                        return new ServerMessages(ServerOprationType.Success) { Message = "امکان ثبت رویداد وجود دارد" }.ToJson();
                    else
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "امکان ثبت رویداد برای این نوع تجهیز وجود ندارد" }.ToJson();
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "امکان ثبت رویداد برای این نوع تجهیز وجود ندارد" }.ToJson();
                }
            }
        }

        public ActionResult ListFlowState(int eedoId)
        {
            //var allState = Db.Database.SqlQuery<string>(string.Format("SELECT MESSAGE_NAME FROM WF_NOTE_V WHERE ITEM_KEY = 'FLW_REQU.PFLW_REQU^{0}' ORDER BY NOT_ID", eedoId)).ToList();
            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var query = conn.Query(@"SELECT NOT_ID, MESSAGE_NAME, RECIPIENT_ROLE, STAT, (:eedoId) RequestId,
                                                NVL(PAY_PERSONEL.FIRS_NAME, SEC_USERS.FIRS_NAME) FIRS_NAME,
                                                NVL(PAY_PERSONEL.FAML_NAME, SEC_USERS.FAML_NAME) FAML_NAME,
                                                NVL((NVL(PAY_PERSONEL.FIRS_NAME, NVL(SEC_USERS.FIRS_NAME,RECIPIENT_ROLE )) || ' ' || NVL(PAY_PERSONEL.FAML_NAME, SEC_USERS.FAML_NAME)),RECIPIENT_ROLE) FULLNAME,
                                                decode(message_name, 'MMANEGPOST','مسئول پست','MFANIC','دفتر فنی','MARCHEIVE','بایگانی','MCREATOR','درخواست دهنده',
                                                                     'MPROGRAMER','برنامه ریزی دیسپاچینگ','MMANEGCONFIRM','معاونت','MMESSAGCENTER','مرکز پیام',
                                                                     'MWORKER','اجرا کننده','MENTEGHALC','امور انتقال','MDISPACHMANEG','مدیر دیسپاچینگ',
                                                                     'MMANEGERCR','مدیر درخواست دهنده','MCONTROLCENTER','مرکز کنترل',message_name) MESSAGE_NAME_FARSI
                                         FROM WF_NOTE_V, SEC_USERS, PAY_PERSONEL
                                         WHERE ((PAY_PERSONEL.EMP_NUMB(+) = SEC_USERS.PRSN_EMP_NUMB) AND (WF_NOTE_V.RECIPIENT_ROLE = SEC_USERS.ORCL_NAME(+)))
                                                AND ITEM_KEY = 'FLW_REQU.PFLW_REQU^'||:RequesId ORDER BY NOT_ID", eedoId, eedoId).
                             Select(b => new
                             {
                                 b.RequestId,
                                 b.NOT_ID,
                                 b.MESSAGE_NAME,
                                 b.MESSAGE_NAME_FARSI,
                                 b.RECIPIENT_ROLE,
                                 b.STAT,
                                 b.FIRS_NAME,
                                 b.FAML_NAME,
                                 b.FULLNAME
                             }).ToList();

                //return Json(query, JsonRequestBehavior.AllowGet);
                return new ServerMessages(ServerOprationType.Success) { Message = "Return All State", CoustomData = query }.ToJson();
            }
        }

        private decimal CheckAndFindData(int eedoId, string stat)
        {
            int stateId = 0;
            switch (stat)
            {
                case "MMANEGPOST": // مسئول پست
                    stateId = 521;
                    break;
                case "MFANIC": // دفتر فنی
                    stateId = 95;
                    break;
                case "MARCHEIVE": // بایگانی
                    stateId = 103;
                    break;
                case "MCREATOR": // درخواست دهنده
                    stateId = 91;
                    break;
                case "MPROGRAMER": // برنامه ریزی دیسپاچینگ
                    stateId = 97;
                    break;
                case "MMANEGCONFIRM": // معاونت
                    stateId = 96;
                    break;
                case "MMESSAGCENTER": // مرکز پیام
                    stateId = 100;
                    break;
                case "MWORKER": // اجرا کننده
                    stateId = 102;
                    break;
                case "MENTEGHALC": // امور انتقال
                    stateId = 94;
                    break;
                case "MDISPACHMANEG": // مدیر دیسپاچینگ
                    stateId = 107;
                    break;
                case "MMANEGERCR": // مدیر درخواست دهنده
                    stateId = 92;
                    break;
                case "MCONTROLCENTER": // مرکز کنترل
                    stateId = 101;
                    break;
                case "EXPERTENTEGHAL": // کارشناس هماهنگي
                    stateId = 861;
                    break;
                case "MENAGORGAN": // مسئول ناحيه
                    stateId = 901;
                    break;
                default:
                    stateId = 0;
                    break;
            }

            var edinId = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedoId && b.JDTY_JDTY_ID == stateId orderby b.EDIN_ID descending select b.EDIN_ID).FirstOrDefault();
            return edinId;
        }

        public ActionResult DeleteWorkFlowState(int eedoId, int? notId, string stat, string reciverFullName)
        {
            try
            {
                string delFlowCommand = string.Format("delete from wf_notifications where message_type = 'FLW_REQU' and NOTIFICATION_ID in (SELECT NOT_ID FROM WF_NOTE_V where ITEM_KEY = 'FLW_REQU.PFLW_REQU^{0}' and NOT_ID > {1})", eedoId, notId);
                Db.Database.ExecuteSqlCommand(delFlowCommand);
                string upFlowCommand = string.Format("update wf_notifications set status = 'OPEN' where NOTIFICATION_ID = {0}", notId);
                Db.Database.ExecuteSqlCommand(upFlowCommand);

                var edinId = CheckAndFindData(eedoId, stat);
                if (edinId != null && edinId != 0)
                {
                    string delEdocCommand = string.Format("delete from exp_edoc_instru where eedo_eedo_id = {0} and edin_id > {1}", eedoId, edinId);
                    Db.Database.ExecuteSqlCommand(delEdocCommand);
                }

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("درخواست شماره «{0}» به کارتابل «{1}» انتقال داده شد", eedoId, reciverFullName) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        public ActionResult ArchiveRequest(int notId, int eedoId)
        {
            try
            {
                int checkData = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedoId && b.JDTY_JDTY_ID == 101 select b).Count();
                if (checkData == 0) // وضعیتی که مرکز کنترل ویرایشی انجام نداده باشد
                {
                    string idrole = string.Empty;
                    AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
                    wp.Reject("CONTROLCENTER");
                    wp.Reject("PROGRAMER");
                    //wp.SetKeyValue("MY_FLAG", "1");
                    //idrole = "ARCHEIVE";
                    //AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);                    
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("درخواست شماره «{0}» بایگانی شد", eedoId) }.ToJson();
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این درخواست توسط مرکز کنترل ویرایش شده و قابل برگشت نمیباشد" }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /// <summary>
        /// چک کردن تعداد روزهای کاری برای ثبت اطلاعات درخواست
        /// </summary>
        /// <param name="epiuId">تجهیز</param>
        /// <param name="eofsId">وضعیت قطع</param>
        /// <param name="custStat">بی برق می گردد</param>
        /// <returns>Day Count Need For Accept</returns>
        private int CheckWorkDate(int epiuId, int eofsId, string custStat, string typeInst, string postId)
        {
            int? postVolt = Db.EXP_POST_LINE.Find(int.Parse(postId)).EUNL_EUNL_ID;

            if (typeInst != "0")
            {
                if (epiuId != null && epiuId != 0)
                {
                    var instruDetails = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == epiuId select new { b.EINS_EINS_ID, b.EUNL_EUNL_ID }).FirstOrDefault();
                    if (instruDetails != null)
                    {                        
                        if (instruDetails.EINS_EINS_ID.HasValue)
                        {
                            var instruType = instruDetails.EINS_EINS_ID;
                            int?[] chargerAndBattery = { 56, 57, 1441, 982, 984, 432, 169, 232, 327 }; // شارژرها - باطریخانه ها - اینورتر
                            if ((postVolt == 1 || postVolt == 62) && chargerAndBattery.Contains(instruType.GetValueOrDefault()))
                                return 4;

                            if ((postVolt == 63 || postVolt == 161) && chargerAndBattery.Contains(instruType.GetValueOrDefault()))
                                return 4;

                            if (instruDetails.EUNL_EUNL_ID.HasValue)
                            {
                                var instruVolt = instruDetails.EUNL_EUNL_ID;                                
                                int?[] specialInstru = { 1, 7, 281 }; // خط - بریکر - باسبار
                                var releId = (from b in Db.EXP_INSTRUMENT where b.EINS_EINS_ID == 367 || specialInstru.Contains(b.EINS_ID) select b.EINS_ID).ToList();

                                if ((instruVolt == 1 || instruVolt == 62) && eofsId == 182)
                                    return 5;

                                if ((instruVolt == 63 || instruVolt == 161) && eofsId == 81 && custStat == "0")
                                    return 3;

                                if ((instruVolt == 63 || instruVolt == 161) && eofsId == 81 && custStat == "1")
                                    return 2;

                                if ((instruVolt == 1 || instruVolt == 62) && eofsId == 181)
                                    return 4;

                                if ((instruVolt == 63 || instruVolt == 161) && eofsId == 181)
                                    return 1;

                                if (instruVolt == 201 && /*specialInstru.Contains(instruType) ||*/ releId.Contains(instruType.GetValueOrDefault()) && eofsId == 81 && custStat == "0")
                                    return 3;

                                if (instruVolt == 201 && /*specialInstru.Contains(instruType) ||*/ releId.Contains(instruType.GetValueOrDefault()) && eofsId == 81 && custStat == "1")
                                    return 2;

                                if (instruVolt == 201 && instruType == 4 && custStat == "0") // خازن
                                    return 2;

                                if (instruVolt == 201 && eofsId == 221 && custStat == "0") // قطع تجهیز توزیع
                                    return 4;

                                if (instruVolt == 201 && eofsId == 221 && custStat == "1") // قطع تجهیز توزیع
                                    return 2;
                            }
                        }
                    }
                }
            }
            else if (typeInst == "0")
            {                
                if (postVolt.HasValue)
                {
                    //if ((postVolt == 1 || postVolt == 62) && eofsId == 182)
                    //    return 5;

                    if ((postVolt == 1 || postVolt == 62) /*&& eofsId == 181*/)
                        return 4;
                }
            }

            return 0;
        }

    }

}