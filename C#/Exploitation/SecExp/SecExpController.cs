using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.SecExp
{
    public class SecExpController : DbController
    {
        //BandarEntities Db;        

        //protected override void Dispose(bool disposing)
        //{
        //    if (disposing)
        //        Db.Dispose();
        //    base.Dispose(disposing);
        //}

        PersianCalendar pc = new PersianCalendar();
        DateTime thisDate = DateTime.Now;
        int? userid = 0; string username = string.Empty;

        public SecExpController()
            : base()
        {
            //Db = this.DB();
            userid = this.UserInfo().UserId;
        }

        //
        // GET: /SecExp/
        public string Ajax_update_SEC_USER_TYPE_POST(int? EURP_ID, int? EURP_ACTV)
        {
            Db.Database.ExecuteSqlCommand(string.Format("update SEC_USER_TYPE_POST set EURP_ACTV={0} where EURP_ID={1}", EURP_ACTV, EURP_ID));
            return null;
        }

        public ActionResult Index()
        {
            return View();
        }
        public ActionResult Log_Time()
        {
            return View();
        }

        public ActionResult Getpost()
        {
            var query = (from b in Db.EXP_POST_LINE
                         orderby b.EPOL_NAME
                         where b.EPOL_TYPE == "0"
                         select new { b.EPOL_ID, EPOL_NAME = b.EPOL_NAME }).ToList();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Getdoc()
        {
            var query = (from b in Db.EXP_TYPE_DOC
                         orderby b.ETDO_DESC
                         select new { b.ETDO_ID, b.ETDO_DESC }).ToList();
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetFlowdoc()
        {
            var query = (from b in Db.EXP_TYPE_DOC
                         orderby b.ETDO_DESC
                         select new { b.FLOW_TYPE, b.ETDO_DESC }).ToList();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetAnalyz()
        {
            var query = (from b in Db.EXP_ANALYZOR_EVENT
                         orderby b.EANA_DESC
                         select new { b.EANA_ROW, b.EANA_DESC }).ToList();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetContractor()
        {
            var query = (from b in Db.CNT_CONTRACTOR
                         where b.COMP_NAME != null
                         orderby b.COMP_NAME
                         select new { b.CNOR_ID, b.COMP_NAME }).ToList();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SEC_USER_TYPE_POST()
        {
            return View();
        }

        public ActionResult TransferDocuments()
        {
            return View();
        }

        public ActionResult SEC_USERS_GROUPS()
        {
            return View();
        }

        public ActionResult EXP_ANALYZOR_EVENT()
        {
            return View();
        }




        //Grid Name:        UsersGrid
        //EF DbContext:     cntx
        //Model Name:       SEC_USERS
        //Primary Key:      ROW_NO
        //Controller Name:  SecExp

        #region UsersGrid(Grid) Actions
        public ActionResult UsersGridCartable([DataSourceRequest] DataSourceRequest request, string UserName, string MessageType)
        {
            var query = Db.Database.SqlQuery<Asr.Cartable.Models.WF_NOTE_V>(string.Format("select * from WF_NOTE_V where RECIPIENT_ROLE='{0}' and MESSAGE_TYPE ='{1}' and STAT='OPEN'", UserName, MessageType))
                                                            .Select(x => new
                                                            {
                                                                x.MESSAGE_BODY,
                                                                x.NOT_ID,
                                                                x.DISPLAY_NAME,
                                                                x.DOC_NUMB,
                                                                x.CONTEXT,
                                                                x.ITEM_KEY,
                                                                x.MESSAGE_NAME,
                                                                x.STAT,
                                                                x.RECIPIENT_ROLE,
                                                                x.MSG_TITEL,
                                                                x.SUBJECT,
                                                                x.MESSAGE_TYPE

                                                            }).ToList();

            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult UsersGridRead([DataSourceRequest] DataSourceRequest request, int? epol_id, int? EANA_EANA_ROW, int? CCOR_CNOR_ID)
        {
            var query = (from p in Db.SEC_USER_TYPE_POST
                         join d in Db.SEC_USERS on p.SCSU_ROW_NO equals d.ROW_NO
                         where (p.EPOL_EPOL_ID == epol_id || epol_id == null) && (p.EANA_EANA_ROW == EANA_EANA_ROW || EANA_EANA_ROW == null) && (p.CCOR_CNOR_ID == CCOR_CNOR_ID || CCOR_CNOR_ID == null)
                         orderby p.EURP_ID descending
                         select new
                         {
                             p.EURP_ID,
                             FAML_NAME = p.SEC_USERS.PAY_PERSONEL.FAML_NAME != null ? p.SEC_USERS.PAY_PERSONEL.FAML_NAME : p.SEC_USERS.FAML_NAME,
                             FIRS_NAME = p.SEC_USERS.PAY_PERSONEL.FIRS_NAME != null ? p.SEC_USERS.PAY_PERSONEL.FIRS_NAME : p.SEC_USERS.FIRS_NAME,
                             ETDO_DESC = p.EXP_TYPE_DOC.ETDO_DESC,
                             EPOL_NAME = p.EXP_POST_LINE.EPOL_NAME,
                             EANA_DESC = p.EXP_ANALYZOR_EVENT.EANA_DESC,
                             COMP_NAME = p.CNT_CONTRACTOR.COMP_NAME,
                             p.EURP_TYPE,
                             USER_NAME = d.USER_NAME,
                             // EURP_ACTV = p.EURP_ACTV == 1 ? " فعال" : "غیر فعال",
                             p.EURP_ACTV,
                             p.SCSU_ROW_NO
                         }).ToList();

            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult UsersGridReadGroup([DataSourceRequest] DataSourceRequest request, int? grop_id)
        {
            var query = (from p in Db.EXP_USERS_GROUPS
                         join d in Db.SEC_USERS on p.SCSU_ROW_NO equals d.ROW_NO
                         where (p.GROP_GROP_ID == grop_id || grop_id == null)
                         orderby p.GROP_GROP_ID descending
                         select new
                         {
                             p.EUGR_ID,
                             FAML_NAME = p.SEC_USERS.PAY_PERSONEL.FAML_NAME != null ? p.SEC_USERS.PAY_PERSONEL.FAML_NAME : p.SEC_USERS.FAML_NAME,
                             FIRS_NAME = p.SEC_USERS.PAY_PERSONEL.FIRS_NAME != null ? p.SEC_USERS.PAY_PERSONEL.FIRS_NAME : p.SEC_USERS.FIRS_NAME,
                             GROP_DESC = p.EXP_GROUPS.GROP_DESC,
                             USER_NAME = d.USER_NAME
                         }).ToList();

            return Json(query.ToDataSourceResult(request));
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult UsersGridDestory([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<SEC_USERS> models)
        {
            if (models.Any())
            {
                foreach (SEC_USERS modelItem in models)
                {
                    SEC_USERS original = Db.SEC_USERS.FirstOrDefault(x => x.ROW_NO == modelItem.ROW_NO);
                    if (original != null)
                        Db.SEC_USERS.Remove(original);
                }
                Db.SaveChanges();
            }
            return Json(models.ToDataSourceResult(request, ModelState));
        }

        #endregion

        public ActionResult insert_SEC_USER_TYPE_POST(SEC_USER_TYPE_POST objecttemp)
        {
            //objecttemp.SCSU_ROW_NO = cntx.SEC_USERS.Where(xx => xx.PRSN_EMP_NUMB == objecttemp.SCSU_ROW_NO).Select(xx => xx.ROW_NO).FirstOrDefault();
            if (objecttemp.ETDO_ETDO_ID == 343)
            {
                objecttemp.EURP_TYPE = 0;
            }
            //else if (objecttemp.EURP_TYPE == 0)
            //{
            //    objecttemp.EURP_TYPE = 2;
            //}
            objecttemp.EURP_ACTV = 1;
            Db.SEC_USER_TYPE_POST.Add(objecttemp);
            if (objecttemp.ETDO_ETDO_ID == 463)
            {
                if (!Db.SEC_USER_TYPE_POST.Where(xx => xx.SCSU_ROW_NO == objecttemp.SCSU_ROW_NO && xx.ETDO_ETDO_ID == 463).Any())
                {
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("اطلاعات با موفقیت ثبت شد") }.ToJson();
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure)
                    {
                        ExceptionMessage = string.Format("اطلاعات شیفت کاری این کاربر از قبل در پست " +
                        Db.SEC_USER_TYPE_POST.Where(xx => xx.SCSU_ROW_NO == objecttemp.SCSU_ROW_NO && xx.ETDO_ETDO_ID == 463)
                        .Select(xx => xx.EXP_POST_LINE.EPOL_NAME).FirstOrDefault()

                        + "ثبت شده است")
                    }.ToJson();

                }
            }
            else
            {
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("اطلاعات با موفقیت ثبت شد") }.ToJson();

            }
        }

        public ActionResult TransferCartable()
        {

            try
            {
                string Sender = "", Reciever = "", FollowType = "";
                Sender = Request.Form["ORCL_NAME"];
                Reciever = Request.Form["ORCL_NAME_DES"];
                FollowType = Request.Form["ETDO_ETDO_ID"];
                string UpdateQuery = string.Format("update wf_notifications set RECIPIENT_ROLE='{0}',ORIGINAL_RECIPIENT='{0}' where RECIPIENT_ROLE='{1}' and ORIGINAL_RECIPIENT='{1}' and message_type='{2}' and  STATUS='OPEN'", Reciever, Sender, FollowType);
                Db.Database.ExecuteSqlCommand(UpdateQuery);
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("اطلاعات با موفقیت ثبت شد ") }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("خطا در ثبت اطلاعات : " + ex.ToString()) }.ToJson();
            }


        }
        public ActionResult insert_EXP_USERS_GROUPS(EXP_USERS_GROUPS objecttemp)
        {
            Db.EXP_USERS_GROUPS.Add(objecttemp);
            Db.SaveChanges();
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("اطلاعات با موفقیت ثبت شد") }.ToJson();
        }

        public ActionResult Search_Operator()
        {
            return View("Search_Operator");
        }

        private string GetMergedDetails(ICollection<SEC_USER_TYPE_POST> items)
        {
            if (items != null)
                if (items.Any())
                    return string.Join(",", items.Select(c => c.EURP_ID));
            return "--";
        }

        public ActionResult SearchUser([DataSourceRequest] DataSourceRequest request, string fd)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper();

            var query = (from a in Db.PAY_PERSONEL
                         join b in Db.SEC_USERS on a.EMP_NUMB equals b.PRSN_EMP_NUMB
                         where b.USER_STATE == "1" && (a.ASTA_CODE == "7" || a.ASTA_CODE == "5" || a.ASTA_CODE == "2" || a.ASTA_CODE == "1" || a.ASTA_CODE == "4" || a.ASTA_CODE == null) && b.USER_NAME != null && (b.ORCL_NAME.ToUpper().Contains(filter) || a.FAML_NAME.ToUpper().Contains(filter) || a.FIRS_NAME.ToUpper().Contains(filter) || filterDisable)
                         orderby a.FAML_NAME
                         select new
                         {
                             FAML_NAME = a.FAML_NAME,
                             FIRS_NAME = a.FIRS_NAME,
                             ROW_NO = b.ROW_NO,
                             ORCL_NAME = b.ORCL_NAME,
                             EMP_NUMBER = b.PRSN_EMP_NUMB

                         }).Union
                         //if (!query.Any())
                         // {
                         (
                          from a in Db.SEC_USERS
                              //.Include("SEC_USER_TYPE_POST") 
                          where a.USER_STATE == "1" && a.PRSN_EMP_NUMB == null && (a.ORCL_NAME.ToUpper().Contains(filter) || a.FAML_NAME.ToUpper().Contains(filter) || a.FIRS_NAME.ToUpper().Contains(filter) || filterDisable)
                          orderby a.FAML_NAME
                          select new
                          {

                              FAML_NAME = a.FAML_NAME,
                              FIRS_NAME = a.FIRS_NAME,
                              ROW_NO = a.ROW_NO,
                              ORCL_NAME = a.ORCL_NAME,
                              EMP_NUMBER = a.PRSN_EMP_NUMB
                          }).ToList();
            //  }

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        public ActionResult ReadLogTime([DataSourceRequest] DataSourceRequest request)
        {
            var query = (from a in Db.LOG_TIME
                         where a.LOTI_MIN > 1 && a.LOTI_MIN < 8
                         select new
                         {
                             a.LOTI_ID,
                             a.LOTI_MIN,

                             a.LOTI_PAGE,
                             a.LOTI_SEC,
                             a.LOTI_SRC,
                             a.LOTI_TITL,
                             a.LOTI_MILI,
                             a.CRET_BY,
                             a.CRET_DATE

                         }).OrderByDescending(xx => xx.LOTI_MIN).ThenByDescending(xx => xx.LOTI_SEC).ThenByDescending(xx => xx.LOTI_MILI).ToList();


            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

    }

}
