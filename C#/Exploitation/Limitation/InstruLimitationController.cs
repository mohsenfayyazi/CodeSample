using Asr.Base;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Asr.Text;
using Equipment.ViewModels.Exploitation.Limitation;
using Asr.Cartable;


namespace Equipment.Controllers.Exploitation.Limitation
{
    [Authorize]
    [Developer("H.Hamidi")]
    public class InstruLimitationController : DbController
    {

        /// <summary>
        /// Index Page For Add Or Edit Or Confirm Limits
        /// </summary>
        /// <param name="id">Limit ID => For Open From Cartable</param>
        /// <param name="State">0 => addOrEdit State , 1 => Confirm State , 2 => Archive State</param>
        /// <returns>Return View By Limit Display State</returns>
        public ActionResult Limitation(int? id, string State)
        {
            var model = new LimitationViewModel();

            #region Cartable State

            if (id.HasValue && id > 0)
            {
                var limit = Db.EXP_INSTRU_LIMIT.Find(id);
                if (limit != null)
                {
                    State = limit.DISPLAY_STATE;
                    model.LimitID = id;
                    //var idPost = FindPostId(limit.EPIU_EPIU_ID.Value);
                    var idInst = limit.EPIU_EPIU_ID.Value;
                    model.LimitPostID = limit.EPOL_EPOL_ID;
                    model.LimitInstruID = idInst;
                    model.LimitPostName = Db.EXP_POST_LINE.Find(limit.EPOL_EPOL_ID).EPOL_NAME;
                    model.LimitInstruName = Db.EXP_POST_LINE_INSTRU.Find(idInst).CODE_NAME;
                    model.EurpID = FindCurrentOrganManagerId(idInst);
                    model.CreatorOrclName = limit.CRET_BY;                    
                }
                else
                {
                    return View(model);
                }
            }
            else
            {
                model.LimitInstruID = 0;
                model.LimitPostID = 0;
            }

            #endregion

            if (State == "0")
            {
                if (IsPostManager(id))
                    model.IsPostManager = true;
                else
                    model.IsPostManager = false;
            }
            else if (State == "1")
            {
                var organEana = IsOrganManager();
                if (organEana.Count > 0)
                {
                    using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
                    {
                        var query = conn.Query(string.Format(@"SELECT DISTINCT EPOL_ID, EPOL_NAME, NVL(EANA_ROW,0) EANA_ROW, EANA_DESC
                                                               FROM EXP_POST_LINE, EXP_POST_LINE_INSTRU, EXP_INSTRU_LIMIT, EXP_ANALYZOR_EVENT
                                                               WHERE (EXP_POST_LINE.EPOL_ID = EXP_POST_LINE_INSTRU.EPOL_EPOL_ID
                                                                       OR EXP_POST_LINE.EPOL_ID = EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_INSLIN
                                                                       OR EXP_POST_LINE.EPOL_ID = EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_LINE)  
                                                               AND EXP_INSTRU_LIMIT.EPIU_EPIU_ID = EXP_POST_LINE_INSTRU.EPIU_ID
                                                               AND EXP_ANALYZOR_EVENT.EANA_ROW = EXP_POST_LINE.EANA_EANA_ROW
                                                               AND EANA_ROW IN ({0}) AND DISPLAY_STATE = '1'", string.Join(",", organEana)))
                                     .Select(b => new LimitationViewModel.LimitationViewModelItem
                                     {
                                         EpolId = (int)b.EPOL_ID,
                                         EpolName = (string)b.EPOL_NAME,
                                         EanaRow = (int)b.EANA_ROW,
                                         EanaDesc = (string)b.EANA_DESC
                                     }).ToList();

                        model.Items = query;
                    }

                    model.IsOrganManager = true;

                }
                else
                {
                    model.IsOrganManager = false;
                }

            }
            else if (State == "2")
            {
                model.OrganManagerName = FindOrganManagerName(model.EurpID.GetValueOrDefault());
                model.PostManagerName = FindPostManagerName(model.CreatorOrclName);
            }

            model.LimitTypes = Db.EXP_LIMIT_TYPE.ToList();
            model.DisplayState = State;
            return View(model);
        }

        /// <summary>
        /// Call This Action When Open Instru Limit From Cartable (Find Instru Limit By 'NotId' And Redirect To Action 'Limitation')
        /// </summary>
        /// <param name="notId">notId</param>
        /// <returns>Redirect To Action 'Limitation'</returns>
        public ActionResult ShowInstruLimit(int notId)
        {
            var msgLimitation = new Asr.Cartable.AsrWorkFlowMessageLimit(notId);
            msgLimitation.SetReadStatus(AsrWorkFlowMessageLimit.AsrMessageReadStatusLimit.Readed);
            return RedirectToAction("Limitation", new { id = msgLimitation.LimitId });
        }

        /// <summary>
        /// Show Limit Details => This Action Use in "AllLimitation" Form
        /// </summary>
        /// <param name="limitId">EILT_ID</param>
        /// <returns>Return View For Show Details</returns>
        public ActionResult ShowLimitDetails(int limitId)
        {
            ViewBag.limitId = limitId;
            return View();
        }

        // Add Or Edit Limit
        public ActionResult AddOrEditLimit()
        {
            var postId = Convert.ToInt32(Request.Form["HiddenPostID"]);
            var instruId = Convert.ToDecimal(Request.Form["HiddenPostInstru"]);            
            var limitType = Convert.ToDecimal(Request.Form["DropDown_LimitType"]);
            var limitValue = Convert.ToString(Request.Form["LimitValue"]);
            var startDate = Convert.ToString(Request.Form["inputStartDate"]);
            //var endDate = Convert.ToString(Request.Form["inputEndDate"]);
            var limitDesc = Convert.ToString(Request.Form["txtLimitDesc"]);
            var type = Db.EXP_LIMIT_TYPE.Find(limitType);
            bool isNew = string.IsNullOrEmpty(Request.Form["limitId"]);
            var exists = Db.EXP_INSTRU_LIMIT.Where(b => b.EPIU_EPIU_ID == instruId && b.ELTP_ELTP_ID == limitType);
            var organManagerId = FindCurrentOrganManagerId(instruId);
            if (isNew)
            {
                if (!exists.Any())
                {                    
                    if (organManagerId != 0)
                    {
                        EXP_INSTRU_LIMIT limit = new EXP_INSTRU_LIMIT
                        {
                            EPOL_EPOL_ID = postId,
                            EPIU_EPIU_ID = instruId,
                            ELTP_ELTP_ID = limitType,
                            LIMIT_VALUE = (type.HAS_VAL == "1" ? limitValue : string.Empty),
                            START_DATE = startDate,
                            //END_DATE = endDate,
                            END_DATE = string.Empty,
                            EILT_DESC = limitDesc,
                            SOLVE_STATE = "0",
                            DISPLAY_STATE = "0",
                            //CONFIRM_STATE = "0",
                            CANCEL_DESC = string.Empty,
                            ACCEPT_DESC = string.Empty,
                            ARCHIVE_DESC = string.Empty,
                            EURP_EURP_ID = organManagerId
                        };

                        Db.EXP_INSTRU_LIMIT.Add(limit);
                        Db.SaveChanges();
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("نوع محدودیت ({0}) ثبت شد", type.ELTP_DESC) }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "رئیس ناحیه پست انتخابی نامشخص است! لطفا جهت مشخص نمودن رئیس ناحیه با مدیر سیستم تماس حاصل فرمایید" }.ToJson();
                    }
                }
                else
                {
                    if (exists.Any(b => b.DISPLAY_STATE == "1"))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("نوع محدودیت ({0}) قبلا ثبت شده و درحال حاضر در دست بررسی مسئول ناحیه میباشد", type.ELTP_DESC) }.ToJson();
                    }
                    else if (type != null)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("نوع محدودیت ({0}) قبلا برای این تجهیز ثبت شده است", type.ELTP_DESC) }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "نوع محدودیت معتبر نیست" }.ToJson();
                    }
                }
            }
            else
            {
                var limitId = Convert.ToDecimal(Request.Form["limitId"]);
                //var exists = Db.EXP_INSTRU_LIMIT.Any(b => b.EPIU_EPIU_ID == instruId && b.ELTP_ELTP_ID == limitType && b.EILT_ID != limitId);
                if (!exists.Any(b => b.EILT_ID != limitId))
                {
                    if (organManagerId != 0)
                    {
                        var modelForEdit = Db.EXP_INSTRU_LIMIT.Find(limitId);
                        modelForEdit.ELTP_ELTP_ID = limitType;
                        modelForEdit.LIMIT_VALUE = (type.HAS_VAL == "1" ? limitValue : string.Empty);
                        modelForEdit.START_DATE = startDate;
                        //modelForEdit.END_DATE = endDate;
                        modelForEdit.END_DATE = string.Empty;
                        modelForEdit.EILT_DESC = limitDesc;
                        modelForEdit.SOLVE_STATE = "0";
                        modelForEdit.DISPLAY_STATE = "0";
                        //modelForEdit.CONFIRM_STATE = "0";
                        modelForEdit.CANCEL_DESC = string.Empty;
                        modelForEdit.ACCEPT_DESC = string.Empty;
                        modelForEdit.ARCHIVE_DESC = string.Empty;
                        Db.SaveChanges();
                        return new ServerMessages(ServerOprationType.Success) { Message = "ویرایش با موفقیت انجام شد" }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "رئیس ناحیه پست انتخابی نامشخص است! لطفا جهت مشخص نمودن رئیس ناحیه با مدیر سیستم تماس حاصل فرمایید" }.ToJson();
                    }
                }
                else
                {
                    if (exists.Any(b => b.DISPLAY_STATE == "1"))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("نوع محدودیت ({0}) قبلا ثبت شده و درحال حاضر در دست بررسی مسئول ناحیه میباشد", type.ELTP_DESC) }.ToJson();
                    }
                    else if (type != null)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("نوع محدودیت ({0}) قبلا برای این تجهیز ثبت شده است", type.ELTP_DESC) }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "نوع محدودیت معتبر نیست" }.ToJson();
                    }
                }
            }
        }

        // Update State After Post Manager Send Limit
        public ActionResult SendToOrganManager(int instruId)
        {
            try
            {
                string limitTypeDesc = string.Empty;
                var model = Db.EXP_INSTRU_LIMIT.Where(p => p.EPIU_EPIU_ID == instruId && p.DISPLAY_STATE == "0");
                if (model.Any())
                {
                    foreach (var item in model)
                    {
                        item.DISPLAY_STATE = "1";
                        Db.Entry(item).State = EntityState.Modified;
                    }
                    //SendMessage(instruId, "0");
                    //bool msg = SendMessage(Convert.ToInt32(model.FirstOrDefault().EILT_ID), "0", string.Empty);
                    bool msg = SendMessage(Convert.ToInt32(model.FirstOrDefault().EILT_ID), MessageParameter.SendToOrganManager);
                    if (msg)
                    {
                        Db.SaveChanges();
                        return new ServerMessages(ServerOprationType.Success) { Message = "محدودیت ها ارسال شدند" }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خطا در ثبت و ارسال پیام" }.ToJson();
                    }
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این محدودیت ها قبلا ارسال شده اند" }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }

        // Confirm State Limit
        public ActionResult ConfirmLimit(int? limitId, string acceptDesc)
        {
            try
            {
                if (limitId.HasValue && limitId != 0)
                {
                    var limitTypeDesc = (from b in Db.EXP_INSTRU_LIMIT join c in Db.EXP_LIMIT_TYPE on b.ELTP_ELTP_ID equals c.ELTP_ID where b.EILT_ID == limitId select c.ELTP_DESC).FirstOrDefault();
                    var modelForEdit = Db.EXP_INSTRU_LIMIT.Find(limitId);
                    if (modelForEdit.CONFIRM_STATE != "1")
                    {
                        modelForEdit.CONFIRM_STATE = "1";
                        modelForEdit.SOLVE_STATE = "0";
                        modelForEdit.ACCEPT_DESC = acceptDesc;
                        modelForEdit.CANCEL_DESC = string.Empty;
                        //bool msg = SendMessage(limitId.Value, "1", "Confirm");
                        bool msg = SendMessage(limitId.Value, MessageParameter.Confirm);
                        if (msg)
                        {
                            Db.SaveChanges();
                            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("نوع محدودیت ({0}) تایید شد", limitTypeDesc) }.ToJson();
                        }
                        else
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خطا در ثبت و ارسال پیام" }.ToJson();
                        }
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این محدودیت قبلا تأیید شده" }.ToJson();
                    }
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "کد محدودیت معتبر نمیباشد" }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        // UnConfirm State Limit
        public ActionResult UnConfirmLimit(int? limitId, string cancelDesc)
        {
            try
            {
                if (limitId.HasValue && limitId != 0)
                {
                    var modelForEdit = Db.EXP_INSTRU_LIMIT.Find(limitId);
                    if (modelForEdit != null)
                    {
                        modelForEdit.DISPLAY_STATE = "0";
                        modelForEdit.CONFIRM_STATE = "0";
                        modelForEdit.SOLVE_STATE = "0";
                        modelForEdit.CANCEL_DESC = cancelDesc;
                        modelForEdit.ACCEPT_DESC = string.Empty;
                        //SendMessage(limitId.Value, "1"); 
                        //bool msg = SendMessage(limitId.Value, "1", string.Empty);
                        bool msg = SendMessage(limitId.Value, MessageParameter.SendToPostManager);
                        if (msg)
                        {
                            Db.SaveChanges();
                            return new ServerMessages(ServerOprationType.Success) { Message = "محدودیت مورد نظر به مسئول پست برگشت داده شد" }.ToJson();
                        }
                        else
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خطا در ثبت و ارسال پیام" }.ToJson();
                        }
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این محدودیت قبلا برگشت داده شده" }.ToJson();
                    }
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "کد محدودیت معتبر نمیباشد" }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        // Solve State Limit
        public ActionResult SolveLimit(int? limitId, string endDate, string archiveDesc)
        {
            try
            {
                if (limitId.HasValue && limitId != 0)
                {
                    var modelForEdit = Db.EXP_INSTRU_LIMIT.Find(limitId);
                    if (modelForEdit != null)
                    {
                        if (modelForEdit.CONFIRM_STATE == "1")
                        {
                            var limitTypeDesc = (from b in Db.EXP_INSTRU_LIMIT join c in Db.EXP_LIMIT_TYPE on b.ELTP_ELTP_ID equals c.ELTP_ID where b.EILT_ID == limitId select c.ELTP_DESC).FirstOrDefault();
                            modelForEdit.DISPLAY_STATE = "2";
                            modelForEdit.SOLVE_STATE = "1";
                            modelForEdit.END_DATE = endDate;
                            modelForEdit.ARCHIVE_DESC = archiveDesc;
                            modelForEdit.CANCEL_DESC = string.Empty;
                            //bool msg = SendMessage(limitId.Value, "1", "Solve");
                            bool msg = SendMessage(limitId.Value, MessageParameter.SolveAndArchive);
                            if (msg)
                            {
                                Db.SaveChanges();
                                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("محدودیت ({0}) برطرف شد", limitTypeDesc) }.ToJson();
                            }
                            else
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خطا در بایگانی و ارسال پیام" }.ToJson();
                            }
                        }
                        else
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این محدودیت هنوز تأیید نشده" }.ToJson();
                        }
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این محدودیت قبلا برطرف شده" }.ToJson();
                    }
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "کد محدودیت معتبر نمیباشد" }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        // Archive Limit => Use in Post Manager Form
        public ActionResult ArchiveLimit(int? limitId, string archiveDesc)
        {
            try
            {
                if (limitId.HasValue && limitId != 0)
                {
                    var modelForEdit = Db.EXP_INSTRU_LIMIT.Find(limitId);
                    if (modelForEdit != null)
                    {
                        if (modelForEdit.CONFIRM_STATE == "0")
                        {
                            var limitTypeDesc = (from b in Db.EXP_INSTRU_LIMIT join c in Db.EXP_LIMIT_TYPE on b.ELTP_ELTP_ID equals c.ELTP_ID where b.EILT_ID == limitId select c.ELTP_DESC).FirstOrDefault();
                            modelForEdit.DISPLAY_STATE = "2";
                            modelForEdit.SOLVE_STATE = "0";
                            modelForEdit.ARCHIVE_DESC = archiveDesc;
                            bool msg = SendMessage(limitId.Value, MessageParameter.ArchiveOnly);
                            if (msg)
                            {
                                Db.SaveChanges();
                                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("محدودیت ({0}) بایگانی شد", limitTypeDesc) }.ToJson();
                            }
                            else
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خطا در بایگانی محدودیت" }.ToJson();
                            }
                            
                        }
                        else
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "فقط محدودیت هایی که توسط رئیس ناحیه تأیید نشده باشند قابل بایگانی شدن هستند" }.ToJson();
                        }

                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این محدودیت قبلا بایگانی شده" }.ToJson();
                    }
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "کد محدودیت معتبر نمیباشد" }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        // List Of Active Limitation => Use in Post Instru Form
        public ActionResult ActiveLimitation(int instruId)
        {
            ViewData["ELTP_ELTP_ID"] = Db.EXP_LIMIT_TYPE.Select(c => new { c.ELTP_ID, c.ELTP_DESC });
            ViewBag.instruId = instruId;
            return View();
        }

        // List Of All Instrument Limitation Filtered By Organ
        public ActionResult AllLimitation(int limitId)
        {
            ViewBag.LimitId = limitId;
            ViewData["ELTP_ELTP_ID"] = Db.EXP_LIMIT_TYPE.Select(c => new { c.ELTP_ID, c.ELTP_DESC });
            using (Asr.Security.AsrMembershipProvider mp = new Asr.Security.AsrMembershipProvider(User.Identity.Name))
            {
                ViewBag.showGridButtonDelete = mp.CheckPermission("EXP_DELETELIMIT_FRM_GRIDBTN");
            }            
            return View();
        }

        public ActionResult limitTypeList()
        {
            var query = (from b in Db.EXP_LIMIT_TYPE select new { b.ELTP_ID, b.ELTP_DESC }).OrderBy(o => o.ELTP_ID);
            return Json(query.ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult checkHasValue(int? typeId)
        {
            var val = (from b in Db.EXP_LIMIT_TYPE where b.ELTP_ID == typeId select b.HAS_VAL).FirstOrDefault();
            return new ServerMessages(ServerOprationType.Success) { CoustomData = val }.ToJson();
        }

        public ActionResult checkHasHistory(int? instruId)
        {
            var val = (from b in Db.EXP_INSTRU_LIMIT where b.EPIU_EPIU_ID == instruId && b.DISPLAY_STATE == "2" select b.EILT_ID).Count();
            return new ServerMessages(ServerOprationType.Success) { CoustomData = val }.ToJson();
        }

        public ActionResult checkHasActiveLimit(int? instruId)
        {
            var val = (from b in Db.EXP_INSTRU_LIMIT where b.EPIU_EPIU_ID == instruId && b.DISPLAY_STATE == "1" && b.CONFIRM_STATE == "1" select b.EILT_ID).Count();
            return new ServerMessages(ServerOprationType.Success) { CoustomData = val }.ToJson();
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult InstruLimitReadGrid([DataSourceRequest] DataSourceRequest request, int? instruId, string displayState)
        {
            var query = Db.EXP_INSTRU_LIMIT.AsEnumerable().Where(p => p.EPIU_EPIU_ID == instruId && p.DISPLAY_STATE == displayState)
                         .Select(p => new
                         {
                             p.EILT_ID,
                             p.ELTP_ELTP_ID,
                             p.LIMIT_VALUE,
                             p.START_DATE,
                             p.END_DATE,
                             p.EILT_DESC,
                             p.CANCEL_DESC,
                             p.DISPLAY_STATE,
                             CONFIRM_STATE_DESC = GenerateConfirmDescription(p.CONFIRM_STATE, p.DISPLAY_STATE),//(p.CONFIRM_STATE == "0" ? "در انتظار تایید" : (p.CONFIRM_STATE == "1" ? "تایید شده" : "وضعیت نامشخص")),
                             p.CONFIRM_STATE,
                             p.SOLVE_STATE,
                             p.EPIU_EPIU_ID,
                             p.EURP_EURP_ID,
                             p.EPOL_EPOL_ID
                         });
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult InstruLimitConfirmReadGrid([DataSourceRequest] DataSourceRequest request, int? postId)
        {
            var query = (from b in Db.EXP_POST_LINE
                         join c in Db.EXP_POST_LINE_INSTRU on b.EPOL_ID equals c.EPOL_EPOL_ID
                         join d in Db.EXP_INSTRU_LIMIT on c.EPIU_ID equals d.EPIU_EPIU_ID
                         where (c.EPOL_EPOL_ID == postId || c.EPOL_EPOL_ID_INSLIN == postId || c.EPOL_EPOL_ID_LINE == postId) && d.DISPLAY_STATE == "1"
                         orderby d.EPIU_EPIU_ID, d.ELTP_ELTP_ID, d.START_DATE descending
                         select new
                         {
                             d.EILT_ID,
                             d.ELTP_ELTP_ID,
                             d.LIMIT_VALUE,
                             d.START_DATE,
                             d.END_DATE,
                             d.EILT_DESC,
                             d.CANCEL_DESC,
                             d.DISPLAY_STATE,
                             CONFIRM_STATE = string.IsNullOrEmpty(d.CONFIRM_STATE) ? "0" : d.CONFIRM_STATE,
                             d.SOLVE_STATE,
                             d.EPIU_EPIU_ID,
                             d.ACCEPT_DESC,
                             d.ARCHIVE_DESC,
                             instruName = c.CODE_NAME,
                             d.EURP_EURP_ID,
                             d.EPOL_EPOL_ID
                         });

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult InstruLimitHistoryReadGrid([DataSourceRequest] DataSourceRequest request, int? instruId, string fdModal)
        {
            bool filterDisable = string.IsNullOrEmpty(fdModal);
            string filter = string.IsNullOrEmpty(fdModal.ToUpper()) ? "" : fdModal.ToUpper().ToArabicUtf8();
            var query = (from b in Db.EXP_INSTRU_LIMIT
                         join c in Db.EXP_LIMIT_TYPE on b.ELTP_ELTP_ID equals c.ELTP_ID
                         where b.EPIU_EPIU_ID == instruId && b.DISPLAY_STATE == "2" && (c.ELTP_DESC.ToUpper().Contains(filter) || filterDisable)
                         select new
                         {
                             b.EILT_ID,
                             b.ELTP_ELTP_ID,
                             LimitTypeDesc = c.ELTP_DESC,
                             b.LIMIT_VALUE,
                             b.START_DATE,
                             b.END_DATE,
                             b.EILT_DESC,
                         });

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult InstruLimitActiveReadGrid([DataSourceRequest] DataSourceRequest request, int? instruId)
        {
            var query = (from b in Db.EXP_INSTRU_LIMIT
                         where b.EPIU_EPIU_ID == instruId && b.DISPLAY_STATE == "1" && b.CONFIRM_STATE == "1"
                         select new
                         {
                             b.EILT_ID,
                             b.ELTP_ELTP_ID,
                             b.LIMIT_VALUE,
                             b.START_DATE,
                             b.END_DATE,
                             b.EILT_DESC,
                         });

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult AllInstruLimitReadGrid([DataSourceRequest] DataSourceRequest request, int limitId, int? eanaId, int? postId, int? instruId, int? limitTypeId,
                                                                        string startDateSave, string endDateSave, string startDateConfirm, string endDateConfirm,
                                                                        string cartableState, string confirmState, string solveState)
        {
            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var query = conn.Query(@"SELECT EANA_ROW ,SUBSTR(EANA_DESC,7) EANA_DESC ,EPOL_ID ,EPOL_NAME ,EPOL_TYPE ,EPIU_ID ,CODE_NAME ,
                                                EPOL_EPOL_ID_INSLIN ,EPOL_EPOL_ID_LINE ,ELTP_ID ,ELTP_DESC ,EILT_ID ,LIMIT_VALUE ,
                                                START_DATE ,END_DATE ,EILT_DESC ,DISPLAY_STATE ,DISPLAY_STATE_DESC ,SOLVE_STATE ,
                                                SOLVE_STATE_DESC ,CANCEL_DESC ,CONFIRM_STATE ,CONFIRM_STATE_DESC, ACCEPT_DESC, ARCHIVE_DESC                             
                                         FROM EXP_INST_LIMIT_V
                                         where (EILT_ID = :limitId or :limitId = 0)
                                         and ((',' || :eanaId || ',' like '%,' || EANA_ROW || ',%') or :eanaId is null)
                                         --and (((EPOL_TYPE = 0 and EPOL_ID = :postId) or (EPOL_TYPE = 1 and (EPOL_EPOL_ID_INSLIN = :postId or EPOL_EPOL_ID_LINE = :postId))) OR :postId is null)
                                         and (EPOL_ID = :postId or :postId is null)
                                         and (EPIU_ID = :instruId or :instruId is null)
                                         and (ELTP_ID = :limitTypeId or :limitTypeId is null)
                                         and ((START_DATE BETWEEN :startDateSave AND :endDateSave) or (:startDateSave is null AND :endDateSave is null))
                                         and ((END_DATE BETWEEN :startDateConfirm AND :endDateConfirm) or (:startDateConfirm is null AND :endDateConfirm is null))
                                         and (DISPLAY_STATE = :cartableState or :cartableState is null)
                                         and (CONFIRM_STATE = :confirmState or :confirmState is null)
                                         and (SOLVE_STATE = :solveState or :solveState is null)
                                         order by EANA_ROW, EPOL_ID, EPIU_ID, ELTP_ID", limitId, limitId, eanaId, eanaId, postId, postId, /*postId, postId,*/ 
                                                                                        instruId, instruId, limitTypeId, limitTypeId,
                                                                                        startDateSave, endDateSave, startDateSave, endDateSave,
                                                                                        startDateConfirm, endDateConfirm, startDateConfirm, endDateConfirm,
                                                                                        cartableState, cartableState, confirmState, confirmState, solveState, solveState)
                             .Select(b => new
                             {
                                 b.EANA_ROW,
                                 b.EANA_DESC,
                                 b.EPOL_ID,
                                 b.EPOL_NAME,
                                 b.EPOL_TYPE,
                                 b.EPIU_ID,
                                 b.CODE_NAME,
                                 b.EPOL_EPOL_ID_INSLIN,
                                 b.EPOL_EPOL_ID_LINE,
                                 b.ELTP_ID,
                                 b.ELTP_DESC,
                                 b.EILT_ID,
                                 b.LIMIT_VALUE,
                                 b.START_DATE,
                                 b.END_DATE,
                                 b.EILT_DESC,
                                 b.DISPLAY_STATE,
                                 b.DISPLAY_STATE_DESC,
                                 b.SOLVE_STATE,
                                 b.SOLVE_STATE_DESC,
                                 b.CANCEL_DESC,
                                 b.CONFIRM_STATE,
                                 b.CONFIRM_STATE_DESC,
                                 b.ACCEPT_DESC,
                                 b.ARCHIVE_DESC
                             }).ToList();

                var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }

            //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Send Message To Cartable
        /// </summary>
        /// <param name="id">Limit ID => "EILT_ID"</param>
        /// <param name="messageState">instance Of "MessageParameter" =>
        ///     <example>SendToOrganManager ||</example>
        ///     <example>SendToPostManager ||</example>
        ///     <example>Confirm ||</example>
        ///     <example>SolveAndArchive</example>
        /// </param>
        /// <returns>if Send = True , if Not Send = False</returns>
        private bool SendMessage(int id, MessageParameter messageState)
        {
            var limitId = id;
            string calcuMsg = string.Empty;            
            var listUsers = new List<string>();
            var PostPersonDetails = Db.EXP_INSTRU_LIMIT.Find(id);
            var postManager = PostPersonDetails.CRET_BY;            
            string[] otherUsers = { "KAHOORI", "TORABI", "M-CONTROL" , "RDC-CONTROL" , "M-PAYAM", "B-DISPACHING", "HBAGHERI", "H-HOSEINZADE", "S-KHADEMI" };          
            //string[] otherUsers = { "SHIRAZ", "H-HAMIDI" };
            int[] groupId = { 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 165 };
            id = Convert.ToInt32(PostPersonDetails.EPIU_EPIU_ID);
            AsrWorkFlowMessage msg = new AsrWorkFlowMessage();
            AsrWorkFlowMessageLimit limitCartable = new AsrWorkFlowMessageLimit();
            var SenderFullName = GetUserFullName();

            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var OrganPersonDetails = conn.Query(@"SELECT EPOL_NAME, CODE_NAME, ORCL_NAME, EURP_TYPE
                                                      FROM EXP_POST_LINE, EXP_POST_LINE_INSTRU, SEC_USER_TYPE_POST, SEC_USERS                                        
                                                      WHERE (EXP_POST_LINE_INSTRU.EPOL_EPOL_ID = EXP_POST_LINE.EPOL_ID 
                                                             OR EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_INSLIN = EXP_POST_LINE.EPOL_ID
                                                             OR EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_LINE = EXP_POST_LINE.EPOL_ID)
                                                      AND EXP_POST_LINE.EANA_EANA_ROW = SEC_USER_TYPE_POST.EANA_EANA_ROW
                                                      AND SEC_USER_TYPE_POST.SCSU_ROW_NO = SEC_USERS.ROW_NO
                                                      AND EPIU_ID = :Param ", id)
                             .Select(b => new
                             {
                                 EPOL_NAME = (string)b.EPOL_NAME,
                                 CODE_NAME = (string)b.CODE_NAME,
                                 ORCL_NAME = (string)b.ORCL_NAME,
                                 EURP_TYPE = (short?)b.EURP_TYPE
                             }).ToList();


                // گروه های اجرایی
                var executiveGroup = (from b in Db.SEC_USER_TYPE_POST
                                      join c in Db.SEC_USERS on b.SCSU_ROW_NO equals c.ROW_NO
                                      where groupId.Contains(b.EANA_EANA_ROW.Value) && b.EURP_TYPE == 0 && b.EURP_ACTV == 1
                                      select c.ORCL_NAME);


                var detaild = OrganPersonDetails.FirstOrDefault();

                if (OrganPersonDetails.Count > 0)
                {
                    if (messageState == MessageParameter.SendToOrganManager)
                    {
                        // مسئول ناحیه
                        string[] OrganManager = OrganPersonDetails.Where(x => x.EURP_TYPE == 0).Any() ? OrganPersonDetails.Where(x => x.EURP_TYPE == 0).Select(x => x.ORCL_NAME).Distinct().ToArray() : new string[0];
                        listUsers.AddRange(OrganManager);
                        calcuMsg = string.Format("محدودیت جدیدی برای تجهیز ({0}) مربوط به پست ({1}) برای شما ارسال گردید", detaild.CODE_NAME, detaild.EPOL_NAME);
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {
                            limitCartable = new Asr.Cartable.AsrWorkFlowMessageLimit(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).Distinct().ToArray(), "تأییدیه محدودیت تجهیز", calcuMsg, limitId);
                            limitCartable.Send(SenderFullName);
                            //var updateQuery = string.Format("UPDATE WF_NOTIFICATIONS SET FROM_USER = '{0}' WHERE NOTIFICATION_ID = {1}", SenderFullName, limitCartable.NoteId);
                            //Db.Database.ExecuteSqlCommand(updateQuery);
                            limitCartable.Dispose();
                            CloseOldLimitMessage(limitId);
                            return true;
                        }
                        else
                        {
                            limitCartable.Dispose();
                            return false;
                        }
                    }
                    else if (messageState == MessageParameter.SendToPostManager)
                    {                        
                        listUsers.Add(postManager);
                        calcuMsg = string.Format("محدودیت تجهیز ({0}) مربوط به پست ({1}) تأیید نشد", detaild.CODE_NAME, detaild.EPOL_NAME);
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {
                            limitCartable = new Asr.Cartable.AsrWorkFlowMessageLimit(User.Identity.Name, listUsers.Where(x => !string.IsNullOrEmpty(x)).Distinct().ToArray(), "عدم تأیید محدودیت تجهیز", calcuMsg, limitId);
                            limitCartable.Send(SenderFullName);
                            //var updateQuery = string.Format("UPDATE WF_NOTIFICATIONS SET FROM_USER = '{0}' WHERE NOTIFICATION_ID = {1}", SenderFullName, limitCartable.NoteId);
                            //Db.Database.ExecuteSqlCommand(updateQuery);
                            limitCartable.Dispose();
                            CloseOldLimitMessage(limitId);
                            return true;
                        }
                        else
                        {
                            limitCartable.Dispose();
                            return false;
                        }

                    }
                    else if (messageState == MessageParameter.Confirm)
                    {                        
                        listUsers.AddRange(otherUsers);
                        listUsers.AddRange(executiveGroup.Select(x => x));
                        calcuMsg = string.Format("جهت اطلاعا شما، محدودیت تجهیز ({0}) به شماره {1} مربوط به پست ({2}) توسط رئیس ناحیه تأیید شد" + "$", detaild.CODE_NAME, limitId, detaild.EPOL_NAME);
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {                            
                            msg = new Asr.Cartable.AsrWorkFlowMessage(User.Identity.Name, listUsers.Distinct().ToArray(), "اطلاعیه محدودیت تجهیزات", calcuMsg);
                            msg.Send(SenderFullName);
                            msg.Dispose();
                            return true;
                        }
                        else
                        {
                            msg.Dispose();
                            return false;
                        }
                    }
                    else if (messageState == MessageParameter.SolveAndArchive)
                    {
                        #region Send To Archive Cartable
                        calcuMsg = string.Format("محدودیت مربوط به تجهیز ({0}) در پست ({1}) میباشد", detaild.CODE_NAME, detaild.EPOL_NAME);
                        limitCartable = new Asr.Cartable.AsrWorkFlowMessageLimit(User.Identity.Name, new string[] { "ARCHIVE" }, "بایگانی/تأیید شده", calcuMsg, limitId);
                        limitCartable.Send(SenderFullName);
                        limitCartable.Dispose();
                        CloseOldLimitMessage(limitId);
                        #endregion

                        listUsers.Add(postManager);
                        listUsers.AddRange(otherUsers);
                        listUsers.AddRange(executiveGroup.Select(x => x));                        
                        if (listUsers.Select(x => !string.IsNullOrEmpty(x)).Any())
                        {
                            calcuMsg = string.Format("جهت اطلاعا شما، محدودیت تجهیز ({0}) به شماره {1} مربوط به پست ({2}) برطرف و بایگانی شد" + "$", detaild.CODE_NAME, limitId, detaild.EPOL_NAME);
                            msg = new Asr.Cartable.AsrWorkFlowMessage(User.Identity.Name, listUsers.Distinct().ToArray(), "اطلاعیه محدودیت تجهیزات", calcuMsg);
                            msg.Send(SenderFullName);
                            msg.Dispose();                            
                            //CloseAllLimitMessage(limitId);
                            return true;
                        }
                        else
                        {
                            msg.Dispose();
                            return false;
                        }
                    }
                    else if (messageState == MessageParameter.ArchiveOnly)
                    {                        
                        calcuMsg = string.Format("محدودیت مربوط به تجهیز ({0}) در پست ({1}) میباشد", detaild.CODE_NAME, detaild.EPOL_NAME);
                        limitCartable = new Asr.Cartable.AsrWorkFlowMessageLimit(User.Identity.Name, new string[] { "ARCHIVE" }, "بایگانی/تأیید نشده", calcuMsg, limitId);
                        limitCartable.Send(SenderFullName);
                        limitCartable.Dispose();
                        CloseOldLimitMessage(limitId);
                        return true;
                    }
                    else
                    {
                        msg.Dispose();
                        limitCartable.Dispose();
                        return false;
                    }
                }
                else
                {
                    msg.Dispose();
                    limitCartable.Dispose();
                    return false;
                }
            }
        }

        /// <summary>
        /// Check Current User Is Organ Manager => if Has Record Means "Yes, is Organ Manager" Else "No, is not Organ Manager"
        /// </summary>
        /// <returns></returns>
        private List<int?> IsOrganManager()
        {
            var currentUser = User.Identity.Name.ToUpper();
            int?[] organEana = { 11, 12, 13, 14, 15, 16 }; // List Of EANA_ROW Organ  
            var query = (from b in Db.SEC_USERS
                         join c in Db.SEC_USER_TYPE_POST on b.ROW_NO equals c.SCSU_ROW_NO
                         where organEana.Contains(c.EANA_EANA_ROW) && b.ORCL_NAME.ToUpper() == currentUser && c.EURP_TYPE == 0 // 0 = is manager , 1 = is SuccessorManager
                         select c.EANA_EANA_ROW).Distinct();
            return query.ToList();
        }

        /// <summary>
        /// Check Current User Is Post Manager
        /// </summary>
        /// <param name="id">True = is Post Manager | False = is Not Post Manager</param>
        /// <returns></returns>
        private bool IsPostManager(int? id)
        {
            var currentUser = User.Identity.Name;
            if (id.HasValue && id > 0)
            {
                var creator = Db.EXP_INSTRU_LIMIT.Find(id).CRET_BY;
                if (creator.ToUpper() == currentUser.ToUpper())
                    return true;
                else
                    return false;
            }
            else
            {
                return true; // if id is null means new limit
            }

        }

        /// <summary>
        /// Generate Caption State For Confirm State in Ohet Display State => Use in Grid
        /// </summary>
        /// <param name="confirmState">0=> Not Accept || 1=> Accept || Null=> Before Return Limit By Organ Manager </param>
        /// <param name="displayState">0=> is "Post Manager" || 1=> is "Organ Manager"</param>
        /// <returns></returns>
        private string GenerateConfirmDescription(string confirmState, string displayState)
        {
            if (string.IsNullOrEmpty(confirmState))
            {
                if (displayState == "0")
                    return "ارسال نشده";
                else if (displayState == "1")
                    return "در انتظار تایید";
                else
                    return "ارسال نشده";
            }
            else if (confirmState == "0")
            {
                if (displayState == "0")
                    return "برگشت خورده";
                else if (displayState == "1")
                    return "در انتظار تایید";
                else
                    return "ارسال نشده";
            }
            else if (confirmState == "1")
            {
                if (displayState == "0")
                    return "تأیید شده";
                else if (displayState == "1")
                    return "تأیید شده";
                else
                    return "وضعیت نامشخص";
            }
            else
            {
                return "وضعیت نامشخص";
            }
        }

        /// <summary>
        /// Find Current Organ Manager For Save When Add Or Edit Limit
        /// </summary>
        /// <param name="instruId">Post Instrument ID</param>
        /// <returns>EURP_ID</returns>
        private int FindCurrentOrganManagerId(decimal instruId)
        {
            return Db.Database.SqlQuery<int>(string.Format(@"SELECT EURP_ID FROM EXP_POST_LINE, EXP_POST_LINE_INSTRU, SEC_USER_TYPE_POST, SEC_USERS                                        
                                                                    WHERE (EXP_POST_LINE_INSTRU.EPOL_EPOL_ID = EXP_POST_LINE.EPOL_ID 
                                                                           OR EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_INSLIN = EXP_POST_LINE.EPOL_ID
                                                                           OR EXP_POST_LINE_INSTRU.EPOL_EPOL_ID_LINE = EXP_POST_LINE.EPOL_ID)
                                                                    AND EXP_POST_LINE.EANA_EANA_ROW = SEC_USER_TYPE_POST.EANA_EANA_ROW
                                                                    AND SEC_USER_TYPE_POST.SCSU_ROW_NO = SEC_USERS.ROW_NO
                                                                    AND EURP_TYPE = 0 AND EURP_ACTV = 1
                                                                    AND EPIU_ID = {0} ", instruId)).FirstOrDefault();            
        }

        /// <summary>
        /// Find OrganManager Name With EURP_ID
        /// </summary>
        /// <param name="eurpId">EURP_ID</param>
        /// <returns>String FullName</returns>
        private string FindOrganManagerName(int eurpId)
        {
            return Db.Database.SqlQuery<string>(string.Format(@"SELECT DISTINCT DECODE(FIRS_NAME || FAML_NAME, NULL, USER_NAME, FIRS_NAME||' '|| FAML_NAME) FROM EXP_USER_V WHERE EURP_ID = {0}", eurpId)).FirstOrDefault();
        }

        /// <summary>
        /// Find PostManager Name With (ORCL_NAME / CRET_BY)
        /// </summary>
        /// <param name="orclName">CRET_BY</param>
        /// <returns>String FullName</returns>
        private string FindPostManagerName(string orclName)
        {
            return Db.Database.SqlQuery<string>(string.Format(@"SELECT DISTINCT DECODE(FIRS_NAME || FAML_NAME, NULL, USER_NAME, FIRS_NAME||' '|| FAML_NAME) FROM EXP_USER_V WHERE UPPER(ORCL_NAME) = '{0}'", orclName.ToUpper())).FirstOrDefault();            
        }

        /// <summary>
        /// Get User Full Name
        /// </summary>
        /// <param name="userName">user name</param>
        /// <returns></returns>
        private string GetUserFullName(/*string userName*/)
        {
            var usr = GlobalConst.UserInfo();
            string fullName = usr.GetFullName();
            if (string.IsNullOrEmpty(fullName.Trim()))
            {
                fullName = Db.Database.SqlQuery<string>(string.Format("SELECT DISTINCT DECODE(FIRS_NAME || FAML_NAME, NULL, USER_NAME, FIRS_NAME||' '|| FAML_NAME) FROM EXP_USER_V WHERE UPPER(ORCL_NAME) = '{0}'", usr.Username.ToUpper())).FirstOrDefault();
                if (!string.IsNullOrEmpty(fullName.Trim()))
                    return fullName;
                else
                    return usr.Username;
            }
            else
            {
                return fullName;
            }
        }

        /// <summary>
        /// Don't Show Old Limit Message For Each Limit in Cartable (After Send Message in "SendToOrganManager" And "SendToPostManager" Methods Need To Run This Function, This Function Set Stat To 'Close')
        /// </summary>
        /// <param name="limitId">Limit ID => 'EILT_ID'</param>
        /// <returns>True</returns>
        private bool CloseOldLimitMessage(int limitId)
        {
            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var nId = conn.Query(@"SELECT NOT_ID FROM WF_NOTE_V WHERE MESSAGE_TYPE = 'FLW_LMSG' AND STAT = 'OPEN'
                                         AND SUBSTR(TO_CHAR(ITEM_KEY), INSTR(TO_CHAR(ITEM_KEY),'^') + 1, INSTR(TO_CHAR(ITEM_KEY),'$') - INSTR(TO_CHAR(ITEM_KEY),'^') - 1) = :Param
                                         AND NOT_ID <> (SELECT MAX(NOT_ID) FROM WF_NOTE_V WHERE MESSAGE_TYPE = 'FLW_LMSG' AND STAT = 'OPEN'
                                                          AND SUBSTR(TO_CHAR(ITEM_KEY), INSTR(TO_CHAR(ITEM_KEY),'^') + 1, INSTR(TO_CHAR(ITEM_KEY),'$') - INSTR(TO_CHAR(ITEM_KEY),'^') - 1) = :Param)", limitId, limitId)
                             .Select(b => new { NOT_ID = (int)b.NOT_ID }).ToList();
                try
                {
                    foreach (var item in nId)
                    {
                        AsrWorkFlowProcess p = new AsrWorkFlowProcess(item.NOT_ID);
                        p.CloseProccess();
                        p.Dispose();
                    }
                    return true;
                }
                catch (Exception ex)
                {
                    return false;
                }
                
            }
        }

        /// <summary>
        /// Close All Limit Message For Each Limit in Cartable (After Send Message in Archive Method Need To Run This Function, This Function Set Stat To 'Close')
        /// </summary>
        /// <param name="limitId">Limit ID => 'EILT_ID'</param>
        /// <returns>True</returns>
        public bool CloseAllLimitMessage(int limitId)
        {
            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var nId = conn.Query(@"SELECT NOT_ID FROM WF_NOTE_V WHERE MESSAGE_TYPE = 'FLW_LMSG' AND STAT = 'OPEN'
                                         AND SUBSTR(TO_CHAR(ITEM_KEY), INSTR(TO_CHAR(ITEM_KEY),'^') + 1, INSTR(TO_CHAR(ITEM_KEY),'$') - INSTR(TO_CHAR(ITEM_KEY),'^') - 1) = :Param", limitId)
                             .Select(b => new { NOT_ID = (int)b.NOT_ID }).ToList();

                try
                {
                    foreach (var item in nId)
                    {
                        AsrWorkFlowProcess p = new AsrWorkFlowProcess(item.NOT_ID);
                        p.CloseProccess();
                        p.Dispose();
                    }
                    return true;
                }
                catch (Exception ex)
                {
                    return false;
                }                
            }
        }

        /// <summary>
        /// Delete All Limit Message For Each Limit in Cartable (Call This Method From 'AllLimitation' View)
        /// </summary>
        /// <param name="limitId">Limit ID => 'EILT_ID'</param>
        /// <returns>True Or False</returns>
        public bool DeleteAllLimitMessage(int limitId)
        {
            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var nId = conn.Query(@"SELECT NOT_ID FROM WF_NOTE_V WHERE MESSAGE_TYPE = 'FLW_LMSG'
                                         AND SUBSTR(TO_CHAR(ITEM_KEY), INSTR(TO_CHAR(ITEM_KEY),'^') + 1, INSTR(TO_CHAR(ITEM_KEY),'$') - INSTR(TO_CHAR(ITEM_KEY),'^') - 1) = :Param", limitId)
                             .Select(b => new { NOT_ID = (int)b.NOT_ID }).ToList();

                try
                {
                    foreach (var item in nId)
                    {
                        AsrWorkFlowProcess p = new AsrWorkFlowProcess(item.NOT_ID);
                        p.RemoveProccess();
                        p.Dispose();
                    }
                    return true;
                }
                catch (Exception ex)
                {
                    return false;
                }                
            }
        }

        /// <summary>
        /// Find Post Id From Instru ID
        /// </summary>
        /// <param name="instruId">Post Instrument ID</param>
        /// <returns>EPOL_ID</returns>
        //private int FindPostId(decimal instruId)
        //{
        //    if (instruId > 0)
        //    {
        //        var query = (from b in Db.EXP_POST_LINE
        //                     join c in Db.EXP_POST_LINE_INSTRU on b.EPOL_ID equals c.EPOL_EPOL_ID
        //                     where c.EPIU_ID == instruId
        //                     select new { POST = b, INSTRU = c }).FirstOrDefault();

        //        if (query != null)
        //        {
        //            if (query.POST.EPOL_TYPE == "0")
        //                return query.POST.EPOL_ID;
        //            else if (query.POST.EPOL_TYPE == "1")
        //                return query.INSTRU.EPOL_EPOL_ID_LINE.GetValueOrDefault();
        //            else
        //                return 0;
        //        }
        //        else
        //        {
        //            return 0;
        //        }
        //    }
        //    else
        //    {
        //        return 0;
        //    }
        //}


        //public ActionResult RemoveWF()
        //{
        //    int[] array = { 163451, 163438, 163441, 163442, 163447, 165129, 163445, 165130, 165127, 165128 };
        //    try
        //    {
        //        foreach (var item in array)
        //        {
        //            AsrWorkFlowProcess p = new AsrWorkFlowProcess(item);
        //            p.RemoveProccess();
        //            p.Dispose();
        //        }
        //        return new ServerMessages(ServerOprationType.Success) { Message = "حذف با موفقیت انجام شد" }.ToJson();
        //    }
        //    catch (Exception ex)
        //    {
        //        return new ServerMessages(ServerOprationType.Failure) { Message = ex.PersianMessage() }.ToJson();
        //    }                        
        //}

    }
}



