using Equipment.Codes.Security;
using Equipment.DAL;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.instrument
{
    [Authorize]
    public class BasicInstrumentController : DbController
    {
        //BandarEntities Db;

        ////سازنده کلاس
        //public BasicInstrumentController()
        //{
        //    Db = GlobalConst.DB();
        //}

        ////مخرب کلاس
        //~BasicInstrumentController()
        //{
        //    //این دستور کانکشن را دیسکانکت میکند
        //    Db.Dispose();
        //}

        //
        // GET: /BasicInstrument/
        [MenuAuthorize]
        [EntityAuthorize("EXP_STATE_INSTRU > select | EXP_TYPE_INSTRU > select | CHK_DOMAIN > select |EXP_INSTRUMENT > select|EXP_TYPE_EQUIP > select|EXP_TYPE_BAY > select|EXP_ATTRIBUTE  > select")]
        public ActionResult PartialInstrument()
        {
            ViewBag.ESIN = Db.EXP_STATE_INSTRU.Select(c => new { c.ESIN_ID, c.ESIN_DESC }).ToList();
            ViewData["ETYI"] = Db.EXP_TYPE_INSTRU.Select(c => new { c.ETYI_ID, c.ETYI_DESC }).ToList();
            ViewData["temp_position"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 171).AsEnumerable();
            ViewData["temp_type"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 165).AsEnumerable();
            ViewData["temp_algn"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 176).AsEnumerable();
            ViewData["EINS1"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX1"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["EBAY"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC }).AsEnumerable();
            ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["ETEXy"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_YEAR }).AsEnumerable();
            ViewData["ETEXm"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_VER }).AsEnumerable();
            ViewData["XATT"] = Db.EXP_ATTRIBUTE.Select(c => new { c.XATT_ID, c.XATT_TITLE, c.ETEX_ETEX_ID, c.EINS_EINS_ID }).AsEnumerable();
            ViewData["DMAN"] = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL }).AsEnumerable();
            return View("PartialInstrument");
        }

        public ActionResult Partialmainclass()
        {
            ViewBag.ESIN = Db.EXP_STATE_INSTRU.Select(c => new { c.ESIN_ID, c.ESIN_DESC }).ToList();
            ViewData["ETYI"] = Db.EXP_TYPE_INSTRU.Select(c => new { c.ETYI_ID, c.ETYI_DESC }).ToList();
            ViewData["temp_position"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 171).AsEnumerable();
            ViewData["temp_type"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 165).AsEnumerable();
            ViewData["temp_algn"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 176).AsEnumerable();
            ViewData["EINS1"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX1"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["EBAY"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC }).AsEnumerable();
            ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["ETEXy"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_YEAR }).AsEnumerable();
            ViewData["ETEXm"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_VER }).AsEnumerable();
            ViewData["XATT"] = Db.EXP_ATTRIBUTE.Select(c => new { c.XATT_ID, c.XATT_TITLE, c.ETEX_ETEX_ID, c.EINS_EINS_ID }).AsEnumerable();
            ViewData["DMAN"] = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL }).AsEnumerable();
            return View("Partialmainclass");
        }

        public ActionResult PartialAttributeI()
        {
            ViewBag.ESIN = Db.EXP_STATE_INSTRU.Select(c => new { c.ESIN_ID, c.ESIN_DESC }).ToList();
            ViewData["ETYI"] = Db.EXP_TYPE_INSTRU.Select(c => new { c.ETYI_ID, c.ETYI_DESC }).ToList();
            ViewData["temp_position"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 171).AsEnumerable();
            ViewData["temp_type"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 165).AsEnumerable();
            ViewData["temp_algn"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 176).AsEnumerable();
            ViewData["EINS1"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX1"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["EBAY"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC }).AsEnumerable();
            ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["ETEXy"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_YEAR }).AsEnumerable();
            ViewData["ETEXm"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_VER }).AsEnumerable();
            ViewData["XATT"] = Db.EXP_ATTRIBUTE.Select(c => new { c.XATT_ID, c.XATT_TITLE, c.ETEX_ETEX_ID, c.EINS_EINS_ID }).AsEnumerable();
            ViewData["DMAN"] = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL }).AsEnumerable();
            return View("PartialAttributeI");
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult ReadmainInst([DataSourceRequest] DataSourceRequest request)
        {
            var query = from b in Db.EXP_INSTRUMENT
                        where b.EINS_EINS_ID == null
                        select new
                        {
                            b.EINS_ID,
                            b.EINS_DESC,
                            b.ESIN_ESIN_ID,
                            b.ETYI_ETYI_ID,
                            b.ACTV_TYPE,
                            b.SERV_STAT,
                            b.BAY_STAT,
                            b.EINS_EINS_ID
                        };
            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_INSTRUMENT > select,insert,update ")]
        public ActionResult InstmainInsert(Equipment.Models.EXP_INSTRUMENT NewItem)
        {
            int u = Convert.ToInt32(Session["maininstid"]);

            try
            {
                if (u == 0)
                {
                    if (PublicRepository.ExistModel("EXP_INSTRUMENT", "EINS_DESC='{0}'", NewItem.EINS_DESC.Trim()))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] تکراری است.", NewItem.EINS_DESC) }.ToJson();
                    }

                    NewItem.EINS_DESC = " کلاس " + NewItem.EINS_DESC;
                    Db.EXP_INSTRUMENT.Add(NewItem);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.EINS_DESC), CoustomData = 1 }.ToJson();
                }
                else
                {
                    NewItem.EINS_ID = Convert.ToInt32(Session["maininstid"]);
                    var row = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == NewItem.EINS_ID select b).FirstOrDefault();
                    row.EINS_DESC = NewItem.EINS_DESC;
                    row.ESIN_ESIN_ID = NewItem.ESIN_ESIN_ID;
                    row.ETYI_ETYI_ID = NewItem.ETYI_ETYI_ID;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "لطفا اطلاعات را تکمیل نمائید." }.ToJson();
            }
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult maininst_New(int? id)
        {
            Session["maininstid"] = id;
            if (id != 0)
            {
                EXP_INSTRUMENT maininstid = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == id select b).FirstOrDefault();
                return View(maininstid);
            }
            return View();
        }

        [EntityAuthorize("EXP_VALUE > select| EXP_INSTRUMENT> select|EXP_TYPE_EQUIP> select|EXP_ATTRIBUTE> select")]
        public ActionResult semilar_new(int? id)
        {
            ViewData["EINSsem"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEXsem"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["XATTsem"] = Db.EXP_ATTRIBUTE.Select(c => new { c.XATT_ID, c.XATT_TITLE, c.ETEX_ETEX_ID, c.EINS_EINS_ID }).AsEnumerable();
            Session["semilarid"] = id;
            if (id != 0)
            {
                EXP_VALUE type = (from b in Db.EXP_VALUE where b.EINS_EINS_ID == id && b.ETEX_ETEX_ID != null select b).FirstOrDefault();
                return View(type);
            }

            return View();
        }

        [HttpPost]
        [EntityAuthorize("EXP_VALUE > select|update ")]
        public ActionResult semilaretyinsert(Equipment.Models.EXP_VALUE NewItem)
        {
            int et = 0;
            int ett = 0;
            if (Request.Form["ETEX_ID2"].ToString() != "")
                et = int.Parse(Request.Form["ETEX_ID2"].ToString());
            if (Request.Form["ETEX_ETEX_ID"].ToString() != "")
                ett = int.Parse(Request.Form["ETEX_ETEX_ID"].ToString());

            try
            {
                int id = Convert.ToInt32(Session["semilarid"]);
                var q = (from b in Db.EXP_VALUE where b.EINS_EINS_ID == id && b.ETEX_ETEX_ID == ett select b);

                foreach (EXP_VALUE i in q)
                {
                    //var myobj = (from k in db.EXP_VALUE where k.EINS_EINS_ID == id && k.ETEX_ETEX_ID == et && k.XATT_XATT_ID == i.XATT_XATT_ID select k).FirstOrDefault();
                    int cmyobj = (from k in Db.EXP_VALUE where k.EINS_EINS_ID == id && k.ETEX_ETEX_ID == et && k.XATT_XATT_ID == i.XATT_XATT_ID select k).Count();
                    if (cmyobj != 0)
                    {
                        var myobj = (from k in Db.EXP_VALUE where k.EINS_EINS_ID == id && k.ETEX_ETEX_ID == et && k.XATT_XATT_ID == i.XATT_XATT_ID select k).FirstOrDefault();
                        myobj.VALU_VALU = i.VALU_VALU;
                    }
                    else
                    {
                        EXP_VALUE New_Item = new EXP_VALUE();
                        New_Item = i;
                        New_Item.ETEX_ETEX_ID = et;
                        Db.EXP_VALUE.Add(New_Item);
                    }

                    Db.SaveChanges();
                }

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", et) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        public class CustomerSearchtype1
        {
            public int ETEX_ID2 { get; set; }

            public int ETEX_ETEX_ID { get; set; }

            public int e { get; set; }
        }

        [EntityAuthorize("EXP_VALUE > select|EXP_TYPE_EQUIP > select")]
        public ActionResult Readvaluesem([DataSourceRequest] DataSourceRequest request, CustomerSearchtype1 CustomerSearchtype1)
        {
            int e1 = CustomerSearchtype1.e;
            int _ETEX_ID2 = CustomerSearchtype1.ETEX_ID2;
            int _ETEX_ETEX_ID = CustomerSearchtype1.ETEX_ETEX_ID;
            int id = Convert.ToInt32(Session["semilarid"]);
            if (e1 == 0)
            {
                var query = from b in Db.EXP_VALUE
                            join p in Db.EXP_TYPE_EQUIP on b.ETEX_ETEX_ID equals p.ETEX_ID
                            where b.EINS_EINS_ID == id && b.ETEX_ETEX_ID == _ETEX_ID2
                            select new
                            {
                                b.VALU_ID,
                                b.EINS_EINS_ID,
                                b.ETEX_ETEX_ID,
                                p.ETEX_VER,
                                p.ETEX_YEAR,
                                b.XATT_XATT_ID,
                                b.VALU_VALU,
                                b.DMAN_DMAN_ID
                            };

                return Json(query.ToDataSourceResult(request));
            }
            else
            {
                var query = from b in Db.EXP_VALUE
                            join p in Db.EXP_TYPE_EQUIP on b.ETEX_ETEX_ID equals p.ETEX_ID
                            where b.EINS_EINS_ID == id && b.ETEX_ETEX_ID == _ETEX_ETEX_ID
                            select new
                            {
                                b.VALU_ID,
                                b.EINS_EINS_ID,
                                b.ETEX_ETEX_ID,
                                p.ETEX_VER,
                                p.ETEX_YEAR,
                                b.XATT_XATT_ID,
                                b.VALU_VALU,
                                b.DMAN_DMAN_ID
                            };

                return Json(query.ToDataSourceResult(request));
            }
        }

        public ActionResult attr_New(int? id)
        {
            Session["attid"] = id;
            if (id != 0)
            {
                EXP_VALUE type = (from b in Db.EXP_VALUE where b.VALU_ID == id select b).FirstOrDefault();
                return View(type);
            }

            return View();
        }

        [EntityAuthorize("EXP_INSTRUMENT > select|EXP_TYPE_EQUIP > select|EXP_ATTRIBUTE> select")]
        public ActionResult type_New(int? id)
        {
            ViewData["EINS2"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX2"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            Session["typeid"] = id;
            if (id != 0)
            {
                EXP_ATTRIBUTE type = (from b in Db.EXP_ATTRIBUTE where b.EINS_EINS_ID == id && b.ETEX_ETEX_ID != null select b).FirstOrDefault();
                return View(type);
            }

            return View();
        }

        [EntityAuthorize("EXP_INSTRUMENT > select|EXP_TYPE_BAY > select|EXP_INST_TYPE_BAY> select")]
        public ActionResult bay_New(int? id)
        {
            ViewData["EBAY"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC }).AsEnumerable();
            ViewData["EINS2"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            Session["bayid"] = id;
            if (id != 0)
            {
                EXP_INST_TYPE_BAY inst = (from b in Db.EXP_INST_TYPE_BAY where b.EINS_EINS_ID == id select b).FirstOrDefault();
                return View(inst);
            }
            return View();
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult inst_New(int? id)
        {
            Session["instid"] = id;
            if (id != 0)
            {
                EXP_INSTRUMENT inst = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == id select b).FirstOrDefault();
                return View(inst);
            }
            return View();
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult ReadInst([DataSourceRequest] DataSourceRequest request)
        {
            var query = from b in Db.EXP_INSTRUMENT
                        where b.EINS_EINS_ID != null
                        select new
                        {
                            b.EINS_ID,
                            b.EINS_DESC,
                            b.ESIN_ESIN_ID,
                            b.ETYI_ETYI_ID,
                            b.ACTV_TYPE,
                            b.SERV_STAT,
                            b.BAY_STAT,
                            b.EINS_EINS_ID,
                            b.INST_TYPE
                        };

            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_INSTRUMENT > select,update")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult InstUpdate([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_INSTRUMENT> EXP_INSTRUMENT)
        {
            if (EXP_INSTRUMENT != null && ModelState.IsValid)
            {
                foreach (EXP_INSTRUMENT row in EXP_INSTRUMENT)
                {
                    var myobj = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == row.EINS_ID select b).FirstOrDefault();
                    myobj.EINS_DESC = row.EINS_DESC;
                    myobj.BAY_STAT = row.BAY_STAT;
                    myobj.EINS_DESC = row.EINS_DESC;
                    myobj.EINS_EINS_ID = row.EINS_EINS_ID;
                    myobj.ESIN_ESIN_ID = row.ESIN_ESIN_ID;
                    myobj.ETYI_ETYI_ID = row.ETYI_ETYI_ID;
                    myobj.INST_TYPE = row.INST_TYPE;
                    myobj.SERV_STAT = row.SERV_STAT;
                    myobj.ACTV_TYPE = row.ACTV_TYPE;
                    Db.SaveChanges();
                }
            }

            return Json(EXP_INSTRUMENT.ToDataSourceResult(request, ModelState));
        }

        [HttpPost]
        [EntityAuthorize("EXP_INST_TYPE_BAY > select,insert,update")]
        public ActionResult BAYInsert(Equipment.Models.EXP_INST_TYPE_BAY NewItem)
        {
            int u = Convert.ToInt32(Session["bayid"]);

            try
            {
                var type = Request.Form["BAYI"].ToString().Split(',');
                int i = 0;
                int j = type.Count();

                while (i < j)
                {
                    NewItem.ETBY_ETBY_ID = int.Parse(type[i].ToString());
                    if (PublicRepository.ExistModel("EXP_INST_TYPE_BAY", "EINS_EINS_ID='{0}' and ETBY_ETBY_ID='{1}' ", u, type[i]))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] تکراری است.", type[i]) }.ToJson();
                    }

                    int Etby = int.Parse(type[i].ToString());
                    Db.EXP_INST_TYPE_BAY.Add(new EXP_INST_TYPE_BAY()
                    {
                        EINS_EINS_ID = u,
                        ETBY_ETBY_ID = Etby
                    });

                    Db.SaveChanges();
                    i = i + 1;
                }

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", u), CoustomData = 1 }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_INSTRUMENT > select,insert,update")]
        public ActionResult InstInsert(Equipment.Models.EXP_INSTRUMENT NewItem)
        {
            int u = Convert.ToInt32(Session["instid"]);
            try
            {
                if (u == 0)
                {
                    if (NewItem.EINS_EINS_ID == null)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] کلاس- تجهیز اصلی نمی تواند Null باشد در صورت کلاس اصلی از فرم کلاس اصلی استفاده نمایید.", NewItem.EINS_DESC) }.ToJson();
                    }

                    if (NewItem.EINS_DESC == null)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("لطفا نام تجهیزات را وارد نمائید.", NewItem.EINS_DESC) }.ToJson();
                    }

                    if (PublicRepository.ExistModel("EXP_INSTRUMENT", "EINS_DESC='{0}'", NewItem.EINS_DESC.Trim()))
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] تکراری است.", NewItem.EINS_DESC) }.ToJson();
                    }

                    Db.EXP_INSTRUMENT.Add(NewItem);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.EINS_DESC), CoustomData = 1 }.ToJson();
                }
                else
                {
                    NewItem.EINS_ID = Convert.ToInt32(Session["instid"]);
                    var row = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == NewItem.EINS_ID select b).FirstOrDefault();
                    row.BAY_STAT = NewItem.BAY_STAT;
                    row.EINS_DESC = NewItem.EINS_DESC;
                    row.EINS_EINS_ID = NewItem.EINS_EINS_ID;
                    row.ESIN_ESIN_ID = NewItem.ESIN_ESIN_ID;
                    row.ETYI_ETYI_ID = NewItem.ETYI_ETYI_ID;
                    row.INST_TYPE = NewItem.INST_TYPE;
                    row.SERV_STAT = NewItem.SERV_STAT;
                    row.ACTV_TYPE = NewItem.ACTV_TYPE;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_ATTRIBUTE > select,insert,update")]
        public ActionResult inserttypeeq(int? ETEX_ID)
        {
            int u = Convert.ToInt32(Session["typeid"]);

            try
            {
                //int etex = int.Parse(Request.Form["ETEX_ID"].ToString());
                Db.EXP_ATTRIBUTE.Add(new EXP_ATTRIBUTE()
                {
                    EINS_EINS_ID = u,
                    ETEX_ETEX_ID = ETEX_ID,
                    XATT_TYPE = "",
                    XATT_TITLE = "",
                    XATT_STAT = "",
                    XATT_ORDE = 0,
                    XATT_LENT = 1,
                    OPTI_MAN = "",
                });

                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", u), CoustomData = 1 }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_ATTRIBUTE > select,insert,update")]
        public ActionResult typeInsert(Equipment.Models.EXP_ATTRIBUTE NewItem)
        {
            int u = Convert.ToInt32(Session["typeid"]);

            try
            {
                if (Request.Form["ETEX_ID1"] == null || Request.Form["ETEX_ID1"] == "" || Request.Form["typet"] == null || Request.Form["typet"] == "")
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "لطفا تیپ تجهیز و مدل تجهیز را وارد نمائید." }.ToJson();
                }
                if (Request.Form["ETEX_ETEX_ID"] != "" && Request.Form["ETEX_ETEX_ID"] != null)
                {
                    int etex = int.Parse(Request.Form["ETEX_ETEX_ID"].ToString());
                    Db.EXP_ATTRIBUTE.Add(new EXP_ATTRIBUTE()
                    {
                        EINS_EINS_ID = u,
                        ETEX_ETEX_ID = etex,
                        XATT_TYPE = "",
                        XATT_TITLE = "",
                        XATT_STAT = "",
                        XATT_ORDE = 0,
                        XATT_LENT = 1,
                        OPTI_MAN = "",
                    });
                    Db.SaveChanges();
                }
                else if (Request.Form["typet"] != "" && Request.Form["typet"] != null)
                {
                    var type = Request.Form["typet"].ToString().Split(',');
                    int j = type.Count();
                    int i = 0;
                    while (i < j)
                    {
                        NewItem.ETEX_ETEX_ID = int.Parse(type[i].ToString());
                        var existType = from b in Db.EXP_ATTRIBUTE where b.EINS_EINS_ID == u && b.ETEX_ETEX_ID == NewItem.ETEX_ETEX_ID select b;
                        if (existType.Count() != 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] تکراری است.", type[i]) }.ToJson();
                        }

                        int etex = int.Parse(type[i].ToString());
                        Db.EXP_ATTRIBUTE.Add(new EXP_ATTRIBUTE()
                        {
                            EINS_EINS_ID = u,
                            ETEX_ETEX_ID = etex,
                            XATT_TYPE = "",
                            XATT_TITLE = "",
                            XATT_STAT = "",
                            XATT_ORDE = 0,
                            XATT_LENT = 1,
                            OPTI_MAN = "",
                        });

                        Db.SaveChanges();
                        i = i + 1;
                    }
                }

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", u), CoustomData = 1 }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        private object StringSplitOptions(string p1, string p2)
        {
            throw new NotImplementedException();
        }

        [EntityAuthorize("EXP_TYPE_BAY > select")]
        public ActionResult ETBY_ETBY_ID_Readmain()
        {
            var query = (from b in Db.EXP_TYPE_BAY select new { b.ETBY_ID, b.ETBY_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_STATE_INSTRU > select")]
        public ActionResult ESIN_ESIN_ID_Read()
        {
            var query = (from b in Db.EXP_STATE_INSTRU select new { b.ESIN_ID, b.ESIN_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_TYPE_INSTRU > select")]
        public ActionResult ETYI_ETYI_ID_Read()
        {
            var query = (from b in Db.EXP_TYPE_INSTRU select new { b.ETYI_ID, b.ETYI_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_Read()
        {
            var query = (from b in Db.EXP_INSTRUMENT
                         orderby b.EINS_DESC
                         //  where b.EINS_EINS_ID != null
                         select new { b.EINS_ID, b.EINS_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_class()
        {
            var query = (from b in Db.EXP_INSTRUMENT
                         orderby b.EINS_DESC
                         where b.SELT_TYPE == "0"
                         orderby b.EINS_ID
                         select new { b.EINS_ID, b.EINS_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }


        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_Rvalue()
        {
            var query = (from b in Db.EXP_INSTRUMENT
                         orderby b.EINS_DESC
                         where b.EINS_EINS_ID != null
                         select new { b.EINS_ID, b.EINS_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_TYPE_EQUIP> select")]
        public ActionResult ETEX_ETEX_ID_Read1()
        {
            var query = (from b in Db.EXP_TYPE_EQUIP select new { b.ETEX_ID, b.ETEX_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_TYPE_EQUIP> select|EXP_FACTORY> select")]
        public ActionResult ETEX_ETEX_ID_Read2(short? ETEX_ID1)
        {
            var query = (from b in Db.EXP_TYPE_EQUIP join j in Db.EXP_FACTORY on b.EFAC_EFAC_ID equals j.EFAC_ID where b.ETEX_TYPE == "1" && b.ETEX_ETEX_ID == ETEX_ID1 select new { b.ETEX_ID, b.ETEX_DESC, b.ETEX_VER, b.ETEX_YEAR, j.EFAC_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_TYPE_EQUIP> select|EXP_FACTORY> select|EXP_ATTRIBUTE> select")]
        public ActionResult ETEX_ETEX_ID_Readsemil()
        {
            int id = Convert.ToInt32(Session["semilarid"]);
            var q1 = (from b in Db.EXP_TYPE_EQUIP
                      join j in Db.EXP_FACTORY on b.EFAC_EFAC_ID equals j.EFAC_ID
                      join k in Db.EXP_ATTRIBUTE on b.ETEX_ETEX_ID equals k.ETEX_ETEX_ID
                      where k.EINS_EINS_ID == id && b.ETEX_TYPE == "1"
                      select new { b.ETEX_ID, b.ETEX_DESC, b.ETEX_VER, b.ETEX_YEAR, j.EFAC_DESC, b.ETEX_ETEX_ID });

            return Json(q1, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_TYPE_EQUIP> select|EXP_FACTORY> select|EXP_ATTRIBUTE> select")]
        public ActionResult ETEX_ETEX_ID_Read(short? EINS_ID1)
        {
            var query1 = (from f in Db.EXP_FACTORY
                          join b in Db.EXP_TYPE_EQUIP on f.EFAC_ID equals b.EFAC_EFAC_ID
                          join j in Db.EXP_ATTRIBUTE on b.ETEX_ID equals j.ETEX_ETEX_ID
                          where b.ETEX_TYPE == "1" && j.EINS_EINS_ID == EINS_ID1
                          select b.ETEX_ETEX_ID);

            var query = (from f in Db.EXP_FACTORY
                         join b in Db.EXP_TYPE_EQUIP on f.EFAC_ID equals b.EFAC_EFAC_ID
                         where b.ETEX_TYPE == "0" && query1.Contains(b.ETEX_ID)
                         select new { b.ETEX_ID, b.ETEX_DESC, f.EFAC_DESC, b.ETEX_VER, b.ETEX_YEAR });

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_TYPE_EQUIP> select|EXP_FACTORY> select")]
        public ActionResult ETEX_ETEX_ID_Readmain()
        {
            var query = (from b in Db.EXP_TYPE_EQUIP
                         join j in Db.EXP_FACTORY on b.EFAC_EFAC_ID equals j.EFAC_ID
                         where b.ETEX_TYPE == "0"
                         select new { b.ETEX_ID, b.ETEX_DESC, b.ETEX_VER, b.ETEX_YEAR, j.EFAC_DESC });

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_ATTRIBUTE> select|EXP_FACTORY> select|EXP_VALUE> select")]
        public ActionResult XATT_XATT_ID_Read(CustomerSearchModel customerSearchModel)
        {
            int EINS_ID1Param = customerSearchModel.EINS_ID1;
            int ETEX_ID1Param = customerSearchModel.ETEX_ID1;

            if (ETEX_ID1Param == 0)
            {
                var query = (from b in Db.EXP_ATTRIBUTE
                             where b.EINS_EINS_ID == EINS_ID1Param && b.ETEX_ETEX_ID == null && !(from k in Db.EXP_VALUE
                                                                                                  where (k.EINS_EINS_ID == EINS_ID1Param)
                                                                                                  select k.XATT_XATT_ID).Contains(b.XATT_ID)
                             select new { b.XATT_ID, b.XATT_TITLE });
                return Json(query, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var query1 = (from b in Db.EXP_ATTRIBUTE
                              where b.EINS_EINS_ID == EINS_ID1Param && b.ETEX_ETEX_ID == null
                              select new { b.XATT_ID, b.XATT_TITLE });
                return Json(query1, JsonRequestBehavior.AllowGet);
            }
        }

        [EntityAuthorize("EXP_ATTRIBUTE> select|EXP_TYPE_EQUIP> select|EXP_VALUE> select,insert,update")]
        public ActionResult valueInsert(Equipment.Models.EXP_VALUE NewItem)
        {
            try
            {
                if (Request.Form["EINS_ID1"] == "")
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0} بایستی تجهیز انتخاب شده باشد ", NewItem.EINS_EINS_ID), CoustomData = 3 }.ToJson();
                }
                else
                {
                    int xat = 0;
                    int ETex = 0;
                    if (Request.Form["typet"] != "" && Request.Form["typet"] != null)
                    {
                        xat = Convert.ToInt16(Request.Form["typet"].ToString());
                    }
                    if (Request.Form["XATT_ID1"] != "" && Request.Form["XATT_ID1"] != null)
                    {
                        ETex = Convert.ToInt16(Request.Form["XATT_ID1"].ToString());
                    }

                    int u = Convert.ToInt16(Session["attid"].ToString());
                    if (u == 0)
                    {
                        NewItem.EINS_EINS_ID = int.Parse(Request.Form["EINS_ID1"].ToString());
                        NewItem.XATT_XATT_ID = ETex;
                        NewItem.ETEX_ETEX_ID = xat;
                        Db.EXP_VALUE.Add(NewItem);
                        Db.SaveChanges();
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.EINS_EINS_ID), CoustomData = 2 }.ToJson();
                    }
                    else
                    {
                        var m = (from b in Db.EXP_VALUE where b.VALU_ID == u select b).FirstOrDefault();
                        m.VALU_VALU = NewItem.VALU_VALU;
                        m.XATT_XATT_ID = ETex;
                        m.ETEX_ETEX_ID = xat;
                        Db.SaveChanges();
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", NewItem.EINS_EINS_ID), CoustomData = 2 }.ToJson();
                    }
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_ATTRIBUTE> select|EXP_TYPE_EQUIP> select|EXP_INSTRUMENT> select|CHK_DOMAIN> select")]
        public void LoadInstrument()
        {
            ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { ETEX_ID = c.ETEX_ID, ETEX_DESC = c.ETEX_DESC });
            ViewData["XATT"] = Db.EXP_ATTRIBUTE.Select(c => new { XATT_ID = c.XATT_ID, XATT_TITLE = c.XATT_TITLE });
            ViewData["DMAN"] = Db.CHK_DOMAIN.Select(c => new { DMAN_ID = c.DMAN_ID, DMAN_TITL = c.DMAN_TITL });
        }

        public class CustomerSearchtype
        {
            public int EINS_ID2 { get; set; }
            //   public int ETEX_ID2 { get; set; }
        }

        [EntityAuthorize("EXP_INST_TYPE_BAY> select,update")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Update_BAY([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_INST_TYPE_BAY> EXP_INST_TYPE_BAY)
        {
            if (EXP_INST_TYPE_BAY != null && ModelState.IsValid)
            {
                foreach (EXP_INST_TYPE_BAY row in EXP_INST_TYPE_BAY)
                {
                    var myobj = (from b in Db.EXP_INST_TYPE_BAY where b.EINS_EINS_ID == row.EINS_EINS_ID select b).FirstOrDefault();
                    myobj.ETBY_ETBY_ID = row.ETBY_ETBY_ID;
                    Db.SaveChanges();
                }
            }

            return Json(EXP_INST_TYPE_BAY.ToDataSourceResult(request, ModelState));
        }

        [EntityAuthorize("EXP_VALUE> select,update")]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult valueupdate([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_VALUE> EXP_VALUE)
        {
            if (EXP_VALUE != null && ModelState.IsValid)
            {
                foreach (EXP_VALUE row in EXP_VALUE)
                {
                    var myobj = (from b in Db.EXP_VALUE where b.VALU_ID == row.VALU_ID select b).FirstOrDefault();
                    myobj.VALU_VALU = row.VALU_VALU;
                    Db.SaveChanges();
                }
            }

            return Json(EXP_VALUE.ToDataSourceResult(request, ModelState));
        }

        [EntityAuthorize("EXP_INST_TYPE_BAY>select")]
        public ActionResult ReadBAY([DataSourceRequest] DataSourceRequest request)
        {
            int u = Convert.ToInt32(Session["bayid"]);
            var query = from b in Db.EXP_INST_TYPE_BAY
                        where (b.EINS_EINS_ID == u)
                        select new
                        {
                            b.EITB_ID,
                            b.EINS_EINS_ID,
                            b.ETBY_ETBY_ID
                            /*b.XATT_TITLE,
                            b.XATT_LENT,
                            b.XATT_HINT,
                            b.XATT_ORDE,
                            b.XATT_ALGN,
                            b.OPTI_MAN,
                            b.XATT_STAT,
                            b.XATT_TYPE,
                            b.XATT_POSI*/
                        };
            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_ATTRIBUTE>select")]
        public ActionResult ReadTypeAtrrbut([DataSourceRequest] DataSourceRequest request)
        {
            int u = Convert.ToInt32(Session["typeid"]);
            var query = from b in Db.EXP_ATTRIBUTE
                        where (b.EINS_EINS_ID == u) && b.ETEX_ETEX_ID != null
                        select new
                        {
                            b.XATT_ID,
                            b.EINS_EINS_ID,
                            b.ETEX_ETEX_ID
                            /*   b.XATT_TITLE,
                            b.XATT_LENT,
                            b.XATT_HINT,
                            b.XATT_ORDE,
                            b.XATT_ALGN,
                            b.OPTI_MAN,
                            b.XATT_STAT,
                            b.XATT_TYPE,
                            b.XATT_POSI*/
                        };
            return Json(query.ToDataSourceResult(request));
        }

        public class CustomerSearchModel
        {
            public int EINS_ID1 { get; set; }

            public int ETEX_ID1 { get; set; }
        }

        [EntityAuthorize("EXP_VALUE>select|EXP_TYPE_EQUIP>select")]
        public ActionResult Readvalue([DataSourceRequest] DataSourceRequest request, int? EINS_ID1)
        {
            if (EINS_ID1 != null)
            {
                Session["einsid"] = EINS_ID1;
            }

            var query = from b in Db.EXP_VALUE
                        join p in Db.EXP_TYPE_EQUIP on b.ETEX_ETEX_ID equals p.ETEX_ID
                        where b.EINS_EINS_ID == EINS_ID1
                        select new
                        {
                            b.VALU_ID,
                            b.EINS_EINS_ID,
                            b.ETEX_ETEX_ID,
                            p.ETEX_VER,
                            p.ETEX_YEAR,
                            b.XATT_XATT_ID,
                            b.VALU_VALU,
                            b.DMAN_DMAN_ID
                        };

            return Json(query.ToDataSourceResult(request));
        }

        [EntityAuthorize("EXP_ATTRIBUTE>select,insert,update")]
        public ActionResult insertTypeAtrrbut(EXP_ATTRIBUTE objecttemp)
        {
            objecttemp.XATT_STAT = Request.Form["STAT"];
            objecttemp.OPTI_MAN = Request.Form["OPTI"];
            objecttemp.XATT_ALGN = Request.Form["ALGN"];
            objecttemp.XATT_TYPE = Request.Form["TYPE"];
            objecttemp.XATT_POSI = Request.Form["POSI"];

            if (Request.Form["ETEX_ID"] == "" || Request.Form["EINS_ID"] == "")
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0} بایستی تجهیز و تیپ هر دو انتخاب شده باشد لطفا برای انتخاب مشخصه هر کدام تجهیزات و یا تیپ فرم مورد نظر را انتخاب نمایید ", objecttemp.XATT_ID), CoustomData = 3 }.ToJson();
            }
            else
            {
                objecttemp.EINS_EINS_ID = int.Parse(Request.Form["EINS_ID"]);
                objecttemp.ETEX_ETEX_ID = int.Parse(Request.Form["ETEX_ID"]);
                if (PublicRepository.ExistModel("EXP_ATTRIBUTE", "XATT_ID='{0}'", objecttemp.XATT_ID))
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] قبلا ثبت شده است", objecttemp.XATT_ID), CoustomData = 3 }.ToJson();
                }
                else
                {
                    if ((objecttemp.XATT_TYPE == "170") || ((objecttemp.XATT_TYPE == "181")))
                    {
                        var dman = new CHK_DOMAIN();
                        dman.ACTV_TYPE = "0";
                        dman.DMAN_TYPE = "0";
                        dman.DMAN_TITL = objecttemp.XATT_TITLE;
                        Db.CHK_DOMAIN.Add(dman);
                        int dman_id = dman.DMAN_ID;
                        Db.SaveChanges();
                        objecttemp.DMAN_DMAN_ID = dman.DMAN_ID;
                        Db.EXP_ATTRIBUTE.Add(objecttemp);
                        Db.SaveChanges();
                    }
                    else
                    {
                        Db.EXP_ATTRIBUTE.Add(objecttemp);
                        Db.SaveChanges();
                    }

                    return Json(new { Success = "True" }, JsonRequestBehavior.DenyGet);
                }
            }
        }

    }

}
