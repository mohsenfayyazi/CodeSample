using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Data;
using System.Data.OleDb;
using System.Linq;
using System.Web.Mvc;
using System.Xml;

namespace Equipment.Controllers.Exploitation.ConvertInfo
{
    public class ConvertPController : DbController
    {

        //// GET: /ConvertP/
        //
        public ActionResult MainInfo()
        {
            ViewData["ORGA"] = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
            //ViewData["Line_Type"] = dataContext.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.LINE_TYPE});
            ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
            ViewData["post_TYPE"] = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewData["OWNER"] = Db.EXP_OWENER_COMPANY.Select(c => new { c.EOCO_ID, c.EOCO_DESC });
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.ESIN = Db.EXP_STATE_INSTRU.Select(c => new { c.ESIN_ID, c.ESIN_DESC }).ToList();
            ViewData["ETYI"] = Db.EXP_TYPE_INSTRU.Select(c => new { c.ETYI_ID, c.ETYI_DESC }).ToList();
            ViewData["temp_position"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 171).AsEnumerable();
            ViewData["temp_type"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 165).AsEnumerable();
            ViewData["temp_algn"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 176).AsEnumerable();
            ViewData["EINS1"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX1"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["EBAY"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC }).AsEnumerable();
            ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
            ViewData["ETEXm"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_VER }).AsEnumerable();
            ViewData["XATT"] = Db.EXP_ATTRIBUTE.Select(c => new { c.XATT_ID, c.XATT_TITLE, c.ETEX_ETEX_ID, c.EINS_EINS_ID }).AsEnumerable();
            ViewData["DMAN"] = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL }).AsEnumerable();
            ViewData["Epui"] = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME }).AsEnumerable();
            return View();
        }

        [HttpPost]
        //[EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        public ActionResult ReadInstrumentd([DataSourceRequest] DataSourceRequest request, int? postid)
        {
            if (postid.HasValue && postid != 0)
            {
                //Cntx.Configuration.LazyLoadingEnabled = false;
                var query = from b1 in Db.EXP_POST_LINE_INSTRU
                            where b1.EPOL_EPOL_ID == postid && b1.HIST_DATE == null && b1.EPIU_EPIU_ID != null
                            orderby b1.EPIU_ID descending
                            select new
                            {
                                b1.EPIU_EPIU_ID,
                                b1.EPIU_ID,
                                b1.EINS_EINS_ID,
                                b1.CODE_DISP,
                                b1.EUNL_EUNL_ID,
                                b1.EARD_EARD_ID,
                                b1.OUIN_TYPE,
                                b1.EPIU_TYPE,
                                b1.CODE_NAME,
                                b1.ETEX_ETEX_ID,
                                b1.PHAS_TYPE,
                                b1.PHAS_STAT
                            };
                //return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        //[EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        public ActionResult ReadInstrumentc([DataSourceRequest] DataSourceRequest request, int? parentId, int? postid)
        {
            int trantyp;

            if (parentId == 5)
                trantyp = 2;
            else if (parentId == 14)
                trantyp = 3;
            else if (parentId == 12)
                trantyp = 4;
            else if (parentId == 3)
                trantyp = 7;
            else if (parentId == 18)
                trantyp = 8;
            else if (parentId == 7)
                trantyp = 9;
            else if (parentId == 2)
                trantyp = 10;
            else if (parentId == 8)
                trantyp = 11;
            else if (parentId == 10)
                trantyp = 12;
            else if (parentId == 6)
                trantyp = 13;
            else if (parentId == 11)
                trantyp = 24;
            else if (parentId == 21)
                trantyp = 62;
            else if (parentId == 9)
                trantyp = 259;
            else
                trantyp = 0;

            int?[] intk = { 259, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 24, 62 };

            if (trantyp != 0)
            {
                var query = from b in Db.EXP_POST_LINE_INSTRU
                            where b.EPOL_EPOL_ID == postid && b.HIST_DATE == null && b.EINS_EINS_ID == trantyp
                            orderby b.EPIU_ID descending
                            select new
                            {
                                b.EPIU_ID,
                                b.EINS_EINS_ID,
                                b.CODE_DISP,
                                b.EUNL_EUNL_ID,
                                b.EARD_EARD_ID,
                                b.OUIN_TYPE,
                                b.EPIU_TYPE,
                                b.CODE_NAME,
                                b.ETEX_ETEX_ID,
                                b.PHAS_TYPE,
                                b.PHAS_STAT
                            };

                var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            else
            {
                var query = from b1 in Db.EXP_POST_LINE_INSTRU
                            where b1.EPOL_EPOL_ID == postid && b1.HIST_DATE == null && !intk.AsQueryable().Contains(b1.EINS_EINS_ID)
                            orderby b1.EPIU_ID descending
                            select new
                            {
                                b1.EPIU_ID,
                                b1.EINS_EINS_ID,
                                b1.CODE_DISP,
                                b1.EUNL_EUNL_ID,
                                b1.EARD_EARD_ID,
                                b1.OUIN_TYPE,
                                b1.EPIU_TYPE,
                                b1.CODE_NAME,
                                b1.ETEX_ETEX_ID,
                                b1.PHAS_TYPE,
                                b1.PHAS_STAT
                            };

                var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
        }

        //[EntityAuthorize("EXP_POST_VAR_HEAD > select,insert | EXP_POST_LINE_INSTRU > select | EXP_POST_LINE > select | EXP_POST_VAR_INSTRU > select,insert")]
        [AcceptVerbs(HttpVerbs.Post)]
        [HttpPost]
        public ActionResult Importexcelinst()//(HttpPostedFileBase file)
        {
            DataSet ds = new DataSet();
            //int var_head = 0;
            string m = string.Empty;
            string d = string.Empty;
            string fileExtension = string.Empty;
            string fileLocation = string.Empty;
            string typeinstid = Convert.ToString(Request.Form["instt"]);
            int fd1 = Convert.ToInt32(typeinstid);
            int idf = -1;
            string phasType = string.Empty;
            string phas = string.Empty;
            string code = string.Empty;
            string instname = string.Empty;
            //int? inst = 0;

            // آرایه زیر تعریف شده برای اینکه اسم بعضی از بخش ها تغییر نکند
            int?[] array = { 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 23, 24, 30, 259, 62, 281, 282 };
            if (fd1 == 20)
            {
                try
                {
                    var q = from b in Db.EXP_POST_LINE_INSTRU where array.Contains(b.EINS_EINS_ID) select b;
                    var insttext = string.Empty;
                    foreach (var item in q)
                    {
                        insttext = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == item.EINS_EINS_ID select b.EINS_DESC).FirstOrDefault().ToString().Trim();
                        phasType = item.PHAS_TYPE;//.Trim();
                        phas = item.PHAS_STAT;//.Trim();
                        code = item.CODE_DISP.Trim();
                        //instname = item.CODE_NAME.Trim();
                        // برای همه این حالت ها کد دیسپاچینگی وجود دارد ؟ اگر ندارد قسمت آخر شرط پایین برداشته شود
                        if ((item.CODE_NAME != null || item.CODE_NAME != "") && (item.CODE_DISP != null || item.CODE_DISP != ""))
                        {
                            if ((phas != null || phas != "") && phasType == "1")
                            {
                                switch (phas)
                                {
                                    case "0":
                                        phas = "فاز R";
                                        break;
                                    case "1":
                                        phas = "فاز S";
                                        break;
                                    case "2":
                                        phas = "فاز T";
                                        break;
                                    case "3":
                                        phas = "SPEAR";
                                        break;
                                    default:
                                        phas = "";
                                        break;
                                }

                                //item.CODE_NAME = insttext + " - " + code + " - " + phas;
                                //Cntx.SaveChanges();
                                instname = insttext + " - " + code + " - " + phas;
                            }
                            else if ((phas == null || phas == "") && phasType == "0")
                            {
                                //item.CODE_NAME = insttext + " - " + code;
                                //Cntx.SaveChanges();
                                instname = insttext + " - " + code;
                            }
                            item.CODE_NAME = instname;
                        }

                    }
                    Db.SaveChanges();
                    // ViewBag.mess = "1" + "#" + "نام ها ثبت شد";
                    //return View("messageexcel");
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] نام ها ثب شد", "1") }.ToJson();
                    // return View("MainInfo");
                }
                catch (Exception ex)
                {
                    d = ex.Message.ToString();
                    return View("messageexcel");
                }
            }
            else
            {
                if (Request.Files["FileUploadinst"].ContentLength > 0)
                {
                    fileExtension = System.IO.Path.GetExtension(Request.Files["FileUploadinst"].FileName);

                    if (fileExtension == ".xls" || fileExtension == ".xlsx")
                    {
                        fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadinst"].FileName;
                        //if (System.IO.File.Exists(fileLocation))
                        //{
                        //    System.IO.File.Delete(fileLocation);
                        //}
                        Request.Files["FileUploadinst"].SaveAs(fileLocation);
                        string excelConnectionString = string.Empty;
                        excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                        if (fileExtension == ".xls")
                        {
                            excelConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +
                            fileLocation + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";
                        }
                        else if (fileExtension == ".xlsx")
                        {
                            excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                            fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                        }


                        OleDbConnection excelConnection2 = new OleDbConnection(excelConnectionString);
                        excelConnection2.Open();
                        DataTable dt = new DataTable();

                        dt = excelConnection2.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                        if (dt == null)
                        {
                            return null;
                        }

                        String[] excelSheets = new String[dt.Rows.Count];
                        int t = 0;

                        //excel data saves in temp file here.
                        foreach (DataRow row in dt.Rows)
                        {
                            excelSheets[t] = row["TABLE_NAME"].ToString();

                            if (row["TABLE_NAME"].ToString() == "پست$" && fd1 == 4)
                            {
                                idf = t;
                                break;
                            }
                            if (row["TABLE_NAME"].ToString() == "'اطلاعات پایه$'" && fd1 == 1)
                            {
                                idf = t;
                                break;
                            }
                            if (row["TABLE_NAME"].ToString() == "خط$" && fd1 == 13)
                            {
                                idf = t;
                                break;
                            }
                            if (row["TABLE_NAME"].ToString() == "فیدر$" && fd1 == 14)
                            {
                                idf = t;
                                break;
                            }
                            if (row["TABLE_NAME"].ToString() == "'گروه تجهیزات$'" && fd1 == 19)
                            {
                                idf = t;
                                break;
                            }
                            if (row["TABLE_NAME"].ToString() == "'ریز تجهیز$'" && fd1 == 2)
                            {
                                idf = t;
                                break;
                            }
                            t++;

                        }
                        if (idf != -1)
                        {
                            OleDbConnection excelConnection1 = new OleDbConnection(excelConnectionString);
                            string query = string.Format("Select * from [{0}]", excelSheets[idf]);
                            // string query = string.Format("Select * from [{0}]", excelSheets[fd1]);
                            using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, excelConnection1))
                            {
                                dataAdapter.Fill(ds);
                                dataAdapter.Dispose();
                            }
                        }
                    }
                    if (idf != -1)
                    {
                        if (fileExtension.ToString().ToLower().Equals(".xml"))
                        {
                            fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadinst"].FileName;
                            //if (System.IO.File.Exists(fileLocation))
                            //{
                            //    System.IO.File.Delete(fileLocation);
                            //}

                            Request.Files["FileUploadinst"].SaveAs(fileLocation);
                            XmlTextReader xmlreader = new XmlTextReader(fileLocation);
                            ds.ReadXml(xmlreader);
                            xmlreader.Close();
                        }
                    }
                    try
                    {
                        if (idf == -1)
                        {
                            d = "0$" + "اسم شیت  با اسم شیت اصلی سازگار نیست لطفا ان را درست فرمایید ";
                        }
                        else
                        {
                            if (fd1 == 19)
                            {
                                d = inserttypeinst(ds);
                            }
                            if (fd1 == 1)
                            { d = insertfact(ds); }
                            if (fd1 == 4)
                            { d = insertpost(ds); }
                            if (fd1 == 13)
                            { d = insertmainline(ds); }//insertline
                            if (fd1 == 14)
                            { d = insertmainlinef(ds); }//insertline
                            if (fd1 == 2)
                            { d = insertdetaili(ds); }
                        }
                    }

                    catch (Exception ex)
                    {
                        d = "0$" + "فرمت سل های فایل اشکال دارد";
                        //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] فرمت سل های فایل اشکال دارد", "1") }.ToJson();
                    }
                }
                else
                {
                    d = "0$" + "طول فایل اشکال دارد";
                    //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] طول فایل اشکال دارد", "1") }.ToJson();
                }

                ViewBag.mess = "1$" + d;

                if (idf != -1)
                {
                    if (fd1 == 19)
                    {
                        ViewBag.ESIN = Db.EXP_STATE_INSTRU.Select(c => new { c.ESIN_ID, c.ESIN_DESC }).ToList();
                        ViewData["ETYI"] = Db.EXP_TYPE_INSTRU.Select(c => new { c.ETYI_ID, c.ETYI_DESC }).ToList();
                        ViewData["temp_position"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 171).AsEnumerable();
                        ViewData["temp_type"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 165).AsEnumerable();
                        ViewData["temp_algn"] = Db.CHK_DOMAIN.Select(o => new { o.DMAN_ID, o.DMAN_TITL, o.DMAN_DMAN_ID }).Where(o => o.DMAN_DMAN_ID == 176).AsEnumerable();
                        ViewData["EINS1"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
                        ViewData["ETEX1"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
                        ViewData["EBAY"] = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC }).AsEnumerable();
                        ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC }).AsEnumerable();
                        ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC }).AsEnumerable();
                        ViewData["ETEXy"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_YEAR }).AsEnumerable();
                        ViewData["ETEXm"] = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_VER }).AsEnumerable();
                        ViewData["XATT"] = Db.EXP_ATTRIBUTE.Select(c => new { c.XATT_ID, c.XATT_TITLE, c.ETEX_ETEX_ID, c.EINS_EINS_ID }).AsEnumerable();
                        ViewData["DMAN"] = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL }).AsEnumerable();
                        return View("infoinstgroup");
                    }

                    if (fd1 == 1)
                    {
                        return View("infofactory");
                    }

                    if (fd1 == 4)
                    {
                        ViewData["ORGA"] = Db.PAY_ORGAN.Select(c => new { c.CODE, c.ORGA_DESC });
                        ViewData["CITY"] = Db.BKP_GEOGH_LOC.Select(c => new { c.G_CODE, c.G_DESC });
                        ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
                        return View("infopost");
                    }

                    if (fd1 == 13)
                    {
                        ViewData["ORGA"] = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
                        //ViewData["Line_Type"] = dataContext.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.LINE_TYPE});
                        ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
                        ViewData["post_TYPE"] = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
                        ViewData["OWNER"] = Db.EXP_OWENER_COMPANY.Select(c => new { c.EOCO_ID, c.EOCO_DESC });
                        ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
                        return View("infoline");
                    }

                    if (fd1 == 2)
                    {
                        ViewData["ORGA"] = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
                        //ViewData["Line_Type"] = dataContext.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.LINE_TYPE});
                        ViewData["OWNER_TYPE"] = Db.EXP_OWENER_TYPE.Select(c => new { c.EOTY_ID, c.EOTY_DESC });
                        ViewData["post_TYPE"] = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
                        ViewData["OWNER"] = Db.EXP_OWENER_COMPANY.Select(c => new { c.EOCO_ID, c.EOCO_DESC });
                        ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
                        return View("MainInfo");
                    }
                }

                return View("messageexcel");
            }
        }

        private string insertdetaili(DataSet ds)
        {
            string m = string.Empty;
            string d = string.Empty;
            int rowid = 0;
            for (int i = 4; i < ds.Tables[0].Rows.Count; i++)
            {

                int irow = Convert.ToInt16(ds.Tables[0].Rows[i][0]);
                string desc = Convert.ToString(ds.Tables[0].Rows[i][1]);
                //int irowi = 0;
                //int mrowi = 0;
                //int typedi = 0;
                //int mogsi = 0;

                EXP_ERROR_INST einst = new EXP_ERROR_INST();
                int cinstq = (from b in Db.EXP_ERROR_INST where b.EINS_EINS_ID == irow && b.EERR_DESC == desc && b.EERR_TYPE == 0 select b.EERR_ID).Count();
                if (cinstq != 0)
                {
                    einst = (from b in Db.EXP_ERROR_INST where b.EINS_EINS_ID == irow && b.EERR_DESC == desc && b.EERR_TYPE == 0 select b).FirstOrDefault();
                }
                einst.EERR_DESC = desc;
                if (irow != 0)
                {
                    einst.EINS_EINS_ID = irow;
                }

                einst.EERR_TYPE = 0;

                if (cinstq == 0)
                {
                    Db.EXP_ERROR_INST.Add(einst);
                }

                Db.SaveChanges();

                d = m + d;
            }

            m = " ثبت شد" + d;
            m = rowid + "$" + m;
            return m;
            //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", int.Parse(var_head.ToString())) }.ToJson();
        }

        private string inserttypeinst(DataSet ds)
        {
            string m = string.Empty;
            string d = string.Empty;
            int rowid = 0;
            for (int i = 2; i < ds.Tables[0].Rows.Count; i++)
            {
                string irow = Convert.ToString(ds.Tables[0].Rows[i][0]);
                string mrow = Convert.ToString(ds.Tables[0].Rows[i][1]);
                string descrow = Convert.ToString(ds.Tables[0].Rows[i][2]);
                string typed = Convert.ToString(ds.Tables[0].Rows[i][3]);
                string mogs = Convert.ToString(ds.Tables[0].Rows[i][4]);
                int irowi = 0;
                int mrowi = 0;
                int typedi = 0;
                int mogsi = 0;

                if (irow != null && irow != "")
                {
                    irowi = Convert.ToInt32(irow);
                }
                else
                {
                    m = "ردیف تجهیز در خانه " + i + "مشکل دارد ";
                    // return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ردیف تجهیز در خانه "+i+"مشکل دارد ", "1") }.ToJson();
                }

                if (mrow != null && mrow != "")
                {
                    mrowi = Convert.ToInt32(mrow);
                }

                if (typed != null && typed != "")
                {
                    var q = (from b in Db.EXP_TYPE_INSTRU where b.ETYI_DESC == typed select b.ETYI_ID);
                    if (q == null)
                    {
                        m = "برای این نوع تجهیز " + typed + "مقداری در دیتابیس پیدا نشده است در ردیف " + i;
                        //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] برای این نوع تجهیز " + typed + "مقداری در دیتابیس پیدا نشده است در ردیف "+i, "1") }.ToJson();
                    }
                    else if (q.FirstOrDefault() == null)
                    {
                        m = "برای این نوع تجهیز " + typed + "مقداری در دیتابیس پیدا نشده است در ردیف " + i;
                        //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] برای این نوع تجهیز " + typed + "مقداری در دیتابیس پیدا نشده است در ردیف " + i, "1") }.ToJson();
                    }
                    else
                    {
                        typedi = q.FirstOrDefault();
                    }
                }

                if (mogs != null && mogs != "")
                {
                    var q = (from b in Db.EXP_STATE_INSTRU where b.ESIN_DESC == mogs select b.ESIN_ID);
                    if (q == null)
                    {
                        m = "برای این موقعیت تجهیز " + mogs + "مقداری در دیتابیس پیدا نشده است در ردیف " + i;
                        //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] برای این موقعیت تجهیز " + mogs + "مقداری در دیتابیس پیدا نشده است در ردیف " + i, "1") }.ToJson();
                    }
                    else if (q.FirstOrDefault() == null)
                    {
                        m = "برای این موقعیت تجهیز " + mogs + "مقداری در دیتابیس پیدا نشده است در ردیف " + i;

                        // return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] برای این موقعیت تجهیز " + mogs + "مقداری در دیتابیس پیدا نشده است در ردیف " + i, "1") }.ToJson();
                    }
                    else
                    {
                        mogsi = q.FirstOrDefault();
                    }
                }

                EXP_INSTRUMENT einst = new EXP_INSTRUMENT();
                int cinstq = (from b in Db.EXP_INSTRUMENT where b.EINS_DESC == descrow select b.EINS_ID).Count();
                if (cinstq != 0)
                {
                    einst = (from b in Db.EXP_INSTRUMENT where b.EINS_DESC == descrow select b).FirstOrDefault();
                }

                einst.EINS_DESC = descrow;
                if (mrowi != 0)
                {
                    einst.EINS_EINS_ID = mrowi;
                }

                if (typedi != 0)
                {
                    einst.ETYI_ETYI_ID = typedi;
                }

                if (typedi != 0)
                {
                    einst.ESIN_ESIN_ID = mogsi;
                }

                if (cinstq == 0)
                {
                    Db.EXP_INSTRUMENT.Add(einst);
                }

                Db.SaveChanges();

                if (i == 2)
                {
                    rowid = einst.EINS_ID;
                }

                d = m + d;
            }

            m = " ثبت شد" + d;
            m = rowid + "$" + m;
            return m;
            //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", int.Parse(var_head.ToString())) }.ToJson();
        }

        //[EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult ReadInst([DataSourceRequest] DataSourceRequest request, string id)
        {
            int idd = Convert.ToInt32(id);
            var query = from b in Db.EXP_INSTRUMENT
                        where b.EINS_ID >= idd
                        select new
                        {
                            b.EINS_ID,
                            b.EINS_DESC,
                            b.ESIN_ESIN_ID,
                            b.ETYI_ETYI_ID,
                            b.ACTV_TYPE,
                            b.SERV_STAT,
                            b.BAY_STAT,
                            b.EINS_EINS_ID,
                            b.INST_TYPE
                        };

            var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        private string insertfact(DataSet ds)
        {
            string d = string.Empty;
            string m = string.Empty;
            int rowid = 0;
            for (int i = 1; i < ds.Tables[0].Rows.Count; i++)
            {
                string factdesc = Convert.ToString(ds.Tables[0].Rows[i][22]);
                if (factdesc != null && factdesc != "")
                {
                    int c = (from b in Db.EXP_FACTORY where b.EFAC_DESC == factdesc select b).Count();
                    if (c == 0)
                    {
                        EXP_FACTORY fact = new EXP_FACTORY();
                        fact.EFAC_DESC = factdesc;
                        Db.EXP_FACTORY.Add(fact);
                        Db.SaveChanges();
                        if (i == 1)
                        {
                            rowid = fact.EFAC_ID;
                        }
                    }
                }
                else
                {
                    m = "در ردیف" + i + " نام کارخانه  دیگر مشخص نیست ";
                    break;
                }

                d = m + d;
            }

            m = "ثبت شد" + d;
            m = rowid + "$" + m;
            return m;
        }

        //[EntityAuthorize("EXP_FACTORY > select")]
        public ActionResult Readfact([DataSourceRequest] DataSourceRequest request, string id)
        {
            int idd = Convert.ToInt32(id);
            var query = from b in Db.EXP_FACTORY
                        orderby b.EFAC_ID descending
                        where b.EFAC_ID >= idd
                        select new
                        {
                            b.EFAC_ID,
                            b.EFAC_DESC
                        };

            var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        //[EntityAuthorize("EXP_LINE_V > select")]
        public ActionResult ReadLines([DataSourceRequest] DataSourceRequest request, string id)
        {
            int idd = Convert.ToInt32(id);
            var query = from b in Db.EXP_LINE_V
                        where b.EXP_POST_LINE_EPOL_ID == idd
                        select new
                        {
                            b.EXP_POST_LINE_EPOL_ID,
                            b.EXP_POST_LINE_INSTRU_EPIU_ID,
                            b.EXP_POST_LINE_EPOL_NAME,
                            b.EXP_POST_LINE_CODE_DISP,
                            b.EXP_POST_LINE_INSTRU_LINE_TYPE,
                            b.EXP_POST_LINE_EUNL_EUNL_ID,
                            b.EXP_POST_LINE_ORGA_CODE,
                            b.EXP_POST_LINE_EOCO_EOCO_ID,
                            b.EXP_POST_LINE_A1_EPOL_NAME,
                            b.EXP_POST_LINE_A1_ORGA_CODE,
                            b.EXP_POST_LINE_A2_EPOL_NAME,
                            b.EXP_POST_LINE_A2_ORGA_CODE
                        };

            var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        private string insertpost(DataSet ds)
        {
            string d = string.Empty;
            string m = string.Empty;
            int rowid = 0;
            for (int i = 4; i < ds.Tables[0].Rows.Count; i++)
            {
                string epolid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                string epolname = Convert.ToString(ds.Tables[0].Rows[i][1]);
                if (epolname != null && epolname != "")
                {
                    string epolcode = Convert.ToString(ds.Tables[0].Rows[i][2]);
                    string epolcodtrah = Convert.ToString(ds.Tables[0].Rows[i][3]);
                    string epolstat = Convert.ToString(ds.Tables[0].Rows[i][4]);
                    string epoldate = Convert.ToString(ds.Tables[0].Rows[i][5]);
                    string epolconect = Convert.ToString(ds.Tables[0].Rows[i][6]);
                    string epoltype = Convert.ToString(ds.Tables[0].Rows[i][7]);
                    string costdyn = Convert.ToString(ds.Tables[0].Rows[i][8]);
                    string malkyattype = Convert.ToString(ds.Tables[0].Rows[i][9]);
                    string malkyat = Convert.ToString(ds.Tables[0].Rows[i][10]);
                    string tozie = Convert.ToString(ds.Tables[0].Rows[i][11]);
                    string aocrdc = Convert.ToString(ds.Tables[0].Rows[i][12]);
                    string rdctype = Convert.ToString(ds.Tables[0].Rows[i][13]);
                    string locat = Convert.ToString(ds.Tables[0].Rows[i][14]);
                    string unit = Convert.ToString(ds.Tables[0].Rows[i][15]);
                    string omor = Convert.ToString(ds.Tables[0].Rows[i][16]);
                    string masahat = Convert.ToString(ds.Tables[0].Rows[i][17]);
                    string tel = Convert.ToString(ds.Tables[0].Rows[i][18]);
                    string plc = Convert.ToString(ds.Tables[0].Rows[i][19]);
                    string addres = Convert.ToString(ds.Tables[0].Rows[i][20]);
                    //string infostat = Convert.ToString(ds.Tables[0].Rows[i][21]);
                    string tabdil1 = Convert.ToString(ds.Tables[0].Rows[i][22]);
                    string tabdil2 = Convert.ToString(ds.Tables[0].Rows[i][23]);
                    string shine = Convert.ToString(ds.Tables[0].Rows[i][24]);
                    string iptel = Convert.ToString(ds.Tables[0].Rows[i][25]);

                    EXP_POST_LINE post = new EXP_POST_LINE();
                    int c = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "0" && b.EPOL_NAME == epolname select b).Count();
                    // int c=qc.Count();
                    if (c != 0)
                    {
                        post = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "0" && b.EPOL_NAME == epolname select b).FirstOrDefault();
                    }

                    post.EPOL_TYPE = "0";
                    post.EPOL_NAME = epolname;
                    post.CODE_DISP = epolcode;
                    post.CODE_TARH = epolcodtrah;
                    post.EXPL_DATE = epoldate;
                    post.POST_MAPO = masahat;
                    post.POST_ADD = addres;

                    if (epolstat != null && epolstat != "")
                    {
                        if (epolstat == "طرح و توسعه")
                        { epolstat = "0"; }
                        else
                            if (epolstat == "بهره برداری")
                        { epolstat = "1"; }
                        else
                                if (epolstat == "تغییر یافته")
                        { epolstat = "2"; }
                        else
                                    if (epolstat == "جمع اوری شده")
                        { epolstat = "3"; }
                        // else  { epolstat = "1"; }
                        post.EPOL_STAT = epolstat;
                    }

                    if (epolconect != null && epolconect != "")
                    {
                        if (epolconect == "فیوز")
                        { epolconect = "0"; }
                        else
                            if (epolconect == "سکسیونر")
                        { epolconect = "1"; }
                        else
                                if (epolconect == "بی کامل")
                        { epolconect = "2"; }
                        else
                                    if (epolconect == "کلید بدون حفاظت")
                        { epolconect = "3"; }
                        //else { epolconect = "2"; }
                        post.INCO_TYPE = epolconect;
                    }

                    if (epoltype != null && epoltype != "")
                    {
                        if (epoltype == "مبدل TS")
                        { epoltype = "0"; }
                        else
                            if (epoltype == "نیروگاه GS")
                        { epoltype = "1"; }
                        else
                                if (epoltype == "کلید خانه SS")
                        { epoltype = "2"; }
                        else
                                    if (epoltype == "GS&TS")
                        { epoltype = "3"; }
                        // else { epoltype = "0"; }

                        post.POST_TYPE = epoltype;
                    }

                    if (costdyn != null && costdyn != "")
                    {
                        if (costdyn == "ثابت")
                        { costdyn = "0"; }
                        else
                            if (costdyn == "سیار")
                        { costdyn = "1"; }
                        //  else { costdyn = "0"; }  در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else

                        post.STAC_DYNM = costdyn;
                    }

                    if (omor != null && omor != "")
                    {
                        var qomor = (from b in Db.PAY_ORGAN where b.MANA_ASTA_CODE == "7" && b.MANA_CODE == "6" && b.ORGA_DESC == omor select b.CODE);
                        if (qomor.FirstOrDefault() != null && qomor.FirstOrDefault() != "")
                        {
                            post.ORGA_CODE = qomor.FirstOrDefault();
                            post.ORGA_MANA_ASTA_CODE = "7";
                            post.ORGA_MANA_CODE = "6";
                        }
                    }

                    if (malkyattype != null && malkyattype != "")
                    {
                        var qmalktype = (from b in Db.EXP_OWENER_TYPE where b.EOTY_DESC == malkyattype select b.EOTY_ID);
                        if (qmalktype.FirstOrDefault() != null && qmalktype.FirstOrDefault() != 0)
                        {
                            post.EOTY_EOTY_ID = qmalktype.FirstOrDefault();
                            if (malkyat != null && malkyat != "")
                            {
                                var qmalkyat = (from b in Db.EXP_OWENER_COMPANY where b.EOCO_DESC == malkyat select b.EOCO_ID);
                                if (qmalkyat.FirstOrDefault() != null && qmalkyat.FirstOrDefault() != 0)
                                {
                                    post.EOCO_EOCO_ID = qmalkyat.FirstOrDefault();
                                }
                                else
                                {
                                    EXP_OWENER_COMPANY ownerr = new EXP_OWENER_COMPANY();
                                    ownerr.EOCO_DESC = malkyat;
                                    ownerr.EOTY_EOTY_ID = qmalktype.FirstOrDefault();

                                    Db.EXP_OWENER_COMPANY.Add(ownerr);
                                    Db.SaveChanges();
                                    post.EOCO_EOCO_ID = ownerr.EOCO_ID;
                                }
                            }
                        }
                        else
                        {
                            EXP_OWENER_TYPE ownert = new EXP_OWENER_TYPE();
                            ownert.EOTY_DESC = malkyattype;
                            Db.EXP_OWENER_TYPE.Add(ownert);
                            Db.SaveChanges();
                            post.EOTY_EOTY_ID = ownert.EOTY_ID;
                            if (malkyat != null && malkyat != "")
                            {
                                EXP_OWENER_COMPANY ownerr = new EXP_OWENER_COMPANY();
                                ownerr.EOCO_DESC = malkyat;
                                ownerr.EOTY_EOTY_ID = ownert.EOTY_ID;
                                Db.EXP_OWENER_COMPANY.Add(ownerr);
                                Db.SaveChanges();
                                post.EOCO_EOCO_ID = ownerr.EOCO_ID;

                            }
                        }
                    }

                    if (tozie != null && tozie != "")
                    {
                        var qtozie = (from b in Db.EXP_DISTRIBUTE_COMPANY where b.EDIC_DESC == tozie select b.EDIC_ID);
                        if (qtozie.FirstOrDefault() != null && qtozie.FirstOrDefault() != 0)
                        {
                            post.EDIC_EDIC_ID = qtozie.FirstOrDefault();
                        }
                        else
                        {
                            EXP_DISTRIBUTE_COMPANY distr = new EXP_DISTRIBUTE_COMPANY();
                            distr.EDIC_DESC = tozie;
                            Db.EXP_DISTRIBUTE_COMPANY.Add(distr);
                            Db.SaveChanges();
                            post.EDIC_EDIC_ID = distr.EDIC_ID;
                        }
                    }

                    if (aocrdc != null && aocrdc != "")
                    {
                        var qaocrdc = (from b in Db.EXP_AOC_RDC where b.EARD_NAME == aocrdc select b.EARD_ID);
                        if (qaocrdc.FirstOrDefault() != null && qaocrdc.FirstOrDefault() != 0)
                        {
                            post.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                            if (rdctype != null && rdctype != "")
                            {
                                var qrdcl = (from b in Db.EXP_LOCATION_RDC where b.ELRD_DESC == rdctype select b.ELRD_ID);
                                if (qrdcl.FirstOrDefault() != null && qrdcl.FirstOrDefault() != 0)
                                {
                                    post.ELRD_ELRD_ID = qrdcl.FirstOrDefault();
                                }
                                else
                                {
                                    EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                    rdclo.ELRD_DESC = rdctype;
                                    rdclo.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                                    Db.EXP_LOCATION_RDC.Add(rdclo);
                                    Db.SaveChanges();
                                    post.ELRD_ELRD_ID = rdclo.ELRD_ID;
                                }
                            }
                        }
                        else
                        {
                            EXP_AOC_RDC aocr = new EXP_AOC_RDC();
                            aocr.EARD_NAME = aocrdc;
                            Db.EXP_AOC_RDC.Add(aocr);
                            Db.SaveChanges();
                            post.EARD_EARD_ID = aocr.EARD_ID;

                            if (rdctype != null && rdctype != "")
                            {
                                EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                rdclo.ELRD_DESC = rdctype;
                                rdclo.EARD_EARD_ID = aocr.EARD_ID;
                                Db.EXP_LOCATION_RDC.Add(rdclo);
                                Db.SaveChanges();
                                post.ELRD_ELRD_ID = rdclo.ELRD_ID;

                            }
                        }
                    }

                    if (locat != null && locat != "")
                    {
                        var qlocat = (from b in Db.BKP_GEOGH_LOC where b.G_DESC == locat select b.G_CODE);
                        if (qlocat.FirstOrDefault() != null && qlocat.FirstOrDefault() != "")
                        {
                            post.GEOL_G_CODE = qlocat.FirstOrDefault();
                        }
                    }

                    if (unit != null && unit != "")
                    {
                        var s = unit.Split('-');
                        int u = Convert.ToInt32(s[0]);
                        var qunit = (from b in Db.EXP_UNIT_LEVEL where b.EUNL_NUM == u select b.EUNL_ID);
                        if (qunit.FirstOrDefault() != null && qunit.FirstOrDefault() != 0)
                        {
                            post.EUNL_EUNL_ID = qunit.FirstOrDefault();
                        }
                        else
                        {
                            EXP_UNIT_LEVEL unitl = new EXP_UNIT_LEVEL();
                            unitl.EUNL_NUM = u;
                            unitl.EUNL_DESC = u + " کیلو ولت ";
                            Db.EXP_UNIT_LEVEL.Add(unitl);
                            Db.SaveChanges();
                            post.EUNL_EUNL_ID = unitl.EUNL_ID;
                        }
                    }

                    if (c == 0)
                    {
                        Db.EXP_POST_LINE.Add(post);
                    }

                    Db.SaveChanges();
                    int postidd = post.EPOL_ID;
                    if (i == 4)
                    { rowid = postidd; }
                    if (tel != null && tel != "")
                    {
                        var qtel = (from b in Db.EXP_TEL where b.ETEL_NUMB == tel && b.EPOL_EPOL_ID == postidd && b.TEL_TYPE == "0" select b.ETEL_ID);
                        if (qtel.FirstOrDefault() == 0)
                        {
                            EXP_TEL tell = new EXP_TEL();
                            tell.EPOL_EPOL_ID = postidd;
                            tell.ETEL_NUMB = tel;
                            tell.TEL_TYPE = "0";
                            Db.EXP_TEL.Add(tell);
                            Db.SaveChanges();
                        }
                    }

                    if (plc != null && plc != "")
                    {
                        var qtel = (from b in Db.EXP_TEL where b.ETEL_NUMB == plc && b.EPOL_EPOL_ID == postidd && b.TEL_TYPE == "1" select b.ETEL_ID);
                        if (qtel.FirstOrDefault() == 0)
                        {
                            EXP_TEL tell = new EXP_TEL();
                            tell.EPOL_EPOL_ID = postidd;
                            tell.ETEL_NUMB = plc;
                            tell.TEL_TYPE = "1";
                            Db.EXP_TEL.Add(tell);
                            Db.SaveChanges();
                        }
                    }

                    if (iptel != null && iptel != "")
                    {
                        var qtel = (from b in Db.EXP_TEL where b.ETEL_NUMB == iptel && b.EPOL_EPOL_ID == postidd && b.TEL_TYPE == "2" select b.ETEL_ID);
                        if (qtel.FirstOrDefault() == 0)
                        {
                            EXP_TEL tell = new EXP_TEL();
                            tell.EPOL_EPOL_ID = postidd;
                            tell.ETEL_NUMB = iptel;
                            tell.TEL_TYPE = "2";
                            Db.EXP_TEL.Add(tell);
                            Db.SaveChanges();
                        }
                    }

                    if (tabdil1 != null && tabdil1 != "" && tabdil2 != null && tabdil2 != "" && shine != null && shine != "")
                    {
                        var s = tabdil1.Split('-');
                        int u = Convert.ToInt32(s[0]);
                        var qunit1 = (from b in Db.EXP_UNIT_LEVEL where b.EUNL_NUM == u select b.EUNL_ID);
                        var s2 = tabdil2.Split('-');
                        int u1 = Convert.ToInt32(s2[0]);
                        var qunit2 = (from b in Db.EXP_UNIT_LEVEL where b.EUNL_NUM == u1 select b.EUNL_ID);
                        var qshin = (from b in Db.EXP_SHINE_TYPE where b.ESHT_DESC == shine select b.ESHT_ID);
                        if (qshin.FirstOrDefault() != null && qshin.FirstOrDefault() != 0)
                        {
                            var qunitm = (from b in Db.EXP_CONVERT_VOLT
                                          where b.ESHT_ESHT_ID == qshin.FirstOrDefault() && b.EPOL_EPOL_ID == postidd && ((b.EUNL_EUNL_ID == qunit1.FirstOrDefault()
                                        && b.EUNL_EUNL_ID_R == qunit2.FirstOrDefault()) || (b.EUNL_EUNL_ID == qunit2.FirstOrDefault()
                                        && b.EUNL_EUNL_ID_R == qunit1.FirstOrDefault()))
                                          select b.ECNV_ID);

                            if (qunitm.FirstOrDefault() == 0)
                            {
                                EXP_CONVERT_VOLT conv = new EXP_CONVERT_VOLT();
                                conv.EPOL_EPOL_ID = postidd;
                                conv.EUNL_EUNL_ID = qunit1.FirstOrDefault();
                                conv.EUNL_EUNL_ID_R = qunit2.FirstOrDefault();
                                conv.ESHT_ESHT_ID = qshin.FirstOrDefault();
                                Db.EXP_CONVERT_VOLT.Add(conv);
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            EXP_SHINE_TYPE shin = new EXP_SHINE_TYPE();
                            shin.ESHT_DESC = shine;
                            Db.EXP_SHINE_TYPE.Add(shin);
                            Db.SaveChanges();
                            int shinid = shin.ESHT_ID;
                            EXP_CONVERT_VOLT conv = new EXP_CONVERT_VOLT();
                            conv.EPOL_EPOL_ID = postidd;
                            conv.EUNL_EUNL_ID = qunit1.FirstOrDefault();
                            conv.EUNL_EUNL_ID_R = qunit2.FirstOrDefault();
                            conv.ESHT_ESHT_ID = shinid;
                            Db.EXP_CONVERT_VOLT.Add(conv);
                            Db.SaveChanges();
                        }
                    }
                }
                else
                {
                    m = "دیگر نام پست مشخص نیست در ردیف " + i;
                    break;
                    // return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] دیگر نام پست مشخص نیست در ردیف " + i, "1") }.ToJson();
                }

                d = m + d;
            }

            m = "ثبت شد" + d;
            m = rowid + "$" + m;
            return m;
        }

        // [EntityAuthorize("EXP_POST_LINE > select")]
        public ActionResult ReadPosts([DataSourceRequest] DataSourceRequest request, string id)
        {
            int idd = Convert.ToInt32(id);
            var query = (from b in Db.EXP_POST_LINE.AsEnumerable()
                         where b.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == null && b.EPOL_ID == idd
                         select new
                         {
                             b.EPOL_NAME,
                             b.CODE_DISP,
                             b.ORGA_CODE,
                             b.GEOL_G_CODE,
                             b.EUNL_EUNL_ID,
                             b.EPOL_ID,
                             b.EPOL_STAT,
                             b.POST_TYPE,
                             countOfinstruMents = b.EXP_POST_LINE_INSTRU2.Count
                         }).ToList();

            var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        private string insertmainline(DataSet ds)
        {
            string d = string.Empty;
            string m = string.Empty;
            int rowid = 0;
            for (int i = 4; i < ds.Tables[0].Rows.Count; i++)
            {
                string lineid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                string linename = Convert.ToString(ds.Tables[0].Rows[i][1]);
                if (linename != null && linename != "")
                {
                    string epolname1 = Convert.ToString(ds.Tables[0].Rows[i][2]);
                    string epolname2 = Convert.ToString(ds.Tables[0].Rows[i][3]);
                    string epolname3 = Convert.ToString(ds.Tables[0].Rows[i][4]);
                    string linecode = Convert.ToString(ds.Tables[0].Rows[i][5]);
                    string curem = Convert.ToString(ds.Tables[0].Rows[i][7]);
                    EXP_POST_LINE line = new EXP_POST_LINE();
                    int c = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "1" && b.CODE_DISP == linecode select b).Count();

                    if (c != 0)
                    {
                        line = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "1" && b.CODE_DISP == linecode select b).FirstOrDefault();

                    }
                    line.EPOL_TYPE = "1";
                    line.EPOL_NAME = linename;
                    line.CODE_DISP = linecode;
                    line.CURE_MOJA = curem;

                    EXP_POST_LINE_INSTRU instl = new EXP_POST_LINE_INSTRU();
                    int lineidd = 0;
                    if (c == 0)
                    {
                        Db.EXP_POST_LINE.Add(line);
                        Db.SaveChanges();
                        lineidd = line.EPOL_ID;
                    }
                    else
                    {
                        Db.SaveChanges();
                        lineidd = line.EPOL_ID;
                    }

                    if (i == 4)
                    {
                        rowid = lineidd;
                    }

                    int cinst = (from b in Db.EXP_POST_LINE_INSTRU where b.EPOL_EPOL_ID == lineidd select b.EPIU_ID).Count();
                    if (cinst != 0)
                    {
                        instl = (from b in Db.EXP_POST_LINE_INSTRU where b.EPOL_EPOL_ID == lineidd select b).FirstOrDefault();
                    }

                    instl.CODE_DISP = linecode;
                    instl.CODE_NAME = linename + " - " + linecode;
                    instl.EPOL_EPOL_ID = lineidd;
                    instl.EINS_EINS_ID = 1;
                    instl.LINE_TYPE = "1";
                    int epuii = 0;
                    var qpost = (from b in Db.EXP_POST_LINE where b.EPOL_NAME == epolname1 select b.EPOL_ID);
                    if (qpost.Count() == 1)
                    {
                        instl.EPOL_EPOL_ID_INSLIN = qpost.FirstOrDefault();
                        epuii = Convert.ToInt32(qpost.FirstOrDefault().ToString());

                        var qpost2 = (from b in Db.EXP_POST_LINE where b.CODE_DISP == epolname3 select b.EPOL_ID);
                        if (qpost2.Count() == 1)
                        {
                            instl.EPOL_EPOL_ID_LINE = qpost2.FirstOrDefault();

                            if (cinst == 0)
                            {
                                Db.EXP_POST_LINE_INSTRU.Add(instl);
                                Db.SaveChanges();
                            }
                            else
                            {
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            m = "نام پست مبدا  در ردیف " + i + "در دیتابیس تعریف نشده است ان را تعریف کرده و س÷س بقیه کانورت را انجام دهید";
                        }
                    }
                    else
                    {
                        m = "نام پست مبدا  در ردیف " + i + "در دیتابیس تعریف نشده است ان را تعریف کرده و س÷س بقیه کانورت را انجام دهید";
                    }
                }
                else
                {
                    m = "دیگر نام خط مشخص نیست در ردیف " + i;
                }
                d = m + d;

            }
            m = "ثبت شد " + d;


            //  m = "ثبت شد" + d;
            m = rowid + "$" + m;
            return m;
        }

        private string insertmainlinef(DataSet ds)
        {
            string d = string.Empty;
            string m = string.Empty;
            int rowid = 0;
            for (int i = 4; i < ds.Tables[0].Rows.Count; i++)
            {
                string lineid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                string linename = Convert.ToString(ds.Tables[0].Rows[i][1]);
                if (linename != null && linename != "")
                {
                    string epolname1 = Convert.ToString(ds.Tables[0].Rows[i][2]);
                    string epolname2 = Convert.ToString(ds.Tables[0].Rows[i][3]);
                    string linecode = Convert.ToString(ds.Tables[0].Rows[i][4]);
                    EXP_POST_LINE line = new EXP_POST_LINE();
                    int c = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "1" && b.CODE_DISP == linecode select b).Count();
                    // int c=qc.Count();
                    if (c != 0)
                    {
                        line = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "1" && b.CODE_DISP == linecode select b).FirstOrDefault();
                    }
                    line.EPOL_TYPE = "1";
                    line.EPOL_NAME = linename + " - " + linecode;
                    line.CODE_DISP = linecode;
                    line.EUNL_EUNL_ID = 201;

                    EXP_POST_LINE_INSTRU instl = new EXP_POST_LINE_INSTRU();
                    int lineidd = 0;
                    if (c == 0)
                    {
                        Db.EXP_POST_LINE.Add(line);
                        Db.SaveChanges();
                        lineidd = line.EPOL_ID;
                    }
                    else
                    {
                        Db.SaveChanges();
                        lineidd = line.EPOL_ID;
                    }

                    if (i == 4)
                    {
                        rowid = lineidd;
                    }

                    int cinst = (from b in Db.EXP_POST_LINE_INSTRU where b.EPOL_EPOL_ID == lineidd select b.EPIU_ID).Count();
                    if (cinst != 0)
                    {
                        instl = (from b in Db.EXP_POST_LINE_INSTRU where b.EPOL_EPOL_ID == lineidd select b).FirstOrDefault();
                    }

                    instl.CODE_DISP = linecode;
                    instl.CODE_NAME = linename + " - " + linecode;
                    instl.EPOL_EPOL_ID = lineidd;
                    instl.EINS_EINS_ID = 1;
                    instl.LINE_TYPE = "2";
                    instl.EUNL_EUNL_ID = 201;
                    int epuii = 0;
                    var qpost = (from b in Db.EXP_POST_LINE where b.EPOL_NAME == epolname1 select b.EPOL_ID);
                    if (qpost.Count() == 1)
                    {
                        instl.EPOL_EPOL_ID_INSLIN = qpost.FirstOrDefault();
                        epuii = Convert.ToInt32(qpost.FirstOrDefault().ToString());

                        var inst = (from b in Db.EXP_POST_LINE_INSTRU where b.EPOL_EPOL_ID == epuii && b.CODE_DISP == epolname2 select b.EPIU_ID);
                        if (inst.Count() == 1)
                        {
                            instl.EPIU_EPIU_ID_RT = Convert.ToDecimal(inst.FirstOrDefault().ToString());
                            if (cinst == 0)
                            {
                                Db.EXP_POST_LINE_INSTRU.Add(instl);
                                Db.SaveChanges();
                            }
                            else
                            {
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            if (c == 0)
                            {
                                Db.EXP_POST_LINE.Remove(line);
                                Db.SaveChanges();
                            }

                            m = "نام پست مبدا  در ردیف " + i + "در دیتابیس تعریف نشده است ان را تعریف کرده و س÷س بقیه کانورت را انجام دهید";
                        }
                    }
                    else
                    {
                        if (c == 0)
                        {
                            Db.EXP_POST_LINE.Remove(line);
                            Db.SaveChanges();
                        }
                        m = "نام پست مبدا  در ردیف " + i + "در دیتابیس تعریف نشده است ان را تعریف کرده و س÷س بقیه کانورت را انجام دهید";
                    }
                }
                else
                {
                    m = "دیگر نام خط مشخص نیست در ردیف " + i;
                }
                d = m + d;

            }

            m = "ثبت شد " + d;
            m = rowid + "$" + m;
            return m;
        }

        private string insertline(DataSet ds)
        {
            string d = string.Empty;
            string m = string.Empty;
            int rowid = 0;
            for (int i = 4; i < ds.Tables[0].Rows.Count; i++)
            {
                string lineid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                string linename = Convert.ToString(ds.Tables[0].Rows[i][1]);
                if (linename != null && linename != "")
                {
                    string epolname1 = Convert.ToString(ds.Tables[0].Rows[i][2]);
                    string epolname2 = Convert.ToString(ds.Tables[0].Rows[i][3]);
                    string epolname3 = Convert.ToString(ds.Tables[0].Rows[i][4]);
                    string linecode = Convert.ToString(ds.Tables[0].Rows[i][5]);
                    string linecodtrah = Convert.ToString(ds.Tables[0].Rows[i][6]);
                    string linestat = Convert.ToString(ds.Tables[0].Rows[i][7]);
                    string maintiaf = Convert.ToString(ds.Tables[0].Rows[i][8]);
                    string curem = Convert.ToString(ds.Tables[0].Rows[i][9]);
                    string expdate = Convert.ToString(ds.Tables[0].Rows[i][10]);
                    string linel = Convert.ToString(ds.Tables[0].Rows[i][11]);
                    string malkyattype = Convert.ToString(ds.Tables[0].Rows[i][12]);
                    string malkyat = Convert.ToString(ds.Tables[0].Rows[i][13]);
                    string tozie = Convert.ToString(ds.Tables[0].Rows[i][14]);
                    string aocrdc = Convert.ToString(ds.Tables[0].Rows[i][15]);
                    string rdctype = Convert.ToString(ds.Tables[0].Rows[i][16]);
                    string locat = Convert.ToString(ds.Tables[0].Rows[i][17]);
                    string unit = Convert.ToString(ds.Tables[0].Rows[i][18]);
                    string omor = Convert.ToString(ds.Tables[0].Rows[i][19]);
                    string mada1 = Convert.ToString(ds.Tables[0].Rows[i][20]);
                    string mada2 = Convert.ToString(ds.Tables[0].Rows[i][21]);
                    string mada4 = Convert.ToString(ds.Tables[0].Rows[i][22]);
                    string mada6 = Convert.ToString(ds.Tables[0].Rows[i][23]);

                    EXP_POST_LINE line = new EXP_POST_LINE();
                    int c = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "1" && b.EPOL_NAME == linename select b).Count();
                    // int c=qc.Count();
                    if (c != 0)
                    {
                        line = (from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "1" && b.EPOL_NAME == linename select b).FirstOrDefault();
                    }

                    line.EPOL_TYPE = "1";
                    line.EPOL_NAME = linename;
                    line.CODE_DISP = linecode;
                    line.CODE_TARH = linecodtrah;
                    line.CURE_MOJA = curem;
                    line.EXPL_DATE = expdate;
                    line.LINE_LENT = linel;

                    if (linestat != null && linestat != "")
                    {
                        if (linestat == "طرح و توسعه")
                        { linestat = "0"; }
                        else
                            if (linestat == "بهره برداری")
                        { linestat = "1"; }
                        else
                                if (linestat == "تغییر یافته")
                        { linestat = "2"; }
                        else
                                    if (linestat == "جمع اوری شده")
                        { linestat = "3"; }
                        // else  { epolstat = "1"; }
                        line.EPOL_STAT = linestat;
                    }

                    if (omor != null && omor != "")
                    {
                        var qomor = (from b in Db.PAY_ORGAN where b.MANA_ASTA_CODE == "7" && b.MANA_CODE == "6" && b.ORGA_DESC == omor select b.CODE);
                        if (qomor.FirstOrDefault() != null && qomor.FirstOrDefault() != "")
                        {
                            line.ORGA_CODE = qomor.FirstOrDefault();
                            line.ORGA_MANA_ASTA_CODE = "7";
                            line.ORGA_MANA_CODE = "6";
                        }
                    }

                    if (malkyattype != null && malkyattype != "")
                    {
                        var qmalktype = (from b in Db.EXP_OWENER_TYPE where b.EOTY_DESC == malkyattype select b.EOTY_ID);
                        if (qmalktype.FirstOrDefault() != null && qmalktype.FirstOrDefault() != 0)
                        {
                            line.EOTY_EOTY_ID = qmalktype.FirstOrDefault();
                            if (malkyat != null && malkyat != "")
                            {
                                var qmalkyat = (from b in Db.EXP_OWENER_COMPANY where b.EOCO_DESC == malkyat select b.EOCO_ID);
                                if (qmalkyat.FirstOrDefault() != null && qmalkyat.FirstOrDefault() != 0)
                                {
                                    line.EOCO_EOCO_ID = qmalkyat.FirstOrDefault();
                                }
                                else
                                {
                                    EXP_OWENER_COMPANY ownerr = new EXP_OWENER_COMPANY();
                                    ownerr.EOCO_DESC = malkyat;
                                    ownerr.EOTY_EOTY_ID = qmalktype.FirstOrDefault();
                                    Db.EXP_OWENER_COMPANY.Add(ownerr);
                                    Db.SaveChanges();
                                    line.EOCO_EOCO_ID = ownerr.EOCO_ID;
                                }
                            }
                        }
                        else
                        {
                            EXP_OWENER_TYPE ownert = new EXP_OWENER_TYPE();
                            ownert.EOTY_DESC = malkyattype;
                            Db.EXP_OWENER_TYPE.Add(ownert);
                            Db.SaveChanges();
                            line.EOTY_EOTY_ID = ownert.EOTY_ID;

                            if (malkyat != null && malkyat != "")
                            {
                                EXP_OWENER_COMPANY ownerr = new EXP_OWENER_COMPANY();
                                ownerr.EOCO_DESC = malkyat;
                                ownerr.EOTY_EOTY_ID = ownert.EOTY_ID;
                                Db.EXP_OWENER_COMPANY.Add(ownerr);
                                Db.SaveChanges();
                                line.EOCO_EOCO_ID = ownerr.EOCO_ID;
                            }
                        }
                    }

                    if (tozie != null && tozie != "")
                    {
                        var qtozie = (from b in Db.EXP_DISTRIBUTE_COMPANY where b.EDIC_DESC == tozie select b.EDIC_ID);
                        if (qtozie.FirstOrDefault() != null && qtozie.FirstOrDefault() != 0)
                        {
                            line.EDIC_EDIC_ID = qtozie.FirstOrDefault();
                        }
                        else
                        {
                            EXP_DISTRIBUTE_COMPANY distr = new EXP_DISTRIBUTE_COMPANY();
                            distr.EDIC_DESC = tozie;
                            Db.EXP_DISTRIBUTE_COMPANY.Add(distr);
                            Db.SaveChanges();
                            line.EDIC_EDIC_ID = distr.EDIC_ID;
                        }
                    }

                    if (aocrdc != null && aocrdc != "")
                    {
                        var qaocrdc = (from b in Db.EXP_AOC_RDC where b.EARD_NAME == aocrdc select b.EARD_ID);
                        if (qaocrdc.FirstOrDefault() != null && qaocrdc.FirstOrDefault() != 0)
                        {
                            line.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                            if (rdctype != null && rdctype != "")
                            {
                                var qrdcl = (from b in Db.EXP_LOCATION_RDC where b.ELRD_DESC == rdctype select b.ELRD_ID);
                                if (qrdcl.FirstOrDefault() != null && qrdcl.FirstOrDefault() != 0)
                                {
                                    line.ELRD_ELRD_ID = qrdcl.FirstOrDefault();
                                }
                                else
                                {
                                    EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                    rdclo.ELRD_DESC = rdctype;
                                    rdclo.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                                    Db.EXP_LOCATION_RDC.Add(rdclo);
                                    Db.SaveChanges();
                                    line.ELRD_ELRD_ID = rdclo.ELRD_ID;
                                }
                            }
                        }
                        else
                        {
                            EXP_AOC_RDC aocr = new EXP_AOC_RDC();
                            aocr.EARD_NAME = aocrdc;
                            Db.EXP_AOC_RDC.Add(aocr);
                            Db.SaveChanges();
                            line.EARD_EARD_ID = aocr.EARD_ID;

                            if (rdctype != null && rdctype != "")
                            {
                                EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                rdclo.ELRD_DESC = rdctype;
                                rdclo.EARD_EARD_ID = aocr.EARD_ID;
                                Db.EXP_LOCATION_RDC.Add(rdclo);
                                Db.SaveChanges();
                                line.ELRD_ELRD_ID = rdclo.ELRD_ID;
                            }
                        }
                    }

                    if (locat != null && locat != "")
                    {
                        var qlocat = (from b in Db.BKP_GEOGH_LOC where b.G_DESC == locat select b.G_CODE);
                        if (qlocat.FirstOrDefault() != null && qlocat.FirstOrDefault() != "")
                        {
                            line.GEOL_G_CODE = qlocat.FirstOrDefault();
                        }
                    }

                    if (unit != null && unit != "")
                    {
                        var s = unit.Split('-');
                        int u = Convert.ToInt32(s[0]);

                        var qunit = (from b in Db.EXP_UNIT_LEVEL where b.EUNL_NUM == u select b.EUNL_ID);
                        if (qunit.FirstOrDefault() != null && qunit.FirstOrDefault() != 0)
                        {
                            line.EUNL_EUNL_ID = qunit.FirstOrDefault();
                        }
                        else
                        {
                            EXP_UNIT_LEVEL unitl = new EXP_UNIT_LEVEL();
                            unitl.EUNL_NUM = u;
                            unitl.EUNL_DESC = u + " کیلو ولت ";
                            Db.EXP_UNIT_LEVEL.Add(unitl);
                            Db.SaveChanges();
                            line.EUNL_EUNL_ID = unitl.EUNL_ID;
                        }
                    }

                    EXP_POST_LINE_INSTRU instl = new EXP_POST_LINE_INSTRU();
                    int lineidd = 0;
                    if (c == 0)
                    {
                        Db.EXP_POST_LINE.Add(line);
                        Db.SaveChanges();
                        lineidd = line.EPOL_ID;
                    }
                    else
                    {
                        Db.SaveChanges();
                        lineidd = line.EPOL_ID;
                    }

                    if (i == 4)
                    {
                        rowid = lineidd;
                    }

                    int cinst = (from b in Db.EXP_POST_LINE_INSTRU where b.EPOL_EPOL_ID == lineidd select b.EPIU_ID).Count();
                    if (cinst != 0)
                    {
                        instl = (from b in Db.EXP_POST_LINE_INSTRU where b.EPOL_EPOL_ID == lineidd select b).FirstOrDefault();
                    }

                    instl.CODE_DISP = linecode;
                    instl.CODE_NAME = linename + " - " + linecode;
                    instl.EPOL_EPOL_ID = lineidd;
                    instl.EINS_EINS_ID = 1;
                    instl.EPIU_1MAD = mada1;
                    instl.EPIU_2MAD = mada2;
                    instl.EPIU_4MAD = mada4;
                    instl.EPIU_6MAD = mada6;

                    if (maintiaf != null && maintiaf != "")
                    {
                        if (maintiaf == "اصلی")
                        { maintiaf = "0"; }
                        else
                            if (maintiaf == "تیاف")
                        { maintiaf = "1"; }
                        //  else { costdyn = "0"; }  در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else

                        instl.LINE_TYPE = maintiaf;
                    }

                    var qpost = (from b in Db.EXP_POST_LINE where b.EPOL_NAME == epolname1 select b.EPOL_ID);
                    if (qpost != null)
                    {
                        instl.EPOL_EPOL_ID_LINE = qpost.FirstOrDefault();
                    }
                    else
                    {
                        m = "نام پست مبدا  در ردیف " + i + "در دیتابیس تعریف نشده است ان را تعریف کرده و سپس بقیه کانورت را انجام دهید";
                    }

                    var qpost2 = (from b in Db.EXP_POST_LINE where b.EPOL_NAME == epolname2 select b.EPOL_ID);
                    if (qpost2 != null)
                    { instl.EPOL_EPOL_ID_INSLIN = qpost2.FirstOrDefault(); }
                    else
                    {
                        var qpost3 = (from b in Db.EXP_POST_LINE where b.EPOL_NAME == epolname3 select b.EPOL_ID);
                        if (qpost3 != null)
                        { instl.EPOL_EPOL_ID_INSLIN = qpost3.FirstOrDefault(); }
                        else
                        {
                            m = " نام پست مقصد و یا خط تیاف  در ردیف " + i + "در دیتابیس تعریف نشده است ان را تعریف کرده و س÷س بقیه کانورت را انجام دهید";
                        }
                    }

                    if (cinst == 0)
                    {
                        Db.EXP_POST_LINE_INSTRU.Add(instl);
                        Db.SaveChanges();
                    }
                    else
                    {
                        Db.SaveChanges();
                    }
                }
                else
                {
                    m = "دیگر نام خط مشخص نیست در ردیف " + i;
                    break;
                }

                d = m + d;
            }

            m = "ثبت شد " + d;
            m = rowid + "$" + m;
            return m;
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [HttpPost]
        //[EntityAuthorize("EXP_POST_VAR_HEAD > select,insert | EXP_POST_LINE_INSTRU > select | EXP_POST_LINE > select | EXP_POST_VAR_INSTRU > select,insert")]
        public ActionResult Importexcelpostinst(string s1)
        {
            DataSet ds = new DataSet();
            //int var_head = 0;
            string m = string.Empty;
            string k = string.Empty;
            string d = string.Empty;
            string kde = string.Empty;
            int rowidd = 0;
            string epolid = string.Empty;
            int epolidd = 0;
            int relecheck = 0;
            int jk = 0;
            int idf = -1;
            if (Request.Files["FileUploadpostinst"].ContentLength > 0)
            {
                string fileExtension = System.IO.Path.GetExtension(Request.Files["FileUploadpostinst"].FileName);

                if (fileExtension == ".xls" || fileExtension == ".xlsx")
                {
                    string fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadpostinst"].FileName;

                    if (System.IO.File.Exists(fileLocation))
                    {
                        System.IO.File.Delete(fileLocation);
                    }
                    Request.Files["FileUploadpostinst"].SaveAs(fileLocation);
                    string excelConnectionString = string.Empty;
                    excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                    fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    if (fileExtension == ".xls")
                    {
                        excelConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";
                    }
                    else if (fileExtension == ".xlsx")
                    {
                        excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    }
                    OleDbConnection excelConnection = new OleDbConnection(excelConnectionString);
                    excelConnection.Open();
                    DataTable dt = new DataTable();

                    dt = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    if (dt == null)
                    {
                        return null;
                    }

                    string typeinstid = Convert.ToString(Request.Form["typeinst1"]);
                    int fd1 = Convert.ToInt32(typeinstid);

                    String[] excelSheets = new String[dt.Rows.Count];
                    int t = 0;
                    //excel data saves in temp file here.
                    foreach (DataRow row in dt.Rows)
                    {
                        excelSheets[t] = row["TABLE_NAME"].ToString();

                        if (row["TABLE_NAME"].ToString() == "رله$" && fd1 == 1)
                        {
                            idf = t; relecheck = 1;

                        }
                        if (row["TABLE_NAME"].ToString() == "'ریز تجهیزات$'" && fd1 == 2)
                        {
                            idf = t;
                        }
                        // excelSheets[t] = row["TABLE_NAME"].ToString();
                        t++;
                    }
                    if (idf != -1)
                    {
                        OleDbConnection excelConnection1 = new OleDbConnection(excelConnectionString);
                        string query = string.Format("Select * from [{0}]", excelSheets[idf]);
                        using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, excelConnection1))
                        {
                            dataAdapter.Fill(ds);
                            dataAdapter.Dispose();
                        }
                    }
                }

                if (idf != -1)
                {

                    if (fileExtension.ToString().ToLower().Equals(".xml"))
                    {
                        string fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadpostinst"].FileName;
                        if (System.IO.File.Exists(fileLocation))
                        {
                            System.IO.File.Delete(fileLocation);
                        }

                        Request.Files["FileUploadpostinst"].SaveAs(fileLocation);
                        XmlTextReader xmlreader = new XmlTextReader(fileLocation);
                        ds.ReadXml(xmlreader);
                        xmlreader.Close();
                    }
                }
                int instgroupid = 0;

                try
                {
                    if (idf != -1)
                    {
                        for (int i = 8; i < ds.Tables[0].Rows.Count; i++)
                        {
                            string rowid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                            string instgroup = Convert.ToString(ds.Tables[0].Rows[i][1]);
                            string sernum = Convert.ToString(ds.Tables[0].Rows[i][2]);
                            string instcode = Convert.ToString(ds.Tables[0].Rows[i][3]);
                            string unit = Convert.ToString(ds.Tables[0].Rows[i][5]);
                            string aocrdc = Convert.ToString(ds.Tables[0].Rows[i][6]);
                            string rdctype = Convert.ToString(ds.Tables[0].Rows[i][7]);
                            string codetarh = Convert.ToString(ds.Tables[0].Rows[i][8]);
                            string instname = Convert.ToString(ds.Tables[0].Rows[i][9]);
                            string outin = Convert.ToString(ds.Tables[0].Rows[i][10]);
                            string mstat = Convert.ToString(ds.Tables[0].Rows[i][11]);
                            string phastype = Convert.ToString(ds.Tables[0].Rows[i][12]);
                            string phasstat = Convert.ToString(ds.Tables[0].Rows[i][13]);
                            string locat = Convert.ToString(ds.Tables[0].Rows[i][14]);
                            string teip = Convert.ToString(ds.Tables[0].Rows[i][4]);
                            string model = Convert.ToString(ds.Tables[0].Rows[i][16]);
                            string yearc = Convert.ToString(ds.Tables[0].Rows[i][17]);
                            string fact = Convert.ToString(ds.Tables[0].Rows[i][18]);
                            string tiepstat = Convert.ToString(ds.Tables[0].Rows[i][19]);
                            string locd = Convert.ToString(ds.Tables[0].Rows[i][20]);
                            string codedisp = Convert.ToString(ds.Tables[0].Rows[i][2]);
                            jk = i + 2;

                            //if (instgroup != null && instgroup != "" /*&& sernum != null && sernum != "" */&& instname != null && instname != "" && ((instcode != null && instcode != "") || (codedisp != null && codedisp != "")))
                            if (instgroup != null && instgroup != "" && instname != null && instname != "" && instcode != null && instcode != "" && sernum != null && sernum != "")
                            {
                                epolid = Convert.ToString(Request.Form["postdetai"]);
                                epolidd = Convert.ToInt32(epolid);

                                int c = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epolidd select b).Count();
                                if (c != 0)
                                {
                                    var qinstgroup = (from b in Db.EXP_INSTRUMENT where b.EINS_DESC == instgroup select b.EINS_ID);
                                    if (qinstgroup.FirstOrDefault() != null && qinstgroup.FirstOrDefault() != 0)
                                        instgroupid = qinstgroup.FirstOrDefault();
                                    else
                                    {
                                        m = "گروه تجهیز  یک گروه جدید است که در کلاس سایر تعریف شده است در ردیف   " + jk;
                                    }


                                    EXP_POST_LINE_INSTRU instl = new EXP_POST_LINE_INSTRU();

                                    if (phastype != null && phastype != "")
                                    {
                                        if (phastype == "سه فاز")
                                        { phastype = "0"; }
                                        else
                                            if (phastype == "تک فاز")
                                        { phastype = "1"; }

                                        else
                                        {
                                            //  phastype = "0";
                                            k = "وضعیت فاز ردیف " + jk + "در دیتابیس تعریف نشده و برای ان وضعیت سه فاز در نظر گرفته شده است ";
                                            break;
                                        }
                                        //  else { costdyn = "0"; }  در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else
                                    }

                                    if (phasstat != null && phasstat != "")
                                    {
                                        if (phasstat == "فاز R")
                                        { phasstat = "0"; }
                                        else
                                            if (phasstat == "فاز S")
                                        { phasstat = "1"; }
                                        else
                                                if (phasstat == "فاز T")
                                        { phasstat = "2"; }
                                        else
                                                    if (phasstat == "spear")
                                        { phasstat = "3"; }
                                        else
                                                        if (phasstat == "R,S,T")
                                        { phasstat = "4"; }
                                        else
                                        {
                                            // phasstat = "4";
                                            k = "وضعیت نوع فاز ردیف " + jk + "در دیتابیس تعریف نشده و برای ان وضعیت  کامل در نظر گرفته شده است ";
                                            break;
                                        } // در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else


                                    }

                                    int cinst = 0;

                                    cinst = (from b in Db.EXP_POST_LINE_INSTRU
                                             where b.EPOL_EPOL_ID == epolidd && b.EINS_EINS_ID == instgroupid
                                           && b.SERN_NO == sernum
                                             select b.EPIU_ID).Count();

                                    if (cinst != 0)
                                    {
                                        instl = (from b in Db.EXP_POST_LINE_INSTRU
                                                 where b.EPOL_EPOL_ID == epolidd && b.EINS_EINS_ID == instgroupid
                                                  && b.SERN_NO == sernum
                                                 select b).FirstOrDefault();
                                    }

                                    instl.PHAS_TYPE = phastype;
                                    instl.PHAS_STAT = phasstat;
                                    instl.EINS_EINS_ID = instgroupid;
                                    instl.CODE_DISP = codedisp;
                                    instl.CODE_NAME = instname + " - " + instcode;
                                    instl.EPOL_EPOL_ID = epolidd;
                                    instl.SERN_NO = sernum;
                                    instl.CODE_TARH = codetarh;
                                    instl.LOCA_DESC = locd;
                                    //decimal oi = 0;

                                    if (instcode != null && instcode != "")
                                    {
                                        var codemain = (from b in Db.EXP_POST_LINE_INSTRU where (b.EPOL_EPOL_ID == epolidd || b.EPOL_EPOL_ID_INSLIN == epolidd || b.EPOL_EPOL_ID_LINE == epolidd) && b.CODE_DISP == instcode && b.EPIU_EPIU_ID_SAVABEGH == null select b);
                                        if (codemain.FirstOrDefault() != null)
                                        {
                                            if (codemain.FirstOrDefault().PHAS_TYPE == "0")
                                            {
                                                instl.EPIU_EPIU_ID = codemain.FirstOrDefault().EPIU_ID;
                                            }
                                            else
                                            {
                                                if (codemain.FirstOrDefault().PHAS_TYPE == "1")
                                                {
                                                    foreach (var maininst in codemain)
                                                    {
                                                        if (phastype == "1")
                                                        {
                                                            if (maininst.PHAS_STAT == phasstat)
                                                            {
                                                                instl.EPIU_EPIU_ID = maininst.EPIU_ID;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            instl.EPIU_EPIU_ID = maininst.EPIU_ID;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    instl.EPIU_EPIU_ID = codemain.FirstOrDefault().EPIU_ID;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            k = "در ردیف" + jk + "کد دیسپاچینگی تجهیز اصلی این تجهیزدر دیتا بیس مشخص نیست ";
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        k = "در ردیف" + jk + "کد دیسپاچینگی تجهیز اصلی این تجهیز مشخص نیست ";
                                        break;
                                    }

                                    if (locat != null && locat != "")
                                    {
                                        if (locat == "محوطه")
                                        { locat = "0"; }
                                        else
                                            if (locat == "اتاق فرمان")
                                        { locat = "1"; }
                                        else
                                                if (locat == "اتاق رله")
                                        { locat = "2"; }
                                        else
                                                    if (locat == "باتریخانه")
                                        { locat = "3"; }
                                        else
                                                        if (locat == "راهرو")
                                        { locat = "4"; }
                                        else
                                                            if (locat == "نمازخانه")
                                        { locat = "5"; }
                                        else
                                                                if (locat == "آشپزخانه")
                                        { locat = "6"; }
                                        else
                                                                    if (locat == "فیدر خانه")
                                        { locat = "7"; }
                                        else
                                                                        if (locat == "سالن GIS230")
                                        { locat = "8"; }
                                        else
                                                                            if (locat == "سالن GIS63")
                                        { locat = "9"; }
                                        else
                                                                                if (locat == "سالن GIS")
                                        { locat = "10"; }
                                        if (locat == "BCR1")
                                        { locat = "11"; }
                                        else
                                            if (locat == "BCR2")
                                        { locat = "12"; }
                                        else if (locat == "BCR3")
                                        { locat = "13"; }
                                        else if (locat == "BCR4")
                                        { locat = "14"; }
                                        else if (locat == "BCR5")
                                        { locat = "15"; }
                                        else if (locat == "BCR6")
                                        { locat = "16"; }
                                        else if (locat == "BCR7")
                                        { locat = "17"; }
                                        else if (locat == "BCR8")
                                        { locat = "18"; }
                                        else if (locat == "BCR9")
                                        { locat = "19"; }
                                        else if (locat == "BCR10")
                                        { locat = "20"; }
                                        else if (locat == "BCR11")
                                        { locat = "21"; }
                                        else if (locat == "BCR12")
                                        { locat = "22"; }
                                        else if (locat == "BCR13")
                                        { locat = "23"; }
                                        else if (locat == "BCR14")
                                        { locat = "24"; }
                                        else if (locat == "BCR15")
                                        { locat = "25"; }
                                        else if (locat == "BCR16")
                                        { locat = "26"; }
                                        else if (locat == "BCR17")
                                        { locat = "27"; }
                                        else if (locat == "BCR18")
                                        { locat = "28"; }
                                        else if (locat == "BCR19")
                                        { locat = "29"; }
                                        else if (locat == "BCR20")
                                        { locat = "30"; }
                                        else if (locat == "BCR21")
                                        { locat = "31"; }
                                        else
                                        {
                                            locat = "0";
                                            m = "محل نصب ردیف " + jk + "در دیتابیس تعریف نشده و برای ان وضعیت محوطه در نظر گرفته شده است ";
                                        }

                                        //  else { costdyn = "0"; }  در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else

                                        instl.INST_LOCA = locat;
                                    }

                                    if (aocrdc != null && aocrdc != "")
                                    {
                                        var qaocrdc = (from b in Db.EXP_AOC_RDC where b.EARD_NAME == aocrdc select b.EARD_ID);
                                        if (qaocrdc.FirstOrDefault() != null && qaocrdc.FirstOrDefault() != 0)
                                        {
                                            instl.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                                            if (rdctype != null && rdctype != "")
                                            {
                                                var qrdcl = (from b in Db.EXP_LOCATION_RDC where b.ELRD_DESC == rdctype select b.ELRD_ID);
                                                if (qrdcl.FirstOrDefault() != null && qrdcl.FirstOrDefault() != 0)
                                                {
                                                    instl.ELRD_ELRD_ID = qrdcl.FirstOrDefault();
                                                }
                                                else
                                                {
                                                    EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                                    rdclo.ELRD_DESC = rdctype;
                                                    rdclo.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                                                    Db.EXP_LOCATION_RDC.Add(rdclo);
                                                    Db.SaveChanges();
                                                    instl.ELRD_ELRD_ID = rdclo.ELRD_ID;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            EXP_AOC_RDC aocr = new EXP_AOC_RDC();
                                            aocr.EARD_NAME = aocrdc;
                                            Db.EXP_AOC_RDC.Add(aocr);
                                            Db.SaveChanges();
                                            instl.EARD_EARD_ID = aocr.EARD_ID;

                                            if (rdctype != null && rdctype != "")
                                            {
                                                EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                                rdclo.ELRD_DESC = rdctype;
                                                rdclo.EARD_EARD_ID = aocr.EARD_ID;
                                                Db.EXP_LOCATION_RDC.Add(rdclo);
                                                Db.SaveChanges();
                                                instl.ELRD_ELRD_ID = rdclo.ELRD_ID;
                                            }
                                        }
                                    }

                                    if (unit != null && unit != "")
                                    {
                                        var s = unit.Split('-');
                                        int u = Convert.ToInt32(s[0]);

                                        var qunit = (from b in Db.EXP_UNIT_LEVEL where b.EUNL_NUM == u select b.EUNL_ID);
                                        if (qunit.FirstOrDefault() != null && qunit.FirstOrDefault() != 0)
                                        {
                                            instl.EUNL_EUNL_ID = qunit.FirstOrDefault();
                                        }
                                        else
                                        {
                                            EXP_UNIT_LEVEL unitl = new EXP_UNIT_LEVEL();
                                            unitl.EUNL_NUM = u;
                                            unitl.EUNL_DESC = u + " کیلو ولت ";
                                            Db.EXP_UNIT_LEVEL.Add(unitl);
                                            Db.SaveChanges();
                                            instl.EUNL_EUNL_ID = unitl.EUNL_ID;
                                        }
                                    }

                                    if (outin != null && outin != "")
                                    {
                                        if (outin == "بیرونی")
                                        { outin = "0"; }
                                        else
                                            if (outin == "داخلی")
                                        { outin = "1"; }
                                        else
                                        {
                                            outin = "0";
                                            m = "داخلی و بیرونی ردیف " + jk + "در دیتابیس تعریف نشده و برای ان وضعیت بیرونی در نظر گرفته شده است ";
                                        }
                                        /* در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else*/

                                        instl.OUIN_TYPE = outin;
                                    }

                                    if (mstat != null && mstat != "")
                                    {
                                        if (mstat == "کامل")
                                        { mstat = "0"; }
                                        else
                                            if (mstat == "ناقص")
                                        { mstat = "1"; }
                                        else
                                                if (mstat == "Name_plateندارد")
                                        { mstat = "2"; }
                                        else
                                                    if (mstat == "ناخوانا")
                                        { mstat = "3"; }
                                        else
                                                        if (mstat == "نیاز به خاموشی برای ورود اطلاعات دارد")
                                        { mstat = "4"; }
                                        else
                                        {
                                            mstat = "0";
                                            m = "وضعیت مدارک ردیف " + jk + "در دیتابیس تعریف نشده و برای ان وضعیت کامل در نظر گرفته شده است ";

                                        }
                                        /*در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else*/

                                        instl.DOC_STAT = mstat;
                                    }

                                    if (fact != null && fact != "")
                                    {
                                        var qfact = (from b in Db.EXP_FACTORY where b.EFAC_DESC == fact select b.EFAC_ID);
                                        if (qfact.FirstOrDefault() != null && qfact.FirstOrDefault() != 0)
                                        {
                                            if (teip != null && teip != "" && model != null && model != "")
                                            {
                                                var qcteip = (from b in Db.EXP_TYPE_EQUIP
                                                              where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                  && b.ETEX_VER == model && (b.ETEX_YEAR == yearc || yearc == null)
                                                              select b.ETEX_ID);

                                                if (qcteip.Count() == 0)
                                                {
                                                    var qtypec = (from b in Db.EXP_TYPE_EQUIP
                                                                  where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                  select b.ETEX_ID);
                                                    if (qtypec.Count() == 0)
                                                    {
                                                        EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                                        tipee.ETEX_DESC = teip;
                                                        tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                        tipee.ETEX_YEAR = yearc;
                                                        tipee.ETEX_TYPE = "0";
                                                        Db.EXP_TYPE_EQUIP.Add(tipee);
                                                        Db.SaveChanges();
                                                        int exmain = tipee.ETEX_ID;
                                                        EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                        tipeem.ETEX_DESC = teip;
                                                        tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                        tipeem.ETEX_TYPE = "1";
                                                        tipeem.ETEX_ETEX_ID = exmain;
                                                        tipeem.ETEX_VER = model;
                                                        tipeem.ETEX_YEAR = yearc;
                                                        Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                        Db.SaveChanges();
                                                        instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                    }
                                                    else
                                                    {
                                                        int exmain = qtypec.FirstOrDefault();
                                                        EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                        tipeem.ETEX_DESC = teip;
                                                        tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                        tipeem.ETEX_TYPE = "1";
                                                        tipeem.ETEX_ETEX_ID = exmain;
                                                        tipeem.ETEX_VER = model;
                                                        tipeem.ETEX_YEAR = yearc;
                                                        Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                        Db.SaveChanges();
                                                        instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                    }
                                                }
                                                else
                                                {
                                                    if (yearc != null)
                                                    {
                                                        var qcteiyear = (from b in Db.EXP_TYPE_EQUIP
                                                                         where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                             && b.ETEX_VER == model && (b.ETEX_YEAR == yearc)
                                                                         select b.ETEX_ID);
                                                        instl.ETEX_ETEX_ID = qcteiyear.FirstOrDefault();
                                                    }
                                                    else
                                                    {
                                                        var qcteiyear1 = (from b in Db.EXP_TYPE_EQUIP
                                                                          where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                              && b.ETEX_VER == model
                                                                          select b.ETEX_ID);
                                                        instl.ETEX_ETEX_ID = qcteiyear1.FirstOrDefault();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (teip != null && teip != "")
                                                {
                                                    var qcteip = (from b in Db.EXP_TYPE_EQUIP
                                                                  where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                    && (b.ETEX_YEAR == yearc || yearc == null)
                                                                  select b.ETEX_ID);

                                                    if (qcteip.Count() == 0)
                                                    {
                                                        EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                                        tipee.ETEX_DESC = teip;
                                                        tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                        tipee.ETEX_YEAR = yearc;
                                                        tipee.ETEX_TYPE = "0";
                                                        Db.EXP_TYPE_EQUIP.Add(tipee);
                                                        Db.SaveChanges();
                                                        int exmain = tipee.ETEX_ID;
                                                        EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                        tipeem.ETEX_DESC = teip;
                                                        tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                        tipeem.ETEX_TYPE = "1";
                                                        tipeem.ETEX_ETEX_ID = exmain;
                                                        tipeem.ETEX_VER = "1";
                                                        tipeem.ETEX_YEAR = yearc;
                                                        Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                        Db.SaveChanges();
                                                        instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                    }
                                                    else
                                                    {
                                                        var qcteimodel1 = (from b in Db.EXP_TYPE_EQUIP
                                                                           where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                             && (b.ETEX_YEAR == yearc || yearc == null) && b.ETEX_VER == "1"
                                                                           select b.ETEX_ID);

                                                        if (qcteimodel1.Count() != 0)
                                                        {
                                                            instl.ETEX_ETEX_ID = qcteimodel1.FirstOrDefault();
                                                        }
                                                        else
                                                        {
                                                            var qcteimodelt = (from b in Db.EXP_TYPE_EQUIP
                                                                               where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                                 && (b.ETEX_YEAR == yearc || yearc == null)
                                                                               select b.ETEX_ID);

                                                            if (qcteimodelt.Count() != 0)
                                                            {
                                                                EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                                tipeem.ETEX_DESC = teip;
                                                                tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                                tipeem.ETEX_TYPE = "1";
                                                                tipeem.ETEX_ETEX_ID = qcteimodelt.FirstOrDefault();
                                                                tipeem.ETEX_VER = "1";
                                                                tipeem.ETEX_YEAR = yearc;
                                                                Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                                Db.SaveChanges();
                                                                instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                            }
                                                            else
                                                            {
                                                                EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                                                tipee.ETEX_DESC = teip;
                                                                tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                                tipee.ETEX_YEAR = yearc;
                                                                tipee.ETEX_TYPE = "0";
                                                                Db.EXP_TYPE_EQUIP.Add(tipee);
                                                                Db.SaveChanges();
                                                                int exmain = tipee.ETEX_ID;
                                                                EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                                tipeem.ETEX_DESC = teip;
                                                                tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                                tipeem.ETEX_TYPE = "1";
                                                                tipeem.ETEX_ETEX_ID = exmain;
                                                                tipeem.ETEX_VER = "1";
                                                                tipeem.ETEX_YEAR = yearc;
                                                                Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                                Db.SaveChanges();
                                                                instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    m = "در ردیف " + jk + "تیپ مشخص نیست پس نمی توان تیپ را مشخص کرد ";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            EXP_FACTORY factt = new EXP_FACTORY();
                                            factt.EFAC_DESC = fact;
                                            Db.EXP_FACTORY.Add(factt);
                                            Db.SaveChanges();
                                            int factid = factt.EFAC_ID;
                                            EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                            tipee.ETEX_DESC = teip;
                                            tipee.EFAC_EFAC_ID = factid;
                                            tipee.ETEX_YEAR = yearc;
                                            tipee.ETEX_TYPE = "0";
                                            Db.EXP_TYPE_EQUIP.Add(tipee);
                                            Db.SaveChanges();
                                            int exmain = tipee.ETEX_ID;
                                            EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                            tipeem.ETEX_DESC = teip;
                                            tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                            tipeem.ETEX_YEAR = yearc;
                                            tipeem.ETEX_TYPE = "1";
                                            if (model != null && model != "")
                                            {
                                                tipeem.ETEX_VER = model;
                                            }
                                            else
                                            {
                                                tipeem.ETEX_VER = "1";
                                            }
                                            tipeem.ETEX_ETEX_ID = exmain;
                                            Db.EXP_TYPE_EQUIP.Add(tipeem);
                                            Db.SaveChanges();
                                            instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                        }
                                    }
                                    else
                                    {
                                        m = "در ردیف " + jk + "کارخانه مشخص نیست پس نمی توان تیپ را مشخص کرد ";
                                    }

                                    if (cinst == 0)
                                    {
                                        Db.EXP_POST_LINE_INSTRU.Add(instl);
                                        Db.SaveChanges();
                                    }
                                    else
                                    {
                                        Db.SaveChanges();
                                    }

                                    decimal rowiddEPIU_ID = Convert.ToInt32(instl.EPIU_ID);

                                    if (relecheck == 1)
                                    {
                                        int j = 21;
                                        string instr = Convert.ToString(ds.Tables[0].Rows[i][j]);
                                        while (instr != null && instr != "")
                                        {
                                            instr = Convert.ToString(ds.Tables[0].Rows[i][j]);
                                            EXP_FRELAH_INST relinst = new EXP_FRELAH_INST();
                                            var codemain = (from b in Db.EXP_POST_LINE_INSTRU where b.EPOL_EPOL_ID == epolidd && b.CODE_DISP == instr && b.EPIU_EPIU_ID_SAVABEGH == null select b);
                                            if (codemain.FirstOrDefault() != null)
                                            {
                                                decimal eprel = codemain.FirstOrDefault().EPIU_ID;
                                                var cqint = (from b in Db.EXP_FRELAH_INST where b.EPIU_EPIU_ID_R == rowiddEPIU_ID && b.EPIU_EPIU_ID == eprel select b);

                                                if (codemain.FirstOrDefault().PHAS_TYPE == "0")
                                                {
                                                    if (cqint.Count() == 0)
                                                    {
                                                        relinst.EPIU_EPIU_ID_R = rowiddEPIU_ID;
                                                        relinst.EPIU_EPIU_ID = eprel;
                                                        Db.EXP_FRELAH_INST.Add(relinst);
                                                        Db.SaveChanges();
                                                    }
                                                    else
                                                    {
                                                        cqint.FirstOrDefault().EPIU_EPIU_ID_R = rowiddEPIU_ID;
                                                        cqint.FirstOrDefault().EPIU_EPIU_ID = eprel;
                                                        Db.SaveChanges();
                                                    }
                                                }
                                                else
                                                    if (codemain.FirstOrDefault().PHAS_TYPE == "1")
                                                {
                                                    foreach (var maininst in codemain)
                                                    {
                                                        if (phastype == "1")
                                                        {
                                                            if (maininst.PHAS_STAT == phasstat)
                                                            {
                                                                if (cqint.Count() == 0)
                                                                {
                                                                    relinst.EPIU_EPIU_ID_R = rowiddEPIU_ID;
                                                                    relinst.EPIU_EPIU_ID = eprel;
                                                                    Db.EXP_FRELAH_INST.Add(relinst);
                                                                    Db.SaveChanges();
                                                                }
                                                                else
                                                                {
                                                                    cqint.FirstOrDefault().EPIU_EPIU_ID_R = rowiddEPIU_ID;
                                                                    cqint.FirstOrDefault().EPIU_EPIU_ID = eprel;
                                                                    Db.SaveChanges();
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (cqint.Count() == 0)
                                                            {
                                                                relinst.EPIU_EPIU_ID_R = rowiddEPIU_ID;
                                                                relinst.EPIU_EPIU_ID = eprel;
                                                                Db.EXP_FRELAH_INST.Add(relinst);
                                                                Db.SaveChanges();
                                                            }
                                                            else
                                                            {
                                                                cqint.FirstOrDefault().EPIU_EPIU_ID_R = rowiddEPIU_ID;
                                                                cqint.FirstOrDefault().EPIU_EPIU_ID = eprel;
                                                                Db.SaveChanges();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                k = "در ردیف" + jk + "تجهیز اصلی این تجهیزدر دیتا بیس مشخص نیست ";
                                                break;
                                            }

                                            j = j + 1;
                                        }
                                    }
                                }
                                else
                                {
                                    k = "پست مشخص نیست لطفا ان را مشخص نمایید";
                                    break;
                                    //  return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] دیگر نام خط مشخص نیست در ردیف " + i, "1") }.ToJson();
                                }
                            }
                            else
                            {
                                k = "اطلاعات تجهیز مشخص نیست " + jk;
                                break;
                                //  return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] دیگر نام خط مشخص نیست در ردیف " + i, "1") }.ToJson();
                            }

                            d = m + d;
                        }

                        kde = "ثبت شد " + d;
                    }
                    else
                    {
                        kde = "0$" + "اسم شیت  با اسم شیت اصلی سازگار نیست لطفا ان را درست فرمایید " + d; ;
                    }
                    // return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", int.Parse(var_head.ToString())) }.ToJson();
                }
                catch (Exception ex)
                {
                    kde = ".فرمت سل های فایل اشکال دارد";
                    //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] فرمت سل های فایل اشکال دارد", "1") }.ToJson();
                }
            }
            else
            {
                kde = "طول فایل اشکال دارد";
                // return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] طول فایل اشکال دارد", "1") }.ToJson();
            }

            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { ETEX_ID = c.ETEX_ID, ETEX_DESC = c.ETEX_DESC });
            ViewData["instru"] = Db.EXP_INSTRUMENT.Select(o => new { o.EINS_ID, o.EINS_DESC });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EPIU_ID, o.CODE_DISP });
            ViewBag.postidd = epolid;

            string postdesc = string.Empty;
            if (epolid != null && epolid != "")
            {
                postdesc = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epolidd select b.EPOL_NAME).FirstOrDefault().ToString();
            }

            ViewBag.postdescf = postdesc;
            ViewBag.k = k;
            ViewBag.mess = rowidd + "$" + kde;
            return View("infoinstdetail");
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [HttpPost]
        //[EntityAuthorize("EXP_POST_VAR_HEAD > select,insert | EXP_POST_LINE_INSTRU > select | EXP_POST_LINE > select | EXP_POST_VAR_INSTRU > select,insert")]
        public ActionResult Importexcelpostt(string s1)
        {
            DataSet ds = new DataSet();
            //int var_head = 0;
            string m = string.Empty;
            string k = string.Empty;
            string d = string.Empty;
            string kde = string.Empty;
            int rowidd = 0;
            string epolid = string.Empty;
            int epolidd = 0;

            if (Request.Files["FileUploadpostt"].ContentLength > 0)
            {
                string fileExtension = System.IO.Path.GetExtension(Request.Files["FileUploadpostt"].FileName);

                if (fileExtension == ".xls" || fileExtension == ".xlsx")
                {
                    string fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadpostt"].FileName;

                    if (System.IO.File.Exists(fileLocation))
                    {
                        System.IO.File.Delete(fileLocation);
                    }
                    Request.Files["FileUploadpostt"].SaveAs(fileLocation);
                    string excelConnectionString = string.Empty;
                    excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                    fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    if (fileExtension == ".xls")
                    {
                        excelConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";
                    }
                    else if (fileExtension == ".xlsx")
                    {
                        excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    }
                    OleDbConnection excelConnection = new OleDbConnection(excelConnectionString);
                    excelConnection.Open();
                    DataTable dt = new DataTable();

                    dt = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    if (dt == null)
                    {
                        return null;
                    }

                    String[] excelSheets = new String[dt.Rows.Count];
                    int t = 0;
                    //excel data saves in temp file here.
                    foreach (DataRow row in dt.Rows)
                    {
                        excelSheets[t] = row["TABLE_NAME"].ToString();
                        t++;
                    }

                    OleDbConnection excelConnection1 = new OleDbConnection(excelConnectionString);
                    string query = string.Format("Select * from [{0}]", excelSheets[17]);
                    using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, excelConnection1))
                    {
                        dataAdapter.Fill(ds);
                        dataAdapter.Dispose();
                    }
                }

                if (fileExtension.ToString().ToLower().Equals(".xml"))
                {
                    string fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadpostt"].FileName;
                    if (System.IO.File.Exists(fileLocation))
                    {
                        System.IO.File.Delete(fileLocation);
                    }

                    Request.Files["FileUploadpostt"].SaveAs(fileLocation);
                    XmlTextReader xmlreader = new XmlTextReader(fileLocation);
                    ds.ReadXml(xmlreader);
                    xmlreader.Close();
                }

                int instgroupid = 0;
                try
                {
                    for (int i = 8; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string rowid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                        string instgroup = Convert.ToString(ds.Tables[0].Rows[i][1]);
                        string sernum = Convert.ToString(ds.Tables[0].Rows[i][2]);
                        string instcode = Convert.ToString(ds.Tables[0].Rows[i][3]);
                        string unit = Convert.ToString(ds.Tables[0].Rows[i][4]);
                        string aocrdc = Convert.ToString(ds.Tables[0].Rows[i][5]);
                        string rdctype = Convert.ToString(ds.Tables[0].Rows[i][6]);
                        string codetarh = Convert.ToString(ds.Tables[0].Rows[i][7]);
                        string instname = Convert.ToString(ds.Tables[0].Rows[i][8]);
                        string outin = Convert.ToString(ds.Tables[0].Rows[i][9]);
                        string mstat = Convert.ToString(ds.Tables[0].Rows[i][10]);
                        string phastype = Convert.ToString(ds.Tables[0].Rows[i][11]);
                        string phasstat = Convert.ToString(ds.Tables[0].Rows[i][12]);
                        string locat = Convert.ToString(ds.Tables[0].Rows[i][13]);
                        string teip = Convert.ToString(ds.Tables[0].Rows[i][14]);
                        string model = Convert.ToString(ds.Tables[0].Rows[i][15]);
                        string yearc = Convert.ToString(ds.Tables[0].Rows[i][16]);
                        string fact = Convert.ToString(ds.Tables[0].Rows[i][17]);
                        string tiepstat = Convert.ToString(ds.Tables[0].Rows[i][18]);
                        //string locd = Convert.ToString(ds.Tables[0].Rows[i][21]);
                        //string codedisp = Convert.ToString(ds.Tables[0].Rows[i][19]);
                        epolid = Convert.ToString(Request.Form["postt"]);
                        epolidd = Convert.ToInt32(epolid);

                        //if (instgroup != null && instgroup != "" /*&& sernum != null && sernum != "" */&& instname != null && instname != "" && ((instcode != null && instcode != "") || (codedisp != null && codedisp != "")))
                        if (instgroup != null && instgroup != "" && instname != null && instname != "" && instcode != null && instcode != "")
                        {
                            int c = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epolidd select b).Count();
                            if (c != 0)
                            {
                                var qinstgroup = (from b in Db.EXP_INSTRUMENT where b.EINS_DESC == instgroup select b.EINS_ID);
                                if (qinstgroup.FirstOrDefault() != null && qinstgroup.FirstOrDefault() != 0)
                                    instgroupid = qinstgroup.FirstOrDefault();
                                else
                                {
                                    m = "گروه تجهیز  یک گروه جدید است که در کلاس سایر تعریف شده است در ردیف   " + i;
                                }

                                EXP_POST_LINE_INSTRU instl = new EXP_POST_LINE_INSTRU();

                                if (phastype != null && phastype != "")
                                {
                                    if (phastype == "سه فاز")
                                    { phastype = "0"; }
                                    else
                                        if (phastype == "تک فاز")
                                    { phastype = "1"; }

                                    else
                                    {
                                        //  phastype = "0";
                                        k = "وضعیت فاز ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت سه فاز در نظر گرفته شده است ";
                                        break;
                                    }
                                }

                                if (phasstat != null && phasstat != "")
                                {
                                    if (phasstat == "فاز R")
                                    { phasstat = "0"; }
                                    else
                                        if (phasstat == "فاز S")
                                    { phasstat = "1"; }
                                    else
                                            if (phasstat == "فاز T")
                                    { phasstat = "2"; }
                                    else
                                                if (phasstat == "spear")
                                    { phasstat = "3"; }
                                    else
                                                    if (phasstat == "R,S,T")
                                    { phasstat = "4"; }
                                    else
                                    {
                                        // phasstat = "4";
                                        k = "وضعیت نوع فاز ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت  کامل در نظر گرفته شده است ";
                                        break;
                                    }
                                }

                                int cinst = (from b in Db.EXP_POST_LINE_INSTRU
                                             where b.EPOL_EPOL_ID == epolidd && b.EINS_EINS_ID == instgroupid
                                                 && (b.CODE_NAME == instname || b.CODE_DISP == instcode) &&
                                                 ((phastype == "0") || (phastype == "1" && b.PHAS_STAT == phasstat))
                                             select b.EPIU_ID).Count();

                                if (cinst != 0)
                                {
                                    instl = (from b in Db.EXP_POST_LINE_INSTRU
                                             where b.EPOL_EPOL_ID == epolidd && b.EINS_EINS_ID == instgroupid &&
                                                 (b.CODE_NAME == instname || b.CODE_DISP == instcode) &&
                                                 ((phastype == "0") || (phastype == "1" && b.PHAS_STAT == phasstat))
                                             select b).FirstOrDefault();
                                }

                                instl.PHAS_TYPE = phastype;
                                instl.PHAS_STAT = phasstat;
                                instl.EINS_EINS_ID = instgroupid;
                                instl.CODE_DISP = instcode;
                                instl.CODE_NAME = instname + " - " + instcode;
                                instl.EPOL_EPOL_ID = epolidd;
                                instl.SERN_NO = sernum;
                                instl.CODE_TARH = codetarh;
                                //decimal oi = 0;

                                if (locat != null && locat != "")
                                {
                                    if (locat == "محوطه")
                                    { locat = "0"; }
                                    else
                                        if (locat == "اتاق فرمان")
                                    { locat = "1"; }
                                    else
                                            if (locat == "اتاق رله")
                                    { locat = "2"; }
                                    else
                                                if (locat == "باتریخانه")
                                    { locat = "3"; }
                                    else
                                                    if (locat == "راهرو")
                                    { locat = "4"; }
                                    else
                                                        if (locat == "نمازخانه")
                                    { locat = "5"; }
                                    else
                                                            if (locat == "آشپزخانه")
                                    { locat = "6"; }
                                    else
                                                                if (locat == "فیدر خانه")
                                    { locat = "7"; }
                                    else
                                                                    if (locat == "سالن GIS230")
                                    { locat = "8"; }
                                    else
                                                                        if (locat == "سالن GIS63")
                                    { locat = "9"; }
                                    else
                                                                            if (locat == "سالن GIS")
                                    { locat = "10"; }
                                    if (locat == "BCR1")
                                    { locat = "11"; }
                                    else
                                        if (locat == "BCR2")
                                    { locat = "12"; }
                                    else if (locat == "BCR3")
                                    { locat = "13"; }
                                    else if (locat == "BCR4")
                                    { locat = "14"; }
                                    else if (locat == "BCR5")
                                    { locat = "15"; }
                                    else if (locat == "BCR6")
                                    { locat = "16"; }
                                    else if (locat == "BCR7")
                                    { locat = "17"; }
                                    else if (locat == "BCR8")
                                    { locat = "18"; }
                                    else if (locat == "BCR9")
                                    { locat = "19"; }
                                    else if (locat == "BCR10")
                                    { locat = "20"; }
                                    else if (locat == "BCR11")
                                    { locat = "21"; }
                                    else if (locat == "BCR12")
                                    { locat = "22"; }
                                    else if (locat == "BCR13")
                                    { locat = "23"; }
                                    else if (locat == "BCR14")
                                    { locat = "24"; }
                                    else if (locat == "BCR15")
                                    { locat = "25"; }
                                    else if (locat == "BCR16")
                                    { locat = "26"; }
                                    else if (locat == "BCR17")
                                    { locat = "27"; }
                                    else if (locat == "BCR18")
                                    { locat = "28"; }
                                    else if (locat == "BCR19")
                                    { locat = "29"; }
                                    else if (locat == "BCR20")
                                    { locat = "30"; }
                                    else if (locat == "BCR21")
                                    { locat = "31"; }
                                    else
                                    {
                                        locat = "0";
                                        m = "محل نصب ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت محوطه در نظر گرفته شده است ";
                                    }

                                    instl.INST_LOCA = locat;
                                }

                                if (aocrdc != null && aocrdc != "")
                                {
                                    var qaocrdc = (from b in Db.EXP_AOC_RDC where b.EARD_NAME == aocrdc select b.EARD_ID);
                                    if (qaocrdc.FirstOrDefault() != null && qaocrdc.FirstOrDefault() != 0)
                                    {
                                        instl.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                                        if (rdctype != null && rdctype != "")
                                        {
                                            var qrdcl = (from b in Db.EXP_LOCATION_RDC where b.ELRD_DESC == rdctype select b.ELRD_ID);
                                            if (qrdcl.FirstOrDefault() != null && qrdcl.FirstOrDefault() != 0)
                                            {
                                                instl.ELRD_ELRD_ID = qrdcl.FirstOrDefault();
                                            }
                                            else
                                            {
                                                EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                                rdclo.ELRD_DESC = rdctype;
                                                rdclo.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                                                Db.EXP_LOCATION_RDC.Add(rdclo);
                                                Db.SaveChanges();
                                                instl.ELRD_ELRD_ID = rdclo.ELRD_ID;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        EXP_AOC_RDC aocr = new EXP_AOC_RDC();
                                        aocr.EARD_NAME = aocrdc;
                                        Db.EXP_AOC_RDC.Add(aocr);
                                        Db.SaveChanges();
                                        instl.EARD_EARD_ID = aocr.EARD_ID;

                                        if (rdctype != null && rdctype != "")
                                        {
                                            EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                            rdclo.ELRD_DESC = rdctype;
                                            rdclo.EARD_EARD_ID = aocr.EARD_ID;
                                            Db.EXP_LOCATION_RDC.Add(rdclo);
                                            Db.SaveChanges();
                                            instl.ELRD_ELRD_ID = rdclo.ELRD_ID;

                                        }
                                    }
                                }

                                if (unit != null && unit != "")
                                {
                                    var s = unit.Split('-');
                                    int u = Convert.ToInt32(s[0]);

                                    var qunit = (from b in Db.EXP_UNIT_LEVEL where b.EUNL_NUM == u select b.EUNL_ID);
                                    if (qunit.FirstOrDefault() != null && qunit.FirstOrDefault() != 0)
                                    {
                                        instl.EUNL_EUNL_ID = qunit.FirstOrDefault();
                                    }
                                    else
                                    {
                                        EXP_UNIT_LEVEL unitl = new EXP_UNIT_LEVEL();
                                        unitl.EUNL_NUM = u;
                                        unitl.EUNL_DESC = u + " کیلو ولت ";
                                        Db.EXP_UNIT_LEVEL.Add(unitl);
                                        Db.SaveChanges();
                                        instl.EUNL_EUNL_ID = unitl.EUNL_ID;
                                    }
                                }

                                if (outin != null && outin != "")
                                {
                                    if (outin == "بیرونی")
                                    { outin = "0"; }
                                    else
                                        if (outin == "داخلی")
                                    { outin = "1"; }
                                    else
                                    {
                                        outin = "0";
                                        m = "داخلی و بیرونی ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت بیرونی در نظر گرفته شده است ";

                                    }
                                    /* در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else*/

                                    instl.OUIN_TYPE = outin;
                                }

                                if (mstat != null && mstat != "")
                                {
                                    if (mstat == "کامل")
                                    { mstat = "0"; }
                                    else
                                        if (mstat == "ناقص")
                                    { mstat = "1"; }
                                    else
                                            if (mstat == "Name_plateندارد")
                                    { mstat = "2"; }
                                    else
                                                if (mstat == "ناخوانا")
                                    { mstat = "3"; }
                                    else
                                                    if (mstat == "نیاز به خاموشی برای ورود اطلاعات دارد")
                                    { mstat = "4"; }
                                    else
                                    {
                                        mstat = "0";
                                        m = "وضعیت مدارک ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت کامل در نظر گرفته شده است ";

                                    }
                                    /*در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else*/
                                    instl.DOC_STAT = mstat;
                                }

                                if (fact != null && fact != "")
                                {
                                    var qfact = (from b in Db.EXP_FACTORY where b.EFAC_DESC == fact select b.EFAC_ID);
                                    if (qfact.FirstOrDefault() != null && qfact.FirstOrDefault() != 0)
                                    {
                                        if (teip != null && teip != "" && model != null && model != "")
                                        {
                                            var qcteip = (from b in Db.EXP_TYPE_EQUIP
                                                          where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                              && b.ETEX_VER == model && (b.ETEX_YEAR == yearc || yearc == null)
                                                          select b.ETEX_ID);

                                            if (qcteip.Count() == 0)
                                            {
                                                var qtypec = (from b in Db.EXP_TYPE_EQUIP
                                                              where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                              select b.ETEX_ID);

                                                if (qtypec.Count() == 0)
                                                {
                                                    EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                                    tipee.ETEX_DESC = teip;
                                                    tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                    tipee.ETEX_YEAR = yearc;
                                                    tipee.ETEX_TYPE = "0";
                                                    Db.EXP_TYPE_EQUIP.Add(tipee);
                                                    Db.SaveChanges();
                                                    int exmain = tipee.ETEX_ID;
                                                    EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                    tipeem.ETEX_DESC = teip;
                                                    tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                    tipeem.ETEX_TYPE = "1";
                                                    tipeem.ETEX_ETEX_ID = exmain;
                                                    tipeem.ETEX_VER = model;
                                                    tipeem.ETEX_YEAR = yearc;
                                                    Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                    Db.SaveChanges();
                                                    instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                }
                                                else
                                                {
                                                    int exmain = qtypec.FirstOrDefault();
                                                    EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                    tipeem.ETEX_DESC = teip;
                                                    tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                    tipeem.ETEX_TYPE = "1";
                                                    tipeem.ETEX_ETEX_ID = exmain;
                                                    tipeem.ETEX_VER = model;
                                                    tipeem.ETEX_YEAR = yearc;
                                                    Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                    Db.SaveChanges();
                                                    instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                }
                                            }
                                            else
                                            {
                                                if (yearc != null)
                                                {
                                                    var qcteiyear = (from b in Db.EXP_TYPE_EQUIP
                                                                     where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                         && b.ETEX_VER == model && (b.ETEX_YEAR == yearc)
                                                                     select b.ETEX_ID);
                                                    instl.ETEX_ETEX_ID = qcteiyear.FirstOrDefault();
                                                }
                                                else
                                                {
                                                    var qcteiyear1 = (from b in Db.EXP_TYPE_EQUIP
                                                                      where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                          && b.ETEX_VER == model
                                                                      select b.ETEX_ID);
                                                    instl.ETEX_ETEX_ID = qcteiyear1.FirstOrDefault();
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (teip != null && teip != "")
                                            {
                                                var qcteip = (from b in Db.EXP_TYPE_EQUIP
                                                              where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                && (b.ETEX_YEAR == yearc || yearc == null)
                                                              select b.ETEX_ID);

                                                if (qcteip.Count() == 0)
                                                {
                                                    EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                                    tipee.ETEX_DESC = teip;
                                                    tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                    tipee.ETEX_YEAR = yearc;
                                                    tipee.ETEX_TYPE = "0";
                                                    Db.EXP_TYPE_EQUIP.Add(tipee);
                                                    Db.SaveChanges();
                                                    int exmain = tipee.ETEX_ID;
                                                    EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                    tipeem.ETEX_DESC = teip;
                                                    tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                    tipeem.ETEX_TYPE = "1";
                                                    tipeem.ETEX_ETEX_ID = exmain;
                                                    tipeem.ETEX_VER = "1";
                                                    tipeem.ETEX_YEAR = yearc;
                                                    Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                    Db.SaveChanges();
                                                    instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                }
                                                else
                                                {
                                                    var qcteimodel1 = (from b in Db.EXP_TYPE_EQUIP
                                                                       where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                         && (b.ETEX_YEAR == yearc || yearc == null) && b.ETEX_VER == "1"
                                                                       select b.ETEX_ID);

                                                    if (qcteimodel1.Count() != 0)
                                                    {
                                                        instl.ETEX_ETEX_ID = qcteimodel1.FirstOrDefault();
                                                    }
                                                    else
                                                    {
                                                        var qcteimodelt = (from b in Db.EXP_TYPE_EQUIP
                                                                           where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                             && (b.ETEX_YEAR == yearc || yearc == null)
                                                                           select b.ETEX_ID);

                                                        if (qcteimodelt.Count() != 0)
                                                        {
                                                            EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                            tipeem.ETEX_DESC = teip;
                                                            tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                            tipeem.ETEX_TYPE = "1";
                                                            tipeem.ETEX_ETEX_ID = qcteimodelt.FirstOrDefault();
                                                            tipeem.ETEX_VER = "1";
                                                            tipeem.ETEX_YEAR = yearc;
                                                            Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                            Db.SaveChanges();
                                                            instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                        }
                                                        else
                                                        {
                                                            EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                                            tipee.ETEX_DESC = teip;
                                                            tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                            tipee.ETEX_YEAR = yearc;
                                                            tipee.ETEX_TYPE = "0";
                                                            Db.EXP_TYPE_EQUIP.Add(tipee);
                                                            Db.SaveChanges();
                                                            int exmain = tipee.ETEX_ID;
                                                            EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                            tipeem.ETEX_DESC = teip;
                                                            tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                            tipeem.ETEX_TYPE = "1";
                                                            tipeem.ETEX_ETEX_ID = exmain;
                                                            tipeem.ETEX_VER = "1";
                                                            tipeem.ETEX_YEAR = yearc;
                                                            Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                            Db.SaveChanges();
                                                            instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                m = "در ردیف " + i + "تیپ مشخص نیست پس نمی توان تیپ را مشخص کرد ";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        EXP_FACTORY factt = new EXP_FACTORY();
                                        factt.EFAC_DESC = fact;
                                        Db.EXP_FACTORY.Add(factt);
                                        Db.SaveChanges();
                                        int factid = factt.EFAC_ID;
                                        EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                        tipee.ETEX_DESC = teip;
                                        tipee.EFAC_EFAC_ID = factid;
                                        tipee.ETEX_YEAR = yearc;
                                        tipee.ETEX_TYPE = "0";
                                        Db.EXP_TYPE_EQUIP.Add(tipee);
                                        Db.SaveChanges();
                                        int exmain = tipee.ETEX_ID;
                                        EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                        tipeem.ETEX_DESC = teip;
                                        tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                        tipeem.ETEX_YEAR = yearc;
                                        tipeem.ETEX_TYPE = "1";
                                        if (model != null && model != "")
                                        {
                                            tipeem.ETEX_VER = model;
                                        }
                                        else
                                        {
                                            tipeem.ETEX_VER = "1";
                                        }

                                        tipeem.ETEX_ETEX_ID = exmain;
                                        Db.EXP_TYPE_EQUIP.Add(tipeem);
                                        Db.SaveChanges();
                                        instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                    }
                                }
                                else
                                {
                                    m = "در ردیف " + i + "کارخانه مشخص نیست پس نمی توان تیپ را مشخص کرد ";
                                }

                                if (cinst == 0)
                                {
                                    Db.EXP_POST_LINE_INSTRU.Add(instl);
                                    Db.SaveChanges();
                                }
                                else
                                {
                                    Db.SaveChanges();
                                }

                                if (i == 6)
                                {
                                    rowidd = Convert.ToInt32(instl.EPIU_ID);
                                }
                            }
                            else
                            {
                                k = "پست مشخص نیست لطفا ان را مشخص نمایید";
                                break;
                                //  return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] دیگر نام خط مشخص نیست در ردیف " + i, "1") }.ToJson();
                            }
                        }
                        else
                        {
                            k = "اطلاعات تجهیز مشخص نیست " + i;
                            break;
                            //  return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] دیگر نام خط مشخص نیست در ردیف " + i, "1") }.ToJson();
                        }

                        d = m + d;
                    }

                    kde = "ثبت شد " + d;
                    // return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", int.Parse(var_head.ToString())) }.ToJson();
                }
                catch (Exception ex)
                {
                    kde = "فرمت سل های فایل اشکال دارد";
                    //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] فرمت سل های فایل اشکال دارد", "1") }.ToJson();
                }
            }
            else
            {
                kde = "طول فایل اشکال دارد";
                // return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] طول فایل اشکال دارد", "1") }.ToJson();
            }

            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { ETEX_ID = c.ETEX_ID, ETEX_DESC = c.ETEX_DESC });
            ViewData["instru"] = Db.EXP_INSTRUMENT.Select(o => new { o.EINS_ID, o.EINS_DESC });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EPIU_ID, o.CODE_DISP });
            ViewBag.postidd = epolid;
            string postdesc = string.Empty;
            if (epolid != null && epolid != "")
            {
                postdesc = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epolidd select b.EPOL_NAME).FirstOrDefault().ToString();
            }

            ViewBag.postdescf = postdesc;
            ViewBag.k = k;
            ViewBag.mess = rowidd + "$" + kde;
            return View("infoinstother");
        }

        private string insertinst(int p, DataSet ds, int j, int epolidd)
        {
            //int var_head = 0;
            string m = string.Empty;
            string d = string.Empty;
            string kde = string.Empty;
            int rowidd = 0;
            int senddata = 0;

            for (int i = j; i < ds.Tables[0].Rows.Count; i++)
            {
                string rowid = string.Empty;
                int instgroup = p;
                string sernum = string.Empty;
                string instcode = string.Empty;
                string unit = string.Empty;
                string aocrdc = string.Empty;
                string rdctype = string.Empty;
                string codetarh = string.Empty;
                string instname = string.Empty;
                string outin = string.Empty;
                string mstat = string.Empty;
                string phastype = string.Empty;
                string phasstat = string.Empty;
                string locat = string.Empty;
                string teip = string.Empty;
                string model = string.Empty;
                string yearc = string.Empty;
                string fact = string.Empty;
                string tiepstat = string.Empty;

                if (p == 1) // مربوط به تاسیسات و ساختمان + باتری
                {
                    rowid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                    string sinstgroup = Convert.ToString(ds.Tables[0].Rows[i][1]);

                    var qinstgroup = (from b in Db.EXP_INSTRUMENT where b.EINS_DESC == sinstgroup select b.EINS_ID);
                    if (qinstgroup.FirstOrDefault() != null && qinstgroup.FirstOrDefault() != 0)
                    {
                        instgroup = qinstgroup.FirstOrDefault();
                    }
                    else
                    {
                        m = "گروه تجهیز  یک گروه جدید است که در کلاس سایر تعریف شده است در ردیف   " + i;

                        // برای اینکه وقتی به سطر خالی رسید اکسپشن رخ نده و کلا از حلقه خارج بشه
                        if (sinstgroup == "" || sinstgroup == null)
                        {
                            break;
                        }

                        break;

                    }

                    sernum = Convert.ToString(ds.Tables[0].Rows[i][2]);
                    instcode = sernum;
                    instname = Convert.ToString(ds.Tables[0].Rows[i][3]);
                    outin = Convert.ToString(ds.Tables[0].Rows[i][4]);
                    mstat = Convert.ToString(ds.Tables[0].Rows[i][5]);
                    locat = Convert.ToString(ds.Tables[0].Rows[i][6]);
                    teip = Convert.ToString(ds.Tables[0].Rows[i][7]);
                    model = Convert.ToString(ds.Tables[0].Rows[i][8]);
                    yearc = Convert.ToString(ds.Tables[0].Rows[i][9]);
                    fact = Convert.ToString(ds.Tables[0].Rows[i][10]);
                    tiepstat = Convert.ToString(ds.Tables[0].Rows[i][11]);
                }
                else

                    if (p == 60) // مربوط به سایر تجهیزات
                {
                    rowid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                    string sinstgroup = Convert.ToString(ds.Tables[0].Rows[i][1]);

                    var qinstgroup = (from b in Db.EXP_INSTRUMENT where b.EINS_DESC == sinstgroup select b.EINS_ID);
                    if (qinstgroup.FirstOrDefault() != null && qinstgroup.FirstOrDefault() != 0)
                        instgroup = qinstgroup.FirstOrDefault();
                    else
                    {
                        m = "گروه تجهیز  یک گروه جدید است که در کلاس سایر تعریف شده است در ردیف   " + i;

                        // برای اینکه وقتی به سطر خالی رسید اکسپشن رخ نده و کلا از حلقه خارج بشه
                        if (sinstgroup == "" || sinstgroup == null)
                        {
                            break;
                        }

                        break;
                    }

                    rowid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                    sernum = Convert.ToString(ds.Tables[0].Rows[i][2]);
                    teip = Convert.ToString(ds.Tables[0].Rows[i][3]);
                    instcode = Convert.ToString(ds.Tables[0].Rows[i][2]);
                    aocrdc = Convert.ToString(ds.Tables[0].Rows[i][4]);
                    rdctype = Convert.ToString(ds.Tables[0].Rows[i][5]);
                    codetarh = Convert.ToString(ds.Tables[0].Rows[i][6]);
                    instname = Convert.ToString(ds.Tables[0].Rows[i][7]);
                    outin = Convert.ToString(ds.Tables[0].Rows[i][8]);
                    mstat = Convert.ToString(ds.Tables[0].Rows[i][9]);
                    phastype = Convert.ToString(ds.Tables[0].Rows[i][10]);
                    phasstat = Convert.ToString(ds.Tables[0].Rows[i][11]);
                    locat = Convert.ToString(ds.Tables[0].Rows[i][12]);
                    model = Convert.ToString(ds.Tables[0].Rows[i][13]);
                    yearc = Convert.ToString(ds.Tables[0].Rows[i][14]);
                    fact = Convert.ToString(ds.Tables[0].Rows[i][15]);
                    tiepstat = Convert.ToString(ds.Tables[0].Rows[i][16]);
                }
                else if (p != 1 && p != 60)
                {
                    rowid = Convert.ToString(ds.Tables[0].Rows[i][0]);
                    instgroup = p;
                    sernum = Convert.ToString(ds.Tables[0].Rows[i][1]);
                    instcode = Convert.ToString(ds.Tables[0].Rows[i][2]);
                    unit = Convert.ToString(ds.Tables[0].Rows[i][3]);
                    aocrdc = Convert.ToString(ds.Tables[0].Rows[i][4]);
                    rdctype = Convert.ToString(ds.Tables[0].Rows[i][5]);
                    codetarh = Convert.ToString(ds.Tables[0].Rows[i][6]);
                    instname = Convert.ToString(ds.Tables[0].Rows[i][7]);
                    outin = Convert.ToString(ds.Tables[0].Rows[i][8]);
                    mstat = Convert.ToString(ds.Tables[0].Rows[i][9]);
                    phastype = Convert.ToString(ds.Tables[0].Rows[i][10]);
                    phasstat = Convert.ToString(ds.Tables[0].Rows[i][11]);
                    locat = Convert.ToString(ds.Tables[0].Rows[i][12]);
                    teip = Convert.ToString(ds.Tables[0].Rows[i][13]);
                    model = Convert.ToString(ds.Tables[0].Rows[i][14]);
                    yearc = Convert.ToString(ds.Tables[0].Rows[i][15]);
                    fact = Convert.ToString(ds.Tables[0].Rows[i][16]);
                    tiepstat = Convert.ToString(ds.Tables[0].Rows[i][17]);
                }

                if (instname != null && instname != "" && instcode != null && instcode != "")
                {
                    int c = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epolidd select b).Count();
                    if (c != 0)
                    {
                        EXP_POST_LINE_INSTRU instl = new EXP_POST_LINE_INSTRU();

                        if (phastype != null && phastype != "")
                        {
                            if (phastype == "سه فاز")
                            { phastype = "0"; }
                            else
                                if (phastype == "تک فاز")
                            {
                                phastype = "1";

                            }

                            else
                            {
                                phastype = "0";
                                senddata = 0;
                                m = "وضعیت فاز ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت سه فاز در نظر گرفته شده است ";

                            } // در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else
                        }

                        if (phasstat != null && phasstat != "")
                        {
                            if (phasstat == "فاز R")
                            { phasstat = "0"; }
                            else
                                if (phasstat == "فاز S")
                            { phasstat = "1"; }
                            else
                                    if (phasstat == "فاز T")
                            { phasstat = "2"; }
                            else
                                        if (phasstat == "spear")
                            { phasstat = "3"; }
                            else
                                            if (phasstat == "R,S,T")
                            { phasstat = "4"; }
                            else
                            {
                                phasstat = "4";

                                m = "وضعیت نوع فاز ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت  کامل در نظر گرفته شده است ";

                            } // در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else
                        }

                        int cinst = (from b in Db.EXP_POST_LINE_INSTRU
                                     where b.EPOL_EPOL_ID == epolidd && b.EINS_EINS_ID == instgroup
                                         && (b.CODE_NAME == instname || b.CODE_DISP == instcode) &&
                                         ((phastype == "0") || (phastype == "1" && b.PHAS_STAT == phasstat))
                                     select b.EPIU_ID).Count();

                        if (cinst != 0)
                        {
                            instl = (from b in Db.EXP_POST_LINE_INSTRU
                                     where b.EPOL_EPOL_ID == epolidd && b.EINS_EINS_ID == instgroup &&
                                         (b.CODE_NAME == instname || b.CODE_DISP == instcode) &&
                                         ((phastype == "0") || (phastype == "1" && b.PHAS_STAT == phasstat))
                                     select b).FirstOrDefault();
                        }

                        instl.EINS_EINS_ID = instgroup;
                        instl.PHAS_STAT = phasstat;
                        instl.CODE_DISP = instcode;

                        if (instcode == null)
                            instl.CODE_NAME = instname + " - " + sernum;
                        else
                            instl.CODE_NAME = instname + " - " + instcode;

                        instl.EPOL_EPOL_ID = epolidd;
                        instl.SERN_NO = sernum;
                        instl.CODE_TARH = codetarh;
                        instl.PHAS_TYPE = phastype;
                        if (locat != null && locat != "")
                        {
                            if (locat == "محوطه")
                            { locat = "0"; }
                            else
                                if (locat == "اتاق فرمان")
                            { locat = "1"; }
                            else
                                    if (locat == "اتاق رله")
                            { locat = "2"; }
                            else
                                        if (locat == "باتریخانه")
                            { locat = "3"; }
                            else
                                            if (locat == "راهرو")
                            { locat = "4"; }
                            else
                                                if (locat == "نمازخانه")
                            { locat = "5"; }
                            else
                                                    if (locat == "آشپزخانه")
                            { locat = "6"; }
                            else
                                                        if (locat == "فیدر خانه")
                            { locat = "7"; }
                            else
                                                            if (locat == "سالن GIS230")
                            { locat = "8"; }
                            else
                                                                if (locat == "سالن GIS63")
                            { locat = "9"; }
                            else
                                                                    if (locat == "سالن GIS")
                            { locat = "10"; }
                            if (locat == "BCR1")
                            { locat = "11"; }
                            else
                                if (locat == "BCR2")
                            { locat = "12"; }
                            else if (locat == "BCR3")
                            { locat = "13"; }
                            else if (locat == "BCR4")
                            { locat = "14"; }
                            else if (locat == "BCR5")
                            { locat = "15"; }
                            else if (locat == "BCR6")
                            { locat = "16"; }
                            else if (locat == "BCR7")
                            { locat = "17"; }
                            else if (locat == "BCR8")
                            { locat = "18"; }
                            else if (locat == "BCR9")
                            { locat = "19"; }
                            else if (locat == "BCR10")
                            { locat = "20"; }
                            else if (locat == "BCR11")
                            { locat = "21"; }
                            else if (locat == "BCR12")
                            { locat = "22"; }
                            else if (locat == "BCR13")
                            { locat = "23"; }
                            else if (locat == "BCR14")
                            { locat = "24"; }
                            else if (locat == "BCR15")
                            { locat = "25"; }
                            else if (locat == "BCR16")
                            { locat = "26"; }
                            else if (locat == "BCR17")
                            { locat = "27"; }
                            else if (locat == "BCR18")
                            { locat = "28"; }
                            else if (locat == "BCR19")
                            { locat = "29"; }
                            else if (locat == "BCR20")
                            { locat = "30"; }
                            else if (locat == "BCR21")
                            { locat = "31"; }
                            else
                            {
                                locat = "0";

                                m = "محل نصب ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت محوطه در نظر گرفته شده است ";
                            }

                            //  else { costdyn = "0"; }  در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else

                            instl.INST_LOCA = locat;
                        }

                        if (aocrdc != null && aocrdc != "")
                        {
                            var qaocrdc = (from b in Db.EXP_AOC_RDC where b.EARD_NAME == aocrdc select b.EARD_ID);
                            if (qaocrdc.FirstOrDefault() != null && qaocrdc.FirstOrDefault() != 0)
                            {
                                instl.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                                if (rdctype != null && rdctype != "")
                                {
                                    var qrdcl = (from b in Db.EXP_LOCATION_RDC where b.ELRD_DESC == rdctype select b.ELRD_ID);
                                    if (qrdcl.FirstOrDefault() != null && qrdcl.FirstOrDefault() != 0)
                                    {
                                        instl.ELRD_ELRD_ID = qrdcl.FirstOrDefault();
                                    }
                                    else
                                    {
                                        EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                        rdclo.ELRD_DESC = rdctype;
                                        rdclo.EARD_EARD_ID = qaocrdc.FirstOrDefault();
                                        Db.EXP_LOCATION_RDC.Add(rdclo);
                                        Db.SaveChanges();
                                        instl.ELRD_ELRD_ID = rdclo.ELRD_ID;
                                    }
                                }
                            }
                            else
                            {
                                EXP_AOC_RDC aocr = new EXP_AOC_RDC();
                                aocr.EARD_NAME = aocrdc;
                                Db.EXP_AOC_RDC.Add(aocr);
                                Db.SaveChanges();
                                instl.EARD_EARD_ID = aocr.EARD_ID;

                                if (rdctype != null && rdctype != "")
                                {
                                    EXP_LOCATION_RDC rdclo = new EXP_LOCATION_RDC();
                                    rdclo.ELRD_DESC = rdctype;
                                    rdclo.EARD_EARD_ID = aocr.EARD_ID;
                                    Db.EXP_LOCATION_RDC.Add(rdclo);
                                    Db.SaveChanges();
                                    instl.ELRD_ELRD_ID = rdclo.ELRD_ID;
                                }
                            }
                        }

                        if (unit != null && unit != "")
                        {
                            var s = unit.Split('-');
                            int u = Convert.ToInt32(s[0]);
                            var qunit = (from b in Db.EXP_UNIT_LEVEL where b.EUNL_NUM == u select b.EUNL_ID);
                            if (qunit.FirstOrDefault() != null && qunit.FirstOrDefault() != 0)
                            {
                                instl.EUNL_EUNL_ID = qunit.FirstOrDefault();
                            }
                            else
                            {
                                EXP_UNIT_LEVEL unitl = new EXP_UNIT_LEVEL();
                                unitl.EUNL_NUM = u;
                                unitl.EUNL_DESC = u + " کیلو ولت ";
                                Db.EXP_UNIT_LEVEL.Add(unitl);
                                Db.SaveChanges();
                                instl.EUNL_EUNL_ID = unitl.EUNL_ID;
                            }
                        }

                        if (outin != null && outin != "")
                        {
                            if (outin == "بیرونی")
                            { outin = "0"; }
                            else
                                if (outin == "داخلی")
                            { outin = "1"; }
                            else
                            {
                                outin = "0";
                                m = "داخلی و بیرونی ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت بیرونی در نظر گرفته شده است ";
                            } // در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else

                            instl.OUIN_TYPE = outin;
                        }

                        if (mstat != null && mstat != "")
                        {
                            if (mstat == "کامل")
                            { mstat = "0"; }
                            else
                                if (mstat == "ناقص")
                            { mstat = "1"; }
                            else
                                    if (mstat == "Name_plateندارد")
                            { mstat = "2"; }
                            else
                                        if (mstat == "ناخوانا")
                            { mstat = "3"; }
                            else
                                            if (mstat == "نیاز به خاموشی برای ورود اطلاعات دارد")
                            { mstat = "4"; }
                            else
                            {
                                mstat = "0";
                                m = "وضعیت مدارک ردیف " + i + "در دیتابیس تعریف نشده و برای ان وضعیت کامل در نظر گرفته شده است ";
                            }  //در صورتیکه مقدار در فایل اکسل مقداری غیر از مقدار اولیه داشته باشد در دیتابیسابتدا مقدار درست شود در این قسمت قرار بگیرد                                        else

                            instl.DOC_STAT = mstat;
                        }

                        if (fact != null && fact != "")
                        {
                            var qfact = (from b in Db.EXP_FACTORY where b.EFAC_DESC == fact select b.EFAC_ID);
                            if (qfact.FirstOrDefault() != null && qfact.FirstOrDefault() != 0)
                            {
                                if (teip != null && teip != "" && model != null && model != "")
                                {
                                    var qcteip = (from b in Db.EXP_TYPE_EQUIP
                                                  where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                      && b.ETEX_VER == model && (b.ETEX_YEAR == yearc || yearc == null)
                                                  select b.ETEX_ID);

                                    if (qcteip.Count() == 0)
                                    {
                                        var qtypec = (from b in Db.EXP_TYPE_EQUIP
                                                      where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                      select b.ETEX_ID);
                                        if (qtypec.Count() == 0)
                                        {
                                            EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                            tipee.ETEX_DESC = teip;
                                            tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                            tipee.ETEX_YEAR = yearc;
                                            tipee.ETEX_TYPE = "0";
                                            Db.EXP_TYPE_EQUIP.Add(tipee);
                                            Db.SaveChanges();
                                            int exmain = tipee.ETEX_ID;
                                            EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                            tipeem.ETEX_DESC = teip;
                                            tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                            tipeem.ETEX_TYPE = "1";
                                            tipeem.ETEX_ETEX_ID = exmain;
                                            tipeem.ETEX_VER = model;
                                            tipeem.ETEX_YEAR = yearc;
                                            Db.EXP_TYPE_EQUIP.Add(tipeem);
                                            Db.SaveChanges();
                                            instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                        }
                                        else
                                        {
                                            int exmain = qtypec.FirstOrDefault();
                                            EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                            tipeem.ETEX_DESC = teip;
                                            tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                            tipeem.ETEX_TYPE = "1";
                                            tipeem.ETEX_ETEX_ID = exmain;
                                            tipeem.ETEX_VER = model;
                                            tipeem.ETEX_YEAR = yearc;
                                            Db.EXP_TYPE_EQUIP.Add(tipeem);
                                            Db.SaveChanges();
                                            instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                        }
                                    }
                                    else
                                    {
                                        if (yearc != null && yearc != "")
                                        {
                                            var qcteiyear = (from b in Db.EXP_TYPE_EQUIP
                                                             where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                 && b.ETEX_VER == model && (b.ETEX_YEAR == yearc)
                                                             select b.ETEX_ID);
                                            instl.ETEX_ETEX_ID = qcteiyear.FirstOrDefault();
                                        }
                                        else
                                        {
                                            var qcteiyear1 = (from b in Db.EXP_TYPE_EQUIP
                                                              where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                  && b.ETEX_VER == model
                                                              select b.ETEX_ID);
                                            instl.ETEX_ETEX_ID = qcteiyear1.FirstOrDefault();
                                        }
                                    }
                                }
                                else
                                {
                                    if (teip != null && teip != "")
                                    {
                                        var qcteip = (from b in Db.EXP_TYPE_EQUIP
                                                      where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                        && (b.ETEX_YEAR == yearc || yearc == null)
                                                      select b.ETEX_ID);

                                        if (qcteip.Count() == 0)
                                        {

                                            EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                            tipee.ETEX_DESC = teip;
                                            tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                            tipee.ETEX_YEAR = yearc;
                                            tipee.ETEX_TYPE = "0";
                                            Db.EXP_TYPE_EQUIP.Add(tipee);
                                            Db.SaveChanges();
                                            int exmain = tipee.ETEX_ID;
                                            EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                            tipeem.ETEX_DESC = teip;
                                            tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                            tipeem.ETEX_TYPE = "1";
                                            tipeem.ETEX_ETEX_ID = exmain;
                                            tipeem.ETEX_VER = "1";
                                            tipeem.ETEX_YEAR = yearc;
                                            Db.EXP_TYPE_EQUIP.Add(tipeem);
                                            Db.SaveChanges();
                                            instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                        }
                                        else
                                        {
                                            var qcteimodel1 = (from b in Db.EXP_TYPE_EQUIP
                                                               where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                 && (b.ETEX_YEAR == yearc || yearc == null) && b.ETEX_VER == "1"
                                                               select b.ETEX_ID);
                                            if (qcteimodel1.Count() != 0)
                                            {
                                                instl.ETEX_ETEX_ID = qcteimodel1.FirstOrDefault();
                                            }
                                            else
                                            {
                                                var qcteimodelt = (from b in Db.EXP_TYPE_EQUIP
                                                                   where b.ETEX_DESC == teip && b.EFAC_EFAC_ID == qfact.FirstOrDefault()
                                                                     && (b.ETEX_YEAR == yearc || yearc == null)
                                                                   select b.ETEX_ID);

                                                if (qcteimodelt.Count() != 0)
                                                {
                                                    EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                    tipeem.ETEX_DESC = teip;
                                                    tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                    tipeem.ETEX_TYPE = "1";
                                                    tipeem.ETEX_ETEX_ID = qcteimodelt.FirstOrDefault();
                                                    tipeem.ETEX_VER = "1";
                                                    tipeem.ETEX_YEAR = yearc;
                                                    Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                    Db.SaveChanges();
                                                    instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                }
                                                else
                                                {
                                                    EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                                    tipee.ETEX_DESC = teip;
                                                    tipee.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                    tipee.ETEX_YEAR = yearc;
                                                    tipee.ETEX_TYPE = "0";
                                                    Db.EXP_TYPE_EQUIP.Add(tipee);
                                                    Db.SaveChanges();
                                                    int exmain = tipee.ETEX_ID;
                                                    EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                                    tipeem.ETEX_DESC = teip;
                                                    tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                                    tipeem.ETEX_TYPE = "1";
                                                    tipeem.ETEX_ETEX_ID = exmain;
                                                    tipeem.ETEX_VER = "1";
                                                    tipeem.ETEX_YEAR = yearc;
                                                    Db.EXP_TYPE_EQUIP.Add(tipeem);
                                                    Db.SaveChanges();
                                                    instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        m = "در ردیف " + i + "تیپ مشخص نیست پس نمی توان تیپ را مشخص کرد ";
                                    }
                                }
                            }
                            else
                            {
                                EXP_FACTORY factt = new EXP_FACTORY();
                                factt.EFAC_DESC = fact;
                                Db.EXP_FACTORY.Add(factt);
                                Db.SaveChanges();
                                int factid = factt.EFAC_ID;
                                EXP_TYPE_EQUIP tipee = new EXP_TYPE_EQUIP();
                                tipee.ETEX_DESC = teip;
                                tipee.EFAC_EFAC_ID = factid;
                                tipee.ETEX_YEAR = yearc;
                                tipee.ETEX_TYPE = "0";
                                Db.EXP_TYPE_EQUIP.Add(tipee);
                                Db.SaveChanges();
                                int exmain = tipee.ETEX_ID;
                                EXP_TYPE_EQUIP tipeem = new EXP_TYPE_EQUIP();
                                tipeem.ETEX_DESC = teip;
                                tipeem.EFAC_EFAC_ID = qfact.FirstOrDefault();
                                tipeem.ETEX_YEAR = yearc;
                                tipeem.ETEX_TYPE = "1";
                                if (model != null && model != "")
                                {
                                    tipeem.ETEX_VER = model;
                                }
                                else
                                {
                                    tipeem.ETEX_VER = "1";
                                }

                                tipeem.ETEX_ETEX_ID = exmain;
                                Db.EXP_TYPE_EQUIP.Add(tipeem);
                                Db.SaveChanges();
                                instl.ETEX_ETEX_ID = tipeem.ETEX_ID;
                            }
                        }
                        else
                        {
                            m = "در ردیف " + i + "کارخانه مشخص نیست پس نمی توان تیپ را مشخص کرد ";
                        }

                        int iexl = Convert.ToInt32(instl.ETEX_ETEX_ID);
                        // int i = ds.Tables[0].Columns.Count;
                        if (iexl != 0)
                        {
                            for (int l = 18; l < ds.Tables[0].Columns.Count; l++)
                            {
                                string attrdesc = Convert.ToString(ds.Tables[0].Rows[i][l]);

                                string attdesc = Convert.ToString(ds.Tables[0].Rows[7][l]);
                                if (attdesc != null && attdesc != "")
                                {
                                    var qatt = from b in Db.EXP_ATTRIBUTE where b.XATT_TITLE == attdesc && b.EINS_EINS_ID == instgroup select b;
                                    if (qatt.Count() == 0)
                                    {
                                        EXP_ATTRIBUTE attdef = new EXP_ATTRIBUTE();
                                        attdef.EINS_EINS_ID = instgroup;
                                        attdef.XATT_TITLE = attdesc;
                                        attdef.XATT_TYPE = "248";
                                        attdef.XATT_STAT = "1";
                                        attdef.XATT_LENT = 800;
                                        attdef.OPTI_MAN = "0";
                                        attdef.XATT_ORDE = 0;
                                        Db.EXP_ATTRIBUTE.Add(attdef);
                                        Db.SaveChanges();

                                        int attid = attdef.XATT_ID;
                                        EXP_VALUE tipeem = new EXP_VALUE();

                                        if (attrdesc != null && attrdesc != "")
                                            tipeem.VALU_VALU = attrdesc;
                                        else
                                            tipeem.VALU_VALU = "_";

                                        tipeem.XATT_XATT_ID = attid;
                                        tipeem.ETEX_ETEX_ID = iexl;
                                        tipeem.EINS_EINS_ID = p;
                                        Db.EXP_VALUE.Add(tipeem);
                                        Db.SaveChanges();
                                    }
                                    else
                                    {
                                        var qvalatt = from b in Db.EXP_VALUE
                                                      where b.EINS_EINS_ID == instgroup &&
                                                          b.ETEX_ETEX_ID == iexl && b.XATT_XATT_ID == qatt.FirstOrDefault().XATT_ID
                                                      select b;

                                        if (qvalatt.Count() == 0)
                                        {
                                            EXP_VALUE tipeem = new EXP_VALUE();
                                            if (attrdesc != null && attrdesc != "")
                                                tipeem.VALU_VALU = attrdesc;
                                            else
                                                tipeem.VALU_VALU = "_";

                                            tipeem.XATT_XATT_ID = qatt.FirstOrDefault().XATT_ID;
                                            tipeem.ETEX_ETEX_ID = iexl;
                                            tipeem.EINS_EINS_ID = instgroup;
                                            Db.EXP_VALUE.Add(tipeem);
                                            Db.SaveChanges();
                                        }
                                        else
                                        {
                                            var qvalatt1 = from b in Db.EXP_VALUE
                                                           where b.EINS_EINS_ID == instgroup && b.VALU_VALU == attrdesc &&
                                                                b.ETEX_ETEX_ID == iexl && b.XATT_XATT_ID == qatt.FirstOrDefault().XATT_ID
                                                           select b;

                                            if (qvalatt1.Count() == 0)
                                            {
                                                m = "مقدار در ردیف " + l + "با مقدار داده شده این مشخصه فرق دارد این اطلاعات در دیتا بیس تغییر کرد  ";
                                                if (attrdesc != null && attrdesc != "")
                                                {
                                                    qvalatt.FirstOrDefault().VALU_VALU = attrdesc;
                                                    Db.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }

                        if (cinst == 0)
                        {
                            Db.EXP_POST_LINE_INSTRU.Add(instl);
                            Db.SaveChanges();
                        }
                        else
                        {
                            Db.SaveChanges();
                        }

                        if (i == j)
                        {
                            rowidd = Convert.ToInt32(instl.EPIU_ID);
                        }

                        d = "ثبت شد " + instl.CODE_NAME + d;
                    }
                    else
                    {
                        m = "پست مشخص نیست لطفا ان را مشخص نمایید";
                        break;                        
                    }
                }
                else
                {
                    m = "اطلاعات تجهیز مشخص نیست ";
                    break;                    
                }
            }

            d = rowidd + "$" + d + m;
            return d;
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [HttpPost]
        //[EntityAuthorize("EXP_POST_VAR_HEAD > select,insert | EXP_POST_LINE_INSTRU > select | EXP_POST_LINE > select | EXP_POST_VAR_INSTRU > select,insert")]
        public ActionResult Importexcelposttrans(string s1)
        {
            DataSet ds = new DataSet();
            //int var_head = 0;
            string m = string.Empty;
            string d = string.Empty;
            string kde = string.Empty;
            int trantyp = 0;
            string epolid = string.Empty;
            int epolidd = 0;
            string fileExtension = string.Empty;
            string fileLocation = string.Empty;

            string typeinstid = Convert.ToString(Request.Form["typeinst"]);
            int fd1 = Convert.ToInt32(typeinstid);
            int idf = -1;
            if (Request.Files["FileUploadposttrans"].ContentLength > 0)
            {
                fileExtension = System.IO.Path.GetExtension(Request.Files["FileUploadposttrans"].FileName);

                if (fileExtension == ".xls" || fileExtension == ".xlsx")
                {
                    fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadposttrans"].FileName;

                    if (System.IO.File.Exists(fileLocation))
                    {
                        System.IO.File.Delete(fileLocation);
                    }

                    Request.Files["FileUploadposttrans"].SaveAs(fileLocation);

                    string excelConnectionString = string.Empty;

                    excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                    fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    if (fileExtension == ".xls")
                    {
                        excelConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";
                    }
                    else if (fileExtension == ".xlsx")
                    {
                        excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    }
                    OleDbConnection excelConnection = new OleDbConnection(excelConnectionString);
                    excelConnection.Open();
                    DataTable dt = new DataTable();

                    dt = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    if (dt == null)
                    {
                        return null;
                    }

                    String[] excelSheets = new String[dt.Rows.Count];
                    int t = 0;

                    foreach (DataRow row in dt.Rows)
                    {
                        excelSheets[t] = row["TABLE_NAME"].ToString();

                        //if (row["TABLE_NAME"].ToString() == "باتری$" && fd1 == 4)
                        //{
                        //    idf = t;
                        //    trantyp = 2;
                        //}
                        if (row["TABLE_NAME"].ToString() == "'تاسیسات و ساختمان$'" && fd1 == 4)
                        {
                            idf = t;
                            trantyp = 1;
                        }
                        if (row["TABLE_NAME"].ToString() == "باتری$" && fd1 == 1)
                        {
                            idf = t;
                            trantyp = 1;
                        }
                        if (row["TABLE_NAME"].ToString() == "برقگير$" && fd1 == 2)
                        {
                            idf = t;
                            trantyp = 10;
                        }
                        if (row["TABLE_NAME"].ToString() == "بريکر$" && fd1 == 3)
                        {
                            idf = t;
                            trantyp = 7;
                        }
                        //if (row["TABLE_NAME"].ToString() == "'تاسیسات و ساختمان$'" && fd1 == 13)
                        //{
                        //    idf = t;
                        //    trantyp = 2;
                        //}
                        if (row["TABLE_NAME"].ToString() == "'ترانس $'" && fd1 == 5)
                        {
                            idf = t;
                            trantyp = 2;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس توزيع داخلي$'" && fd1 == 6)
                        {
                            idf = t;
                            trantyp = 13;

                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس جريان $'" && fd1 == 7)
                        {
                            idf = t;
                            trantyp = 9;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس نولساز$'" && fd1 == 8)
                        {
                            idf = t;
                            trantyp = 11;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس ولتاژ خازنی وترانس ولتاژ$'" && fd1 == 9)
                        {
                            idf = t;
                            trantyp = 259;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس ولتاژ$'" && fd1 == 10)
                        {
                            idf = t;
                            trantyp = 12;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس کامپکت$'" && fd1 == 11)
                        {
                            idf = t;
                            trantyp = 24;
                        }
                        if (row["TABLE_NAME"].ToString() == "'خازن $'" && fd1 == 12)
                        {
                            idf = t;
                            trantyp = 4;
                        }
                        //if (row["TABLE_NAME"].ToString() == "'دیزل ژنراتور$'" && fd1 == 13)
                        //{
                        //    idf = t;
                        //    trantyp = 2;
                        //}
                        if (row["TABLE_NAME"].ToString() == "رآکتور$" && fd1 == 14)
                        {
                            idf = t;
                            trantyp = 3;
                        }
                        //if (row["TABLE_NAME"].ToString() == "رله$" && fd1 == 13)
                        //{
                        //    idf = t;
                        //     trantyp = 2;
                        //}
                        //if (row["TABLE_NAME"].ToString() == "'ریز تجهیزات$'" && fd1 == 13)
                        //{
                        //    idf = t;
                        //      trantyp = 2;
                        //}
                        if (row["TABLE_NAME"].ToString() == "'سایر تجهیزات$'" && fd1 == 17)
                        {
                            idf = t;
                            trantyp = 60;
                        }
                        if (row["TABLE_NAME"].ToString() == "سکسيونر$" && fd1 == 18)
                        {
                            idf = t;
                            trantyp = 8;
                        }
                        if (row["TABLE_NAME"].ToString() == "باسبار$" && fd1 == 16)
                        {
                            idf = t;
                            trantyp = 281;
                        }
                        if (row["TABLE_NAME"].ToString() == "'لاين تراپ$'" && fd1 == 21)
                        {
                            idf = t;
                            trantyp = 62;
                        }

                        t++;

                    }
                    if (idf != -1)
                    {
                        OleDbConnection excelConnection1 = new OleDbConnection(excelConnectionString);


                        string query = string.Format("Select * from [{0}]", excelSheets[idf]);
                        using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, excelConnection1))
                        {
                            dataAdapter.Fill(ds);
                            dataAdapter.Dispose();
                        }
                    }
                }

                if (idf != -1)
                {
                    if (fileExtension.ToString().ToLower().Equals(".xml"))
                    {
                        fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadposttrans"].FileName;
                        if (System.IO.File.Exists(fileLocation))
                        {
                            System.IO.File.Delete(fileLocation);
                        }

                        Request.Files["FileUploadposttrans"].SaveAs(fileLocation);
                        XmlTextReader xmlreader = new XmlTextReader(fileLocation);
                        ds.ReadXml(xmlreader);
                        xmlreader.Close();
                    }
                }

                //int instgroupid = 0;

                try
                {
                    if (idf == -1)
                    {
                        kde = "0$" + "اسم شیت  با اسم شیت اصلی سازگار نیست لطفا ان را درست فرمایید ";
                    }
                    else
                    {
                        epolid = Convert.ToString(Request.Form["posttran"]);
                        epolidd = Convert.ToInt32(epolid);

                        d = insertinst(trantyp, ds, 8, epolidd);
                        //d= insertatrbute(2, ds, 8, epolidd);
                        kde = d;
                    }
                }
                catch (Exception ex)
                {
                    kde = "0$" + "فرمت سل های فایل اشکال دارد";
                }
            }
            else
            {
                kde = "0$" + "طول فایل اشکال دارد";
            }
            ViewBag.postidd = epolid;
            string postdesc = string.Empty;
            if (epolid != null && epolid != "")
            {
                postdesc = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epolidd select b.EPOL_NAME).FirstOrDefault().ToString();
            }

            ViewBag.postdescf = postdesc;
            ViewBag.mess = trantyp + "#" + kde;
            ViewData["UNIT_LEVEL"] = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewData["EARD"] = Db.EXP_AOC_RDC.Select(c => new { c.EARD_ID, c.EARD_NAME });
            ViewData["EINS"] = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewData["ETEX"] = Db.EXP_TYPE_EQUIP.Select(c => new { ETEX_ID = c.ETEX_ID, ETEX_DESC = c.ETEX_DESC });
            return View("messageexcel");
        }

        [HttpPost]
        //[EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        public ActionResult ReadInstrument([DataSourceRequest] DataSourceRequest request, string postid, string typeid, string id)
        {
            int postidd = Convert.ToInt32(postid);
            int typeidd = Convert.ToInt32(typeid);
            int pidd = Convert.ToInt32(id);
            var query = from b in Db.EXP_POST_LINE_INSTRU
                        join item in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals item.EINS_ID
                        where b.EPOL_EPOL_ID == postidd && b.HIST_DATE == null && item.EINS_ID == typeidd && b.EPIU_ID >= pidd
                        orderby b.EPIU_ID descending
                        select new
                        {
                            item.BAY_STAT,
                            b.EPIU_ID,
                            b.EINS_EINS_ID,
                            b.EPIU_EPIU_ID,
                            b.CODE_DISP,
                            b.EUNL_EUNL_ID,
                            b.EARD_EARD_ID,
                            b.OUIN_TYPE,
                            b.SERN_NO,
                            b.EPIU_TYPE,
                            b.CODE_NAME,
                            b.ETEX_ETEX_ID,
                            b.PHAS_TYPE,
                            b.PHAS_STAT
                        };

            var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        [HttpPost]
        //[EntityAuthorize("EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select")]
        public ActionResult ReadInstrumentdetail([DataSourceRequest] DataSourceRequest request, string postid, string id)
        {
            if (string.IsNullOrEmpty(postid))
                return null;

            int postidd = Convert.ToInt32(postid);
            int pidd = Convert.ToInt32(id);

            var query = from b in Db.EXP_POST_LINE_INSTRU
                        join item in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals item.EINS_ID
                        where b.EPOL_EPOL_ID == postidd && b.HIST_DATE == null && b.EPIU_ID >= pidd
                        orderby b.EPIU_ID descending
                        select new
                        {
                            item.BAY_STAT,
                            b.EPIU_ID,
                            b.EINS_EINS_ID,
                            b.EPIU_EPIU_ID,
                            b.CODE_DISP,
                            b.EUNL_EUNL_ID,
                            b.EARD_EARD_ID,
                            b.OUIN_TYPE,
                            b.EPIU_TYPE,
                            b.CODE_NAME,
                            b.SERN_NO,
                            b.ETEX_ETEX_ID,
                            b.PHAS_TYPE,
                            b.PHAS_STAT
                        };

            var jsonResult = Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult getpost()
        {
            var RetVal = from p in Db.EXP_POST_LINE
                         where p.EPOL_TYPE == "0" && p.EPOL_EPOL_ID == null
                         select new { p.EPOL_NAME, p.EPOL_ID };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [HttpPost]
        //[EntityAuthorize("EXP_POST_VAR_HEAD > select,insert | EXP_POST_LINE_INSTRU > select | EXP_POST_LINE > select | EXP_POST_VAR_INSTRU > select,insert")]
        public ActionResult Importexcelpostatt(string s1)
        {
            DataSet ds = new DataSet();
            //int var_head = 0;
            string m = string.Empty;
            string d = string.Empty;
            string kde = string.Empty;
            int trantyp = 0;
            string epolid = string.Empty;
            int epolidd = 0;
            string fileExtension = string.Empty;
            string fileLocation = string.Empty;

            string typeinstid = Convert.ToString(Request.Form["typeinstatt"]);
            int fd1 = Convert.ToInt32(typeinstid);
            int idf = -1;
            if (Request.Files["FileUploadposttrans"].ContentLength > 0)
            {
                fileExtension = System.IO.Path.GetExtension(Request.Files["FileUploadposttrans"].FileName);

                if (fileExtension == ".xls" || fileExtension == ".xlsx")
                {
                    fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadposttrans"].FileName;

                    if (System.IO.File.Exists(fileLocation))
                    {
                        System.IO.File.Delete(fileLocation);
                    }

                    Request.Files["FileUploadposttrans"].SaveAs(fileLocation);

                    string excelConnectionString = string.Empty;

                    excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                    fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    if (fileExtension == ".xls")
                    {
                        excelConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";
                    }
                    else if (fileExtension == ".xlsx")
                    {
                        excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                        fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    }
                    OleDbConnection excelConnection = new OleDbConnection(excelConnectionString);
                    excelConnection.Open();
                    DataTable dt = new DataTable();

                    dt = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    if (dt == null)
                    {
                        return null;
                    }

                    String[] excelSheets = new String[dt.Rows.Count];
                    int t = 0;

                    foreach (DataRow row in dt.Rows)
                    {
                        excelSheets[t] = row["TABLE_NAME"].ToString();

                        if (row["TABLE_NAME"].ToString() == "برقگير$" && fd1 == 2)
                        {
                            idf = t;
                            trantyp = 10;
                            break;
                        }
                        if (row["TABLE_NAME"].ToString() == "بريکر$" && fd1 == 3)
                        {
                            idf = t;
                            trantyp = 7;
                            break;
                        }

                        if (row["TABLE_NAME"].ToString() == "'ترانس $'" && fd1 == 5)
                        {
                            idf = t;
                            trantyp = 2;
                            break;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس توزيع داخلي$'" && fd1 == 6)
                        {
                            idf = t;
                            trantyp = 13;
                            break;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس جريان $'" && fd1 == 7)
                        {
                            idf = t;
                            trantyp = 9;
                            break;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس نولساز$'" && fd1 == 8)
                        {
                            idf = t;
                            trantyp = 11;
                            break;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس ولتاژ خازنی وترانس ولتاژ$'" && fd1 == 9)
                        {
                            idf = t;
                            trantyp = 259;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس ولتاژ$'" && fd1 == 10)
                        {
                            idf = t;
                            trantyp = 12;
                            break;
                        }
                        if (row["TABLE_NAME"].ToString() == "'ترانس کامپکت$'" && fd1 == 11)
                        {
                            idf = t;
                            trantyp = 24;
                            break;
                        }
                        if (row["TABLE_NAME"].ToString() == "'خازن $'" && fd1 == 12)
                        {
                            idf = t;
                            trantyp = 4;
                            break;
                        }

                        if (row["TABLE_NAME"].ToString() == "رآکتور$" && fd1 == 14)
                        {
                            idf = t;
                            trantyp = 3;
                            break;
                        }

                        if (row["TABLE_NAME"].ToString() == "سکسيونر$" && fd1 == 18)
                        {
                            idf = t;
                            trantyp = 8;
                            break;
                        }
                        if (row["TABLE_NAME"].ToString() == "'لاين تراپ$'" && fd1 == 21)
                        {
                            idf = t;
                            trantyp = 62;
                            break;
                        }

                        t++;

                    }
                    if (idf != -1)
                    {
                        OleDbConnection excelConnection1 = new OleDbConnection(excelConnectionString);

                        string query = string.Format("Select * from [{0}]", excelSheets[idf]);
                        using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, excelConnection1))
                        {
                            dataAdapter.Fill(ds);
                            dataAdapter.Dispose();
                        }
                    }
                }

                if (idf != -1)
                {
                    if (fileExtension.ToString().ToLower().Equals(".xml"))
                    {
                        fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUploadposttrans"].FileName;
                        if (System.IO.File.Exists(fileLocation))
                        {
                            System.IO.File.Delete(fileLocation);
                        }

                        Request.Files["FileUploadposttrans"].SaveAs(fileLocation);
                        XmlTextReader xmlreader = new XmlTextReader(fileLocation);
                        ds.ReadXml(xmlreader);
                        xmlreader.Close();
                    }
                }

                //int instgroupid = 0;

                try
                {
                    if (idf == -1)
                    {
                        kde = "0$" + " اسم شیت  با اسم شیت اصلی سازگار نیست لطفا آن را درست فرمایید ";
                    }
                    else
                    {
                        epolid = Convert.ToString(Request.Form["posttran_New"]);
                        epolidd = Convert.ToInt32(epolid);

                        //d = insertatt(trantyp, ds, 8, epolidd);
                        d = insertDetailInstru(trantyp, ds, 0, epolidd);

                        kde = d;
                    }
                }
                catch (Exception ex)
                {
                    kde = "0$" + "فرمت سل های فایل اشکال دارد";
                }
            }
            else
            {
                kde = "0$" + "طول فایل اشکال دارد";
            }
            ViewBag.postidd = epolid;
            string postdesc = string.Empty;
            if (epolid != null && epolid != "")
            {
                postdesc = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epolidd select b.EPOL_NAME).FirstOrDefault().ToString();
            }

            ViewBag.einsDesc = (from b in Db.EXP_INSTRUMENT where b.EINS_ID == trantyp select b.EINS_DESC).FirstOrDefault().ToString();
            ViewBag.postdescf = postdesc;
            ViewBag.fileName = Request.Files["FileUploadposttrans"].FileName.ToString();
            ViewBag.mess = kde;//trantyp + "#" + kde;
            return View("messageexcel2");
        }

        private string insertDetailInstru(int instruType, DataSet ds, int j, int epolidd)
        {
            string msg = string.Empty;
            var cntRow = ds.Tables[0].Rows.Count;
            var cntColumn = ds.Tables[0].Columns.Count;
            int cntFound = 0;
            int cntNotFound = 0;

            for (int i = 8; i <= cntRow; i++)
            {
                string codeDisp = Convert.ToString(ds.Tables[0].Rows[i][2]);
                if (string.IsNullOrEmpty(codeDisp))
                {
                    msg = msg + string.Format(" \n * کد دیسپاچینگی ردیف {0} مشخص نشده و یا به پایان ردیف ها رسیده اید * \n ", i);
                    break;
                }
                else
                {
                    var findInstru = (from b in Db.EXP_POST_LINE_INSTRU
                                      where b.EPOL_EPOL_ID == epolidd && b.CODE_DISP.ToUpper().Trim() == codeDisp.ToUpper().Trim() && b.EINS_EINS_ID == instruType
                                      //&& (b.PHAS_TYPE == "0" || (b.PHAS_TYPE == "1" && b.PHAS_STAT == "0"))
                                      orderby b.EPIU_ID ascending
                                      select new { b.EPIU_ID, b.EINS_EINS_ID }); //.FirstOrDefault();

                    if (findInstru.Count() > 0)
                    {

                        foreach (var item in findInstru)
                        {
                            for (int f = 3; f < cntColumn; f++)
                            {
                                if (string.IsNullOrEmpty(ds.Tables[0].Rows[6][f].ToString()))
                                {
                                    //msg = msg + string.Format("مشخصه ای در ستون {0} وجود ندارد - ", f);
                                    break;
                                }
                                else
                                {
                                    EXP_VALUE newInstruDetail = new EXP_VALUE();
                                    var attributeId = Convert.ToInt32(ds.Tables[0].Rows[6][f]);
                                    var cellValue = Convert.ToString(ds.Tables[0].Rows[i][f]);
                                    newInstruDetail.EPIU_EPIU_ID = item.EPIU_ID; //findInstru.EPIU_ID;
                                    newInstruDetail.EINS_EINS_ID = item.EINS_EINS_ID; //findInstru.EINS_EINS_ID;
                                    newInstruDetail.VALU_VALU = string.IsNullOrEmpty(cellValue) ? "0" : cellValue.Trim();
                                    newInstruDetail.XATT_XATT_ID = attributeId;

                                    var findInstruValueId = (from b in Db.EXP_VALUE where b.EPIU_EPIU_ID == item.EPIU_ID /* findInstru.EPIU_ID */ && b.XATT_XATT_ID == attributeId select b.VALU_ID).FirstOrDefault();
                                    if (findInstruValueId == 0)
                                    {
                                        Db.EXP_VALUE.Add(newInstruDetail);
                                    }
                                    else
                                    {
                                        var modelForEdit = Db.EXP_VALUE.Find(findInstruValueId);
                                        Db.Entry(modelForEdit).State = EntityState.Modified;
                                    }
                                }
                            }
                            msg = msg + string.Format("* مشخصات {0} ثبت شد *", codeDisp);
                            cntFound++;
                            Db.SaveChanges();
                        }
                    }
                    else
                    {
                        msg = msg + string.Format(" \n * کد دیسپاچینگی {0} پیدا نشد * \n ", codeDisp);
                        cntNotFound++;
                    }
                }

            }

            ViewBag.cntFound = cntFound;
            ViewBag.cntNotFound = cntNotFound;
            return msg;
        }

    }

}

