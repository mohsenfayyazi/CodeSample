using Asr.Cartable;
using Asr.Security;
using Equipment.Codes.Security;
using Equipment.DAL;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.Deffect
{
    [Authorize]
    public class DefecteController : DbController
    {
        //BandarEntities Db;
        //// Asr.Cartable.DbHelper crtb;
        //// AsrCartable cartable;
        ////سازنده کلاس
        //public DefecteController()
        //{
        //    //cntx = GlobalConst.DB();
        //    Db = this.DB();
        //}

        //protected override void Dispose(bool disposing)
        //{
        //    if (disposing)
        //        Db.Dispose();
        //    base.Dispose(disposing);
        //}

        /*
        این اکشن چک بین تاریخ اعلام دیفکت و تاریخ روز را دارد که از تاریخ روز تاریخ اعلام کوچکتر نباشد 
        */
        public bool Ajax_date_between(string start, string end)
        {
            bool check = true;

            if (!string.IsNullOrEmpty(start) && !string.IsNullOrEmpty(end))
            {
                string sql = string.Format("select HRO_LIBRD.DateDiff_U ('{0}','{1}') from dual ", start, end);

                string time = Db.Database.SqlQuery<string>(sql).FirstOrDefault();
                var val = time.Split('/');
                string d = val[2].ToString();
                string m = val[1].ToString();
                string y = val[0].ToString();

                int day = Convert.ToInt16(d);
                int month = Convert.ToInt16(m);
                int year = Convert.ToInt16(y);

                if (year > 0 || month > 3 || (month == 3 && day > 0))
                {
                    check = false;
                };
            }



            return (check);
        }

        public string Ajax_GetFollowDefect(decimal? eedo_id, int? row)
        {
            List<string> defect = new List<string>();
            string str = string.Empty;
            if (row == null) { row = 0; }
            row = row + 1;
            var query = (from b in Db.EXP_EXPI_DOC
                         join c in Db.EXP_RELATION_DOC on b.EEDO_ID equals c.EEDO_EEDO_ID
                         where c.EEDO_EEDO_ID_R == eedo_id
                         select new { b.EEDO_DATE, b.DOC_NUMB, b.EEDO_ID }).ToList();
            str = query.Select(xx => xx.DOC_NUMB).FirstOrDefault() + "-" + query.Select(xx => xx.EEDO_DATE).FirstOrDefault();

            //if (query.Any())
            //{

            //    defect.Add ( row.ToString() + "-" + str + " "+ this.Ajax_GetFollowDefect(query.Select(xx => xx.EEDO_ID).FirstOrDefault(), 1));
            //    str = string.Join("<br />", defect.ToArray());

            //}
            //str = string.Join("<br />", defect.ToArray());
            return (str);
        }
        public string Ajax_GetMainDefect(decimal? eedo_id)
        {
            string str = string.Empty;
            var query = (from b in Db.EXP_EXPI_DOC
                         join c in Db.EXP_RELATION_DOC on b.EEDO_ID equals c.EEDO_EEDO_ID_R
                         where c.EEDO_EEDO_ID == eedo_id
                         select new { b.EEDO_DATE, b.DOC_NUMB, b.EEDO_ID }).ToList();
            str = query.Select(xx => xx.DOC_NUMB).FirstOrDefault() + "-" + query.Select(xx => xx.EEDO_DATE).FirstOrDefault();
            if (query.Any())
            {
                str = str + " " + this.Ajax_GetMainDefect(query.Select(xx => xx.EEDO_ID).FirstOrDefault());
            }
            return (str);
        }
        public string Ajax_CheckEndDate(decimal? eedo_id)
        {
            string END_DATE = string.Empty;
            return END_DATE = Db.EXP_EXPI_DOC.Where(xx => xx.EEDO_ID == eedo_id).Select(xx => xx.END_DATE).FirstOrDefault();
        }

        public string Ajax_check_date(int? eedo_id)
        {


            string sql = string.Format("select EIDR_VALUE from EXP_EITEM_DOC_VALUE where EEDO_EEDO_ID={0}  and EITY_EITY_ID=18", eedo_id);

            string date = Db.Database.SqlQuery<string>(sql).FirstOrDefault();

            return (date);
        }
        //public bool Ajax_Update_Archive(int? eedo_id)
        //{
        //    decimal? EDO_ID_R = Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == eedo_id).Select(xx => xx.EEDO_EEDO_ID_R).FirstOrDefault();

        //    decimal Not_Id = return_noteid(EDO_ID_R);
        //    gotoarchive(Not_Id);
        //    Not_Id = return_noteid(Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == EDO_ID_R).Select(xx => xx.EEDO_EEDO_ID_R).FirstOrDefault());
        //    gotoarchive(Not_Id);


        //    EDO_ID_R = Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID_R == eedo_id).Select(xx => xx.EEDO_EEDO_ID).FirstOrDefault();

        //    Not_Id = return_noteid(EDO_ID_R);
        //    gotoarchive(Not_Id);
        //    Not_Id = return_noteid(Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID_R == EDO_ID_R).Select(xx => xx.EEDO_EEDO_ID).FirstOrDefault());
        //    gotoarchive(Not_Id);


        //    return (true);
        //}
        public JsonResult checkCurrentDate(string date)
        {
            try
            {
                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate = dateTime.GetMiladiDateTime(date);
                DateTime currentDate = DateTime.Now;
                if (miladiDate >= currentDate)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        /*
        این اکشن چک بین تاریخ اعلام برای اجرا و تاریخ دیفکت (اعلام) را بر عهده دارد 
        */
        public ActionResult EXP_REPORT_AMARI_DETAILS(int? id)
        {
            ViewData["GROP_ID"] = id;
            return View();
        }
        public ActionResult EXP_REPORT_AMARI_WORKER(int? id)
        {
            ViewData["GROP_ID"] = id;
            return View();
        }
        public ActionResult Search_Meeting_Defect()
        {

            return View();
        }
        public ActionResult Show_Defect_Meeting(int? id)
        {
            ViewData["ANPT_ID"] = id;
            return View();
        }

        public ActionResult Worksheet(decimal id)
        {
            ViewData["EEDO_ID"] = id;
            return View();
        }
        public JsonResult checkElamDate(string elamDate, string elamExecuteDate)
        {
            try
            {
                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate1 = dateTime.GetMiladiDateTime(elamDate);
                DateTime miladiDate2 = dateTime.GetMiladiDateTime(elamExecuteDate);
                if (miladiDate2 <= miladiDate1)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }
        /*براساس پارامترهای که به این اکشن پاس داده میشود نوع بی ها که در ان سال و مربوط به ان پست را می دهد */
        public ActionResult Getbay()
        {


            var query = from b in Db.EXP_TYPE_BAY select new { b.ETBY_ID, b.ETBY_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public JsonResult CheckFollow(decimal EEDO_ID)
        {

            if (Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID_R == EEDO_ID).Any())
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شما قادر به انتخاب دیفکت هایی که دیفکت پیرو دارند نیستید" }.ToJson();
            }
            else
            {
                return new ServerMessages(ServerOprationType.Success) { Message = "دیفکت با موفقیت انتخاب شد" }.ToJson();
            }
            //try
            //{
            //    AsrWorkFlowProcess fp = new AsrWorkFlowProcess(notId);
            //    // fp.SetKeyValue("MY_FLAG", "1");
            //    if (fp.IsOpen)
            //    {
            //        if (string.IsNullOrEmpty(msgbody))
            //        {
            //            fp.Approve(new string[] { userName });
            //        }
            //        else
            //        {


            //            fp.Approve(new string[] { userName }, msgbody);
            //        }
            //        // NotificationHub hub = new NotificationHub();
            //        //  hub.SendNotify(HttpContext.User.Identity.Name, userName, fp.MsgTitle);
            //    }
            //    return new ServerMessages(ServerOprationType.Success) { Message = "Approve" + Convert.ToString(notId) }.ToJson();
            //}
            //catch (Exception)
            //{
            //    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "Approve Failed =>" + Convert.ToString(notId) }.ToJson();
            //}
        }
        public ActionResult SearchUser([DataSourceRequest] DataSourceRequest request, string fd)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper();



            //var query = (
            //            // from a in Db.PAY_PERSONEL
            //             from b in Db.SEC_USERS.AsEnumerable() //on a.EMP_NUMB equals b.PRSN_EMP_NUMB
            //             where b.USER_NAME != null  //&& (b.FAML_NAME.ToUpper().Contains(filter) || b.FIRS_NAME.ToUpper().Contains(filter) || filterDisable)
            //             //orderby a.FAML_NAME
            //             select new
            //             {

            //                // a.FAML_NAME,
            //               //  a.FIRS_NAME,
            //                 b.PRSN_EMP_NUMB,
            //                 ORCL_NAME = b.ORCL_NAME,
            //                 FIRS_NAME = b.FIRS_NAME.HasValue() ? b.FIRS_NAME : b.PAY_PERSONEL.FIRS_NAME,
            //                 FAML_NAME = b.FAML_NAME.HasValue() ? b.FAML_NAME : b.PAY_PERSONEL.FAML_NAME

            //             }).ToList();

            //var query = (from c in Db.SEC_USERS.AsEnumerable()


            //             where c.USER_NAME != null && (c.FAML_NAME.ToUpper().Contains(filter) || c.FIRS_NAME.ToUpper().Contains(filter) || filterDisable)
            //               select new
            //               {
            //                   c.ROW_NO,
            //                   c.CRET_BY,
            //                   c.MDFY_BY,
            //                   c.USER_NAME,
            //                   c.USER_PASS,
            //                   c.USER_STATE,
            //                   c.USER_TYPE,
            //                   c.SYS_TYPE,
            //                   c.ORCL_NAME,
            //                   c.ORCL_PASS,
            //                   // FIRS_NAME = c.PAY_PERSONEL.FIRS_NAME.HasValue() ? c.PAY_PERSONEL.FIRS_NAME : c.FIRS_NAME,
            //                   //  FAML_NAME = c.PAY_PERSONEL.FAML_NAME.HasValue() ? c.PAY_PERSONEL.FAML_NAME : c.FAML_NAME
            //                   FIRS_NAME = c.FIRS_NAME!="" ? c.FIRS_NAME : c.PAY_PERSONEL.FIRS_NAME,
            //                   FAML_NAME = c.FAML_NAME!="" ? c.FAML_NAME : c.PAY_PERSONEL.FAML_NAME
            //               }).ToList();
            var query = (
                         from a in Db.PAY_PERSONEL
                         join b in Db.SEC_USERS on a.EMP_NUMB equals b.PRSN_EMP_NUMB
                         where b.USER_STATE == "1" && a.ASTA_CODE == "7" && b.USER_NAME != null && (a.FAML_NAME.ToUpper().Contains(filter) || a.FIRS_NAME.ToUpper().Contains(filter) || filterDisable)
                         orderby a.FAML_NAME
                         select new
                         {

                             FAML_NAME = a.FAML_NAME,
                             FIRS_NAME = a.FIRS_NAME,
                             ROW_NO = b.ROW_NO,
                             ORCL_NAME = b.ORCL_NAME,
                             EMP_NUMBER = b.PRSN_EMP_NUMB

                         }).Union
                  //if (!query.Any())
                  // {
                  (
                from a in Db.SEC_USERS
                    //.Include("SEC_USER_TYPE_POST") 
                where a.USER_STATE == "1" && a.PRSN_EMP_NUMB == null && (a.FAML_NAME.ToUpper().Contains(filter) || a.FIRS_NAME.ToUpper().Contains(filter) || filterDisable)
                orderby a.FAML_NAME
                select new
                {

                    FAML_NAME = a.FAML_NAME,
                    FIRS_NAME = a.FIRS_NAME,
                    ROW_NO = a.ROW_NO,
                    ORCL_NAME = a.ORCL_NAME,
                    EMP_NUMBER = a.PRSN_EMP_NUMB
                }).ToList();

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }

        public ActionResult SearchOutUser([DataSourceRequest] DataSourceRequest request, string fd)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper();



            var query = (
                         from a in Db.EXP_OUT_PERSONEL

                         where (a.OUTP_LNAME.ToUpper().Contains(filter) || a.OUTP_FNAME.ToUpper().Contains(filter) || filterDisable)
                         orderby a.OUTP_LNAME
                         select new
                         {

                             a.OUTP_LNAME,
                             a.OUTP_FNAME,
                             a.OUTP_ID,


                         }).ToList();

            //var  query= (
            //              from a in Db.SEC_USERS

            //              where (a.FAML_NAME.ToUpper().Contains(filter) || a.FIRS_NAME.ToUpper().Contains(filter) || filterDisable)
            //              && a.PRSN_EMP_NUMB==null
            //              orderby a.FAML_NAME
            //              select new
            //              {

            //                  a.FAML_NAME,
            //                  a.FIRS_NAME,
            //                  a.ROW_NO,
            //                  a.ORCL_NAME


            //              }).ToList();


            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }



        public decimal return_noteid(decimal? id, string Recip_Rol)
        {
            string item_key = "FLW_DEFE.PFLW_DEFC^" + id.ToString();//, name = "m_fayyazi";
            string sql = string.Format("SELECT not_id  FROM WF_NOTE_V where item_key='{0}' and STAT='OPEN' and (RECIPIENT_ROLE='{1}' or '{1}' is null )  ", item_key, Recip_Rol == null ? Recip_Rol = "" : Recip_Rol.ToUpper());
            //and stat='OPEN'

            decimal not_id = Db.Database.SqlQuery<decimal>(sql).FirstOrDefault();
            return not_id;
        }


        public void gotoarchive(int? NotId)
        {
            if (NotId != null)
                Db.Database.ExecuteSqlCommand(string.Format("update WF_NOTIFICATIONS set MESSAGE_NAME='MARCHVE' ,RECIPIENT_ROLE='ARCHIVE' ,ORIGINAL_RECIPIENT='ARCHIVE' where NOTIFICATION_ID={0} and STATUS='OPEN'", NotId));
        }

        public string GetItemDesc(int? CHTI_CHTI_ID)
        {
            string ItemDesc = Db.CHK_ITEM_TEMPLATE.Where(xx => xx.CHTI_STATUS == 1 && xx.CHK_CHECK_LIST_TEMPLATE.CHLT_STAT == 1 && xx.CHTI_ID == CHTI_CHTI_ID).Select(xx => xx.CHTI_DESC).FirstOrDefault();
            return ItemDesc;

        }
        public string GetFormDesc(int? CHTI_CHTI_ID)
        {
            string ItemDesc = Db.CHK_CHECK_LIST_TEMPLATE.Where(xx => xx.CHLT_STAT == 1 && xx.CHK_ITEM_TEMPLATE.Where(yy => yy.CHTI_ID == CHTI_CHTI_ID && yy.CHTI_STATUS == 1).Any()).Select(xx => xx.CHLT_TITL).FirstOrDefault();
            return ItemDesc;

        }

        public ActionResult SearchChecklistItemResult([DataSourceRequest] DataSourceRequest request, string EINS_DESC, int? EPOL_ID, int? EANA_ROW,
            string DESC, string DOC_NUMB, string priority, string EEDO_DATE, string MESSAGE_NAME, string CONF_TYPE, int? EDCH_TYPE, decimal EDCH_ID)
        {

            string today = Db.EXP_DAILY_CHECKLIST_HEAD.Where(xx => xx.EDCH_ID == EDCH_ID).Select(xx => xx.EDCH_DATE).FirstOrDefault();


            //  int CHLT_TYPE = EDCH_TYPE == 1 ? 1 : 0;
            int RowNumber = 1;
            var MainDefect = from a in Db.EXP_WFEX_V
                             where a.MESSAGE_NAME != "MARCHVE" && a.STAT == "OPEN" && a.MESSAGE_TYPE == "FLW_DEFE"
                                 && a.OUT_FUNC == "0" && a.EPOL_EPOL_ID == EPOL_ID && a.EITY_EITY_ID == 8 && a.ETDO_ETDO_ID == 2
                             select a.EEDO_ID;
            var FollowDefect = from a in Db.EXP_WFEX_V
                               join b in Db.EXP_RELATION_DOC on a.EEDO_ID equals b.EEDO_EEDO_ID
                               where a.MESSAGE_NAME != "MARCHVE" && a.STAT == "OPEN" && a.MESSAGE_TYPE == "FLW_DEFE"
                                   && a.OUT_FUNC == "1" && a.EPOL_EPOL_ID == EPOL_ID && a.EITY_EITY_ID == 8 && a.ETDO_ETDO_ID == 2
                               //  && MainDefect.Contains((decimal)b.EEDO_EEDO_ID_R)
                               select a.EEDO_ID;

            var query = (from a in Db.EXP_WFEX_V

                         where
                            //(

                            a.MESSAGE_NAME != "MARCHVE" && a.STAT == "OPEN" && a.MESSAGE_TYPE == "FLW_DEFE"
                            && (a.CONF_TYPE == CONF_TYPE || a.CONF_TYPE == null)
                            //&& (a.MESSAGE_NAME == MESSAGE_NAME || MESSAGE_NAME == null) 
                            && a.ETDO_ETDO_ID == 2
                            &&
                            //(
                            (a.EPOL_EPOL_ID == EPOL_ID || EPOL_ID == null)
                           //&& a.DOC_NUMB.ToUpper().Contains(DOC_NUMB)
                           //&& a.CODE_NAME.ToUpper().Contains(EINS_DESC) && a.EERR_DESC.ToUpper().Contains(DESC)
                           // && a.EEDO_DATE.ToUpper().Contains(EEDO_DATE)))
                           && (a.EEDO_DATE.CompareTo(today) < 0 //|| a.EEDO_DATE.CompareTo(today) == 0
                           )
                         //&& a.EFUN_ID!=2141
                         select new
                         {

                             EPOL_NAME = a.EPOL_NAME,
                             EINS_EINS_ID = a.EINS_EINS_ID,
                             a.CODE_DISP,
                             a.EUNL_EUNL_ID,
                             a.EARD_EARD_ID,
                             a.OUIN_TYPE,
                             a.EPIU_TYPE,
                             DEFE_CODE_NAME = a.CODE_NAME,
                             a.ETEX_ETEX_ID,
                             a.PHAS_TYPE,
                             a.PHAS_STAT,
                             a.SERN_NO,
                             a.DOC_NUMB,
                             a.EEDO_DESC,
                             a.FIRS_DATE,
                             a.FIRS_TIME,
                             a.EERR_DESC,
                             EERR_ID = a.EERR_EERR_ID,
                             a.EEDO_ID,
                             a.EEDO_DATE,
                             a.EEDO_TIME,
                             EERR_DESC2 = a.EERR_DESC2,
                             a.MESSAGE_NAME,
                             // CHTI_CHTI_ID = d.EXP_DAILY_CHECKLIST_VAR.CHTI_CHTI_ID,
                             BEGIN_DATE = a.BEGIN_DATE,
                             //  FANI_DATE = b.EXP_EITEM_DOC_VALUE.Select(xx => xx.EIDR_VALUE).FirstOrDefault(),
                             //  Item = d.EXP_DAILY_CHECKLIST_VAR.CHK_ITEM_TEMPLATE.CHTI_DESC,
                             //  Form = b.EXP_CHECKLIST_EXPI.Select(xx=>xx.EXP_DAILY_CHECKLIST_VAR.CHK_ITEM_TEMPLATE.CHK_CHECK_LIST_TEMPLATE.CHLT_TITL).FirstOrDefault(),
                             //  EPIU_ID = d.EXP_DAILY_CHECKLIST_VAR.EPIU_EPIU_ID,
                             //  CHTI_STATUS = d.EXP_DAILY_CHECKLIST_VAR.CHK_ITEM_TEMPLATE.CHTI_STATUS,
                             //  CHLT_STAT = d.EXP_DAILY_CHECKLIST_VAR.CHK_ITEM_TEMPLATE.CHK_CHECK_LIST_TEMPLATE.CHLT_STAT,
                             a.CONF_TYPE,
                             // HEAD_EDCH_TYPE = d.EXP_DAILY_CHECKLIST_VAR.EXP_DAILY_CHECKLIST_HEAD.EDCH_TYPE
                             //Row = Rank.ToString()
                             //i = i+1
                             // RowNumber = GetRowNumber(RowNumber),
                         });
            //.AsEnumerable().Select((x, index) => new { index,x.Id,x.FirstName});
            var query2 = query

//.Where(xx => (xx.CHTI_STATUS == 1 || xx.CHTI_CHTI_ID == null) && (xx.CHLT_STAT == 1 || xx.CHTI_CHTI_ID == null))
//Select((r, i) => new { Row = r, Index = i })
.AsEnumerable().Select((a, index) => new
{

    a.EPOL_NAME,
    index,
    //a.RowNumber,
    a.EINS_EINS_ID,
    a.CODE_DISP,
    a.EUNL_EUNL_ID,
    a.EARD_EARD_ID,
    a.OUIN_TYPE,
    a.EPIU_TYPE,
    // a.CODE_NAME ,
    a.ETEX_ETEX_ID,
    a.PHAS_TYPE,
    a.PHAS_STAT,
    a.SERN_NO,
    a.DOC_NUMB,
    a.EEDO_DESC,
    a.FIRS_DATE,
    a.FIRS_TIME,
    a.EERR_DESC,
    a.EERR_ID,
    a.EEDO_ID,
    a.EEDO_DATE,
    a.EEDO_TIME,
    a.EERR_DESC2,
    a.MESSAGE_NAME,
    // a.CHTI_CHTI_ID ,
    a.BEGIN_DATE,
    // a.FANI_DATE ,
    //Item = a.Item ,//GetItemDesc(a.CHTI_CHTI_ID),
    // Form = a.Form,//GetFormDesc(a.CHTI_CHTI_ID)
    a.DEFE_CODE_NAME,
    // a.EPIU_ID,
    // a.CHTI_STATUS,
    // a.CHLT_STAT,
    a.CONF_TYPE,
    // a.HEAD_EDCH_TYPE
    FollowDefect = Ajax_GetFollowDefect(a.EEDO_ID, 0),
    FollowDefect2 = Ajax_GetFollowDefect(GetFollowId(a.EEDO_ID), 0),
    FollowDefect3 = Ajax_GetFollowDefect(GetFollowId(GetFollowId(a.EEDO_ID)), 0),
    CheckItem = CheckItem(a.EEDO_ID, EDCH_ID)




}).ToList().Distinct().OrderBy(xx => xx.EEDO_ID)
            .GroupBy(d => new { d.EERR_DESC, d.EERR_DESC2, d.DEFE_CODE_NAME }).Select(xx => xx.FirstOrDefault())
            ;

            return Json(query2.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }
        public int? GetRowNumber(int RowNumber)
        {
            return RowNumber++;
        }
        public int? CheckItem(decimal? EEDO_ID, decimal? EDCH_EDCH_ID)
        {
            //var Query=Db.EXP_CHECKLIST_EXPI.Where(xx=>xx.EEDO_EEDO_ID==EEDO_ID && xx.EXP_DAILY_CHECKLIST_VAR.EDCH_EDCH_ID==EDCH_EDCH_ID).Any()
            int? check = 0;
            var Query = from b in Db.EXP_CHECKLIST_EXPI
                        join c in Db.EXP_DAILY_CHECKLIST_VAR on b.EDCV_EDCV_ID equals c.EDCV_ID
                        where b.EEDO_EEDO_ID == EEDO_ID && c.EDCH_EDCH_ID == EDCH_EDCH_ID
                        select new { b.CHEX_ID };
            if (!Query.Any())
            {

                check = -1;
                //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("آیتم ثبت شده است ") }.ToJson();
            }
            else
            {
                check = 0;
                //return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("اطلاعات ثبت نشده است ") }.ToJson();

            }

            return check;
        }
        public ActionResult GetDefect([DataSourceRequest] DataSourceRequest request, decimal EEDO_ID)
        {

            var query = (from a in Db.EXP_WFEX_V
                             //join b in Db.EXP_EXPI_DOC on a.EEDO_ID equals b.EEDO_ID
                             //join c in Db.EXP_EITEM_DOC_VALUE on b.EEDO_ID equals c.EEDO_EEDO_ID

                         where (
                         a.EEDO_ID == EEDO_ID && a.MESSAGE_TYPE == "FLW_DEFE" && a.STAT == "OPEN" && a.EITY_EITY_ID == 8 && a.ETDO_ETDO_ID == 2)
                         orderby a.DOC_NUMB descending
                         select new
                         {
                             EPOL_NAME = a.EPOL_NAME,
                             EPIU_ID = a.EPIU_ID,
                             EINS_EINS_ID = a.EINS_EINS_ID,
                             a.CODE_DISP,
                             a.EUNL_EUNL_ID,
                             a.EARD_EARD_ID,
                             a.OUIN_TYPE,
                             a.EPIU_TYPE,
                             CODE_NAME = a.CODE_NAME,
                             a.ETEX_ETEX_ID,
                             a.PHAS_TYPE,
                             a.PHAS_STAT,
                             a.SERN_NO,
                             a.DOC_NUMB,
                             a.EEDO_DESC,
                             a.FIRS_DATE,
                             a.FIRS_TIME,
                             a.EERR_DESC,
                             EERR_ID = a.EERR_EERR_ID,
                             a.EEDO_ID,
                             a.EEDO_DATE,
                             a.EEDO_TIME,
                             EERR_DESC2 = a.EERR_DESC,
                             a.MESSAGE_NAME,
                             //                             
                             BEGIN_DATE = a.BEGIN_DATE,
                             // FANI_DATE = b.EXP_EITEM_DOC_VALUE.Select(xx => xx.EIDR_VALUE).FirstOrDefault(),
                             //  b.EXP_EITEM_DOC_VALUE.Where(xx=>xx.EITY_EITY_ID==18).Select(xx=>xx.EIDR_VALUE).FirstOrDefault():""
                             EANA_DESC = a.EANA_DESC,
                             OUT_FUNC = a.OUT_FUNC == "0" ? "اصلی" : "پیرو",

                             // EIDR_VALUE = c.EIDR_VALUE


                         }).ToList().Distinct();

            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }

        [NonAction]
        private string GetSubItems(decimal parentKey)
        {
            if (parentKey > 0)
            {
                var query = from b in Db.EXP_EXPI_DOC where b.EEDO_ID == parentKey select new { b.DOC_NUMB };
                if (query.Any())
                {
                    return query.Select(xx => xx.DOC_NUMB).FirstOrDefault();


                }
            }



            return string.Empty;

        }

        public string GetLastStatus(decimal EEDO_ID)
        {
            string MESSAGE_NAME = Db.EXP_WFEX_V.Where(xx => xx.EEDO_ID == EEDO_ID && xx.STAT == "OPEN" && xx.MESSAGE_TYPE == "FLW_DEFE" && xx.EITY_EITY_ID == 8).Select(xx => xx.MESSAGE_NAME).FirstOrDefault();
            return MESSAGE_NAME;
        }
        public string GetRecipient(decimal EEDO_ID, string MESSAGE_NAME)
        {
            string RECIPIENT_ROLE = Db.EXP_WFEX_V.Where(xx => xx.EEDO_ID == EEDO_ID && xx.MESSAGE_TYPE == "FLW_DEFE" && xx.EITY_EITY_ID == 8 && xx.MESSAGE_NAME == MESSAGE_NAME).Select(xx => xx.RECIPIENT_ROLE).FirstOrDefault();
            string sql = string.Format("select  nvl(  b.firs_name , a.firs_name ) || ' '|| nvl(  b.faml_name , a.faml_name ) faml_name    from sec_users a , pay_personel b where  a.prsn_emp_numb = b.emp_numb(+) and upper(a.orcl_name)='{0}' ", RECIPIENT_ROLE);


            RECIPIENT_ROLE = Db.Database.SqlQuery<string>(sql).FirstOrDefault();


            return RECIPIENT_ROLE;

        }
        public string GetMessageBody(decimal EEDO_ID, string MESSAGE_NAME)
        {
            string sql = string.Format("select  message_body    from EXP_WFEX_V where EEDO_ID ='{0}' and  MESSAGE_TYPE ='FLW_DEFE' and EITY_EITY_ID=8 and MESSAGE_NAME='{1}'", EEDO_ID, MESSAGE_NAME);


            string MessageBody = Db.Database.SqlQuery<string>(sql).FirstOrDefault();


            return MessageBody;

        }
        public string GetUnitLevel(int? EUNL_ID)
        {
            string EUNL_DESC = Db.EXP_UNIT_LEVEL.Where(xx => xx.EUNL_ID == EUNL_ID).Select(xx => xx.EUNL_DESC).FirstOrDefault();
            return EUNL_DESC;
        }
        public decimal GetFollowId(decimal EEDO_ID)
        {
            decimal EEDO_EEDO_ID = Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID_R == EEDO_ID).Select(xx => xx.EEDO_EEDO_ID).FirstOrDefault();
            return EEDO_EEDO_ID;
        }

        public void updateSuplDoc(decimal EEDO_ID, string username)
        {

            var objecttemp = new EXP_SUPL_DOC();
            var q = Db.EXP_SUPL_DOC.Where(xx => xx.EEDO_EEDO_ID == EEDO_ID);
            int ESUD_ID = q.Select(xx => xx.ESUD_ID).FirstOrDefault();
            if (q.Any())
            {
                var query = Db.EXP_SUPL_DOC.Find(ESUD_ID);
                query.EURP_EURP_ID = Db.SEC_USER_TYPE_POST.Where(xx => xx.SEC_USERS.ORCL_NAME == username && xx.EURP_TYPE == 1 && xx.EURP_ACTV == 1).Select(xx => xx.EURP_ID).FirstOrDefault();
                Db.SaveChanges();
            }
            else
            {
                objecttemp.EEDO_EEDO_ID = EEDO_ID;
                objecttemp.POSI_TYEP = "1";
                objecttemp.EURP_EURP_ID = Db.SEC_USER_TYPE_POST.Where(xx => xx.SEC_USERS.ORCL_NAME == username && xx.EURP_TYPE == 1 && xx.EURP_ACTV == 1).Select(xx => xx.EURP_ID).FirstOrDefault();
                Db.EXP_SUPL_DOC.Add(objecttemp);
                Db.SaveChanges();


            }
        }
        public ActionResult SearchResult([DataSourceRequest] DataSourceRequest request, string EINS_DESC, string RECIPIENT_ROLE,
            int? EPOL_ID, string ORGA_CODE, int? EANA_ROW, string DESC, string DOC_NUMB, string OUT_FUNC,
            string priority, string EEDO_DATE, string MESSAGE_NAME, string CONF_TYPE, string SEND_DATE, string EEND_DATE, string SEEDO_DATE, string EEEDO_DATE,
            string MCREATOR, string MMESSAGCENT, string MFANI, string MWORKER, string MMANEGPOST, string MARCHVE, string MEETING, string ALL,
            string EINS_EINS_ID, string EERR_EERR_ID, string STAT, int? EINS_GROUP, int? SCSU_ROW_NO, int? Unit_Level, string CartableStatus, string Priority)
        {
            decimal EEDO_ID_R = 0;
            MCREATOR = MCREATOR == null ? MCREATOR = null : MCREATOR;
            MMESSAGCENT = MMESSAGCENT == null ? MMESSAGCENT = "" : MMESSAGCENT;
            MFANI = MFANI == null ? MFANI = "" : MFANI;
            MWORKER = MWORKER == null ? MWORKER = "" : MWORKER;
            MMANEGPOST = MMANEGPOST == null ? MMANEGPOST = "" : MMANEGPOST;
            MARCHVE = MARCHVE == null ? MARCHVE = null : MARCHVE;
            MEETING = MEETING == null ? MEETING = "" : MEETING;
            ALL = ALL == null ? ALL = "" : ALL;
            if (!string.IsNullOrEmpty(CartableStatus) || string.IsNullOrEmpty(STAT))
            {

                STAT = "OPEN";
            }

            string[] stringArray = { MCREATOR, MMESSAGCENT, MFANI, MWORKER, MMANEGPOST, MARCHVE, MEETING };
            if (!string.IsNullOrEmpty(ALL))
            {
                stringArray[0] = "MCREATOR";
                stringArray[1] = "MMESSAGCENT";
                stringArray[2] = "MFANI";
                stringArray[3] = "MWORKER";
                stringArray[4] = "MMANEGPOST";
                stringArray[5] = "MARCHVE";
                stringArray[6] = "MMEETING";


            };
            if (string.IsNullOrEmpty(RECIPIENT_ROLE) && SCSU_ROW_NO != null)
            {
                RECIPIENT_ROLE = Db.SEC_USERS.Where(xx => xx.ROW_NO == SCSU_ROW_NO).Select(xx => xx.ORCL_NAME).FirstOrDefault();
            }

            stringArray = stringArray.Where(w => !string.IsNullOrEmpty(w)).ToArray();

            List<int> instrumentId = new List<int>();
            List<int> instrumentDetailsId = new List<int>();

            var userquery = from a in Db.SEC_USERS
                            join b in Db.SEC_USER_TYPE_POST on a.ROW_NO equals b.SCSU_ROW_NO
                            where (b.EANA_EANA_ROW == EANA_ROW || EANA_ROW == null) && b.EURP_TYPE == 0 && b.EURP_ACTV == 1
                            select a.ORCL_NAME;
            var query = (from a in Db.EXP_WFEX_V


                         where (a.MESSAGE_TYPE == "FLW_DEFE" && (a.EITY_EITY_ID == 8)
                         && (a.ORGA_CODE == ORGA_CODE || ORGA_CODE == null)

                         && stringArray.Contains(a.MESSAGE_NAME)

                         && a.ETDO_ETDO_ID == 2 && ((a.EPOL_EPOL_ID == EPOL_ID || EPOL_ID == null)
                         && a.DOC_NUMB.ToUpper().Contains(DOC_NUMB)

                          && a.EERR_DESC2.Contains(DESC)))
                         && (a.EANA_EANA_ROW == EANA_ROW || EANA_ROW == null)
                         && (a.ETYI_ETYI_ID == EINS_GROUP || EINS_GROUP == null)
                         && (a.OUT_FUNC == OUT_FUNC || OUT_FUNC == null)
                         && (a.RECIPIENT_ROLE.ToUpper() == RECIPIENT_ROLE.ToUpper() || RECIPIENT_ROLE == null)
                         && (a.END_DATE == SEND_DATE || a.END_DATE == EEND_DATE || ((a.END_DATE.CompareTo(SEND_DATE) > 0 || SEND_DATE == null)
                         && (a.END_DATE.CompareTo(EEND_DATE) < 0 || EEND_DATE == null)

                         && ((a.EEDO_DATE.CompareTo(SEEDO_DATE) >= 0 || SEEDO_DATE == null) && (a.EEDO_DATE.CompareTo(EEEDO_DATE) <= 0 || EEEDO_DATE == null))
                         && (a.CODE_DISP.Contains(EINS_DESC) || EINS_DESC == null)
                         && (a.EUNL_EUNL_ID == Unit_Level || Unit_Level == null)
                         //&& (a.EIDR_VALUE == Priority || Priority == " ")
                         //&& (a.MESSAGE_NAME == CartableStatus || CartableStatus == null)

                         )

                         && a.EPOL_EPOL_ID != 1373
                     )

                         select new
                         {
                             a.ITEM_KEY,
                             EPOL_NAME = a.EPOL_NAME,
                             EPIU_ID = a.EPIU_ID,
                             EINS_EINS_ID = a.EINS_EINS_ID,
                             a.CODE_DISP,
                             a.EUNL_EUNL_ID,
                             a.EARD_EARD_ID,
                             a.OUIN_TYPE,
                             a.EPIU_TYPE,
                             CODE_NAME = a.CODE_NAME,
                             a.ETEX_ETEX_ID,
                             a.PHAS_TYPE,
                             a.PHAS_STAT,
                             a.SERN_NO,
                             a.DOC_NUMB,
                             a.EEDO_DESC,
                             a.FIRS_DATE,
                             a.FIRS_TIME,
                             a.EERR_DESC,
                             EERR_ID = a.EERR_EERR_ID,
                             a.EEDO_ID,
                             a.EEDO_DATE,
                             a.EEDO_TIME,
                             EERR_DESC2 = a.EERR_DESC2,
                             // BEGIN_DATE = a.BEGIN_DATE,
                             FANI_DATE = a.EIDR_VALUE, //b.EXP_EITEM_DOC_VALUE.Select(xx => xx.EIDR_VALUE).FirstOrDefault(),
                             EANA_DESC = a.EANA_DESC,//b.EXP_ANALYZOR_EVENT.EANA_DESC,
                             OUT_FUNC = a.OUT_FUNC == "0" ? "اصلی" : "پیرو",
                             a.END_DATE,
                             EIDR_VALUE = a.EIDR_VALUE,
                             a.CONF_TYPE,
                             a.STAT,
                             a.EITY_EITY_ID,



                         }).ToList().Distinct();
            //if (!string.IsNullOrEmpty(Priority) && Priority!="--")
            //{

            //    query = query.Where(xx => xx.EIDR_VALUE==Priority);
            //}

            if (!string.IsNullOrEmpty(EINS_EINS_ID))
            {
                instrumentId = EINS_EINS_ID.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                query = query.Where(xx => instrumentId.Contains(xx.EINS_EINS_ID.GetValueOrDefault()));
            }
            if (!string.IsNullOrEmpty(EERR_EERR_ID))
            {
                instrumentDetailsId = EERR_EERR_ID.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                query = query.Where(xx => instrumentDetailsId.Contains(xx.EERR_ID.GetValueOrDefault()));
            }

            if (!string.IsNullOrEmpty(RECIPIENT_ROLE)
                && Db.SEC_USER_TYPE_POST.Where(xx => xx.EURP_TYPE == 0 && xx.SEC_USERS.ORCL_NAME == RECIPIENT_ROLE && xx.EURP_ACTV == 1).Any()
)
            {
                string sql = string.Format("select distinct a.* from EXP_WFEX_V a, EXP_WFEX_V b ,SEC_USER_TYPE_POST c,  sec_users d where  a.MESSAGE_TYPE = 'FLW_DEFE' and upper(a.RECIPIENT_ROLE)='{0}' and a.ITEM_KEY = b.ITEM_KEY and( b.MESSAGE_NAME='MMANEGPOST' or b.MESSAGE_NAME='MARCHVE' or  b.MESSAGE_NAME='MWORKER' or b.MESSAGE_NAME ='MFANI')" +
                     " and b.STAT='OPEN'  and a.EANA_EANA_ROW=c.EANA_EANA_ROW and c.SCSU_ROW_NO=d.ROW_NO and d.ORCL_NAME=a.RECIPIENT_ROLE and  a.EITY_EITY_ID=8 and a.EITY_EITY_ID=b.EITY_EITY_ID  " +
                     " and a.item_key not in  (select item_key from EXP_WFEX_V where item_key=a.ITEM_KEY and EITY_EITY_ID=8 and MESSAGE_NAME='MWORKER' and  RECIPIENT_ROLE !='{0}' and not_id>a.not_id ) ", RECIPIENT_ROLE.ToUpper());
                var queryselect = Db.Database.SqlQuery<EXP_WFEX_V>
                    (sql)
                    .Select(x => new
                    {
                        x.ITEM_KEY
                    }).ToList();
                query = from q in query where queryselect.Select(xx => xx.ITEM_KEY).Contains(q.ITEM_KEY) select q;
            }
            else if (!string.IsNullOrEmpty(RECIPIENT_ROLE))
            {
                string sql = string.Format("select distinct a.* from EXP_WFEX_V a, EXP_WFEX_V b ,SEC_USER_TYPE_POST c,  sec_users d where  a.MESSAGE_TYPE = 'FLW_DEFE' and upper(a.RECIPIENT_ROLE)='{0}' and a.ITEM_KEY = b.ITEM_KEY and( b.MESSAGE_NAME='MMANEGPOST' or b.MESSAGE_NAME='MARCHVE' or  b.MESSAGE_NAME='MWORKER')" +
                    " and b.STAT='OPEN'  and a.EANA_EANA_ROW=c.EANA_EANA_ROW and c.SCSU_ROW_NO=d.ROW_NO and d.ORCL_NAME=a.RECIPIENT_ROLE and  a.EITY_EITY_ID=8 and a.EITY_EITY_ID=b.EITY_EITY_ID  " +
                    " and a.item_key not in  (select item_key from EXP_WFEX_V where item_key=a.ITEM_KEY and EITY_EITY_ID=8 and MESSAGE_NAME='MWORKER' and  RECIPIENT_ROLE !='{0}' and not_id>a.not_id ) ", RECIPIENT_ROLE.ToUpper());
                var queryselect = Db.Database.SqlQuery<EXP_WFEX_V>
                    (sql)
                    .Select(x => new
                    {
                        x.ITEM_KEY
                    }).ToList();
                query = from q in query where queryselect.Select(xx => xx.ITEM_KEY).Contains(q.ITEM_KEY) select q;
            }
            //جستجو بر اساس گروه اجرایی بدون انتخاب کاربر
            if (EANA_ROW != null && string.IsNullOrEmpty(RECIPIENT_ROLE))
            {
                string sql = string.Format("select distinct a.* from EXP_WFEX_V a where (a.MESSAGE_NAME='MMEETING' or a.MESSAGE_NAME='MMANEGPOST' or a.MESSAGE_NAME='MARCHVE' or  a.MESSAGE_NAME='MWORKER' or a.MESSAGE_NAME ='MFANI')" +
                     " and a.STAT='OPEN' and a.EANA_EANA_ROW={0} and a.EITY_EITY_ID=8  ", EANA_ROW);
                var queryselect = Db.Database.SqlQuery<EXP_WFEX_V>
                    (sql)
                    .Select(x => new
                    {
                        x.ITEM_KEY
                    }).ToList();
                query = from q in query where queryselect.Select(xx => xx.ITEM_KEY).Contains(q.ITEM_KEY) select q;
            }
            int count = query.Count();
            if (!string.IsNullOrEmpty(STAT))
            {

                query = query.Where(x => x.STAT == "OPEN");
            }

            count = query.Count();
            if (!string.IsNullOrEmpty(CONF_TYPE))
            {
                if (CONF_TYPE == "1")
                    query = query.Where(x => x.CONF_TYPE == "1" || x.CONF_TYPE == null);
                else
                    query = query.Where(x => x.CONF_TYPE == "0");
            }
            //.ToList().Distinct();
            var query2 = query.Select(a => new
            {
                // a.ITEM_KEY,
                a.EPOL_NAME,
                a.EPIU_ID,
                a.EINS_EINS_ID,
                a.CODE_DISP,
                a.EUNL_EUNL_ID,
                a.EARD_EARD_ID,
                a.OUIN_TYPE,
                a.EPIU_TYPE,
                a.CODE_NAME,
                a.ETEX_ETEX_ID,
                a.PHAS_TYPE,
                a.PHAS_STAT,
                a.SERN_NO,
                a.DOC_NUMB,
                a.EEDO_DESC,
                a.FIRS_DATE,
                a.FIRS_TIME,
                a.EERR_DESC,
                a.EERR_ID,
                a.EEDO_ID,
                a.EEDO_DATE,
                a.EEDO_TIME,
                a.EERR_DESC2,
                //a.MESSAGE_NAME,
                //      
                MESSAGE_NAME = GetLastStatus(a.EEDO_ID),
                // Recipient = GetRecipient(a.EEDO_ID, "MWORKER"),
                // MessageBody = GetMessageBody(a.EEDO_ID, "MWORKER"),
                EUNL_DESC = GetUnitLevel(a.EUNL_EUNL_ID),
                FollowDefect = Ajax_GetFollowDefect(a.EEDO_ID, 0),
                FollowDefect2 = Ajax_GetFollowDefect(GetFollowId(a.EEDO_ID), 0),
                FollowDefect3 = Ajax_GetFollowDefect(GetFollowId(GetFollowId(a.EEDO_ID)), 0),
                MainDefect = a.DOC_NUMB + "-" + a.EEDO_DATE,
                // BEGIN_DATE = a.BEGIN_DATE,
                a.FANI_DATE,
                //  b.EXP_EITEM_DOC_VALUE.Where(xx=>xx.EITY_EITY_ID==18).Select(xx=>xx.EIDR_VALUE).FirstOrDefault():""
                a.EANA_DESC,
                a.OUT_FUNC,
                a.END_DATE,
                a.EIDR_VALUE,
                // CONF_TYPE = a.CONF_TYPE == "0" ? "رفع عیب شده" : "عدم رفع عیب",
                a.CONF_TYPE,
                // a.STAT
            }).ToList().Distinct();
            request.Page = 1;
            var jsonResult = Json(query2.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;

        }

        public ActionResult ReadForDelete([DataSourceRequest] DataSourceRequest request, string docNum)
        {
            using (var conn = WebMatrix.Data.Database.OpenConnectionString(Models.BandarEntities.EntityConnectionString2(GlobalConst.UserInfo()), "Oracle.ManagedDataAccess.Client"))
            {
                var query = conn.Query(@"select EEDO_ID, DOC_NUMB, EPOL_EPOL_ID, EFUN_EFUN_ID, EEDO_DATE, EEDO_DESC, EANA_EANA_ROW, CRET_BY,
                                                EXP_INSTRU_NAME_U((select edin_id from exp_edoc_instru where eedo_eedo_id = eedo_id and cut_stat = '1' and rownum = 1)) as CALC_COLUMN 
                                         from EXP_EXPI_DOC 
                                         where ETDO_ETDO_ID = 21 AND ((DOC_NUMB like '%'||:filter||'%') OR (:filter is null))", docNum, docNum).
                             Select(b => new
                             {
                                 b.EEDO_ID,
                                 b.DOC_NUMB,
                                 b.EPOL_EPOL_ID,
                                 b.EFUN_EFUN_ID,
                                 b.EEDO_DATE,
                                 b.EEDO_DESC,
                                 b.EANA_EANA_ROW,
                                 b.CALC_COLUMN,
                                 b.CRET_BY
                             }).OrderByDescending(b => b.EEDO_ID).ToList();

                return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

            }

        }
        //public ActionResult MultiselectDefect(int? parentId, string fd, int? epol_id, int? EANA_ROW)
        //{

        //    var RetVal = (from a in Db.EXP_EXPI_DOC
        //                 join item in Db.EXP_EDOC_INSTRU on a.EEDO_ID equals item.EEDO_EEDO_ID
        //                 join b in Db.EXP_POST_LINE_INSTRU on item.EPIU_EPIU_ID equals b.EPIU_ID
        //                 //join c in Db.EXP_EITEM_DOC_VALUE on  a.EEDO_ID equals c.EEDO_EEDO_ID
        //                 //join c in Db.EXP_WFEX_V on a.EEDO_ID equals c.EEDO_ID
        //                 where (a.ETDO_ETDO_ID == 2 && (a.EPOL_EPOL_ID == epol_id || epol_id == null)) &&
        //                  !a.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID_R == a.EEDO_ID).Any() &&
        //                 //(a.OUT_FUNC == "0" ? (!a.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID_R == a.EEDO_ID).Any() && a.OUT_FUNC == "0") : (a.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == a.EEDO_ID).Any() && a.OUT_FUNC == "1"))
        //                 // &&
        //                 (a.DOC_NUMB.ToUpper().Contains(filter) || b.CODE_DISP.ToUpper().Contains(filter) || b.CODE_NAME.ToUpper().Contains(filter) || filterDisable)
        //                 // && ((a.EANA_EANA_ROW == EANA_ROW  && c.RECIPIENT_ROLE == this.User.Identity.Name) || EANA_ROW == null)
        //                 // && c.EITY_EITY_ID==8 && c.STAT=="OPEN"
        //                 orderby a.DOC_NUMB descending
        //                 select new
        //                 {
        //                     a.EEDO_ID,
        //                     EPIU_ID = b.EPIU_ID,
        //                     EINS_EINS_ID = b.EINS_EINS_ID,
        //                     b.CODE_DISP,
        //                     b.EUNL_EUNL_ID,
        //                     b.EARD_EARD_ID,
        //                     b.OUIN_TYPE,
        //                     b.EPIU_TYPE,
        //                     CODE_NAME = b.CODE_NAME,
        //                     b.ETEX_ETEX_ID,
        //                     b.PHAS_TYPE,
        //                     b.PHAS_STAT,
        //                     b.SERN_NO,
        //                     a.DOC_NUMB,
        //                     a.EEDO_DESC,
        //                     a.FIRS_DATE,
        //                     a.FIRS_TIME,
        //                     EERR_DESC = item.EXP_ERROR_INST.EERR_DESC,
        //                     EERR_ID = item.EERR_EERR_ID,
        //                     EITY_DESC = Db.EXP_EITEM_DOC_VALUE.Where(xx => xx.EEDO_EEDO_ID == a.EEDO_ID && xx.EITY_EITY_ID == 7).Select(xx => xx.EIDR_VALUE).FirstOrDefault()
        //                     //EUNL_DESC=cntx.EXP_UNIT_LEVEL.Where(xx=>xx.EUNL_ID==b.EUNL_EUNL_ID).Select(xx=>xx.EUNL_DESC).FirstOrDefault()


        //                 }).OrderBy(xx => xx.EEDO_ID).ToList();

        //    return Json(RetVal, JsonRequestBehavior.AllowGet);
        //}



        public ActionResult SearchDefect([DataSourceRequest] DataSourceRequest request, int? parentId, string fd, int? epol_id, int? EANA_ROW)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper();



            var query = (from a in Db.EXP_EXPI_DOC
                         join item in Db.EXP_EDOC_INSTRU on a.EEDO_ID equals item.EEDO_EEDO_ID
                         join b in Db.EXP_POST_LINE_INSTRU on item.EPIU_EPIU_ID equals b.EPIU_ID
                         //join c in Db.EXP_EITEM_DOC_VALUE on  a.EEDO_ID equals c.EEDO_EEDO_ID
                         //join c in Db.EXP_WFEX_V on a.EEDO_ID equals c.EEDO_ID
                         where (a.ETDO_ETDO_ID == 2 && (a.EPOL_EPOL_ID == epol_id || epol_id == null)) &&
                          !a.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID_R == a.EEDO_ID).Any() &&
                         //(a.OUT_FUNC == "0" ? (!a.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID_R == a.EEDO_ID).Any() && a.OUT_FUNC == "0") : (a.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == a.EEDO_ID).Any() && a.OUT_FUNC == "1"))
                         // &&
                         (a.DOC_NUMB.ToUpper().Contains(filter) || b.CODE_DISP.ToUpper().Contains(filter) || b.CODE_NAME.ToUpper().Contains(filter) || filterDisable)
                         // && ((a.EANA_EANA_ROW == EANA_ROW  && c.RECIPIENT_ROLE == this.User.Identity.Name) || EANA_ROW == null)
                         // && c.EITY_EITY_ID==8 && c.STAT=="OPEN"
                         orderby a.DOC_NUMB descending
                         select new
                         {
                             a.EEDO_ID,
                             EPIU_ID = b.EPIU_ID,
                             EINS_EINS_ID = b.EINS_EINS_ID,
                             b.CODE_DISP,
                             b.EUNL_EUNL_ID,
                             b.EARD_EARD_ID,
                             b.OUIN_TYPE,
                             b.EPIU_TYPE,
                             CODE_NAME = b.CODE_NAME,
                             b.ETEX_ETEX_ID,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             b.SERN_NO,
                             a.DOC_NUMB,
                             a.EEDO_DESC,
                             a.FIRS_DATE,
                             a.FIRS_TIME,
                             EERR_DESC = item.EXP_ERROR_INST.EERR_DESC,
                             EERR_ID = item.EERR_EERR_ID,
                             EITY_DESC = Db.EXP_EITEM_DOC_VALUE.Where(xx => xx.EEDO_EEDO_ID == a.EEDO_ID && xx.EITY_EITY_ID == 7).Select(xx => xx.EIDR_VALUE).FirstOrDefault()
                             //EUNL_DESC=cntx.EXP_UNIT_LEVEL.Where(xx=>xx.EUNL_ID==b.EUNL_EUNL_ID).Select(xx=>xx.EUNL_DESC).FirstOrDefault()


                         }).OrderBy(xx => xx.EEDO_ID).ToList();
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }
        public ActionResult SearchDefectMeeting([DataSourceRequest] DataSourceRequest request, int? parentId, string fd, int? epol_id, int? EANA_ROW)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);




            var query = (from b in Db.EXP_WFEX_V
                         where
                         (b.DOC_NUMB.ToUpper().Contains(fd) || b.CODE_DISP.ToUpper().Contains(fd) || b.CODE_NAME.ToUpper().Contains(fd) || filterDisable)
                         &&
                         ((b.EANA_EANA_ROW == EANA_ROW && b.RECIPIENT_ROLE == this.User.Identity.Name.ToUpper()) || EANA_ROW == null)
                         && b.EITY_EITY_ID == 8 && b.STAT == "OPEN"
                         orderby b.DOC_NUMB descending
                         select new
                         {
                             b.EEDO_ID,
                             b.EPIU_ID,
                             b.EINS_EINS_ID,
                             b.CODE_DISP,
                             b.EUNL_EUNL_ID,
                             b.EARD_EARD_ID,
                             b.OUIN_TYPE,
                             b.EPIU_TYPE,
                             b.CODE_NAME,
                             b.ETEX_ETEX_ID,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             b.SERN_NO,
                             b.DOC_NUMB,
                             b.EEDO_DESC,
                             b.FIRS_DATE,
                             b.FIRS_TIME,
                             b.EERR_DESC,

                         }).ToList().OrderBy(xx => xx.EEDO_ID);
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }



        public ActionResult SearchDefectMeeting2([DataSourceRequest] DataSourceRequest request, int? parentId, string fd, int? epol_id, int? EANA_ROW)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);




            var query = (from b in Db.EXP_WFEX_V
                         where
                         (b.DOC_NUMB.ToUpper().Contains(fd) || b.CODE_DISP.ToUpper().Contains(fd) || b.CODE_NAME.ToUpper().Contains(fd) || filterDisable)
                         &&
                         ((b.EANA_EANA_ROW == EANA_ROW && b.RECIPIENT_ROLE == this.User.Identity.Name.ToUpper()) || EANA_ROW == null)
                         && b.EITY_EITY_ID == 8 && b.STAT == "OPEN"
                         orderby b.DOC_NUMB descending
                         select new
                         {
                             b.EEDO_ID,
                             b.EPIU_ID,
                             b.EINS_EINS_ID,
                             b.CODE_DISP,
                             b.EUNL_EUNL_ID,
                             b.EARD_EARD_ID,
                             b.OUIN_TYPE,
                             b.EPIU_TYPE,
                             b.CODE_NAME,
                             b.ETEX_ETEX_ID,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             b.SERN_NO,
                             b.DOC_NUMB,
                             b.EEDO_DESC,
                             b.FIRS_DATE,
                             b.FIRS_TIME,
                             b.EERR_DESC,

                         }).ToList().OrderBy(xx => xx.EEDO_ID);
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }

        public ActionResult ReadInstrument([DataSourceRequest] DataSourceRequest request, int? parentId, string fd, int epol_id, int? eins_id, int? eunl_id)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper();



            var query = (from b in Db.EXP_POST_LINE_INSTRU
                         join item in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals item.EINS_ID
                         where ((b.EPOL_EPOL_ID == epol_id || b.EPOL_EPOL_ID_LINE == epol_id || b.EPOL_EPOL_ID_INSLIN == epol_id) && b.EPIU_TYPE != "3" && (b.EINS_EINS_ID == eins_id || eins_id == 0) && (b.EUNL_EUNL_ID == eunl_id || eunl_id == 0))

                         && (b.HIST_DATE == null)
                         && (b.SERN_NO.ToUpper().Contains(filter) || item.EINS_DESC.ToUpper().Contains(filter) || b.CODE_DISP.ToUpper().Contains(filter) || b.CODE_NAME.ToUpper().Contains(filter) || filterDisable)
                         orderby b.CODE_NAME descending
                         select new
                         {
                             item.BAY_STAT,
                             b.EPIU_ID,
                             b.EINS_EINS_ID,
                             b.CODE_DISP,
                             b.EUNL_EUNL_ID,
                             b.EARD_EARD_ID,
                             b.OUIN_TYPE,
                             b.EPIU_TYPE,
                             b.CODE_NAME,
                             b.ETEX_ETEX_ID,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             b.SERN_NO,
                             EINS_DESC = item.EINS_DESC,
                             //EUNL_DESC=cntx.EXP_UNIT_LEVEL.Where(xx=>xx.EUNL_ID==b.EUNL_EUNL_ID).Select(xx=>xx.EUNL_DESC).FirstOrDefault()


                         }).ToList();
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }
        public ActionResult ReadInstrumentLine([DataSourceRequest] DataSourceRequest request, int? parentId, string fd, int epol_id, int? eunl_id)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper();



            var query = (from b in Db.EXP_POST_LINE_INSTRU
                         join item in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals item.EINS_ID
                         where (b.EPOL_EPOL_ID_LINE == epol_id || b.EPOL_EPOL_ID_INSLIN == epol_id) && (b.EUNL_EUNL_ID == eunl_id || eunl_id == null)

                         && (b.HIST_DATE == null)
                         && (b.SERN_NO.ToUpper().Contains(filter) || item.EINS_DESC.ToUpper().Contains(filter) || b.CODE_DISP.ToUpper().Contains(filter) || b.CODE_NAME.ToUpper().Contains(filter) || filterDisable)
                         orderby b.CODE_NAME descending
                         select new
                         {
                             item.BAY_STAT,
                             b.EPIU_ID,
                             b.EINS_EINS_ID,
                             b.CODE_DISP,
                             b.EUNL_EUNL_ID,
                             b.EARD_EARD_ID,
                             b.OUIN_TYPE,
                             b.EPIU_TYPE,
                             b.CODE_NAME,
                             b.ETEX_ETEX_ID,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             b.SERN_NO,
                             EINS_DESC = item.EINS_DESC,
                             //EUNL_DESC=cntx.EXP_UNIT_LEVEL.Where(xx=>xx.EUNL_ID==b.EUNL_EUNL_ID).Select(xx=>xx.EUNL_DESC).FirstOrDefault()


                         }).ToList();
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }

        public ActionResult ReadDetailInstrument([DataSourceRequest] DataSourceRequest request, int? parentId, string fd, int eins_id)
        {
            bool filterDisable = string.IsNullOrEmpty(fd);
            string filter = string.IsNullOrEmpty(fd.ToUpper()) ? "" : fd.ToUpper();



            var query = (from b in Db.EXP_ERROR_INST
                         where (b.EINS_EINS_ID == eins_id) && (b.EERR_TYPE == 0) && (b.EERR_DESC.ToUpper().Contains(filter))
                         orderby b.EERR_DESC descending
                         select new
                         {

                             b.EERR_ID,
                             b.EERR_DESC,

                             //EUNL_DESC=cntx.EXP_UNIT_LEVEL.Where(xx=>xx.EUNL_ID==b.EUNL_EUNL_ID).Select(xx=>xx.EUNL_DESC).FirstOrDefault()


                         }).ToList();
            return Json(query.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

        }
        public ActionResult Show_Defect(int? id, int? notId, int? EEDO_ID)
        {

            if (id == null)
            {
                id = (int)Db.EXP_WFEX_V.Where(xx => xx.NOT_ID == notId).Select(xx => xx.EEDO_ID).FirstOrDefault();
            }
            ViewData["eedo_id"] = id;

            return View("Show_Defect");
        }

        public ActionResult Search_Operator()
        {

            return View("Search_Operator");
        }
        public ActionResult Search_Out_Operator()
        {

            return View("Search_Out_Operator");
        }

        public ActionResult Search_Instrument(int? id, int? eins_id, int? eunl_id, string param)
        {
            ViewData["epol_id"] = id;
            ViewData["eins_id"] = eins_id;
            ViewData["eunl_id"] = eunl_id;
            ViewData["param"] = param;
            return View("Search_Instrument");
        }
        public ActionResult Search_Instrument_Line(int? id)
        {
            ViewData["epol_id"] = id;
            return View("Search_Instrument_Line");
        }
        public ActionResult Search_Defect(int? id)
        {
            ViewData["epol_id"] = id;
            return View("Search_Defect");
        }
        public ActionResult Search(int? id)
        {
            ViewData["ROW_NO"] = id;
            return View("Search");
        }
        public ActionResult Search2()
        {

            return View("Search2");
        }
        public ActionResult Search_Detail_Instrument(int? id)
        {
            ViewData["eins_id"] = id;
            return View("Search_Detail_Instrument");
        }

        /*این اکشن چک تاریخ اعلام برای اجرا و تاریخ مراجعه را بر عهده دارد */
        public JsonResult checkMorajeDate(string morajeDate, string elamExecuteDateInput, string elamExecuteDateDisplay)
        {
            try
            {
                string elamDate = string.Empty;
                if (elamExecuteDateInput != null)
                {
                    elamDate = elamExecuteDateInput;
                }
                else if (elamExecuteDateDisplay != null)
                {
                    elamDate = elamExecuteDateDisplay;
                }

                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate1 = dateTime.GetMiladiDateTime(morajeDate);
                DateTime miladiDate2 = dateTime.GetMiladiDateTime(elamDate);
                if (miladiDate2 >= miladiDate1)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        /*
        این اکشن چک تاریخ مراجعه و تاریخ رفع عیب را بر عهده دارد 
        */
        public JsonResult checkRafDate(string morajeDate, string rafDate)
        {
            try
            {
                //Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                //DateTime miladiDate1 = dateTime.GetMiladiDateTime(morajeDate);
                //DateTime miladiDate2 = dateTime.GetMiladiDateTime(rafDate);
                //if (miladiDate2 <= miladiDate1)
                if (morajeDate.CompareTo(rafDate) > 0)
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return this.Json(new { Success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        /*این اکشن در صورتیکه دیفکت انتخابی از طرف کاربر دیفکت پیرو باشد دیفکت های که در سیستم ثبت شده است را به کاربر نمایش می دهد */
        //public ActionResult get_rel_doc_DP( int id)
        //{
        //    var RetVal = (from b in PublicRepository.Get_Doc() where (b.ETDO_ETDO_ID == id) orderby b.DOC_NUMB select b).AsEnumerable().Select(b => new { b.EEDO_ID, b.DOC_NUMB });
        //    return Json(RetVal, JsonRequestBehavior.AllowGet);
        //}

        private string instpiro(decimal i)
        {

            var q = from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == i select new { b.EXP_POST_LINE.EPOL_NAME, b.EXP_ERROR_INST.EERR_DESC };
            return q.FirstOrDefault().EPOL_NAME + "  " + q.FirstOrDefault().EERR_DESC;

        }
        public ActionResult get_rel_doc_DP(int? postid)
        {
            //ar RetVal = (from b in PublicRepository.Get_Doc() where (b.ETDO_ETDO_ID == id) orderby b.DOC_NUMB select b).AsEnumerable().Select(b => new { b.EEDO_ID, b.DOC_NUMB });
            var RetVal = (from b in Db.EXP_EXPI_DOC.AsEnumerable()
                          join c in Db.EXP_EDOC_INSTRU.AsEnumerable() on b.EEDO_ID equals c.EEDO_EEDO_ID
                          where b.ETDO_ETDO_ID == 2 && c.EPOL_EPOL_ID == postid
                          select new { b.EEDO_ID, fullname = b.DOC_NUMB + " " + instpiro(b.EEDO_ID) }).ToList();


            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }
        public ActionResult Exp_Deffect_Doc_Update(int? id)
        {
            ViewData["EEDO_ID"] = id;

            return View();
        }
        /*اولین کنتلر که برای باز شدن فرم ایجاد کننده دیفکت استفاده شده است */
        ///////////////////////////////EXPI DOC دیفکت
        [MenuAuthorize]
        [EntityAuthorize("EXP_POST_LINE > select|CGT_PRO> select|PAY_ORGAN> select|EXP_EXPI_DOC> select|EXP_EITEM_DOC_VALUE > select|EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select|EXP_TYPE_BAY > select|EXP_UNIT_LEVEL > select|EXP_OFF_STAT > select|EXP_PFUNCTION>select")]
        public ActionResult Exp_Deffect_Doc(int? id)
        {
            ViewData["EDCV_ID"] = id;
            Session["ETDO_ID"] = 2;
            Session["id"] = 125;
            Session["eedo_id"] = null;
            ViewData["post_line"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
            ViewData["project"] = Db.CGT_PRO
                                      .Where(o => o.CPRO_PRJ_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_PRJ_CODE).FirstOrDefault())
                                      .Where(o => o.CPLA_PLN_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_CPLA_PLN_CODE).FirstOrDefault())
                                      .Select(o => new { o.PRJ_CODE, o.PRJ_DESC })
                                      .AsEnumerable();
            ViewData["Organ"] = Db.PAY_ORGAN.Select(o => new { o.CODE, o.ORGA_DESC }).AsEnumerable();
            ViewData["Type_Doc"] = Db.EXP_EXPI_DOC.Select(o => new { o.EEDO_ID, o.EXP_TYPE_DOC, o.ETDO_ETDO_ID, o.EXP_TYPE_DOC.ETDO_DESC }).Where(o => o.ETDO_ETDO_ID == o.EXP_TYPE_DOC.ETDO_ID).AsEnumerable();
            ViewData["Doc_val"] = Db.EXP_EITEM_DOC_VALUE.Select(o => new { o.EIDR_ID, o.EIDR_VALUE });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EINS_EINS_ID, o.CODE_DISP });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID != null).Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Bay = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
            ViewBag.UniteV = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.EXP_OFF_STAT.Select(c => new { c.EOFS_ID, c.EOFS_DESC });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.exp_doc = Db.EXP_EXPI_DOC;
            return View("Exp_Deffect_Doc");
        }
        public ActionResult Exp_Deffect_Doc_Follow(int? id)
        {
            ViewData["EDCV_ID"] = id;
            return View();

        }


        public ActionResult Insert_Expi_Doc(EXP_EXPI_DOC objecttemp)
        {

            string check = Request.Form["eedoId"];/*مقدار ردیف دیفکت در مقدار check قرار داده می شود*/
            int etdo_id = 0;
            decimal epiu_epiu_id = 0;
            string time = string.Empty;
            decimal EERR_EERR_ID = 0, EERR_EERR_ID1 = 0;
            int master_doc = 0;
            if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
            {
                master_doc = Convert.ToInt32(Request.Form["master_doc"]);
            }
            if (Db.EXP_EXPI_DOC.Where(xx => xx.EEDO_ID == master_doc && xx.EANA_EANA_ROW == 10).Any())
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این دیفکت قبلا به کمیته رفع عیب ارسال شده است و شما قادر به ثبت مجدد آن نیستید" }.ToJson();

            }

            if (!String.IsNullOrEmpty(Request.Form["EXP_EXPI_DOC.ETDO_ETDO_ID"]))    /*مقدار نوع مدرک که در اینجا 2 است در مقدار etdo_id قرار داده میشود*/
                etdo_id = Convert.ToInt32(Request.Form["EXP_EXPI_DOC.ETDO_ETDO_ID"]);

            if (!String.IsNullOrEmpty(Request.Form["POSTINSTTT"]))
            {
                epiu_epiu_id = Convert.ToDecimal(Request.Form["POSTINSTTT"]);
            }
            if (!String.IsNullOrEmpty(Request.Form["detailp"]))
            {
                EERR_EERR_ID = Convert.ToDecimal(Request.Form["detailp"]);
            }
            if (!String.IsNullOrEmpty(Request.Form["descd"]))
            {
                EERR_EERR_ID1 = Convert.ToDecimal(Request.Form["descd"]);
            }

            var checkquery = from b in Db.EXP_EXPI_DOC
                             join c in Db.EXP_EDOC_INSTRU on b.EEDO_ID equals c.EEDO_EEDO_ID
                             where b.ETDO_ETDO_ID == 2 && (b.CONF_TYPE == "1" || b.CONF_TYPE == null)
                             && c.EPIU_EPIU_ID == epiu_epiu_id && c.EERR_EERR_ID == EERR_EERR_ID && c.EERR_EERR_ID_R1 == EERR_EERR_ID1
                             select b;
            if (checkquery.Any() && Request.Form["DESC"] == "0")
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این دیفکت قبلا ثبت شده است و تا زمان تائید توسط مسئول پست امکان ثبت مجدد آن وجود ندارد.شماره دیفکت قبل" + checkquery.Select(xx => xx.DOC_NUMB).FirstOrDefault() }.ToJson();

            }
            string dman11 = Request.Form["dman11"];
            string dman10 = Request.Form["dman10"];
            string PRSN_EMP_NUMB1 = Request.Form["PRSN_EMP_NUMB1"];
            if (Request.Form["DESC"] == "" || Request.Form["EXP_EXPI_DOC.EEDO_DATE"] == "" ||
                Request.Form["EEDO_TIME"] == "" || Request.Form["EFUN_EFUN_ID"] == "" || Request.Form["descd"] == "" || dman10 == " " || dman11 == " " || (Request.Form["PRSN_EMP_NUMB1"] == "" && Request.Form["PRSN_EMP_out"] == ""))
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات برای ثبت کامل نیست" }.ToJson();
            }
            else
            {
                string date = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
                Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
                DateTime miladiDate = dateTime.GetMiladiDateTime(date);
                DateTime currentDate = DateTime.Now;
                if (miladiDate >= currentDate)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ روز بزرگتر نمی تواند باشد" }.ToJson();
                }
                else
                {


                    if (check == "" || check == null)/*اطلاعات دیفکت برای بار اول می خواهد ایجاد شود*/
                    {


                        /*مقادیر از ورودی دریافت شده و در یک نوع از exp_expi_doc قرار می گیرد */
                        int not_id = 0;
                        objecttemp.EEDO_ID = objecttemp.EEDO_ID;

                        objecttemp.ACTI_NACT = Request.Form["ACTI_NACT"];
                        if (!String.IsNullOrEmpty(Request.Form["ANPT_ANPT_ID"]))
                            objecttemp.ANPT_ANPT_ID = Convert.ToInt32(Request.Form["ANPT_ANPT_ID"]);
                        objecttemp.CCNT_CNTR_NO = Request.Form["CCNT_CNTR_NO"];
                        objecttemp.CONF_TYPE = Request.Form["EXP_EXPI_DOC.CONF_TYPE"];
                        if (!String.IsNullOrEmpty(Request.Form["CPRO_CPLA_PLN_CODE"]))
                            objecttemp.CPRO_CPLA_PLN_CODE = Convert.ToInt16(Request.Form["CPRO_CPLA_PLN_CODE"]);
                        if (!String.IsNullOrEmpty(Request.Form["CPRO_PRJ_CODE"]))
                            objecttemp.CPRO_PRJ_CODE = Convert.ToInt16(Request.Form["CPRO_PRJ_CODE"]);
                        objecttemp.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];
                        if (!String.IsNullOrEmpty(Request.Form["DMAN_DMAN_ID"]))
                            objecttemp.DMAN_DMAN_ID = Convert.ToInt32(Request.Form["DMAN_DMAN_ID"]);

                        /*این قسمت قرار شد اقای ایزدی راه حلی برای ماکزیمم کارکترها بدست اورد این قسمت شماره نامه +1 ماکزیمم ردیف دیفکت را برمی گرداند که احتمالا قبلا وجوددارد*/
                        string qdocnum = string.Empty;

                        // int countq = (from b in cntx.EXP_EXPI_DOC where b.ETDO_ETDO_ID == etdo_id && b.EANA_EANA_ROW == null select b).Count();
                        //if (countq == 0)
                        //{
                        //    qdocnum = "1";
                        //}
                        //else
                        //{
                        //    string qmax = (from b in cntx.EXP_EXPI_DOC where b.ETDO_ETDO_ID == etdo_id && b.EANA_EANA_ROW == null select b).Max(c => c.EEDO_ID).ToString();
                        //     int s1 = Convert.ToInt32(qmax);
                        //    qdocnum = (from b in cntx.EXP_EXPI_DOC where b.EEDO_ID == s1 select b.DOC_NUMB).FirstOrDefault().ToString();
                        //}
                        // int m = Convert.ToInt32(qdocnum) + 1;

                        //   objecttemp.DOC_NUMB = m.ToString();
                        /*به دلیل این که اقای ایزدی هنوز نتوانسته است ماکزیمم کارکتر را بدست بیاور فعلا شماره نامه از کاربر گرفته می شود */
                        //if (!String.IsNullOrEmpty(Request.Form["EXP_EXPI_DOC.DOC_NUMB"]))
                        //{
                        //    objecttemp.DOC_NUMB = Request.Form["EXP_EXPI_DOC.DOC_NUMB"];
                        //     int c = (from b in cntx.EXP_EXPI_DOC
                        //             where b.DOC_NUMB == objecttemp.DOC_NUMB && b.ETDO_ETDO_ID == etdo_id && b.EANA_EANA_ROW == null
                        //             select b).Count();
                        //    if (c != 0)
                        //    {
                        //        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شماره نامه  قبلا ایجاد شده است " }.ToJson();
                        //    }
                        //}
                        //else
                        //    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شماره نامه را مشخص نمایید " }.ToJson();
                        string EDCV_ID = Request.Form["EDCV_ID"];
                        objecttemp.EEDO_DATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
                        objecttemp.EEDO_TIME = Request.Form["EEDO_TIME"];
                        objecttemp.EEDO_DESC = Request.Form["EXP_EXPI_DOC.EEDO_DESC"];
                        objecttemp.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];

                        if (!String.IsNullOrEmpty(Request.Form["EXP_EXPI_DOC.ETDO_ETDO_ID"]))
                            objecttemp.ETDO_ETDO_ID = Convert.ToInt32(Request.Form["EXP_EXPI_DOC.ETDO_ETDO_ID"]);

                        if (!String.IsNullOrEmpty(Request.Form["EFUN_EFUN_ID"]))
                            objecttemp.EFUN_EFUN_ID = Convert.ToInt32(Request.Form["EFUN_EFUN_ID"]);
                        if (!String.IsNullOrEmpty(Request.Form["EPOL_EPOL_ID"]))
                            objecttemp.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);
                        objecttemp.ORGA_CODE = Request.Form["ORGA_CODE"];
                        objecttemp.ORGA_MANA_ASTA_CODE = Request.Form["ORGA_MANA_ASTA_CODE"];
                        objecttemp.ORGA_MANA_CODE = Request.Form["ORGA_MANA_CODE"];

                        objecttemp.FIRS_DATE = Request.Form["FDATE"];
                        objecttemp.FIRS_TIME = Request.Form["EXP_EXPI_DOC.FIRS_TIME"];
                        objecttemp.END_DATE = Request.Form["EDATE"];
                        objecttemp.END_TIME = Request.Form["END_TIME"];
                        objecttemp.EEDO_YEAR = Request.Form["EXP_EXPI_DOC.EEDO_YEAR"];
                        if (!String.IsNullOrEmpty(Request.Form["EEOD_EEOD_ID"]))
                            objecttemp.EEOD_EEOD_ID = Convert.ToInt32(Request.Form["EEOD_EEOD_ID"]);
                        if (!String.IsNullOrEmpty(Request.Form["EEVO_EEVO_ID"]))
                            objecttemp.EEVO_EEVO_ID = Convert.ToInt32(Request.Form["EEVO_EEVO_ID"]);

                        objecttemp.EVEN_TYPE = Request.Form["EXP_EXPI_DOC.EVEN_TYPE"];

                        objecttemp.INFL_TYPE = Request.Form["INFLTYPE"];
                        objecttemp.LETT_TYPE = Request.Form["EXP_EXPI_DOC.LETT_TYPE"];

                        objecttemp.OUT_FUNC = Request.Form["DESC"];
                        objecttemp.SEND_TYPE = Request.Form["EXP_EXPI_DOC.SEND_TYPE"];
                        objecttemp.TIME_STAT = "1";

                        objecttemp.TWRQ_YEAR = Request.Form["EXP_EXPI_DOC.TWRQ_YEAR"];
                        /*ثبت در دیتا بیس*/
                        Db.EXP_EXPI_DOC.Add(objecttemp);

                        Db.SaveChanges();
                        objecttemp.DOC_NUMB = "D" + objecttemp.EEDO_ID.ToString();
                        Db.SaveChanges();
                        if (EDCV_ID != "0")
                        {
                            //string sql = string.Format("update EXP_DAILY_CHECKLIST_VAR set EEDO_EEDO_ID={0} where EDCV_ID={1}", objecttemp.EEDO_ID, EDCV_ID);
                            string sql = string.Format("insert into  EXP_CHECKLIST_EXPI (EEDO_EEDO_ID,EDCV_EDCV_ID) VALUES({0},{1}) ", objecttemp.EEDO_ID, EDCV_ID);
                            Db.Database.ExecuteSqlCommand(sql);
                        }
                        int idinst = 0;
                        int idetby1 = 0;
                        int idinstt = 0;
                        int postcode = 0;
                        /*ثبت اطلاعات تجهیز در جدول exp_edoc_instr*/
                        var rel1 = new EXP_EDOC_INSTRU();
                        //string func = Request.Form["program"];

                        //  int f = Convert.ToInt32(func);

                        int f = 161;
                        string calssts = Request.Form["EINSC"];
                        int classt = Convert.ToInt32(calssts);


                        if (f == 162)/* در صورتیکه نوع برنامه دیفکت مخابراتی باشد پوینت های مخابراتی ثبت می شود */
                        {
                            string POSTINST1 = Request.Form["POSTINST1"];
                            string POSTPoint = Request.Form["Point"];
                            if (!string.IsNullOrEmpty(POSTINST1))
                            {
                                idinst = Convert.ToInt32(POSTINST1);
                                int id = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                                if (id == 0)
                                {
                                    rel1.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                                    rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST1);
                                    rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);
                                    rel1.EPNT_EPNT_ROW = Convert.ToInt32(POSTPoint);
                                    rel1.ETDO_ETDO_ID = objecttemp.ETDO_ETDO_ID;
                                    Db.EXP_EDOC_INSTRU.Add(rel1);
                                    Db.SaveChanges();
                                }
                            }
                        }
                        else
                        { /*در صورتیکه برنامه برقی باشد تجهیز ثبت می شود */
                            if (classt != 281 && classt > 4)
                            {

                                string POSTINST = Request.Form["POSTINSTTT"];
                                string detailINST = Request.Form["detailp"];
                                if (!string.IsNullOrEmpty(POSTINST))
                                {
                                    idinst = Convert.ToInt32(POSTINST);
                                    int id = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                                    if (id == 0)
                                    {
                                        rel1.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                                        rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);

                                        rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                                        rel1.ETDO_ETDO_ID = objecttemp.ETDO_ETDO_ID;
                                        Db.EXP_EDOC_INSTRU.Add(rel1);
                                        Db.SaveChanges();
                                    }
                                }

                            }
                            else
                            {



                                string POSTINST = Request.Form["POSTINSTTT"];
                                string detailINST = Request.Form["detailp"];
                                if (!string.IsNullOrEmpty(POSTINST))
                                {
                                    idinst = Convert.ToInt32(POSTINST);
                                    int id = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                                    if (id == 0)
                                    {
                                        rel1.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                                        rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);
                                        rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                                        rel1.ETDO_ETDO_ID = objecttemp.ETDO_ETDO_ID;
                                        Db.EXP_EDOC_INSTRU.Add(rel1);
                                        Db.SaveChanges();
                                    }
                                }

                            }
                        }

                        string Org1 = string.Empty;
                        short Ope1 = 0;
                        int per = 0;

                        if (Request.Form["ORGA_CODEconf1"] != "" && Request.Form["ORGA_CODEconf1"] != null)
                            Org1 = Request.Form["ORGA_CODEconf1"].ToString();
                        if (Request.Form["PRSN_EMP_NUMB1"] != "" && Request.Form["PRSN_EMP_NUMB1"] != null)
                            Ope1 = short.Parse(Request.Form["PRSN_EMP_NUMB1"].ToString());
                        if (Request.Form["PRSN_EMP_out"] != "" && Request.Form["PRSN_EMP_out"] != null)
                            per = Convert.ToInt32(Request.Form["PRSN_EMP_out"].ToString());
                        /*ثبت اطلاعات گزارش دهنده دیفکت */
                        var rel2 = new EXP_SUPL_DOC();
                        /*در ثبت اطلاعات گزارش دهنده فقط یکی از ایتم های پرسنل شرکت یا غیر پرسنل شرکت ثبت می شود */
                        if (Ope1 != 0)
                        { /*در صورتیکه گزارش دهنده پرسنل شرکت باشد */
                            int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.PRSN_EMP_NUMB == Ope1 select b.ESUD_ID).Count();
                            if (idm == 0)
                            {
                                rel2.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                                rel2.ORGA_CODE = Org1;
                                rel2.ORGA_MANA_CODE = "6";
                                rel2.ORGA_MANA_ASTA_CODE = "7";
                                rel2.POSI_TYEP = "0";
                                rel2.PRSN_EMP_NUMB = Ope1;

                                Db.EXP_SUPL_DOC.Add(rel2);
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            if (per != 0)
                            { /*در صورتیکه گزارش دهنده جز پرسنل شرکت نباشد */
                                int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == objecttemp.EEDO_ID && b.OUTP_OUTP_ID == per select b.ESUD_ID).Count();
                                if (idm == 0)
                                {
                                    rel2.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                                    rel2.ORGA_CODE = Org1;
                                    rel2.ORGA_MANA_CODE = "6";
                                    rel2.ORGA_MANA_ASTA_CODE = "7";
                                    rel2.POSI_TYEP = "0";
                                    rel2.OUTP_OUTP_ID = per;

                                    Db.EXP_SUPL_DOC.Add(rel2);
                                    Db.SaveChanges();
                                }
                            }
                        }

                        /*ثبت اطلاعات دیفکت پیرو در جدول exp_relation_doc*/

                        var rel = new EXP_RELATION_DOC();
                        string EEDO_EEDO_ID_R = Request.Form["EEDO_EEDO_ID_R"];
                        if (!string.IsNullOrEmpty(EEDO_EEDO_ID_R))
                        {
                            rel.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                            rel.EEDO_EEDO_ID_R = Convert.ToInt32(EEDO_EEDO_ID_R);
                            Db.EXP_RELATION_DOC.Add(rel);
                            Db.SaveChanges();
                        }
                        if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                        {
                            rel.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                            rel.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                            Db.EXP_RELATION_DOC.Add(rel);
                            Db.SaveChanges();
                        }
                        ////درج اطلاعات در جدول بازدید روزانه بر اساس دیفکت اصلی
                        //var querychecklist = from a in Db.EXP_CHECKLIST_EXPI where a.EEDO_EEDO_ID == rel.EEDO_EEDO_ID_R select a;
                        //var querydailychecklist = from a in Db.EXP_DAILY_CHECKLIST_VAR where a.EDCV_ID == querychecklist.Select(xx => xx.EDCV_EDCV_ID).FirstOrDefault() select a;


                        /*برای ثبت اطلاعات ایتم های متغییر فرم که اطلاعات و مقادیر ان در جدول exp_ei*/

                        string srow = Request.Form["count"];
                        int row = Convert.ToInt32(srow);
                        var value = new EXP_EITEM_DOC_VALUE();
                        for (int i = 0; i <= row; i++)
                        {
                            string val = Request.Form[i.ToString()];
                            string EITY_ID = Request.Form["EITY_ID" + i.ToString()];
                            if (string.IsNullOrEmpty(val))
                            {
                                val = Request.Form["dman" + i.ToString()];
                            }
                            if (!string.IsNullOrEmpty(val))
                            {
                                value.EEDO_EEDO_ID = objecttemp.EEDO_ID;
                                value.EITY_EITY_ID = Convert.ToInt32(EITY_ID);
                                value.EIDR_VALUE = val;
                                Db.EXP_EITEM_DOC_VALUE.Add(value);
                                Db.SaveChanges();

                            }
                        }
                        string bodymessage = string.Empty;
                        string doc_name = (from b in Db.EXP_TYPE_DOC where b.ETDO_ID == etdo_id select b.ETDO_DESC).FirstOrDefault();
                        /*بدست اوردن اطلاعات برای مسچ که در کارتابل می خواهد نمایش داده شود */
                        string postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == objecttemp.EPOL_EPOL_ID select b.EPOL_NAME).FirstOrDefault().ToString();
                        var w = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == idinst select b);
                        string instn = w.FirstOrDefault().CODE_NAME.ToString();
                        string insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();
                        if (insttype == "1")
                            instn = " خط " + instn;
                        else
                            instn = " تجهیز " + instn;
                        string smessage = " دیفکت " + "به شماره" + objecttemp.DOC_NUMB + " در تاریخ " + objecttemp.EEDO_DATE + " مربوط به " + postn + " و " + instn + " میباشد ";
                        // objecttemp.DEFC_DESC;//+ "به شماره" + objecttemp.DOC_NUMB + " در تاریخ " + objecttemp.EEDO_DATE + " مربوط به " + postn + " و " + instn+" میباشد ";
                        bodymessage = smessage;

                        try
                        {
                            /*ایجاد یک ردیف جدید کارتابل */
                            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                            // wp.SetKeyValue("MY_FLAG", "1");
                            wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, bodymessage, etdo_id, objecttemp.EEDO_ID);
                            // wp.SetKeyValue("MY_FLAG", "1");
                            not_id = wp.NoteId;
                            /* پیغام ثبت اطلاعات به کاربر و ارسال شماره ردیف دیفکت و ردیف کارتابل به ویو */
                            //  return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = not_id.ToString() }.ToJson();
                            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = objecttemp.EEDO_ID.ToString() + "%" + not_id.ToString() }.ToJson();
                        }
                        catch (Exception ex)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                        }
                    }
                    else
                    { /*در صورتیکه اطلاعات درج شده بخواهند دوباره ثبت شوند */
                        /*ثبت اطلاعات تجهیزات */
                        int eedoid = Convert.ToInt32(check);
                        var rel1 = new EXP_EDOC_INSTRU();

                        string POSTINST = string.Empty;
                        string POSTpoint = string.Empty;
                        string etby1 = string.Empty;
                        string eins = string.Empty;
                        decimal idinst = 0;
                        decimal idinstp = 0;
                        int idetby1 = 0;
                        int idinstt = 0;
                        int postcode = 0;

                        var chkl = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b).FirstOrDefault();
                        /*بدست اوردن اطلاعات دیفکت براساس ردیف دیفکت */

                        /* تغییر اطلاعات دیفکت در صورتیکه تغییر کرده است */
                        if (Request.Form["EXP_EXPI_DOC.EEDO_DESC"] != "" && Request.Form["EXP_EXPI_DOC.EEDO_DESC"] != null)
                            chkl.EEDO_DESC = Request.Form["EXP_EXPI_DOC.EEDO_DESC"];

                        if (Request.Form["EXP_EXPI_DOC.DEFC_DESC"] != "" && Request.Form["EXP_EXPI_DOC.DEFC_DESC"] != null)
                            chkl.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];

                        if (Request.Form["EXP_EXPI_DOC.EEDO_DATE"] != "" && Request.Form["EXP_EXPI_DOC.EEDO_DATE"] != null)
                            chkl.EEDO_DATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];

                        if (Request.Form["EEDO_TIME"] != "" && Request.Form["EEDO_TIME"] != null)
                            chkl.EEDO_TIME = Request.Form["EEDO_TIME"];

                        if (Request.Form["ORGA_CODE"] != "" && Request.Form["ORGA_CODE"] != null)
                            chkl.ORGA_CODE = Request.Form["ORGA_CODE"];

                        if (Request.Form["ORGA_MANA_ASTA_CODE"] != "" && Request.Form["ORGA_MANA_ASTA_CODE"] != null)
                            chkl.ORGA_MANA_ASTA_CODE = Request.Form["ORGA_MANA_ASTA_CODE"];
                        if (Request.Form["ORGA_MANA_CODE"] != "" && Request.Form["ORGA_MANA_CODE"] != null)
                            chkl.ORGA_MANA_CODE = Request.Form["ORGA_MANA_CODE"];

                        if (Request.Form["EPOL_EPOL_ID"] != "" && Request.Form["EPOL_EPOL_ID"] != null)
                            chkl.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);

                        //if (Request.Form["EFUN_EFUN_ID"] != "" && Request.Form["EFUN_EFUN_ID"] != null)
                        chkl.EFUN_EFUN_ID = 1081;// Convert.ToInt32(Request.Form["EFUN_EFUN_ID"]);

                        if (Request.Form["DESC"] != "" && Request.Form["DESC"] != null)
                            chkl.OUT_FUNC = Request.Form["DESC"];

                        if (Request.Form["FDATE"] != "" && Request.Form["FDATE"] != null)
                            chkl.FIRS_DATE = Request.Form["FDATE"];

                        if (Request.Form["EXP_EXPI_DOC.FIRS_TIME"] != "" && Request.Form["EXP_EXPI_DOC.FIRS_TIME"] != null)
                            chkl.FIRS_TIME = Request.Form["EXP_EXPI_DOC.FIRS_TIME"];

                        if (Request.Form["EDATE"] != "" && Request.Form["EDATE"] != null)
                            chkl.END_DATE = Request.Form["EDATE"];

                        if (Request.Form["END_TIME"] != "" && Request.Form["END_TIME"] != null)
                            chkl.END_TIME = Request.Form["END_TIME"];

                        if (Request.Form["EXP_EXPI_DOC.EEDO_YEAR"] != "" && Request.Form["EXP_EXPI_DOC.EEDO_YEAR"] != null)
                            chkl.EEDO_YEAR = Request.Form["EXP_EXPI_DOC.EEDO_YEAR"];
                        /*ثبت اطلاعات دیفکت */
                        Db.SaveChanges();
                        /* اطلاعات تجهیزات براساس نوع برنامه که مخابراتی و برقی است قابل ثبت است */
                        //string func = Request.Form["program"];
                        // int f = Convert.ToInt32(func);



                        // var rel1 = new EXP_EDOC_INSTRU();
                        /*ثبت تجهیزات */


                        int f = 161;
                        string calssts = Request.Form["EINSC"];
                        int classt = Convert.ToInt32(calssts);
                        int idinstdef = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b.EDIN_ID).Count();

                        if (idinstdef > 0)
                        { rel1 = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b).FirstOrDefault(); }
                        else
                        { rel1.EEDO_EEDO_ID = chkl.EEDO_ID; }

                        //string func = Request.Form["program1"];
                        // int f = Convert.ToInt32(func);
                        if (f == 16)
                        { /*ثبت تجهیزات مخابراتی */
                            if (Request.Form["Point"] != "" && Request.Form["Point"] != null)
                            {
                                if (Request.Form["POSTINST1"] != "" && Request.Form["POSTINST1"] != null)
                                {
                                    POSTpoint = Request.Form["Point"];

                                    POSTINST = Request.Form["POSTINST1"];

                                    string sql = string.Format("delete from EXP_EDOC_INSTRU  where  EEDO_EEDO_ID={0}", chkl.EEDO_ID);
                                    Db.Database.ExecuteSqlCommand(sql);
                                    /*حذف تجهیزات دیفکت و ثبت دوباره تجهیزات جدید مورد نظر کاربر*/

                                    idinst = Convert.ToInt32(POSTINST);
                                    // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                                    //if (id == 0)
                                    //{
                                    rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                                    rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                                    rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);
                                    rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;
                                    rel1.EPNT_EPNT_ROW = Convert.ToInt32(POSTpoint);

                                    //}
                                }
                            }
                        }
                        else
                        { /*در صورتیکه برنامه برقی باشد تجهیز ثبت می شود */


                            if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                            {
                                //var qid = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b).FirstOrDefault();

                                rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                                //cntx.SaveChanges();
                            }


                            if (classt != 281 && classt > 4)
                            {

                                POSTINST = Request.Form["POSTINSTTT"];
                                string detailINST = Request.Form["detailp"];
                                if (!string.IsNullOrEmpty(POSTINST))
                                {
                                    idinst = Convert.ToInt32(POSTINST);
                                    // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                                    //if (id == 0)
                                    //{

                                    rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                                    rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                                    rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);

                                    rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                                    rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                                    // }


                                }

                            }
                            else
                            {

                                string typeinst = Request.Form["typeinst1"];
                                if (typeinst == "1")
                                {


                                    POSTINST = Request.Form["POSTINSTTT"];
                                    string detailINST = Request.Form["detailp"];
                                    if (!string.IsNullOrEmpty(POSTINST))
                                    {
                                        idinst = Convert.ToInt32(POSTINST);
                                        // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                                        //if (id == 0)
                                        //{
                                        //    if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                                        //    {
                                        //        rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                                        //    }
                                        rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                                        rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);
                                        rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                                        rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                                        // }
                                    }

                                }
                                else
                                {


                                    POSTINST = Request.Form["POSTINST"];
                                    string detailINST = Request.Form["detailp"];
                                    if (!string.IsNullOrEmpty(POSTINST))
                                    {
                                        idinst = Convert.ToInt32(POSTINST);
                                        // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                                        //if (id == 0)
                                        //{
                                        //    if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                                        //    {
                                        //        rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                                        //    }
                                        rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                                        rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["EPOL_EPOL_ID"]);
                                        rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                                        rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                                        //}
                                    }
                                }
                            }
                        }
                        if (idinstdef > 0)
                        { Db.SaveChanges(); }
                        else
                        {
                            Db.EXP_EDOC_INSTRU.Add(rel1);
                            Db.SaveChanges();
                        }


                        string Org1 = string.Empty;
                        short Ope1 = 0;
                        int per = 0;
                        string organn = Request.Form["ORGA_CODEconf1"];
                        if (!string.IsNullOrEmpty(organn))
                        {
                            if (Request.Form["ORGA_CODEconf1"] != "" && Request.Form["ORGA_CODEconf1"] != null)
                                Org1 = Request.Form["ORGA_CODEconf1"].ToString();
                            if (Request.Form["PRSN_EMP_NUMB1"] != "" && Request.Form["PRSN_EMP_NUMB1"] != null)
                                Ope1 = short.Parse(Request.Form["PRSN_EMP_NUMB1"].ToString());
                            if (Request.Form["PRSN_EMP_out"] != "" && Request.Form["PRSN_EMP_out"] != null)
                                per = Convert.ToInt32(Request.Form["PRSN_EMP_out"].ToString());
                            /*ثبت اطلاعات گزارش دهنده های دیفکت */
                            var rel2 = new EXP_SUPL_DOC();

                            string sqlsupl = string.Format("delete from EXP_SUPL_DOC  where POSI_TYEP='0' and  EEDO_EEDO_ID={0}", chkl.EEDO_ID);
                            Db.Database.ExecuteSqlCommand(sqlsupl);

                            if (Ope1 != 0)
                            { /*گزارش دهنده از پرسنل شرکت باشد */
                                int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.PRSN_EMP_NUMB == Ope1 select b.ESUD_ID).Count();
                                if (idm == 0)
                                {
                                    rel2.EEDO_EEDO_ID = chkl.EEDO_ID;
                                    rel2.ORGA_CODE = Org1;
                                    rel2.ORGA_MANA_CODE = "6";
                                    rel2.ORGA_MANA_ASTA_CODE = "7";
                                    rel2.POSI_TYEP = "0";
                                    rel2.PRSN_EMP_NUMB = Ope1;

                                    Db.EXP_SUPL_DOC.Add(rel2);
                                    Db.SaveChanges();
                                }
                            }
                            else
                            {
                                if (per != 0)
                                { /*گزارش دهنده جز پرسنل شرکت نباشد */
                                    int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.OUTP_OUTP_ID == per select b.ESUD_ID).Count();
                                    if (idm == 0)
                                    {
                                        rel2.EEDO_EEDO_ID = chkl.EEDO_ID;
                                        rel2.ORGA_CODE = Org1;
                                        rel2.ORGA_MANA_CODE = "6";
                                        rel2.ORGA_MANA_ASTA_CODE = "7";
                                        rel2.POSI_TYEP = "0";
                                        rel2.OUTP_OUTP_ID = per;

                                        Db.EXP_SUPL_DOC.Add(rel2);
                                        Db.SaveChanges();
                                    }
                                }
                            }
                        }

                        /*ثبت اطلاعات ایتم های متغییر فرم ها */

                        string srow = Request.Form["count"];
                        int row = Convert.ToInt32(srow);
                        var value = new EXP_EITEM_DOC_VALUE();
                        for (int i = 0; i <= row; i++)
                        {
                            string val = Request.Form[i.ToString()];
                            if (string.IsNullOrEmpty(val))
                            {
                                val = Request.Form["dman" + i.ToString()];
                            }

                            string EITY_ID = Request.Form["EITY_ID" + i.ToString()];
                            if (!string.IsNullOrEmpty(EITY_ID))
                            {
                                if (!string.IsNullOrEmpty(val))
                                {
                                    string sql = string.Format("DELETE FROM EXP_EITEM_DOC_VALUE WHERE EEDO_EEDO_ID={0} and EITY_EITY_ID={1}", chkl.EEDO_ID, EITY_ID);
                                    Db.Database.ExecuteSqlCommand(sql);
                                }
                            }

                            if (!string.IsNullOrEmpty(val))
                            {
                                value.EEDO_EEDO_ID = chkl.EEDO_ID;
                                value.EITY_EITY_ID = Convert.ToInt32(EITY_ID);
                                value.EIDR_VALUE = val;
                                Db.EXP_EITEM_DOC_VALUE.Add(value);
                                Db.SaveChanges();
                            }
                        }

                        /*ثبت اطلاعات پیرو دیفکت */
                        string relation = (from b in Db.EXP_RELATION_DOC
                                           join x in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals x.EEDO_ID
                                           where b.EEDO_EEDO_ID == eedoid && x.ETDO_ETDO_ID == 2
                                           select b.ERED_ID).FirstOrDefault().ToString();

                        //  cntx.EXP_RELATION_DOC.Remove(relation);
                        var rel = new EXP_RELATION_DOC();
                        int rccc = Convert.ToInt32(relation);
                        if (rccc == 0)
                        {
                            if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                            {
                                rel.EEDO_EEDO_ID = eedoid;
                                rel.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                                Db.EXP_RELATION_DOC.Add(rel);
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            var qrelattd = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedoid && b.ERED_ID == rccc select b).FirstOrDefault();
                            if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                                qrelattd.EEDO_EEDO_ID_R = Convert.ToInt32(Request.Form["master_doc"]);
                            Db.SaveChanges();
                        }

                        string nod = Request.Form["notId"];

                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = eedoid.ToString() + "%" + nod.ToString() }.ToJson();
                        // return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", eedoid), CoustomData = eedoid.ToString() }.ToJson();
                    }
                }
            }
        }

        /*این اکشن دیفکت جدیدی را ثبت می نماید یا در صورتیکه کاربر بخواهد بعد از ثبت اطلاعات تغییری اعمال کند تغییرات را ثبت می کند توضیحات کدها در خود برنامه نوشته شده است */
        [EntityAuthorize("EXP_EDOC_INSTRU > insert ,select, delete|EXP_EXPI_DOC> select,insert,update|EXP_SUPL_DOC > insert,select,delete|EXP_RELATION_DOC > insert,select,update|EXP_EITEM_DOC_VALUE>select,insert,delete|EXP_TYPE_DOC > select|EXP_POST_LINE_INSTRU>select|EXP_POST_LINE > select")]
        public ActionResult Insert_Expi_Doc_Follow(EXP_EXPI_DOC ObjectTemp, decimal? id)
        {
            decimal? EEDO_EEDO_ID_R = 0;
            if (id != 0 && id != null)
            {
                EEDO_EEDO_ID_R = id;
            }
            else if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
            {
                EEDO_EEDO_ID_R = Convert.ToDecimal(Request.Form["master_doc"]);
            }
            var RetVal = from b in Db.EXP_EXPI_DOC where b.EEDO_ID == EEDO_EEDO_ID_R select b;
            try
            {
                ObjectTemp.ETDO_ETDO_ID = RetVal.Select(xx => xx.ETDO_ETDO_ID).FirstOrDefault();
                ObjectTemp.EFUN_EFUN_ID = RetVal.Select(xx => xx.EFUN_EFUN_ID).FirstOrDefault();
                ObjectTemp.OUT_FUNC = "1";
                // ObjectTemp.CONF_TYPE = "0";
                ObjectTemp.EPOL_EPOL_ID = RetVal.Select(xx => xx.EPOL_EPOL_ID).FirstOrDefault();
                ObjectTemp.FIRS_DATE = RetVal.Select(xx => xx.FIRS_DATE).FirstOrDefault();
                ObjectTemp.FIRS_TIME = RetVal.Select(xx => xx.FIRS_TIME).FirstOrDefault();
                ObjectTemp.EEDO_DATE = RetVal.Select(xx => xx.EEDO_DATE).FirstOrDefault();
                ObjectTemp.EEDO_TIME = RetVal.Select(xx => xx.EEDO_TIME).FirstOrDefault();
                ObjectTemp.EEDO_DESC = RetVal.Select(xx => xx.EEDO_DESC).FirstOrDefault();
                ObjectTemp.LETT_TYPE = RetVal.Select(xx => xx.LETT_TYPE).FirstOrDefault();
                ObjectTemp.TIME_STAT = RetVal.Select(xx => xx.TIME_STAT).FirstOrDefault();
                ObjectTemp.ORGA_CODE = RetVal.Select(xx => xx.ORGA_CODE).FirstOrDefault();
                ObjectTemp.ORGA_MANA_ASTA_CODE = RetVal.Select(xx => xx.ORGA_MANA_ASTA_CODE).FirstOrDefault();
                ObjectTemp.ORGA_MANA_CODE = RetVal.Select(xx => xx.ORGA_MANA_CODE).FirstOrDefault();
                ObjectTemp.EANA_EANA_ROW = RetVal.Select(xx => xx.EANA_EANA_ROW).FirstOrDefault();
                ObjectTemp.DOC_NUMB = "D" + EEDO_EEDO_ID_R + "_" + (Db.EXP_EXPI_DOC.Where(xx => xx.ETDO_ETDO_ID == 2).Select(xx => xx.EEDO_ID).Max() + 1);
                ObjectTemp.CRET_BY = RetVal.Select(xx => xx.CRET_BY).FirstOrDefault();
                ObjectTemp.CRET_DATE = RetVal.Select(xx => xx.CRET_DATE).FirstOrDefault();
                //ObjectTemp.EEDO_ID = Db.EXP_EXPI_DOC.Where(xx => xx.ETDO_ETDO_ID == 2).Select(xx => xx.EEDO_ID).Max() + 1;
                Db.EXP_EXPI_DOC.Add(ObjectTemp);
                Db.SaveChanges();
                string EDCV_ID = Request.Form["EDCV_ID"];
                if (!string.IsNullOrEmpty(EDCV_ID) && EDCV_ID != "0")
                {
                    //string sql = string.Format("update EXP_DAILY_CHECKLIST_VAR set EEDO_EEDO_ID={0} where EDCV_ID={1}", objecttemp.EEDO_ID, EDCV_ID);
                    string sql = string.Format("insert into  EXP_CHECKLIST_EXPI (EEDO_EEDO_ID,EDCV_EDCV_ID) VALUES({0},{1}) ", ObjectTemp.EEDO_ID, EDCV_ID);
                    Db.Database.ExecuteSqlCommand(sql);
                }
            }
            catch (Exception Ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = Ex.ToString() }.ToJson();
            }

            var DefectInstrument = new EXP_EDOC_INSTRU();
            DefectInstrument.EEDO_EEDO_ID = ObjectTemp.EEDO_ID;
            DefectInstrument.EPIU_EPIU_ID = Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == EEDO_EEDO_ID_R).Select(xx => xx.EPIU_EPIU_ID).FirstOrDefault();
            DefectInstrument.EERR_EERR_ID = Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == EEDO_EEDO_ID_R).Select(xx => xx.EERR_EERR_ID).FirstOrDefault();
            DefectInstrument.EPOL_EPOL_ID = ObjectTemp.EPOL_EPOL_ID;
            DefectInstrument.EERR_EERR_ID_R1 = Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == EEDO_EEDO_ID_R).Select(xx => xx.EERR_EERR_ID_R1).FirstOrDefault();
            DefectInstrument.ETDO_ETDO_ID = ObjectTemp.ETDO_ETDO_ID;
            Db.EXP_EDOC_INSTRU.Add(DefectInstrument);
            Db.SaveChanges();

            var RelationDoc = new EXP_RELATION_DOC();
            RelationDoc.EEDO_EEDO_ID = ObjectTemp.EEDO_ID;
            RelationDoc.EEDO_EEDO_ID_R = EEDO_EEDO_ID_R;
            Db.EXP_RELATION_DOC.Add(RelationDoc);
            Db.SaveChanges();

            var SupplierDoc = new EXP_SUPL_DOC();
            SupplierDoc.EEDO_EEDO_ID = ObjectTemp.EEDO_ID;
            SupplierDoc.ORGA_CODE = Db.EXP_SUPL_DOC.Where(xx => xx.EEDO_EEDO_ID == EEDO_EEDO_ID_R).Select(xx => xx.ORGA_CODE).FirstOrDefault();
            SupplierDoc.ORGA_MANA_CODE = "6";
            SupplierDoc.ORGA_MANA_ASTA_CODE = "7";
            SupplierDoc.POSI_TYEP = "0";
            SupplierDoc.OUTP_OUTP_ID = Db.EXP_SUPL_DOC.Where(xx => xx.EEDO_EEDO_ID == EEDO_EEDO_ID_R).Select(xx => xx.OUTP_OUTP_ID).FirstOrDefault();
            SupplierDoc.PRSN_EMP_NUMB = Db.EXP_SUPL_DOC.Where(xx => xx.EEDO_EEDO_ID == EEDO_EEDO_ID_R).Select(xx => xx.PRSN_EMP_NUMB).FirstOrDefault();

            Db.EXP_SUPL_DOC.Add(SupplierDoc);
            Db.SaveChanges();

            var RetValDoc = from b in Db.EXP_EITEM_DOC_VALUE where b.EEDO_EEDO_ID == EEDO_EEDO_ID_R select b;
            var ValueDoc = new EXP_EITEM_DOC_VALUE();
            foreach (var Row in RetValDoc)
            {

                ValueDoc.EEDO_EEDO_ID = ObjectTemp.EEDO_ID;
                ValueDoc.EITY_EITY_ID = Row.EITY_EITY_ID;
                ValueDoc.EIDR_VALUE = Row.EIDR_VALUE;
                Db.EXP_EITEM_DOC_VALUE.Add(ValueDoc);
                Db.SaveChanges();


            }
            string CodeName = Db.EXP_POST_LINE_INSTRU.Where(xx => xx.EPIU_ID == DefectInstrument.EPIU_EPIU_ID).Select(xx => xx.CODE_NAME).FirstOrDefault();
            string EpolName = Db.EXP_POST_LINE.Where(xx => xx.EPOL_ID == ObjectTemp.EPOL_EPOL_ID).Select(xx => xx.EPOL_NAME).FirstOrDefault();
            /*ایجاد یک ردیف جدید کارتابل */
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
            string BodyMessage = string.Format("دیفکت پیرو به شماره {0} ، تاریخ {1} مربوط به پست {2} و تجهیز {3} ارسال شد ", ObjectTemp.DOC_NUMB, ObjectTemp.EEDO_DATE, EpolName, CodeName);
            wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, "دیفکت", BodyMessage, 2, ObjectTemp.EEDO_ID);
            // wp.SetKeyValue("MY_FLAG", "1");
            int NoteId = wp.NoteId;
            wp = new AsrWorkFlowProcess(NoteId);
            wp.Approve(new string[] { "M-PAYAM" }, BodyMessage);
            /* پیغام ثبت اطلاعات به کاربر و ارسال شماره ردیف دیفکت و ردیف کارتابل به ویو */
            //  return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = not_id.ToString() }.ToJson();
            //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = objecttemp.EEDO_ID.ToString() + "%" + not_id.ToString() }.ToJson();


            return new ServerMessages(ServerOprationType.Success) { Message = "اطلاعات با موفقیت ثبت و ارسال شد" }.ToJson();

        }

        /*این اکشن در صورتیکه دیفکت انتخابی از طرف کاربر دیفکت پیرو باشد دیفکت های که در سیستم ثبت شده است را به کاربر نمایش می دهد */
        public ActionResult geterjab(int id)
        {
            var q = (from c in Db.EXP_EXPI_DOC where c.EEDO_ID == id select c);
            if (q.FirstOrDefault().OUT_FUNC == "1")
            {
                //string EEDO_EEDO_ID_Rs = (from b in cntx.EXP_RELATION_DOC where b.EEDO_EEDO_ID == id select b.EEDO_EEDO_ID_R).FirstOrDefault().ToString();
                // int eedos = Convert.ToInt32(EEDO_EEDO_ID_Rs);
                //string peiroc = (from b in cntx.EXP_RELATION_DOC
                //                 join c in cntx.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals c.EEDO_ID
                //                 where b.EEDO_EEDO_ID_R == eedos && c.OUT_FUNC == "1"
                //                 select b).Count().ToString();

                int p = 0;
                string timr = string.Empty;
                timr = (from c in Db.EXP_EXPI_DOC

                        where c.EEDO_ID == id && c.OUT_FUNC == "1"
                        select c.TIME_STAT).FirstOrDefault().ToString();


                var timr1 = (from b in Db.EXP_RELATION_DOC
                             join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals c.EEDO_ID
                             where b.EEDO_EEDO_ID == id && c.OUT_FUNC == "1"
                             select c.TIME_STAT);

                var EEDO_EEDO_ID_Rs = (from b in Db.EXP_RELATION_DOC
                                       join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals c.EEDO_ID

                                       where b.EEDO_EEDO_ID == id && c.OUT_FUNC == "1"
                                       select b.EEDO_EEDO_ID_R);
                if (timr != "2")
                {
                    p = p + 1;

                }
                // var EEDO_EEDO_ID_Rs = (from b in cntx.EXP_RELATION_DOC where b.EEDO_EEDO_ID == id select b.EEDO_EEDO_ID_R);
                while (EEDO_EEDO_ID_Rs.FirstOrDefault() != null)
                {
                    // if (timr !=2 timr1)


                    int eedos = Convert.ToInt32(EEDO_EEDO_ID_Rs.FirstOrDefault().ToString());
                    EEDO_EEDO_ID_Rs = (from b in Db.EXP_RELATION_DOC
                                       join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals c.EEDO_ID

                                       where b.EEDO_EEDO_ID == eedos && c.OUT_FUNC == "1"
                                       select b.EEDO_EEDO_ID_R);
                    timr = (from c in Db.EXP_EXPI_DOC

                            where c.EEDO_ID == eedos && c.OUT_FUNC == "1"
                            select c.TIME_STAT).FirstOrDefault().ToString();


                    if (timr != "2")
                    {
                        p = p + 1;

                    }

                    //(from b in cntx.EXP_RELATION_DOC where b.EEDO_EEDO_ID == eedos select b.EEDO_EEDO_ID_R);

                }
                //int eedos = Convert.ToInt32(EEDO_EEDO_ID_Rs);
                //string peiroc = (from b in cntx.EXP_RELATION_DOC
                //                 join c in cntx.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals c.EEDO_ID
                //                 where b.EEDO_EEDO_ID_R == eedos && c.OUT_FUNC == "1"
                //                 select b).Count().ToString();



                //int p = Convert.ToInt32(peiroc);
                if (p > 1)
                {
                    var RetVal = (from b in Db.EXP_ANALYZOR_EVENT where b.EANA_TYPE == 1 && b.EANA_ROW == 10 select new { b.EANA_ROW, b.EANA_DESC });

                    return Json(RetVal, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var RetVal = (from b in Db.EXP_ANALYZOR_EVENT where b.EANA_TYPE == 1 select new { b.EANA_ROW, b.EANA_DESC });

                    return Json(RetVal, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                var RetVal = (from b in Db.EXP_ANALYZOR_EVENT where b.EANA_TYPE == 1 select new { b.EANA_ROW, b.EANA_DESC });

                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
        }


        [EntityAuthorize("EXP_EXPI_DOC> insert, select, update|EXP_EDOC_INSTRU> insert, select, delete|EXP_SUPL_DOC> insert, select, delete|EXP_RELATION_DOC> insert, select, update|EXP_EITEM_DOC_VALUE> insert, delete|EXP_TYPE_DOC> select|EXP_POST_LINE> select|EXP_POST_LINE_INSTRU> select")]
        /*این اکشن برای تغییراتی که بروی ایتم های قابل ویرایش در فرم های که با کارتابل در هر وظیفه باز می شود عمل می کند */
        public ActionResult Update_Expi_Doc(EXP_EXPI_DOC objecttemp)
        {
            int notid = 0;
            string curent = string.Empty;

            int idtype = 0;

            idtype = Convert.ToInt32(Session["etdo_id"]);

            string EEDO_ID = Request.Form["EXP_EXPI_DOC.EEDO_ID"];
            objecttemp.EEDO_ID = Convert.ToInt32(EEDO_ID);
            int ideedo = Convert.ToInt32(EEDO_ID);

            string time = string.Empty;


            if (Request.Form["notId"] != null)
                notid = Convert.ToInt32(Request.Form["notId"].ToString());
            else
                notid = Convert.ToInt32(Session["notid"]);

            AsrWorkFlowProcess p1 = new AsrWorkFlowProcess(Convert.ToInt32(notid));
            /*بدست اوردن مرحله وضعیفه ای که در ان هستیم */
            curent = p1.CurrentStat;
            string flows = p1.FlowName;
            var chkl = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == ideedo select b).FirstOrDefault();
            //Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
            string EEDODATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
            string FIRSDATE = Request.Form["EXP_EXPI_DOC.FIRS_DATE"];
            string dman15d = Request.Form["dman15"];
            string EDATE1 = Request.Form["EXP_EXPI_DOC.EDATE"];

            string time1 = Request.Form["EXP_EXPI_DOC.FIRS_TIME"];
            string timet = Request.Form["END_TIME"];

            if (EEDODATE != "" && EEDODATE != null)
            {

                //DateTime miladiDate = dateTime.GetMiladiDateTime(EEDODATE);
                //DateTime currentDate = DateTime.Now;
                //if (offdate.CompareTo(EEDODATE) == 0)
                //{
                //    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ روز بزرگتر نمی تواند باشد" }.ToJson();
                //}
                if (FIRSDATE != "" && FIRSDATE != null)
                {
                    //DateTime miladiDate = dateTime.GetMiladiDateTime(EEDODATE);
                    //DateTime fDate = dateTime.GetMiladiDateTime(FIRSDATE);

                    if (FIRSDATE.CompareTo(EEDODATE) < 0)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ اعلام برای اجرا بزرگتر نمی تواند باشد" }.ToJson();
                    }

                    if (dman15d != "" && dman15d != null)
                    {
                        //DateTime miladiDate = dateTime.GetMiladiDateTime(FIRSDATE);
                        //DateTime fDate1 = dateTime.GetMiladiDateTime(dman15d);

                        if (dman15d.CompareTo(FIRSDATE) < 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ اعلام برای اجرا بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        if (EDATE1 != "" && EDATE1 != null)
                        {
                            //DateTime miladiDate = dateTime.GetMiladiDateTime(FIRSDATE);
                            //DateTime fDate1 = dateTime.GetMiladiDateTime(EDATE1);

                            if (EDATE1.CompareTo(FIRSDATE) < 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ اعلام برای اجرا بزرگتر نمی تواند باشد" }.ToJson();
                            }
                            else
                            {

                                if (time1 != "" && time1 != null && timet != "" && timet != null)
                                {
                                    TimeSpan t1 = TimeSpan.Parse(time1);
                                    TimeSpan t2 = TimeSpan.Parse(timet);
                                    if (EDATE1.CompareTo(FIRSDATE) == 0)
                                    {
                                        if (t1.CompareTo(t2) > 0)
                                        {
                                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان رفع عیب از زمان اعلام برای اجرا نمی تواند کوچکتر باشد" }.ToJson();
                                        }

                                    }
                                    //if (EDATE1.CompareTo(FIRSDATE) == 0)
                                    //{
                                    //    if (time1.CompareTo(timet) > 0)
                                    //    {
                                    //        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان رفع عیب از زمان اعلام برای اجرا نمی تواند کوچکتر باشد" }.ToJson();
                                    //    }

                                    //}
                                }


                            }


                        }

                    }



                }



            }

            if (curent == "MESSAGECENT")
            {
                string infltype = "";
                //string tdef =Request.Form["tdef1"].ToString();
                if (!string.IsNullOrEmpty(Request.Form["INFLTYPE"]))
                {
                    infltype = Request.Form["INFLTYPE"].ToString();
                }
                if ((curent == "MESSAGECENT" && infltype == "0") || curent == "CRATEOR")
                {


                    if (Request.Form["DESC"] == "" || Request.Form["EXP_EXPI_DOC.EEDO_DATE"] == "" ||
                      Request.Form["EEDO_TIME"] == "" || Request.Form["EFUN_EFUN_ID"] == "" || Request.Form["PRSN_EMP_out"] == "" || Request.Form["descd"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات برای ثبت کامل نیست" }.ToJson();
                    }
                }
            }
            if (curent == "MANEGMENT" && chkl.SEND_TYPE == "1")
            { curent = "WORKER"; }
            if (curent == "WORKER")
            {
                string nfix = Request.Form["nfix"].ToString();

                if (nfix == null || nfix == "")
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "وضعیت رفع عیب را مشخص نمایید" }.ToJson();
                }



            }
            /*بدست اوردن ایتم های این وظیفه */
            var item_type_doc = from b in Db.SEC_JOB_TYPE_DOC
                                join c in Db.SEC_JOB_TYPE_ITEM on b.JDTY_ID equals c.JDTY_JDTY_ID
                                join k in Db.EXP_ITEM_TYPE_DOC on c.EITY_EITY_ID equals k.EITY_ID
                                orderby k.EITY_ORDE
                                where k.ETDO_ETDO_ID == idtype && k.ACTV_TYPE == "1" && b.ACTIV_NAME == curent && c.ACTI_TYPE == 0 && k.EITY_TYPE == "248"
                                select k;



            /*ثبت تغییرات فرم دیفکت در جدول */
            foreach (EXP_ITEM_TYPE_DOC IType in item_type_doc)
            {
                switch (IType.EITY_DESC)
                {
                    case "EEDO_DESC":
                        chkl.EEDO_DESC = Request.Form["EXP_EXPI_DOC.EEDO_DESC"];
                        break;
                    case "DEFC_DESC":
                        chkl.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];

                        break;
                    case "DOC_NUMB":
                        chkl.DOC_NUMB = Request.Form["EXP_EXPI_DOC.DOC_NUMB"];
                        break;
                    case "FIRS_DATE":
                        chkl.FIRS_DATE = Request.Form["EXP_EXPI_DOC.FIRS_DATE"];
                        break;
                    case "FIRS_TIME":
                        chkl.FIRS_TIME = Request.Form["FIRS_TIME"];
                        break;
                    case "END_DATE":
                        chkl.END_DATE = Request.Form["EXP_EXPI_DOC.EDATE"];
                        break;
                    case "END_TIME":
                        chkl.END_TIME = Request.Form["END_TIME"];
                        break;
                    case "EEDO_DATE":
                        chkl.EEDO_DATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
                        break;
                    case "EEDO_TIME":
                        chkl.EEDO_TIME = Request.Form["EEDO_TIME"];
                        break;
                    case "EEDO_YEAR":
                        chkl.EEDO_YEAR = Request.Form["EEDO_YEAR"];
                        break;
                    case "ACTI_NACT":
                        chkl.ACTI_NACT = Request.Form["EXP_EXPI_DOC.ACTI_NACT"];
                        break;
                    case "LETT_TYPE":
                        chkl.LETT_TYPE = Request.Form["nfix"];
                        break;
                    case "EVEN_TYPE":
                        chkl.EVEN_TYPE = Request.Form["respletttype"];
                        break;
                    case "EPOL_EPOL_ID":
                        chkl.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);

                        break;
                    case "EFUN_EFUN_ID":

                        chkl.EFUN_EFUN_ID = 1081;//Convert.ToInt32(Request.Form["EFUN_EFUN_ID1"]);
                        break;
                    case "ORGAN_CODE":

                        chkl.ORGA_MANA_ASTA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_MANA_ASTA_CODE"];
                        chkl.ORGA_MANA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_MANA_CODE"];
                        chkl.ORGA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_CODE"];
                        break;
                    case "CPRO_PRJ_CODE":
                        chkl.CPRO_CPLA_PLN_CODE = Convert.ToInt16(Request.Form["EXP_EXPI_DOC.CPRO_CPLA_PLN_CODE"]);
                        chkl.CPRO_PRJ_CODE = Convert.ToInt16(Request.Form["EXP_EXPI_DOC.CPRO_PRJ_CODE"]);

                        break;
                    case "ANPT_ANPT_ID":
                        chkl.ANPT_ANPT_ID = Convert.ToInt32(Request.Form["EXP_EXPI_DOC.ANPT_ANPT_ID"]);
                        break;
                    case "OUT_FUNC":

                        chkl.OUT_FUNC = Request.Form["DESC"];
                        break;
                    case "SEND_TYPE":

                        chkl.SEND_TYPE = Request.Form["checkde"];
                        break;


                    case "CONF_TYPE":

                        chkl.CONF_TYPE = Request.Form["confcheck"];
                        decimal? EDO_ID_R = Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == ideedo).Select(xx => xx.EEDO_EEDO_ID_R).FirstOrDefault();
                        string sql = null;
                        if (EDO_ID_R != null)
                        {
                            sql = (string.Format("update exp_expi_doc set conf_type={0} where eedo_id={1}", chkl.CONF_TYPE, EDO_ID_R));
                            Db.Database.ExecuteSqlCommand(sql);




                        }
                        if (Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == Db.EXP_RELATION_DOC.Where(yy => yy.EEDO_EEDO_ID == ideedo).Select(yy => yy.EEDO_EEDO_ID_R).FirstOrDefault()).Any())
                        {
                            sql = (string.Format("update exp_expi_doc set conf_type={0} where eedo_id={1}", chkl.CONF_TYPE, Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == EDO_ID_R).Select(xx => xx.EEDO_EEDO_ID_R).FirstOrDefault()));
                            Db.Database.ExecuteSqlCommand(sql);

                        }
                        break;
                    case "sendcenter":
                        if (Request.Form["sendidd"] != null && Request.Form["sendidd"] != "")
                        {
                            chkl.EANA_EANA_ROW = Convert.ToInt32(Request.Form["sendidd"].ToString());
                        }
                        else
                        { chkl.EANA_EANA_ROW = null; }
                        break;
                    //case "descprogram":
                    //    chkl.PROG_DESC = Request.Form["EXP_EXPI_DOC.PROG_DESC"];
                    //    break;
                    case "WORK_DESC":
                        chkl.WORK_DESC = Request.Form["EXP_EXPI_DOC.WORK_DESC"];
                        break;
                    case "INFL_TYPE":
                        chkl.INFL_TYPE = Request.Form["INFLTYPE"];
                        break;
                }




            }

            if (chkl.LETT_TYPE != null)
            {
                if (chkl.LETT_TYPE == "0")
                {
                    chkl.WORK_DESC = "";
                    chkl.EVEN_TYPE = "";
                }
                if (chkl.LETT_TYPE == "1")
                {
                    chkl.END_DATE = "";
                    chkl.END_TIME = "";
                }
                if (chkl.LETT_TYPE == "2")
                {
                    chkl.END_DATE = "";
                    chkl.END_TIME = "";

                }
                if (chkl.LETT_TYPE == "3")
                {
                    chkl.WORK_DESC = "";
                    chkl.EVEN_TYPE = "";
                    chkl.END_DATE = "";
                    chkl.END_TIME = "";
                }



            }
            var daily = from b in Db.EXP_DAILY_CHECKLIST_VAR
                        where b.EXP_CHECKLIST_EXPI.Where(yy => yy.EEDO_EEDO_ID == chkl.EEDO_ID).Any()
                        && b.EXP_DAILY_CHECKLIST_HEAD.EDCH_DATE.CompareTo(chkl.END_DATE) > 0
                        select b;


            //  Where  b.EXP_CHECKLIST_EXPI.Where(yy => yy.EEDO_EEDO_ID == chkl.EEDO_ID).Any() && b.EXP_DAILY_CHECKLIST_HEAD.EDCH_DATE.CompareTo(chkl.END_DATE) > 0)
            // Select(xx=>xx.EXP_CHECKLIST_EXPI.Select(yy=>yy.CHEX_ID).FirstOrDefault();

            //if (chkl.EANA_EANA_ROW == null && Request.Form["INFLTYPE"]!=null)
            //{ return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "به کدام گروه ارجا داده شود مشخص نیست " }.ToJson(); }
            //else
            //{
            //Db.EXP_DAILY_CHECKLIST_VAR.Remove(daily.FirstOrDefault());
            try
            {
                foreach (var item in daily)
                {
                    Db.Database.ExecuteSqlCommand(string.Format("delete from EXP_CHECKLIST_EXPI where CHEX_ID={0}", item.EXP_CHECKLIST_EXPI.Select(xx => xx.CHEX_ID).FirstOrDefault()));
                    Db.Database.ExecuteSqlCommand(string.Format("delete from EXP_DAILY_CHECKLIST_VAR where EDCV_ID={0}", item.EDCV_ID));

                }
            }
            catch (Exception ex)
            {


            }
            Db.SaveChanges();

            int idinst = 0;

            var rel1 = new EXP_EDOC_INSTRU();
            /*ثبت تجهیزات */


            int f = 161;
            string calssts = Request.Form["EINSC"];
            int classt = Convert.ToInt32(calssts);
            int idinstdef = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b.EDIN_ID).Count();

            if (idinstdef > 0)
            { rel1 = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b).FirstOrDefault(); }
            else
            { rel1.EEDO_EEDO_ID = chkl.EEDO_ID; }

            //string func = Request.Form["program1"];
            // int f = Convert.ToInt32(func);
            if (f == 16)
            { /*ثبت تجهیزات مخابراتی */
                if (Request.Form["Point"] != "" && Request.Form["Point"] != null)
                {
                    if (Request.Form["POSTINST1"] != "" && Request.Form["POSTINST1"] != null)
                    {
                        string POSTpoint = Request.Form["Point"];

                        string POSTINST = Request.Form["POSTINST1"];

                        string sql = string.Format("delete from EXP_EDOC_INSTRU  where  EEDO_EEDO_ID={0}", chkl.EEDO_ID);
                        Db.Database.ExecuteSqlCommand(sql);
                        /*حذف تجهیزات دیفکت و ثبت دوباره تجهیزات جدید مورد نظر کاربر*/

                        idinst = Convert.ToInt32(POSTINST);
                        // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                        //if (id == 0)
                        //{
                        rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);
                        rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;
                        rel1.EPNT_EPNT_ROW = Convert.ToInt32(POSTpoint);

                        //}
                    }
                }
            }
            else
            { /*در صورتیکه برنامه برقی باشد تجهیز ثبت می شود */


                if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                {
                    //var qid = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b).FirstOrDefault();

                    rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                    //cntx.SaveChanges();
                }


                if (classt != 281 && classt > 4)
                {

                    string POSTINST = Request.Form["POSTINSTTT"];
                    string detailINST = Request.Form["detailp"];
                    if (!string.IsNullOrEmpty(POSTINST))
                    {
                        idinst = Convert.ToInt32(POSTINST);
                        // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                        //if (id == 0)
                        //{

                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                        rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);

                        rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                        rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                        // }


                    }

                }
                else
                {

                    string typeinst = Request.Form["typeinst1"];
                    if (typeinst == "1")
                    {


                        string POSTINST = Request.Form["POSTINSTTT"];
                        string detailINST = Request.Form["detailp"];
                        if (!string.IsNullOrEmpty(POSTINST))
                        {
                            idinst = Convert.ToInt32(POSTINST);
                            // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                            //if (id == 0)
                            //{
                            //    if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                            //    {
                            //        rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                            //    }
                            rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                            rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                            rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                            rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);
                            rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                            rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                            // }
                        }

                    }
                    else
                    {


                        string POSTINST = Request.Form["POSTINST"];
                        string detailINST = Request.Form["detailp"];
                        if (!string.IsNullOrEmpty(POSTINST))
                        {
                            idinst = Convert.ToInt32(POSTINST);
                            // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                            //if (id == 0)
                            //{
                            //    if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                            //    {
                            //        rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                            //    }
                            rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                            rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                            rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                            rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);
                            rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                            rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                            //}
                        }
                    }
                }
            }
            if (idinstdef > 0)
            {


                Db.SaveChanges();


            }
            else
            {
                Db.EXP_EDOC_INSTRU.Add(rel1);
                Db.SaveChanges();
            }


            /*ثبت اطلاعات گزارش دهنده های دیفکت */

            string Org1 = string.Empty;
            short Ope1 = 0;
            int per = 0;
            string organn = Request.Form["ORGA_CODEconf1"];
            if (!string.IsNullOrEmpty(organn))
            { /*بدست اوردن سازمان پرسنل */
                if (Request.Form["ORGA_CODEconf1"] != "" && Request.Form["ORGA_CODEconf1"] != null)
                    Org1 = Request.Form["ORGA_CODEconf1"].ToString();
                if (Request.Form["PRSN_EMP_NUMB1"] != "" && Request.Form["PRSN_EMP_NUMB1"] != null)
                    Ope1 = short.Parse(Request.Form["PRSN_EMP_NUMB1"].ToString());
                if (Request.Form["PRSN_EMP_out"] != "" && Request.Form["PRSN_EMP_out"] != null)
                    per = Convert.ToInt32(Request.Form["PRSN_EMP_out"].ToString());

                var rel2 = new EXP_SUPL_DOC();
                /*حذف اطلاعات اپراتور گزارش دهنده برای ثبت اپراتور جدید */
                string sqlsupl = string.Format("delete from EXP_SUPL_DOC  where POSI_TYEP='0' and  EEDO_EEDO_ID={0}", chkl.EEDO_ID);
                Db.Database.ExecuteSqlCommand(sqlsupl);

                if (Ope1 != 0)
                { /*ثبت اطلاعات اپراتور گزارش دهنده در صورتیکه پرسنل شرکت باشد */
                    int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.PRSN_EMP_NUMB == Ope1 select b.ESUD_ID).Count();
                    if (idm == 0)
                    {
                        rel2.EEDO_EEDO_ID = chkl.EEDO_ID;
                        rel2.ORGA_CODE = Org1;
                        rel2.ORGA_MANA_CODE = "6";
                        rel2.ORGA_MANA_ASTA_CODE = "7";
                        rel2.POSI_TYEP = "0";
                        rel2.PRSN_EMP_NUMB = Ope1;

                        Db.EXP_SUPL_DOC.Add(rel2);
                        Db.SaveChanges();
                    }
                }
                else
                {
                    if (per != 0)
                    { /*ثبت اطلاعات اپراتور گزارش دهنده در صورتیکه پرسنل شرکت نباشد */
                        int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.OUTP_OUTP_ID == per select b.ESUD_ID).Count();
                        if (idm == 0)
                        {
                            rel2.EEDO_EEDO_ID = chkl.EEDO_ID;
                            rel2.ORGA_CODE = Org1;
                            rel2.ORGA_MANA_CODE = "6";
                            rel2.ORGA_MANA_ASTA_CODE = "7";
                            rel2.POSI_TYEP = "0";
                            rel2.OUTP_OUTP_ID = per;

                            Db.EXP_SUPL_DOC.Add(rel2);
                            Db.SaveChanges();
                        }
                    }
                }
            }


            /*ثبت اطلاعات دیفکت در حالت پیرو که اطلاعات دیفکت اصلی را ثبت می نماییم */
            var rel3 = new EXP_RELATION_DOC();
            string EEDO_EEDO_ID_R = Request.Form["EEDO_EEDO_ID_R"];
            if (!string.IsNullOrEmpty(EEDO_EEDO_ID_R))
            {
                string sql = string.Format("delete from EXP_RELATION_DOC  where EEDO_EEDO_ID_R in (select eedo_id from EXP_EXPI_DOC where etdo_etdo_id!=21) and  EEDO_EEDO_ID={0}", EEDO_ID);


                Db.Database.ExecuteSqlCommand(sql);
                rel3.EEDO_EEDO_ID = chkl.EEDO_ID;
                rel3.EEDO_EEDO_ID_R = Convert.ToInt32(EEDO_EEDO_ID_R);
                Db.EXP_RELATION_DOC.Add(rel3);
                Db.SaveChanges();
            }

            /*ثبت اطلاعات مقایر ایتم های داینامیک فرم دیفکت */
            string srow = Request.Form["count"];
            int row = Convert.ToInt32(srow);
            var value = new EXP_EITEM_DOC_VALUE();
            for (int i = 0; i <= row; i++)
            {
                string val = Request.Form[i.ToString()];
                if (string.IsNullOrEmpty(val))
                {
                    val = Request.Form["dman" + i.ToString()];
                }

                string EITY_ID = Request.Form["EITY_ID" + i.ToString()];
                if (!string.IsNullOrEmpty(EITY_ID))
                {
                    if (!string.IsNullOrEmpty(val))
                    {
                        string sql = string.Format("DELETE FROM EXP_EITEM_DOC_VALUE WHERE EEDO_EEDO_ID={0} and EITY_EITY_ID={1}", EEDO_ID, EITY_ID);
                        Db.Database.ExecuteSqlCommand(sql);
                    }
                }

                if (!string.IsNullOrEmpty(val))
                {
                    value.EEDO_EEDO_ID = chkl.EEDO_ID;
                    value.EITY_EITY_ID = Convert.ToInt32(EITY_ID);
                    value.EIDR_VALUE = val;
                    Db.EXP_EITEM_DOC_VALUE.Add(value);
                    Db.SaveChanges();
                }
            }

            int etdo_id = Convert.ToInt32(chkl.ETDO_ETDO_ID);
            string bodymessage = string.Empty;
            string doc_name = (from b in Db.EXP_TYPE_DOC where b.ETDO_ID == etdo_id select b.ETDO_DESC).FirstOrDefault();
            string instn = string.Empty;
            string insttype = string.Empty;
            string postn = string.Empty;
            if (idinst != 0)
            {
                postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == chkl.EPOL_EPOL_ID select b.EPOL_NAME).FirstOrDefault().ToString();
                var w = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == idinst select b);
                instn = w.FirstOrDefault().CODE_NAME;
                insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();
                if (insttype == "1")
                    instn = " خط " + instn;
                else
                    instn = " تجهیز " + instn;
            }
            bodymessage = " دیفکت " + "به شماره" + chkl.DOC_NUMB + " در تاریخ " + chkl.EEDO_DATE + " مربوط به " + postn + " و " + instn + " میباشد ";
            AsrWorkFlowProcess fp2 = new AsrWorkFlowProcess(notid);
            fp2.SetKeyValue("BODY", bodymessage);
            /*ارسال پیغام به کاربر برای نشان  دادن ثبت دیفکنت */
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", ideedo), CoustomData = ideedo.ToString() }.ToJson();
            // }
        }







        public ActionResult Update_Expi_Doc_MessageCenter(EXP_EXPI_DOC objecttemp)
        {
            int notid = 0;
            string curent = string.Empty;

            int idtype = 0;

            idtype = Convert.ToInt32(Session["etdo_id"]);

            string EEDO_ID = Request.Form["EXP_EXPI_DOC.EEDO_ID"];
            objecttemp.EEDO_ID = Convert.ToInt32(EEDO_ID);
            int ideedo = Convert.ToInt32(EEDO_ID);

            string time = string.Empty;


            if (Request.Form["notId"] != null)
                notid = Convert.ToInt32(Request.Form["notId"].ToString());
            else
                notid = Convert.ToInt32(Session["notid"]);

            AsrWorkFlowProcess p1 = new AsrWorkFlowProcess(Convert.ToInt32(notid));
            /*بدست اوردن مرحله وضعیفه ای که در ان هستیم */
            curent = p1.CurrentStat;
            string flows = p1.FlowName;
            var chkl = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == ideedo select b).FirstOrDefault();
            //Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
            string EEDODATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
            string FIRSDATE = Request.Form["EXP_EXPI_DOC.FIRS_DATE"];
            string dman15d = Request.Form["dman15"];
            string EDATE1 = Request.Form["EXP_EXPI_DOC.EDATE"];

            string time1 = Request.Form["EXP_EXPI_DOC.FIRS_TIME"];
            string timet = Request.Form["END_TIME"];

            if (EEDODATE != "" && EEDODATE != null)
            {

                //DateTime miladiDate = dateTime.GetMiladiDateTime(EEDODATE);
                //DateTime currentDate = DateTime.Now;
                //if (offdate.CompareTo(EEDODATE) == 0)
                //{
                //    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ روز بزرگتر نمی تواند باشد" }.ToJson();
                //}
                if (FIRSDATE != "" && FIRSDATE != null)
                {
                    //DateTime miladiDate = dateTime.GetMiladiDateTime(EEDODATE);
                    //DateTime fDate = dateTime.GetMiladiDateTime(FIRSDATE);

                    if (FIRSDATE.CompareTo(EEDODATE) < 0)
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ اعلام برای اجرا بزرگتر نمی تواند باشد" }.ToJson();
                    }

                    if (dman15d != "" && dman15d != null)
                    {
                        //DateTime miladiDate = dateTime.GetMiladiDateTime(FIRSDATE);
                        //DateTime fDate1 = dateTime.GetMiladiDateTime(dman15d);

                        if (dman15d.CompareTo(FIRSDATE) < 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ اعلام برای اجرا بزرگتر نمی تواند باشد" }.ToJson();
                        }
                        if (EDATE1 != "" && EDATE1 != null)
                        {
                            //DateTime miladiDate = dateTime.GetMiladiDateTime(FIRSDATE);
                            //DateTime fDate1 = dateTime.GetMiladiDateTime(EDATE1);

                            if (EDATE1.CompareTo(FIRSDATE) < 0)
                            {
                                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "تاریخ اعلام از تاریخ اعلام برای اجرا بزرگتر نمی تواند باشد" }.ToJson();
                            }
                            else
                            {

                                if (time1 != "" && time1 != null && timet != "" && timet != null)
                                {
                                    TimeSpan t1 = TimeSpan.Parse(time1);
                                    TimeSpan t2 = TimeSpan.Parse(timet);
                                    if (EDATE1.CompareTo(FIRSDATE) == 0)
                                    {
                                        if (t1.CompareTo(t2) > 0)
                                        {
                                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان رفع عیب از زمان اعلام برای اجرا نمی تواند کوچکتر باشد" }.ToJson();
                                        }

                                    }
                                    //if (EDATE1.CompareTo(FIRSDATE) == 0)
                                    //{
                                    //    if (time1.CompareTo(timet) > 0)
                                    //    {
                                    //        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "زمان رفع عیب از زمان اعلام برای اجرا نمی تواند کوچکتر باشد" }.ToJson();
                                    //    }

                                    //}
                                }


                            }


                        }

                    }



                }



            }

            if (curent == "MESSAGECENT")
            {
                string infltype = "";
                //string tdef =Request.Form["tdef1"].ToString();
                if (!string.IsNullOrEmpty(Request.Form["INFLTYPE"]))
                {
                    infltype = Request.Form["INFLTYPE"].ToString();
                }
                if ((curent == "MESSAGECENT" && infltype == "0") || curent == "CRATEOR")
                {


                    if (Request.Form["DESC"] == "" || Request.Form["EXP_EXPI_DOC.EEDO_DATE"] == "" ||
                      Request.Form["EEDO_TIME"] == "" || Request.Form["EFUN_EFUN_ID"] == "" || Request.Form["PRSN_EMP_out"] == "" || Request.Form["descd"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "اطلاعات برای ثبت کامل نیست" }.ToJson();
                    }
                }
            }
            if (curent == "MANEGMENT" && chkl.SEND_TYPE == "1")
            { curent = "WORKER"; }
            if (curent == "WORKER")
            {
                string nfix = Request.Form["nfix"].ToString();

                if (nfix == null || nfix == "")
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "وضعیت رفع عیب را مشخص نمایید" }.ToJson();
                }



            }
            /*بدست اوردن ایتم های این وظیفه */
            var item_type_doc = from b in Db.SEC_JOB_TYPE_DOC
                                join c in Db.SEC_JOB_TYPE_ITEM on b.JDTY_ID equals c.JDTY_JDTY_ID
                                join k in Db.EXP_ITEM_TYPE_DOC on c.EITY_EITY_ID equals k.EITY_ID
                                orderby k.EITY_ORDE
                                where k.ETDO_ETDO_ID == idtype && k.ACTV_TYPE == "1" && b.ACTIV_NAME == "CRATEOR" && c.ACTI_TYPE == 0 && k.EITY_TYPE == "248"
                                select k;



            /*ثبت تغییرات فرم دیفکت در جدول */
            foreach (EXP_ITEM_TYPE_DOC IType in item_type_doc)
            {
                switch (IType.EITY_DESC)
                {
                    case "EEDO_DESC":
                        chkl.EEDO_DESC = Request.Form["EXP_EXPI_DOC.EEDO_DESC"];
                        break;
                    case "DEFC_DESC":
                        chkl.DEFC_DESC = Request.Form["EXP_EXPI_DOC.DEFC_DESC"];

                        break;
                    case "DOC_NUMB":
                        chkl.DOC_NUMB = Request.Form["EXP_EXPI_DOC.DOC_NUMB"];
                        break;
                    case "FIRS_DATE":
                        chkl.FIRS_DATE = Request.Form["EXP_EXPI_DOC.FIRS_DATE"];
                        break;
                    case "FIRS_TIME":
                        chkl.FIRS_TIME = Request.Form["FIRS_TIME"];
                        break;
                    case "END_DATE":
                        chkl.END_DATE = Request.Form["EXP_EXPI_DOC.EDATE"];
                        break;
                    case "END_TIME":
                        chkl.END_TIME = Request.Form["END_TIME"];
                        break;
                    case "EEDO_DATE":
                        chkl.EEDO_DATE = Request.Form["EXP_EXPI_DOC.EEDO_DATE"];
                        break;
                    case "EEDO_TIME":
                        chkl.EEDO_TIME = Request.Form["EEDO_TIME"];
                        break;
                    case "EEDO_YEAR":
                        chkl.EEDO_YEAR = Request.Form["EEDO_YEAR"];
                        break;
                    case "ACTI_NACT":
                        chkl.ACTI_NACT = Request.Form["EXP_EXPI_DOC.ACTI_NACT"];
                        break;
                    case "LETT_TYPE":
                        chkl.LETT_TYPE = Request.Form["nfix"];
                        break;
                    case "EVEN_TYPE":
                        chkl.EVEN_TYPE = Request.Form["respletttype"];
                        break;
                    case "EPOL_EPOL_ID":
                        chkl.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);

                        break;
                    case "EFUN_EFUN_ID":

                        chkl.EFUN_EFUN_ID = Convert.ToInt32(Request.Form["EFUN_EFUN_ID1"]);
                        break;
                    case "ORGAN_CODE":

                        chkl.ORGA_MANA_ASTA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_MANA_ASTA_CODE"];
                        chkl.ORGA_MANA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_MANA_CODE"];
                        chkl.ORGA_CODE = Request.Form["EXP_EXPI_DOC.ORGA_CODE"];
                        break;
                    case "CPRO_PRJ_CODE":
                        chkl.CPRO_CPLA_PLN_CODE = Convert.ToInt16(Request.Form["EXP_EXPI_DOC.CPRO_CPLA_PLN_CODE"]);
                        chkl.CPRO_PRJ_CODE = Convert.ToInt16(Request.Form["EXP_EXPI_DOC.CPRO_PRJ_CODE"]);

                        break;
                    case "ANPT_ANPT_ID":
                        chkl.ANPT_ANPT_ID = Convert.ToInt32(Request.Form["EXP_EXPI_DOC.ANPT_ANPT_ID"]);
                        break;
                    case "OUT_FUNC":

                        chkl.OUT_FUNC = Request.Form["DESC"];

                        if (Request.Form["DESC"] == "0")
                        {
                            Db.Database.ExecuteSqlCommand(string.Format("delete from EXP_RELATION_DOC where EEDO_EEDO_ID={0}", EEDO_ID));
                        };


                        break;
                    case "SEND_TYPE":

                        chkl.SEND_TYPE = Request.Form["checkde"];
                        break;


                    case "CONF_TYPE":

                        chkl.CONF_TYPE = Request.Form["confcheck"];
                        decimal? EDO_ID_R = Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == ideedo).Select(xx => xx.EEDO_EEDO_ID_R).FirstOrDefault();
                        string sql = null;
                        if (EDO_ID_R != null)
                        {
                            sql = (string.Format("update exp_expi_doc set conf_type={0} where eedo_id={1}", chkl.CONF_TYPE, EDO_ID_R));
                            Db.Database.ExecuteSqlCommand(sql);




                        }
                        if (Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == Db.EXP_RELATION_DOC.Where(yy => yy.EEDO_EEDO_ID == ideedo).Select(yy => yy.EEDO_EEDO_ID_R).FirstOrDefault()).Any())
                        {
                            sql = (string.Format("update exp_expi_doc set conf_type={0} where eedo_id={1}", chkl.CONF_TYPE, Db.EXP_RELATION_DOC.Where(xx => xx.EEDO_EEDO_ID == EDO_ID_R).Select(xx => xx.EEDO_EEDO_ID_R).FirstOrDefault()));
                            Db.Database.ExecuteSqlCommand(sql);

                        }
                        break;
                    case "sendcenter":
                        if (Request.Form["sendidd"] != null && Request.Form["sendidd"] != "")
                        {
                            chkl.EANA_EANA_ROW = Convert.ToInt32(Request.Form["sendidd"].ToString());
                        }
                        else
                        { chkl.EANA_EANA_ROW = null; }
                        break;
                    //case "descprogram":
                    //    chkl.PROG_DESC = Request.Form["EXP_EXPI_DOC.PROG_DESC"];
                    //    break;
                    case "WORK_DESC":
                        chkl.WORK_DESC = Request.Form["EXP_EXPI_DOC.WORK_DESC"];
                        break;
                    case "INFL_TYPE":
                        chkl.INFL_TYPE = Request.Form["INFLTYPE"];
                        break;
                }




            }

            if (chkl.LETT_TYPE != null)
            {
                if (chkl.LETT_TYPE == "0")
                {
                    chkl.WORK_DESC = "";
                    chkl.EVEN_TYPE = "";
                }
                if (chkl.LETT_TYPE == "1")
                {
                    chkl.END_DATE = "";
                    chkl.END_TIME = "";
                }
                if (chkl.LETT_TYPE == "2")
                {
                    chkl.END_DATE = "";
                    chkl.END_TIME = "";

                }
                if (chkl.LETT_TYPE == "3")
                {
                    chkl.WORK_DESC = "";
                    chkl.EVEN_TYPE = "";
                    chkl.END_DATE = "";
                    chkl.END_TIME = "";
                }



            }

            //if (chkl.EANA_EANA_ROW == null && Request.Form["INFLTYPE"]!=null)
            //{ return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "به کدام گروه ارجا داده شود مشخص نیست " }.ToJson(); }
            //else
            //{
            Db.SaveChanges();

            int idinst = 0;

            var rel1 = new EXP_EDOC_INSTRU();
            /*ثبت تجهیزات */


            int f = 161;
            string calssts = Request.Form["EINSC"];
            int classt = Convert.ToInt32(calssts);
            int idinstdef = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b.EDIN_ID).Count();

            if (idinstdef > 0)
            { rel1 = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b).FirstOrDefault(); }
            else
            { rel1.EEDO_EEDO_ID = chkl.EEDO_ID; }

            //string func = Request.Form["program1"];
            // int f = Convert.ToInt32(func);
            if (f == 16)
            { /*ثبت تجهیزات مخابراتی */
                if (Request.Form["Point"] != "" && Request.Form["Point"] != null)
                {
                    if (Request.Form["POSTINST1"] != "" && Request.Form["POSTINST1"] != null)
                    {
                        string POSTpoint = Request.Form["Point"];

                        string POSTINST = Request.Form["POSTINST1"];

                        string sql = string.Format("delete from EXP_EDOC_INSTRU  where  EEDO_EEDO_ID={0}", chkl.EEDO_ID);
                        Db.Database.ExecuteSqlCommand(sql);
                        /*حذف تجهیزات دیفکت و ثبت دوباره تجهیزات جدید مورد نظر کاربر*/

                        idinst = Convert.ToInt32(POSTINST);
                        // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                        //if (id == 0)
                        //{
                        rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);
                        rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;
                        rel1.EPNT_EPNT_ROW = Convert.ToInt32(POSTpoint);

                        //}
                    }
                }
            }
            else
            { /*در صورتیکه برنامه برقی باشد تجهیز ثبت می شود */


                if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                {
                    //var qid = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID select b).FirstOrDefault();

                    rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                    //cntx.SaveChanges();
                }


                if (classt != 281 && classt > 4)
                {

                    string POSTINST = Request.Form["POSTINSTTT"];
                    string detailINST = Request.Form["detailp"];
                    if (!string.IsNullOrEmpty(POSTINST))
                    {
                        idinst = Convert.ToInt32(POSTINST);
                        // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                        //if (id == 0)
                        //{

                        rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                        rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                        rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);

                        rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                        rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                        // }


                    }

                }
                else
                {

                    string typeinst = Request.Form["typeinst1"];
                    if (typeinst == "1")
                    {


                        string POSTINST = Request.Form["POSTINSTTT"];
                        string detailINST = Request.Form["detailp"];
                        if (!string.IsNullOrEmpty(POSTINST))
                        {
                            idinst = Convert.ToInt32(POSTINST);
                            // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                            //if (id == 0)
                            //{
                            //    if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                            //    {
                            //        rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                            //    }
                            rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                            rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                            rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                            rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);
                            rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                            rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                            // }
                        }

                    }
                    else
                    {


                        string POSTINST = Request.Form["POSTINSTTT"];
                        string detailINST = Request.Form["detailp"];
                        if (!string.IsNullOrEmpty(POSTINST))
                        {
                            idinst = Convert.ToInt32(POSTINST);
                            // int id = (from b in cntx.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.EPIU_EPIU_ID == idinst select b.EDIN_ID).Count();
                            //if (id == 0)
                            //{
                            //    if (Request.Form["cancel"] != "" && Request.Form["cancel"] != null)
                            //    {
                            //        rel1.EREJ_EREJ_ID = Convert.ToInt32(Request.Form["cancel"].ToString());
                            //    }
                            rel1.EEDO_EEDO_ID = chkl.EEDO_ID;
                            rel1.EPIU_EPIU_ID = Convert.ToInt32(POSTINST);
                            rel1.EERR_EERR_ID = Convert.ToInt32(detailINST);
                            rel1.EPOL_EPOL_ID = Convert.ToInt32(Request.Form["post_name"]);
                            rel1.EERR_EERR_ID_R1 = Convert.ToInt32(Request.Form["descd"]);
                            rel1.ETDO_ETDO_ID = chkl.ETDO_ETDO_ID;

                            //}
                        }
                    }
                }
            }
            if (idinstdef > 0)
            {


                Db.SaveChanges();


            }
            else
            {
                Db.EXP_EDOC_INSTRU.Add(rel1);
                Db.SaveChanges();
            }


            /*ثبت اطلاعات گزارش دهنده های دیفکت */

            string Org1 = string.Empty;
            short Ope1 = 0;
            int per = 0;
            string organn = Request.Form["ORGA_CODEconf1"];
            if (!string.IsNullOrEmpty(organn))
            { /*بدست اوردن سازمان پرسنل */
                if (Request.Form["ORGA_CODEconf1"] != "" && Request.Form["ORGA_CODEconf1"] != null)
                    Org1 = Request.Form["ORGA_CODEconf1"].ToString();
                if (Request.Form["PRSN_EMP_NUMB1"] != "" && Request.Form["PRSN_EMP_NUMB1"] != null)
                    Ope1 = short.Parse(Request.Form["PRSN_EMP_NUMB1"].ToString());
                if (Request.Form["PRSN_EMP_out"] != "" && Request.Form["PRSN_EMP_out"] != null)
                    per = Convert.ToInt32(Request.Form["PRSN_EMP_out"].ToString());

                var rel2 = new EXP_SUPL_DOC();
                /*حذف اطلاعات اپراتور گزارش دهنده برای ثبت اپراتور جدید */
                string sqlsupl = string.Format("delete from EXP_SUPL_DOC  where POSI_TYEP='0' and  EEDO_EEDO_ID={0}", chkl.EEDO_ID);
                Db.Database.ExecuteSqlCommand(sqlsupl);

                if (Ope1 != 0)
                { /*ثبت اطلاعات اپراتور گزارش دهنده در صورتیکه پرسنل شرکت باشد */
                    int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.PRSN_EMP_NUMB == Ope1 select b.ESUD_ID).Count();
                    if (idm == 0)
                    {
                        rel2.EEDO_EEDO_ID = chkl.EEDO_ID;
                        rel2.ORGA_CODE = Org1;
                        rel2.ORGA_MANA_CODE = "6";
                        rel2.ORGA_MANA_ASTA_CODE = "7";
                        rel2.POSI_TYEP = "0";
                        rel2.PRSN_EMP_NUMB = Ope1;

                        Db.EXP_SUPL_DOC.Add(rel2);
                        Db.SaveChanges();
                    }
                }
                else
                {
                    if (per != 0)
                    { /*ثبت اطلاعات اپراتور گزارش دهنده در صورتیکه پرسنل شرکت نباشد */
                        int idm = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == chkl.EEDO_ID && b.OUTP_OUTP_ID == per select b.ESUD_ID).Count();
                        if (idm == 0)
                        {
                            rel2.EEDO_EEDO_ID = chkl.EEDO_ID;
                            rel2.ORGA_CODE = Org1;
                            rel2.ORGA_MANA_CODE = "6";
                            rel2.ORGA_MANA_ASTA_CODE = "7";
                            rel2.POSI_TYEP = "0";
                            rel2.OUTP_OUTP_ID = per;

                            Db.EXP_SUPL_DOC.Add(rel2);
                            Db.SaveChanges();
                        }
                    }
                }
            }


            /*ثبت اطلاعات دیفکت در حالت پیرو که اطلاعات دیفکت اصلی را ثبت می نماییم */
            var rel3 = new EXP_RELATION_DOC();
            string EEDO_EEDO_ID_R = Request.Form["master_doc"];
            if (!string.IsNullOrEmpty(EEDO_EEDO_ID_R))
            {
                string sql = string.Format("delete from EXP_RELATION_DOC  where EEDO_EEDO_ID_R in (select eedo_id from EXP_EXPI_DOC where etdo_etdo_id!=21) and  EEDO_EEDO_ID={0}", EEDO_ID);


                Db.Database.ExecuteSqlCommand(sql);
                rel3.EEDO_EEDO_ID = chkl.EEDO_ID;
                rel3.EEDO_EEDO_ID_R = Convert.ToInt32(EEDO_EEDO_ID_R);
                Db.EXP_RELATION_DOC.Add(rel3);
                Db.SaveChanges();
            }

            /*ثبت اطلاعات مقایر ایتم های داینامیک فرم دیفکت */
            string srow = Request.Form["count"];
            int row = Convert.ToInt32(srow);
            var value = new EXP_EITEM_DOC_VALUE();
            for (int i = 0; i <= row; i++)
            {
                string val = Request.Form[i.ToString()];
                if (string.IsNullOrEmpty(val))
                {
                    val = Request.Form["dman" + i.ToString()];
                }

                string EITY_ID = Request.Form["EITY_ID" + i.ToString()];
                if (!string.IsNullOrEmpty(EITY_ID))
                {
                    if (!string.IsNullOrEmpty(val))
                    {
                        string sql = string.Format("DELETE FROM EXP_EITEM_DOC_VALUE WHERE EEDO_EEDO_ID={0} and EITY_EITY_ID={1}", EEDO_ID, EITY_ID);
                        Db.Database.ExecuteSqlCommand(sql);
                    }
                }

                if (!string.IsNullOrEmpty(val))
                {
                    value.EEDO_EEDO_ID = chkl.EEDO_ID;
                    value.EITY_EITY_ID = Convert.ToInt32(EITY_ID);
                    value.EIDR_VALUE = val;
                    Db.EXP_EITEM_DOC_VALUE.Add(value);
                    Db.SaveChanges();
                }
            }

            int etdo_id = Convert.ToInt32(chkl.ETDO_ETDO_ID);
            string bodymessage = string.Empty;
            string doc_name = (from b in Db.EXP_TYPE_DOC where b.ETDO_ID == etdo_id select b.ETDO_DESC).FirstOrDefault();
            string instn = string.Empty;
            string insttype = string.Empty;
            string postn = string.Empty;
            if (idinst != 0)
            {
                postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == chkl.EPOL_EPOL_ID select b.EPOL_NAME).FirstOrDefault().ToString();
                var w = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == idinst select b);
                instn = w.FirstOrDefault().CODE_NAME;
                insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();
                if (insttype == "1")
                    instn = " خط " + instn;
                else
                    instn = " تجهیز " + instn;
            }
            bodymessage = " دیفکت " + "به شماره" + chkl.DOC_NUMB + " در تاریخ " + chkl.EEDO_DATE + " مربوط به " + postn + " و " + instn + " میباشد ";
            AsrWorkFlowProcess fp2 = new AsrWorkFlowProcess(notid);
            fp2.SetKeyValue("BODY", bodymessage);
            /*ارسال پیغام به کاربر برای نشان  دادن ثبت دیفکنت */
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", ideedo), CoustomData = ideedo.ToString() }.ToJson();
            // }
        }
        public JsonResult archivemaneg(int notId)
        {
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            wp.SetKeyValue("MY_FLAG", "1");
            string idrole = "ARCHIVE";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult manegsendcent(int notId)
        {
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            wp.SetKeyValue("MY_FLAG", "0");
            string idrole = "MESSAGECENT";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult sendpersonpost(int notId, int id)
        {
            //if (id == null)/* در  صورتیکه ارجاع به را انتخاب نکنند به صورت پیش فرض برای تعمیرات پست می رود */
            //{ id = 1; }
            id = Convert.ToInt32((from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b.EPOL_EPOL_ID).FirstOrDefault().ToString());
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);

            wp.SetKeyValue("MY_FLAG", "1");
            string idrole = "MANEGPOST";
            if (Db.EXP_WFEX_V.Where(xx => xx.NOT_ID == notId && xx.STAT == "CLOSED").Any())
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
            var persons = (from c in Db.SEC_USERS.AsEnumerable()
                           join b in Db.SEC_USER_TYPE_POST.AsEnumerable() on c.ROW_NO equals b.SCSU_ROW_NO
                           // join d in cntx.PAY_PERSONEL on c.PRSN_EMP_NUMB equals d.EMP_NUMB
                           where b.EPOL_EPOL_ID == id && b.EURP_TYPE == 0 && b.ETDO_ETDO_ID == 343 && b.EURP_ACTV == 1
                           select new
                           {
                               c.ROW_NO,
                               c.CRET_BY,
                               c.MDFY_BY,
                               c.USER_NAME,
                               c.USER_PASS,
                               c.USER_STATE,
                               c.USER_TYPE,
                               c.SYS_TYPE,
                               c.ORCL_NAME,
                               c.ORCL_PASS,
                               // FIRS_NAME = c.PAY_PERSONEL.FIRS_NAME.HasValue() ? c.PAY_PERSONEL.FIRS_NAME : c.FIRS_NAME,
                               //  FAML_NAME = c.PAY_PERSONEL.FAML_NAME.HasValue() ? c.PAY_PERSONEL.FAML_NAME : c.FAML_NAME
                               FIRS_NAME = c.FIRS_NAME.HasValue() ? c.FIRS_NAME : c.PAY_PERSONEL.FIRS_NAME,
                               FAML_NAME = c.FAML_NAME.HasValue() ? c.FAML_NAME : c.PAY_PERSONEL.FAML_NAME
                           }).ToList();



            return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
            // AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            // //wp.SetKeyValue("MY_FLAG", "1");
            // string idrole = "MANEGPOST";
            // AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");

            //return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult checkarchive(int notId, int eedoid)
        {
            if (notId == 0)
            {
                throw new ArgumentException("Notification Id Can not be null or empty", "notId");
            }
            AsrWorkFlowProcess process = new AsrWorkFlowProcess(notId);
            if (!process.IsOpen)
            {
                throw new Exception("This Process Archived Or not Open");
            }
            var persons = process.GetNextStepUsers();
            var query = from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid && b.CONF_TYPE == "1" && b.EANA_EANA_ROW != 10 select b;
            if (query.Any())
            {
                var query2 = from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID_R == eedoid select b;
                if (!query2.Any())
                {
                    return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
                }

            }
            var q = from b in Db.EXP_EXPI_DOC where b.CONF_TYPE != null && b.EEDO_ID == eedoid select b;
            if (q.Any()) { return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet); }
            else
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult sendstartnode(int notId, string code)
        {
            string orga_code = "0", mana_code = "0", asta_code = "0";
            if (code != null)
            {
                var val = code.Split(',');
                asta_code = val[0].ToString();
                mana_code = val[1].ToString();
                orga_code = val[2].ToString();
            }


            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            wp.SetKeyValue("MY_FLAG", "1");
            string idrole = "MESSAGECENT";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");

            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }


        private string rname(short p, int o, int i)
        {
            string namep = string.Empty;
            if (p != null)
            {
                if (i == 1)
                {
                    namep = (from b in Db.PAY_PERSONEL where b.EMP_NUMB == p select b.FIRS_NAME).FirstOrDefault().ToString();

                }
                else
                {
                    namep = (from b in Db.PAY_PERSONEL where b.EMP_NUMB == p select b.FAML_NAME).FirstOrDefault().ToString();

                }
            }
            else if (o != null)
            {
                if (i == 1)
                {
                    namep = (from b in Db.EXP_OUT_PERSONEL where b.OUTP_ID == o select b.OUTP_FNAME).FirstOrDefault().ToString();
                }
                else
                {
                    namep = (from b in Db.EXP_OUT_PERSONEL where b.OUTP_ID == o select b.OUTP_LNAME).FirstOrDefault().ToString();

                }
            }
            return namep;
        }

        /*اطلاعات پرسنل خارج شرکت را برمی گرداند */


        public ActionResult Personelout(string code)
        {
            string orga_code = "0", mana_code = "0", asta_code = "0";
            if (code != null)
            {
                var val = code.Split(',');
                asta_code = val[0].ToString();
                mana_code = val[1].ToString();
                orga_code = val[2].ToString();
            }
            var query = from b in Db.EXP_OUT_PERSONEL
                        where ((b.ORGA_MANA_ASTA_CODE == asta_code || asta_code == "0") && (b.ORGA_MANA_CODE == mana_code || mana_code == "0") &&
                               (b.ORGA_CODE == orga_code || orga_code == "0"))
                        select new { b.OUTP_ID, fullname = b.OUTP_FNAME + "   " + b.OUTP_LNAME };
            return Json(query, JsonRequestBehavior.AllowGet);


        }


        public JsonResult sendcenterg(int? id, int noteid)
        {
            if (id != 10)
            {
                if (id == null)/* در  صورتیکه ارجاع به را انتخاب نکنند به صورت پیش فرض برای تعمیرات پست می رود */
                { id = 1; }
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess(noteid);

                wp.SetKeyValue("MY_FLAG", "0");
                string idrole = "WORKER";
                var persons = (from c in Db.SEC_USERS
                               join b in Db.SEC_USER_TYPE_POST on c.ROW_NO equals b.SCSU_ROW_NO
                               // join d in Db.PAY_PERSONEL on c.PRSN_EMP_NUMB equals d.EMP_NUMB
                               where b.EANA_EANA_ROW == id && b.EURP_ACTV == 1
                               select new
                               {
                                   c.ROW_NO,
                                   c.CRET_BY,
                                   c.MDFY_BY,
                                   c.USER_NAME,
                                   c.USER_PASS,
                                   c.USER_STATE,
                                   c.USER_TYPE,
                                   c.SYS_TYPE,
                                   c.ORCL_NAME,
                                   c.ORCL_PASS,
                                   FAML_NAME = c.PAY_PERSONEL.FAML_NAME != null ? c.PAY_PERSONEL.FAML_NAME : c.FAML_NAME,
                                   FIRS_NAME = c.PAY_PERSONEL.FIRS_NAME != null ? c.PAY_PERSONEL.FIRS_NAME : c.FIRS_NAME,

                                   // d.FIRS_NAME,
                                   // d.FAML_NAME
                               }).ToList();



                return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
            }
            else
            {

                //  int noteid = AsrWorkFlowProcess.GetNotId("FLW_DEFE", "FANI", eedoid);
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess(noteid);

                wp.SetKeyValue("MY_FLAG", "1");
                string idrole = "ARCHIVE";
                AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");
                return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult RejectManagePost(int? id, int noteid, short? EURP_TYPE)
        {
            var persons = (from c in Db.SEC_USERS
                           join b in Db.SEC_USER_TYPE_POST on c.ROW_NO equals b.SCSU_ROW_NO
                           where b.EANA_EANA_ROW == id && b.EURP_ACTV == 1 && b.EURP_TYPE == EURP_TYPE
                           select new
                           {
                               c.ROW_NO,
                               c.CRET_BY,
                               c.MDFY_BY,
                               c.USER_NAME,
                               c.USER_PASS,
                               c.USER_STATE,
                               c.USER_TYPE,
                               c.SYS_TYPE,
                               c.ORCL_NAME,
                               c.ORCL_PASS,
                               FAML_NAME = c.PAY_PERSONEL.FAML_NAME != null ? c.PAY_PERSONEL.FAML_NAME : c.FAML_NAME,
                               FIRS_NAME = c.PAY_PERSONEL.FIRS_NAME != null ? c.PAY_PERSONEL.FIRS_NAME : c.FIRS_NAME
                           }).ToList();



            return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);

        }

        public JsonResult rejectcenterg(int? id, int noteid)
        {
            if (id != 10)
            {
                if (id == null)/* در  صورتیکه ارجاع به را انتخاب نکنند به صورت پیش فرض برای تعمیرات پست می رود */
                { id = 1; }
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess(noteid);

                wp.SetKeyValue("MY_FLAG", "0");
                string idrole = "WORKER ";
                var persons = (from c in Db.SEC_USERS
                               join b in Db.SEC_USER_TYPE_POST on c.ROW_NO equals b.SCSU_ROW_NO
                               //  join d in Db.PAY_PERSONEL on c.PRSN_EMP_NUMB equals d.EMP_NUMB
                               where b.EANA_EANA_ROW == id && b.EURP_TYPE == 0 && b.EURP_ACTV == 1
                               select new
                               {
                                   c.ROW_NO,
                                   c.CRET_BY,
                                   c.MDFY_BY,
                                   c.USER_NAME,
                                   c.USER_PASS,
                                   c.USER_STATE,
                                   c.USER_TYPE,
                                   c.SYS_TYPE,
                                   c.ORCL_NAME,
                                   c.ORCL_PASS,
                                   FAML_NAME = c.PAY_PERSONEL.FAML_NAME != null ? c.PAY_PERSONEL.FAML_NAME : c.FAML_NAME,
                                   FIRS_NAME = c.PAY_PERSONEL.FIRS_NAME != null ? c.PAY_PERSONEL.FIRS_NAME : c.FIRS_NAME,


                                   // d.FIRS_NAME,
                                   //  d.FAML_NAME
                               }).ToList();



                return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
            }
            else
            {

                //  int noteid = AsrWorkFlowProcess.GetNotId("FLW_DEFE", "FANI", eedoid);
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess(noteid);

                wp.SetKeyValue("MY_FLAG", "1");
                string idrole = "ARCHIVE";
                AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");
                return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult adddescv(int? instid, int? dinst, int? errId)
        {
            Session["inst"] = instid;
            Session["dinstid"] = dinst;


            //     var RetVal = from b in cntx.EXP_ERROR_INST
            //where b.EERR_TYPE == 1 && b.EERR_EERR_ID == detailid && b.EINS_EINS_ID == inst
            //select new { b.EERR_ID, b.EERR_DESC };
            if (errId != null)
            {


                var id1 = (from b in Db.EXP_ERROR_INST where b.EERR_ID == errId select b.EERR_ID).FirstOrDefault();
                ViewBag.ErrorID = id1;
                EXP_ERROR_INST err = (from b in Db.EXP_ERROR_INST where b.EERR_ID == errId select b).FirstOrDefault();
                return View(err);
                //  var desc1 = (from b in cntx.EXP_ERROR_INST where b.EERR_ID == errId select b.EERR_DESC).FirstOrDefault();
                // ViewBag.ErrorDesc = desc1;
            }
            else
            {

                return View();
            }

        }


        public ActionResult createdefp(decimal id, string outfunc)
        {
            var q = (from p in Db.EXP_EXPI_DOC where p.EEDO_ID == id select p).FirstOrDefault();
            var ed = new EXP_EXPI_DOC();



            ed = q;
            //if (outfunc == "")
            //{ ed.TIME_STAT = "1"; ed.INFL_TYPE = ""; }
            //else
            if (outfunc == "1")
            { ed.OUT_FUNC = outfunc; ed.TIME_STAT = "1"; ed.INFL_TYPE = ""; }
            else
            { ed.TIME_STAT = "2"; ed.EANA_EANA_ROW = null; }


            ed.DOC_NUMB = "E0";

            ed.CONF_TYPE = null;
            ed.SEND_TYPE = null;
            ed.FIRS_DATE = null;
            ed.END_DATE = null;
            ed.END_TIME = null;
            Db.EXP_EXPI_DOC.Add(ed);
            Db.SaveChanges();

            int idd = Convert.ToInt32(ed.EEDO_ID.ToString());
            ed.DOC_NUMB = "D" + idd.ToString();
            Db.SaveChanges();

            var einst = new EXP_EDOC_INSTRU();
            einst = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == id select b).FirstOrDefault();
            if (einst != null)
            {
                einst.EEDO_EEDO_ID = idd;

                Db.EXP_EDOC_INSTRU.Add(einst);
                Db.SaveChanges();
            }

            var supid = new EXP_SUPL_DOC();

            supid = (from b in Db.EXP_SUPL_DOC where b.EEDO_EEDO_ID == id select b).FirstOrDefault();
            if (supid != null)
            {
                supid.EEDO_EEDO_ID = idd;

                Db.EXP_SUPL_DOC.Add(supid);
                Db.SaveChanges();
            }


            var query = (from b in Db.EXP_EITEM_DOC_VALUE where b.EEDO_EEDO_ID == id select b);

            foreach (EXP_EITEM_DOC_VALUE VALUE in query)
            {
                // var VALUE = new EXP_EITEM_DOC_VALUE();
                VALUE.EEDO_EEDO_ID = idd;

                Db.EXP_EITEM_DOC_VALUE.Add(VALUE);
                Db.SaveChanges();
            }


            //  var sid = new EXP_EITEM_DOC_VALUE();
            //var sid = (from b in Db.EXP_EITEM_DOC_VALUE where b.EEDO_EEDO_ID == id select b);
            //if (sid != null)
            //{

            //    foreach (var i in sid)
            //    {
            //        var sid1 = new EXP_EITEM_DOC_VALUE();

            //        sid1 = (from b in Db.EXP_EITEM_DOC_VALUE where b.EEDO_EEDO_ID == id && b.EIDR_ID == i.EIDR_ID select b).FirstOrDefault();
            //        sid1.EEDO_EEDO_ID = idd;
            //        //sid1.EIDR_VALUE = null;
            //        Db.EXP_EITEM_DOC_VALUE.Add(sid1);
            //        Db.SaveChanges();
            //    }

            //}
            var rel3 = new EXP_RELATION_DOC();

            rel3.EEDO_EEDO_ID = idd;
            rel3.EEDO_EEDO_ID_R = id;
            Db.EXP_RELATION_DOC.Add(rel3);
            Db.SaveChanges();


            string bodymessage = string.Empty;
            string doc_name = (from b in Db.EXP_TYPE_DOC where b.ETDO_ID == 2 select b.ETDO_DESC).FirstOrDefault();

            string postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == q.EPOL_EPOL_ID select b.EPOL_NAME).FirstOrDefault().ToString();
            var w = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == einst.EPIU_EPIU_ID select b);
            string instn = w.FirstOrDefault().CODE_NAME.ToString();
            string insttype = w.FirstOrDefault().EINS_EINS_ID.ToString();
            if (insttype == "1")
                instn = " خط " + instn;
            else
                instn = " تجهیز " + instn;
            string smessage = " دیفکت " + "به شماره" + idd + " در تاریخ " + q.EEDO_DATE + " مربوط به " + postn + " و " + instn + " میباشد ";
            bodymessage = smessage;

            try
            {
                /*ایجاد یک ردیف جدید کارتابل */
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess();



                wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, bodymessage, 2, idd);
                int not_id = wp.NoteId;
                return this.Json(new { Success = true, data = not_id.ToString() }, JsonRequestBehavior.AllowGet);
                //return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd), CoustomData = idd + "%" + not_id.ToString() }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }


        }



        //           public JsonResult pdiffectsend( int notId)
        //{


        //    AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
        //   // wp.SetKeyValue("MY_FLAG", "1");
        //    string idrole = "MANEGMENT";
        //    AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");
        //    return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        //}


        public JsonResult sendarchive(int notId)
        {
            //AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            //wp.SetKeyValue("MY_FLAG", "1");

            //AsrJobProvider jp = new AsrJobProvider("MARCHVE", wp.FlowName);
            //wp.Dispose();
            // return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);



            var persons = (from c in Db.SEC_USERS.AsEnumerable()

                           where c.ORCL_NAME == "ARCHIVE"
                           select new
                           {
                               c.ROW_NO,
                               c.CRET_BY,
                               c.MDFY_BY,
                               c.USER_NAME,
                               c.USER_PASS,
                               c.USER_STATE,
                               c.USER_TYPE,
                               c.SYS_TYPE,
                               c.ORCL_NAME,
                               c.ORCL_PASS,
                               c.FIRS_NAME,
                               c.FAML_NAME
                           }).ToList();



            // return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
            //   }
            //else
            //   return View("ErrorNotFound");
            //{

            //int noteid = AsrWorkFlowProcess.GetNotId("FLW_DEFE", "FANI", eedoid);
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);

            //wp.SetKeyValue("MY_FLAG", "1");
            string idrole = "ARCHIVE";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
            //}

        }

        public JsonResult sendcenter(int notId, int? id, int? eedoid)
        {

            var q = from b in Db.EXP_EXPI_DOC where b.EEDO_ID == eedoid select b;
            Db.Database.ExecuteSqlCommand(string.Format("update EXP_EXPI_DOC set EANA_EANA_ROW={0} where eedo_id={1} ", id, eedoid));
            Codes.Globalization.PersianDateTime dateTime = new Codes.Globalization.PersianDateTime();
            string currentDate = dateTime.GetShortDate();
            string dayc = string.Empty, month = string.Empty;
            var c1 = currentDate.Split('/');// Splitter(currentDate, '/');
            int v = Convert.ToInt32(c1[1].ToString());
            if (v < 10)
            { dayc = "0" + c1[1].ToString(); }
            else { dayc = c1[1].ToString(); }
            if (Convert.ToInt32(c1[2].ToString()) < 10)
            { month = "0" + c1[2].ToString(); }
            else { month = c1[2].ToString(); }

            dayc = c1[0].ToString() + "/" + dayc + "/" + month;
            q.FirstOrDefault().FIRS_DATE = dayc.ToString();
            q.FirstOrDefault().FIRS_TIME = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Second.ToString();
            Db.SaveChanges();
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);

            wp.SetKeyValue("MY_FLAG", "0");
            string idrole = "FANI";
            if (id == 10)
            {
                wp.SetKeyValue("MY_FLAG", "2");
                idrole = "MMEETING";
            }
            if (id == null)
            {
                id = 1;
            }
            var persons = (from c in Db.SEC_USERS.AsEnumerable()
                           join b in Db.SEC_USER_TYPE_POST.AsEnumerable() on c.ROW_NO equals b.SCSU_ROW_NO
                           where b.EANA_EANA_ROW == id && b.EURP_TYPE == 0 && b.EURP_ACTV == 1
                           select new
                           {
                               c.ROW_NO,
                               c.CRET_BY,
                               c.MDFY_BY,
                               c.USER_NAME,
                               c.USER_PASS,
                               c.USER_STATE,
                               c.USER_TYPE,
                               c.SYS_TYPE,
                               c.ORCL_NAME,
                               c.ORCL_PASS,
                               FAML_NAME = c.PAY_PERSONEL.FAML_NAME != null ? c.PAY_PERSONEL.FAML_NAME : c.FAML_NAME,
                               FIRS_NAME = c.PAY_PERSONEL.FIRS_NAME != null ? c.PAY_PERSONEL.FIRS_NAME : c.FIRS_NAME,


                           }).ToList();



            return this.Json(new { Success = true, data = persons }, JsonRequestBehavior.AllowGet);
            //   }
            //else
            //   return View("ErrorNotFound");
            //{

            //   //  int noteid = AsrWorkFlowProcess.GetNotId("FLW_DEFE", "FANI", eedoid);
            //    AsrWorkFlowProcess wp = new AsrWorkFlowProcess(noteid);

            //    wp.SetKeyValue("MY_FLAG", "1");
            //    string idrole = "ARCHIVE";
            //    AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");
            //    return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
            //}

        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU>select,EXP_POINTS>select")]

        /*این اکشن پوینت های مخابراتی مربوط به ایستگاه های برق که کاربر انتخاب کرده است را نمایش می دهد */
        public ActionResult getinstpoint(short? postid)
        {
            var RetVal = from b in Db.EXP_POST_LINE_INSTRU
                         join x in Db.EXP_POINTS on b.EPIU_ID equals x.EPIU_EPIU_ID
                         where b.EPOL_EPOL_ID == postid
                         select new { x.EPNT_ROW, x.EPNT_COMMENT, x.IEC_HIGH, x.IEC_LOW, x.IEC_MID, x.ITEM_NO };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }
        [EntityAuthorize("EXP_POST_LINE_INSTRU>select,EXP_POINTS>select")]
        /*این اکشن تجهیز مربوط به پوینت انتخابی توسط کاربر را نشان می دهد */
        public ActionResult getinstlinepoint(short? Point)
        {
            var RetVal = from b in Db.EXP_POST_LINE_INSTRU
                         join x in Db.EXP_POINTS on b.EPIU_ID equals x.EPIU_EPIU_ID
                         where x.EPNT_ROW == Point
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC
                             ,
                         };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }








        public JsonResult serchlist(int inst, int postid, string serchid)
        {

            var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                         join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                         where ((p.EPOL_TYPE == "1" && p.EPOL_STAT != "3" &&
                         (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) &&
                                 (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null)) || (p.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == postid && b.EINS_EINS_ID == inst))
                                 && (b.CODE_NAME.Contains(serchid))
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME,
                             b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                             b.PHAS_STAT,
                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                             types = backtypephaz(b.PHAS_STAT)

                         };
            return this.Json(new { Success = true, data = RetVal }, JsonRequestBehavior.AllowGet);

        }
        public JsonResult postinstselect(int inst, int postid)
        {
            var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                         join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                         where ((p.EPOL_TYPE == "1" && p.EPOL_STAT != "3" && (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) &&
                                 (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null)) || (p.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == postid && b.EINS_EINS_ID == inst))
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME,
                             b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                             b.PHAS_STAT,
                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                             types = backtypephaz(b.PHAS_STAT)

                         };
            return this.Json(new { Success = true, data = RetVal }, JsonRequestBehavior.AllowGet);

        }

        private string backtypephaz(string i)
        {
            if (i == "0") return " فاز R";
            else
                if (i == "1") return "فاز S";
            else if (i == "2") return "فاز T";
            else return "";
        }
        [EntityAuthorize("EXP_POST_LINE_INSTRU>select,EXP_POST_LINE>select")]



        /*این اکشن تجهیز مربوط به  ایستگاه برق که کاربر انتخاب کرده است را نمایش می دهد */


        public ActionResult Personelin(string code)
        {
            string orga_code = "0", mana_code = "0", asta_code = "0";
            if (code != null)
            {
                var val = code.Split(',');
                asta_code = val[0].ToString();
                mana_code = val[1].ToString();
                orga_code = val[2].ToString();
            }
            var RetVal = from b in Db.PAY_PERSONEL.AsEnumerable()
                         where ((b.HPRW_ORGP_ORGA_MANA_ASTA_CODE == asta_code || asta_code == "0") && (b.HPRW_ORGP_ORGA_MANA_CODE == mana_code || mana_code == "0") &&
                               (b.HPRW_ORGP_ORGA_CODE == orga_code || orga_code == "0" || orga_code == ""))
                         orderby b.FAML_NAME
                         select new
                         {
                             b.EMP_NUMB,
                             fullname = b.FAML_NAME + " " + b.FIRS_NAME
                         };
            return Json(RetVal, JsonRequestBehavior.AllowGet);
            //return this.Json(new { Success = true, data = RetVal }, JsonRequestBehavior.AllowGet);

        }

        //public ActionResult Personelout()
        //{  //+ "  " + b.OUTP_FANAME
        //    var RetVal = from b in cntx.EXP_OUT_PERSONEL.AsEnumerable() select new { b.OUTP_ID, fullname = b.OUTP_FNAME + "   " + b.OUTP_LNAME };
        //    return this.Json(new { Success = true, data = RetVal }, JsonRequestBehavior.AllowGet);
        //}

        public ActionResult Personeloutserch(string personserch)
        {  //+ "  " + b.OUTP_FANAME
            var RetVal = from b in Db.EXP_OUT_PERSONEL.AsEnumerable() where b.OUTP_LNAME.Contains(personserch) select new { b.OUTP_ID, fullname = b.OUTP_FNAME + "   " + b.OUTP_LNAME };
            return this.Json(new { Success = true, data = RetVal }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult serchlistperson(string code, string personserch)
        {
            string orga_code = "0", mana_code = "0", asta_code = "0";
            if (code != null)
            {
                var val = code.Split(',');
                asta_code = val[0].ToString();
                mana_code = val[1].ToString();
                orga_code = val[2].ToString();
            }

            var RetVal = from b in Db.PAY_PERSONEL.AsEnumerable()
                         where ((b.ASTA_CODE == asta_code || asta_code == "0") && (b.MANA_CODE == mana_code || mana_code == "0") &&
                               (b.ORGA_CODE == orga_code || orga_code == "0")) && (b.FAML_NAME.Contains(personserch))
                         orderby b.FAML_NAME
                         select new
                         {
                             b.EMP_NUMB,
                             fullname = b.FAML_NAME + " " + b.FIRS_NAME
                         };

            return this.Json(new { Success = true, data = RetVal }, JsonRequestBehavior.AllowGet);

        }
        public ActionResult getinstline1(short? postid, int? inst, int? Unitvolt1)
        {

            var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                         join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                         where (p.EPOL_TYPE == "1" && p.EPOL_STAT != "3" && b.EINS_EINS_ID == 1 && (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) &&
                             (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null))
                             && b.EUNL_EUNL_ID == Unitvolt1

                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME,
                             b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                             b.PHAS_STAT,
                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                             types = b.CODE_NAME

                         };

            return Json(RetVal, JsonRequestBehavior.AllowGet);

        }

        public ActionResult function(string epro_id)
        {
            if (epro_id == "")
            {
                epro_id = "0";
            }
            int epro_epro_id = Convert.ToInt32(epro_id);
            var RetVal = (from b in PublicRepository.get_function()
                          where (b.EPRO_EPRO_ID == epro_epro_id) && b.ACTV_TYPE == "0"
                          orderby b.EFUN_DESC
                          select b).AsEnumerable().Select(b => new { b.EFUN_ID, b.EFUN_DESC });
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }
        public ActionResult function2()
        {

            var RetVal = (from b in PublicRepository.get_function()
                          where b.ACTV_TYPE == "0"
                          orderby b.EFUN_DESC
                          select b).AsEnumerable().Select(b => new { b.EFUN_ID, b.EFUN_DESC });
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }


        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_all(int? instta)
        {

            var query = (from i in Db.EXP_INSTRUMENT
                         where i.EINS_EINS_ID == instta
                         select new { i.EINS_ID, i.EINS_DESC }).Distinct();
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult show_approve(int? id)
        {

            ViewData["EDIN_ID"] = id;
            return View("show_approve");
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_bay(int? inst, int? Unitvolt1, int? POSTINSTl, int? instt, int? instta)
        {
            if (instt == 27 || instt == 240 || instt == 379)
            {
                var query = (from i in Db.EXP_INSTRUMENT
                             where i.EINS_EINS_ID == instt
                             select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                return Json(query, JsonRequestBehavior.AllowGet);

            }
            else

                if (((instta == 380 || instta == 376) && instt == 245) || ((instta == 377 || instta == 25) && instt == 378))
            {
                var query = (from i in Db.EXP_INSTRUMENT
                             where i.EINS_EINS_ID == instta
                             select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                return Json(query, JsonRequestBehavior.AllowGet);
            }

            else
            {

                if (inst == 0)
                {
                    var query1 = from b in Db.EXP_CORE_BAY
                                 join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                                 where b.EPIU_EPIU_ID == POSTINSTl &&
                                 ((b.EUNL_EUNL_ID == Unitvolt1))// && instt!=4) || (instt==4))
                                 && b.HIST_DATE == null
                                 select d;
                    var q = from b in query1
                            join g in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals g.EPIU_ID
                            select g;
                    var query = (from k in q
                                 join i in Db.EXP_INSTRUMENT on k.EINS_EINS_ID equals i.EINS_ID
                                 where (i.ETYI_ETYI_ID == 1 || i.ETYI_ETYI_ID == 181)
                                 select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                    return Json(query, JsonRequestBehavior.AllowGet);
                }
                else if (inst == 1)
                {
                    var query1 = from b in Db.EXP_CORE_BAY
                                 join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                                 where b.EPIU_EPIU_ID == POSTINSTl &&
                                 ((b.EUNL_EUNL_ID == Unitvolt1)) //*&& instt!=4) || (instt==4)) 
                                 && b.HIST_DATE == null
                                 select d;
                    var q = from b in query1
                            join g in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals g.EPIU_ID
                            select g;
                    var query = (from k in q
                                 join i in Db.EXP_INSTRUMENT on k.EINS_EINS_ID equals i.EINS_ID
                                 where (i.ETYI_ETYI_ID == 184)
                                 select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                    return Json(query, JsonRequestBehavior.AllowGet);
                }

                else if (inst == 2)
                {
                    var query1 = from b in Db.EXP_CORE_BAY
                                 join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                                 where b.EPIU_EPIU_ID == POSTINSTl &&
                                 ((b.EUNL_EUNL_ID == Unitvolt1))// && instt!=4) || (instt==4))
                                 && b.HIST_DATE == null
                                 select d;
                    var q = from b in query1
                            join g in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals g.EPIU_ID
                            select g;
                    var query = (from k in q
                                 join i in Db.EXP_INSTRUMENT on k.EINS_EINS_ID equals i.EINS_ID
                                 where (i.ETYI_ETYI_ID == 185)
                                 select new { i.EINS_ID, i.EINS_DESC }).Distinct();

                    return Json(query, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var query1 = from b in Db.EXP_CORE_BAY
                                 join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                                 where b.EPIU_EPIU_ID == POSTINSTl
                                 && ((b.EUNL_EUNL_ID == Unitvolt1))//&& instt!=4) || (instt==4))
                                 && b.HIST_DATE == null
                                 select d;
                    var q = from b in query1
                            join g in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals g.EPIU_ID
                            select g;
                    var query = (from k in q
                                 join i in Db.EXP_INSTRUMENT on k.EINS_EINS_ID equals i.EINS_ID
                                 where (i.ETYI_ETYI_ID == 1 || i.ETYI_ETYI_ID == 181)
                                 select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                    return Json(query, JsonRequestBehavior.AllowGet);

                }
            }
        }


        public ActionResult getinstline(short? postid, int? inst, int? Unitvolt1, int? linetype, int? POSTINSTl)
        {
            if (linetype != null)
            {
                if (linetype == 0)
                {
                    var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                                 join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                 where (p.EPOL_TYPE == "1" && p.EPOL_STAT != "3" && b.EINS_EINS_ID == inst && (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) &&
                                     (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null))
                                     && b.EUNL_EUNL_ID == Unitvolt1

                                 select new
                                 {
                                     b.EPIU_ID,
                                     b.CODE_NAME,
                                     b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                     b.PHAS_STAT//,
                                     // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                     // types = b.CODE_NAME 

                                 };
                    return Json(RetVal, JsonRequestBehavior.AllowGet);
                }
                else
                    if (linetype == 1 && POSTINSTl != null)
                {
                    var q = from c in Db.EXP_CORE_BAY
                            join n in Db.EXP_INSTRU_BAY on c.ECBA_ID equals n.ECBA_ECBA_ID
                            where c.EUNL_EUNL_ID == Unitvolt1 && c.EPIU_EPIU_ID == POSTINSTl && c.ETBY_ETBY_ID == 4
                            select n.EPIU_EPIU_ID;

                    var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                                 join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                 where (p.EPOL_TYPE == "0" && p.EPOL_STAT != "3" && b.EPOL_EPOL_ID == postid && q.Contains(b.EPIU_ID))
                                 select new
                                 {
                                     b.EPIU_ID,
                                     b.CODE_NAME,
                                     b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                     b.PHAS_STAT//,
                                                // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                                //  types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                                 };
                    return Json(RetVal, JsonRequestBehavior.AllowGet);

                }
                else
                        if (linetype == 2 && POSTINSTl != null)
                {
                    var q = from c in Db.EXP_CORE_BAY
                            join n in Db.EXP_INSTRU_BAY on c.ECBA_ID equals n.ECBA_ECBA_ID
                            where c.EUNL_EUNL_ID == Unitvolt1 && c.EPIU_EPIU_ID == POSTINSTl && c.ETBY_ETBY_ID == 28
                            select n.EPIU_EPIU_ID;

                    var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                                 join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                 where (p.EPOL_TYPE == "0" && p.EPOL_STAT != "3" && b.EPOL_EPOL_ID == postid && q.Contains(b.EPIU_ID))
                                 select new
                                 {
                                     b.EPIU_ID,
                                     b.CODE_NAME,
                                     b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                     b.PHAS_STAT//,
                                                // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                                // types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                                 };
                    return Json(RetVal, JsonRequestBehavior.AllowGet);

                }
                else
                            if (linetype == 3 && POSTINSTl != null)
                {
                    /*پرسیده شود چه چیزی می خواهند*/

                    var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                                 join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                 where (b.EPOL_EPOL_ID == POSTINSTl && p.EPOL_STAT != "3")
                                 select new
                                 {
                                     b.EPIU_ID,
                                     b.CODE_NAME,
                                     b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                     b.PHAS_STAT//,
                                                // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                                //  types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                                 };
                    return Json(RetVal, JsonRequestBehavior.AllowGet);

                }
                else
                {
                    var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                                 join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                 where (b.EPOL_EPOL_ID == POSTINSTl && p.EPOL_STAT != "3")
                                 select new
                                 {
                                     b.EPIU_ID,
                                     b.CODE_NAME,
                                     b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                     b.PHAS_STAT//,
                                                // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                                //  types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                                 };
                    return Json(RetVal, JsonRequestBehavior.AllowGet);
                }

            }

            else
            {
                var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                             join p in Db.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                             where ((p.EPOL_TYPE == "1" && p.EPOL_STAT != "3" && b.EINS_EINS_ID == inst && (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) &&
                                     (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null)) || (p.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == postid && b.EINS_EINS_ID == inst))
                             select new
                             {
                                 b.EPIU_ID,
                                 b.CODE_NAME,
                                 b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                 b.PHAS_STAT//,
                                 // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                 // types =  b.CODE_NAME+" "+ backtypephaz(b.PHAS_STAT)

                             };

                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult getdetailinsterro(int? inst, int? detailid)
        {

            var RetVal = (from b in Db.EXP_ERROR_INST
                          where b.EERR_TYPE == 1 && b.EERR_EERR_ID == detailid && b.EINS_EINS_ID == inst
                          select new { b.EERR_ID, b.EERR_DESC }).OrderBy(b => b.EERR_DESC);

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        public ActionResult adddescinst(EXP_ERROR_INST objecttemp)
        {

            if (objecttemp.EERR_ID == null || objecttemp.EERR_ID == 0)
            {
                try
                {
                    objecttemp.EERR_EERR_ID = Convert.ToInt32(Session["dinstid"]);
                    objecttemp.EINS_EINS_ID = Convert.ToInt32(Session["inst"]);
                    objecttemp.EERR_TYPE = 1;
                    objecttemp.EERR_DESC = Request.Form["EERR_DESC"];
                    var q = from b in Db.EXP_ERROR_INST where b.EERR_DESC == objecttemp.EERR_DESC && b.EERR_EERR_ID == objecttemp.EERR_EERR_ID select b;
                    if (q.Any())
                    {
                        throw new Exception("duplicate");
                    }
                    Db.EXP_ERROR_INST.Add(objecttemp);
                    Db.SaveChanges();

                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", 1), CoustomData = objecttemp.EERR_ID.ToString() }.ToJson();
                }

                catch (Exception ex)
                {
                    if (ex.Message == "duplicate")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "شرح وارد شده تکراری می باشد" }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                    }
                }
            }

            else
            {
                try
                {
                    var Data = Db.EXP_ERROR_INST.Find(objecttemp.EERR_ID);
                    Data.EERR_DESC = objecttemp.EERR_DESC;
                    Db.SaveChanges();

                    return new ServerMessages(ServerOprationType.Success) { Message = "اطلاعات شما با موفقیت ویرایش شد" }.ToJson();
                }
                catch (Exception)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "خطا در ویرایش اطلاعات" }.ToJson();
                }

            }



        }

        public ActionResult getinstlinet(short? postid, int? Unitvolt1, int? inst, int? typeinst)
        {
            //if (typeinst == 1)
            //{

            //                var RetVal =( from b in cntx.EXP_POST_LINE_INSTRU
            //                 join p in cntx.EXP_CORE_BAY on b.EPIU_ID equals p.EPIU_EPIU_ID
            //                             where (b.EPOL_EPOL_ID == postid) && b.EINS_EINS_ID == inst 

            //                 select new
            //                 {
            //                     b.EPIU_ID,
            //                     b.CODE_NAME,
            //                     b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
            //                     b.PHAS_STAT//,
            //                     // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
            //                    // types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

            //                 }).Distinct();
            //    return Json(RetVal, JsonRequestBehavior.AllowGet);



            //}
            //else              
            //{
            if (inst == 1)
            {
                var RetVal = (from b in Db.EXP_POST_LINE_INSTRU
                              join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID

                              where (p.EPOL_TYPE == "1" && p.EPOL_STAT != "3" && b.EINS_EINS_ID == inst && (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid))
                                  // &&(b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null))
                                  && p.EUNL_EUNL_ID == Unitvolt1

                              select new
                              {
                                  b.EPIU_ID,
                                  b.CODE_NAME,
                                  b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                  b.PHAS_STAT//,
                                  // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                  ///  types = b.CODE_NAME
                              }).OrderBy(b => b.CODE_NAME);
                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
            else
                if (inst == 4)
            {
                var RetVal = (from b in Db.EXP_POST_LINE_INSTRU
                              join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID
                              where (b.EPOL_EPOL_ID == postid) && p.EPOL_STAT != "3" && b.EINS_EINS_ID == inst
                              select new
                              {
                                  b.EPIU_ID,
                                  b.CODE_NAME,
                                  b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                  b.PHAS_STAT//,
                                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                             //  types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                              }).OrderBy(b => b.CODE_NAME);
                return Json(RetVal, JsonRequestBehavior.AllowGet);

            }
            else

                    if (inst != 281 && inst > 4)
            {
                var RetVal = (from b in Db.EXP_POST_LINE_INSTRU
                              join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID
                              where (b.EPOL_EPOL_ID == postid) && p.EPOL_STAT != "3" && b.EINS_EINS_ID == inst
                              select new
                              {
                                  b.EPIU_ID,
                                  b.CODE_NAME,
                                  b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                  b.PHAS_STAT//,
                                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                             //   types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                              }).OrderBy(b => b.CODE_NAME);
                return Json(RetVal, JsonRequestBehavior.AllowGet);

            }
            else
            {
                var RetVal = (from b in Db.EXP_POST_LINE_INSTRU
                              join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID
                              where (b.EPOL_EPOL_ID == postid) && p.EPOL_STAT != "3" && b.EINS_EINS_ID == inst && b.EUNL_EUNL_ID == Unitvolt1
                              select new
                              {
                                  b.EPIU_ID,
                                  b.CODE_NAME,
                                  b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                  b.PHAS_STAT,
                                  // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                  //  types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                              }).OrderBy(b => b.CODE_NAME);
                return Json(RetVal, JsonRequestBehavior.AllowGet);


            }
        }

        /*            var q = from c in cntx.EXP_CORE_BAY
                            join n in cntx.EXP_INSTRU_BAY on c.ECBA_ID equals n.ECBA_ECBA_ID
                            where c.EUNL_EUNL_ID == Unitvolt1 && c.EPIU_EPIU_ID == POSTINSTl && c.ETBY_ETBY_ID == 4
                            select n.EPIU_EPIU_ID;

                    var RetVal = from b in cntx.EXP_POST_LINE_INSTRU.AsEnumerable()
                                 join p in cntx.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                 where (p.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == postid && q.Contains(b.EPIU_ID))
                                 select new
                                 {
                                     b.EPIU_ID,
                                     b.CODE_NAME,
                                     b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                     b.PHAS_STAT,
                                     // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                     types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                                 };
                    return Json(RetVal, JsonRequestBehavior.AllowGet);

                }
                else
                    if (linetype == 2 && POSTINSTl != null)
                    {
                        var q = from c in cntx.EXP_CORE_BAY
                                join n in cntx.EXP_INSTRU_BAY on c.ECBA_ID equals n.ECBA_ECBA_ID
                                where c.EUNL_EUNL_ID == Unitvolt1 && c.EPIU_EPIU_ID == POSTINSTl && c.ETBY_ETBY_ID == 28
                                select n.EPIU_EPIU_ID;

                        var RetVal = from b in cntx.EXP_POST_LINE_INSTRU.AsEnumerable()
                                     join p in cntx.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                     where (p.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == postid && q.Contains(b.EPIU_ID))
                                     select new
                                     {
                                         b.EPIU_ID,
                                         b.CODE_NAME,
                                         b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                         b.PHAS_STAT,
                                         // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                         types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                                     };
                        return Json(RetVal, JsonRequestBehavior.AllowGet);

                    }
                    else
                        if (linetype == 3 && POSTINSTl != null)
                        {
                               
                            var RetVal = from b in cntx.EXP_POST_LINE_INSTRU.AsEnumerable()
                                         join p in cntx.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                         where (b.EPOL_EPOL_ID == POSTINSTl)
                                         select new
                                         {
                                             b.EPIU_ID,
                                             b.CODE_NAME,
                                             b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                             b.PHAS_STAT,
                                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                             types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                                         };
                            return Json(RetVal, JsonRequestBehavior.AllowGet);

                        }
                        else
                        {
                            var RetVal = from b in cntx.EXP_POST_LINE_INSTRU.AsEnumerable()
                                         join p in cntx.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                                         where (b.EPOL_EPOL_ID == POSTINSTl)
                                         select new
                                         {
                                             b.EPIU_ID,
                                             b.CODE_NAME,
                                             b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                             b.PHAS_STAT,
                                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                             types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                                         };
                            return Json(RetVal, JsonRequestBehavior.AllowGet);
                        }

        }

        else
        {
            var RetVal = from b in cntx.EXP_POST_LINE_INSTRU.AsEnumerable()
                         join p in cntx.EXP_POST_LINE.AsEnumerable() on b.EPOL_EPOL_ID equals p.EPOL_ID

                         where ((p.EPOL_TYPE == "1" && b.EINS_EINS_ID == inst && (b.EPOL_EPOL_ID_INSLIN == postid || b.EPOL_EPOL_ID_LINE == postid) &&
                                 (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null)) || (p.EPOL_TYPE == "0" && b.EPOL_EPOL_ID == postid && b.EINS_EINS_ID == inst))
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME,
                             b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                             b.PHAS_STAT,
                             // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                             types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                         };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }
         * */
        // }
        public ActionResult Get_Domain(int? dman_id)
        {
            var RetVal = from dman in Db.CHK_DOMAIN
                         where (dman.DMAN_DMAN_ID == dman_id)
                         orderby dman.DMAN_ID
                         select new { dman.DMAN_TITL, dman.DMAN_ID };


            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }


        public ActionResult getdetailinst(int? inst)
        {

            var RetVal = (from b in Db.EXP_ERROR_INST
                          where b.EERR_TYPE == 0 && b.EINS_EINS_ID == inst
                          select new { b.EERR_ID, b.EERR_DESC }).OrderBy(b => b.EERR_DESC);

            return Json(RetVal, JsonRequestBehavior.AllowGet);





        }

        [EntityAuthorize("EXP_UNIT_LEVEL > select")]
        public ActionResult GetUnitLbt(int? postid, int? instta)
        {
            // int[] array = { 1, 62, 63, 64, 161, 26, 201, 341 };

            var query = (from b in Db.EXP_UNIT_LEVEL
                         join c in Db.EXP_CORE_BAY on b.EUNL_ID equals c.EUNL_EUNL_ID
                         where c.EPIU_EPIU_ID == instta
                         orderby b.EUNL_NUM descending
                         select new { b.EUNL_ID, b.EUNL_DESC, b.EUNL_NUM }).OrderByDescending(b => b.EUNL_NUM).Distinct().ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult getinstlineinst(short? postid, int? inst, int? Unitvolt1, int? POSTINSTl, int? instt)
        {

            if (instt == 27 || instt == 240 || instt == 245 || instt == 378 || instt == 379)
            {
                var RetVal = (from b in Db.EXP_POST_LINE_INSTRU//.AsEnumerable()
                              join p in Db.EXP_POST_LINE//.AsEnumerable() 
                              on b.EPOL_EPOL_ID equals p.EPOL_ID
                              where (b.EPOL_EPOL_ID == postid) && p.EPOL_STAT != "3" && b.EINS_EINS_ID == inst
                              select new
                              {
                                  b.EPIU_ID,
                                  b.CODE_NAME,
                                  b.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                  b.PHAS_STAT,
                                  // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                  // types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)

                              }).OrderBy(b => b.CODE_NAME);
                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var query1 = (from b in Db.EXP_CORE_BAY
                              join d in Db.EXP_INSTRU_BAY on b.ECBA_ID equals d.ECBA_ECBA_ID
                              join c in Db.EXP_POST_LINE_INSTRU on d.EPIU_EPIU_ID equals c.EPIU_ID

                              where b.EPIU_EPIU_ID == POSTINSTl && (b.EUNL_EUNL_ID == Unitvolt1) && b.HIST_DATE == null
                              && c.EINS_EINS_ID == inst && b.EPOL_EPOL_ID == postid
                              // select d;
                              //var RetVal = from g in query1.AsEnumerable()
                              //             join b in cntx.EXP_POST_LINE_INSTRU.AsEnumerable() on g.EPIU_EPIU_ID equals b.EPIU_ID
                              //             where b.EINS_EINS_ID == inst
                              select new
                              {
                                  c.EPIU_ID,
                                  c.CODE_NAME,
                                  c.PHAS_TYPE,//types=backtypephaz(b.PHAS_STAT),
                                  c.PHAS_STAT,
                                  // cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                                  //types = c.CODE_NAME + " " + backtypephaz(c.PHAS_STAT)

                              }).OrderBy(b => b.CODE_NAME);

                //return Json(RetVal, JsonRequestBehavior.AllowGet);
                return Json(query1, JsonRequestBehavior.AllowGet);
            }


        }
        public ActionResult EINS_EINS_ID_class(decimal? efun_id)
        {

            var query = (from b in Db.EXP_INSTRUMENT
                         join c in Db.EXP_EDOC_INSTRU on b.EINS_ID equals c.EINS_EINS_ID
                         orderby b.EINS_DESC
                         where b.SELT_TYPE == "0" && c.EFUN_EFUN_ID == efun_id
                         orderby b.EINS_ID
                         select new { b.EINS_ID, b.EINS_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);

        }

        public ActionResult Organ(string code)
        {
            string[] array = { "1", "4", "6", "7" };
            string orga_code = "0", mana_code = "0", asta_code = "0";
            if (code != null)
            {
                var val = code.Split(',');
                asta_code = val[0].ToString();
                mana_code = val[1].ToString();
            }
            var RetVal = (from b in PublicRepository.Get_PAY_ORGAN()
                          where (b.MANA_ASTA_CODE == asta_code && b.MANA_CODE == mana_code && b.CHNG_STAT == "2" && !array.Contains(b.ORGA_STAT))   //orderby b.ORGA_DESC
                          // where (b.MANA_ASTA_CODE == asta_code && b.MANA_CODE == mana_code)
                          orderby b.ORGA_DESC
                          select b).AsEnumerable().Select(b => new { b.CODE, b.ORGA_DESC }).OrderBy(b => b.ORGA_DESC);
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }
        [EntityAuthorize("EXP_POST_LINE>select")]//SEC_USER_TYPE_POST>select,SEC_USERS>select,
        /**این اکشن ایستگاه و خط های که این کاربر در دیفکت می تواند مشاهده داشته باشد را نمایش می دهد که در صورتیکه ایستگاه و خط های را بخواهید به این لیست اضافه کنید در سیستم امنیت بایستی این کار انجام شود */
        public ActionResult getpost(int? code, string ORGA, int? Unitvolt)
        {
            var i = this.UserInfo().Username;
            //var q = from b in cntx.SEC_USER_TYPE_POST
            //        join s in cntx.SEC_USERS on b.SCSU_ROW_NO equals s.ROW_NO
            //        where b.ETDO_ETDO_ID == code && s.ORCL_NAME == i
            //        select b.EPOL_EPOL_ID;

            //var RetVal = from p in cntx.EXP_POST_LINE
            //             where q.Contains(p.EPOL_ID) && p.EPOL_TYPE == "0" && p.EUNL_EUNL_ID == Unitvolt && p.ORGA_CODE == ORGA
            //             select new { p.EPOL_NAME, p.EPOL_ID };

            var RetVal = (from p in Db.EXP_POST_LINE
                          where p.EPOL_TYPE == "0" && p.EPOL_STAT != "3" && p.EUNL_EUNL_ID == Unitvolt && p.ORGA_CODE == ORGA
                          orderby p.EPOL_NAME
                          select new { p.EPOL_NAME, p.EPOL_ID }).OrderBy(p => p.EPOL_NAME);

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_UNIT_LEVEL > select")]
        public ActionResult GetUnitLevelpost()
        {
            var query = (from b in Db.EXP_UNIT_LEVEL join p in Db.EXP_POST_LINE on b.EUNL_ID equals p.EUNL_EUNL_ID select new { b.EUNL_ID, b.EUNL_DESC, b.EUNL_NUM }).OrderByDescending(b => b.EUNL_NUM).Distinct();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_UNIT_LEVEL > select")]
        public ActionResult GetUnitLevelinst()
        {
            var query = (from b in Db.EXP_UNIT_LEVEL join p in Db.EXP_POST_LINE_INSTRU on b.EUNL_ID equals p.EUNL_EUNL_ID orderby b.EUNL_NUM select new { b.EUNL_ID, b.EUNL_DESC }).Distinct().ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }
        public ActionResult geterjabgroup()
        {

            var RetVal = (from b in Db.EXP_ANALYZOR_EVENT where b.EANA_TYPE == 1 orderby b.EANA_DESC select new { b.EANA_ROW, b.EANA_DESC }).OrderBy(b => b.EANA_DESC);

            return Json(RetVal, JsonRequestBehavior.AllowGet);

        }
        [EntityAuthorize("EXP_UNIT_LEVEL > select")]
        public ActionResult GetUnitL()
        {
            int[] array = { 1, 62, 63, 64, 161, 26, 201, 341 };

            var query = (from b in Db.EXP_UNIT_LEVEL
                         where array.Contains(b.EUNL_ID)
                         orderby b.EUNL_NUM descending
                         select new { b.EUNL_ID, b.EUNL_DESC }).ToList();

            return Json(query, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetClassInst()
        {
            var query = Db.Database.SqlQuery<EXP_TYPE_INSTRU>("select * from EXP_TYPE_INSTRU where ACTV_TYPE='1' order by farsi_order_u (ETYI_DESC)").Select(x => new
            {
                x.ETYI_ID,
                x.ETYI_DESC
            }).ToList();


            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_UNIT_LEVEL > select")]
        public ActionResult GetUnitLt(int? postid, int? instta)
        {
            // int[] array = { 1, 62, 63, 64, 161, 26, 201, 341 };

            if (instta == 1)
            {
                var query = (from b in Db.EXP_UNIT_LEVEL
                             join c in Db.EXP_POST_LINE on b.EUNL_ID equals c.EUNL_EUNL_ID
                             join k in Db.EXP_POST_LINE_INSTRU on c.EPOL_ID equals k.EPOL_EPOL_ID
                             where (k.EPOL_EPOL_ID_INSLIN == postid || k.EPOL_EPOL_ID_LINE == postid) && c.EPOL_STAT != "3" && k.EINS_EINS_ID == instta
                             orderby b.EUNL_NUM descending
                             select new { b.EUNL_ID, b.EUNL_DESC, b.EUNL_NUM }).OrderByDescending(b => b.EUNL_NUM).Distinct().ToList();

                return Json(query, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var query = (from b in Db.EXP_UNIT_LEVEL
                             join c in Db.EXP_POST_LINE_INSTRU on b.EUNL_ID equals c.EUNL_EUNL_ID
                             where c.EPOL_EPOL_ID == postid && c.EINS_EINS_ID == instta
                             orderby b.EUNL_NUM descending
                             select new { b.EUNL_ID, b.EUNL_DESC, b.EUNL_NUM }).OrderByDescending(b => b.EUNL_NUM).Distinct().ToList();

                return Json(query, JsonRequestBehavior.AllowGet);
            }
        }



        //      [EntityAuthorize("EXP_POST_LINE > select|CGT_PRO> select|PAY_ORGAN> select|EXP_EXPI_DOC> select|EXP_EITEM_DOC_VALUE > select|EXP_POST_LINE_INSTRU > select|EXP_INSTRUMENT > select|EXP_TYPE_BAY > select|EXP_UNIT_LEVEL > select|EXP_OFF_STAT > select|EXP_PFUNCTION>select|SEC_JOB_TYPE_DOC>select")]
        /*با این اکشن فرم های کارتابل دیفکت در هر وضعیت باز می شود */
        public ActionResult ViewForm(string id, string notId, string date)
        {
            /*ویو بگ های مورد استفاده در فرم */
            ViewData["post_line"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
            ViewData["project"] = Db.CGT_PRO
                                      .Where(o => o.CPRO_PRJ_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_PRJ_CODE).FirstOrDefault())
                                      .Where(o => o.CPLA_PLN_CODE == Db.EXP_EXPI_DOC.Select(p => p.CPRO_CPLA_PLN_CODE).FirstOrDefault())
                                      .Select(o => new { o.PRJ_CODE, o.PRJ_DESC })
                                      .AsEnumerable();
            ViewData["Organ"] = Db.PAY_ORGAN.Select(o => new { o.CODE, o.ORGA_DESC }).AsEnumerable();
            ViewData["Type_Doc"] = Db.EXP_EXPI_DOC.Select(o => new { o.EEDO_ID, o.EXP_TYPE_DOC, o.ETDO_ETDO_ID, o.EXP_TYPE_DOC.ETDO_DESC }).Where(o => o.ETDO_ETDO_ID == o.EXP_TYPE_DOC.ETDO_ID).AsEnumerable();
            ViewData["Doc_val"] = Db.EXP_EITEM_DOC_VALUE.Select(o => new { o.EIDR_ID, o.EIDR_VALUE });
            ViewData["post_instr"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EINS_EINS_ID, o.CODE_DISP });
            ViewData["JDTYid"] = Db.SEC_JOB_TYPE_DOC.Select(o => new { o.JDTY_ID, o.ACTIV_FNAM });
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID != null).Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Bay = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
            ViewBag.UniteV = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.EXP_OFF_STAT.Select(c => new { c.EOFS_ID, c.EOFS_DESC });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.exp_doc = Db.EXP_EXPI_DOC;
            EXP_EXPI_DOC cm = new EXP_EXPI_DOC();
            EXP_ITEM_TYPE_DOC cmitem = new EXP_ITEM_TYPE_DOC();
            EXP_EDOC_INSTRU cminstru = new EXP_EDOC_INSTRU();
            Equipment.Models.PartialClass.MultiModelPrj multicm = new Equipment.Models.PartialClass.MultiModelPrj();
            string ssend = string.Empty;

            /*
             * مقدارردیف دیفکت به همراه کلید دیفکت بایستی صفر نباشد در صورتیکه صفر باشد فرم پیغام خطا باز می شود 
             */
            if (id != "0")
            {
                /* با توجه به مقدار ردیف دیفکت اطلاعات دیفکت پیدا و در یک کلاس قرارداده می شود */
                cm = Db.Database.SqlQuery<EXP_EXPI_DOC>("select * from EXP_EXPI_DOC where {0}".FormatWith(id)).FirstOrDefault();
                multicm.EXP_EXPI_DOC = cm;

                /*ردیف کارتابل در سشن قرارداده می شود */
                Session["notid"] = notId;
                ViewBag.key = notId;
                /*نوع مدرک که در اینجا مقدار 2 و دیفکت هست در سشن قرارداده می شود*/
                Session["etdo_id"] = multicm.EXP_EXPI_DOC.ETDO_ETDO_ID;
                /*مقدار ردیف دیفکت در سشن قرارداده می شود */
                Session["eedo_id"] = multicm.EXP_EXPI_DOC.EEDO_ID;
                ViewBag.stringsend = ssend;
                ViewBag.stringdate = date;
                /*فرم پارشال ویو دیفکت نمایش داده می شود */
                return View("PartialViewdefect", multicm);
            }
            else
            {
                return View("ErrorNotFound");
            }
        }
        [EntityAuthorize("EXP_EXPI_DOC>select,update|SEC_JOB_TYPE_DOC>select|EXP_EDOC_INSTRU>select,insert|EXP_RELATION_DOC>insert|EXP_POST_LINE>select|EXP_TYPE_DOC>select")]
        /* این اکشن درخواست انجام کار را ایجاد می نماید  براساس این که برای کدام کاربر و برای کدام پست و ایستگاه و برای کدام عملیات کاری درخواست ایجاد می شود */
        public ActionResult InsertRequest(string userName, decimal eedo_id, int epol_id, decimal? efun_id)
        {
            try
            {
                var query = from b in Db.EXP_EXPI_DOC where b.ETDO_ETDO_ID == 21 select b;
                //  string max = query.Max(c => c.DOC_NUMB);
                System.Globalization.PersianCalendar pc = new System.Globalization.PersianCalendar();
                EXP_EXPI_DOC exp_doc = new EXP_EXPI_DOC();
                /*زمان را گرفته و برای تاریخ درخواست ان را به رشته تبدیل می نماید */

                string MOUNT = "00";
                if (pc.GetMonth(DateTime.Now) < 10)
                {
                    MOUNT = "0" + pc.GetMonth(DateTime.Now).ToString();
                }
                else
                {
                    MOUNT = pc.GetMonth(DateTime.Now).ToString();
                }

                string day = "00";
                if (pc.GetDayOfMonth(DateTime.Now) < 10)
                {
                    day = "0" + pc.GetDayOfMonth(DateTime.Now).ToString();
                }
                else
                {
                    day = pc.GetDayOfMonth(DateTime.Now).ToString();
                }

                string hh = "00";
                if (DateTime.Now.Hour < 10)
                {
                    hh = "0" + DateTime.Now.Hour.ToString();
                }
                else
                {
                    hh = DateTime.Now.Hour.ToString();
                }
                string ss = "00";
                if (DateTime.Now.Minute < 10)
                {
                    ss = "0" + DateTime.Now.Minute.ToString();
                }
                else
                {
                    ss = DateTime.Now.Minute.ToString();
                }

                exp_doc.EEDO_DATE = pc.GetYear(DateTime.Now).ToString() + "/" + MOUNT + "/" + day;
                exp_doc.EEDO_TIME = hh + ":" + ss;
                //  exp_doc.DOC_NUMB = (Convert.ToInt32(max) + 1).ToString();

                /*پست و عملیات کاری را در کلاس درخواس قرار می دهد */
                exp_doc.EPOL_EPOL_ID = epol_id;
                exp_doc.EFUN_EFUN_ID = efun_id;
                exp_doc.ETDO_ETDO_ID = 21;
                string qmax = string.Empty;
                int s1 = 0;
                string qdocnum = string.Empty;
                int m = 0;
                var q = (from b in Db.EXP_EXPI_DOC where b.ETDO_ETDO_ID == 21 && b.EANA_EANA_ROW == null select b).FirstOrDefault();
                ;
                if (q != null)
                {
                    qmax = (from b in Db.EXP_EXPI_DOC where b.ETDO_ETDO_ID == 21 && b.EANA_EANA_ROW == null select b).Max(c => c.EEDO_ID).ToString();
                    s1 = Convert.ToInt32(qmax);
                    //  qdocnum = (from b in db.EXP_EXPI_DOC where b.EEDO_ID == s1 select b.DOC_NUMB).FirstOrDefault().ToString();

                    //  m = Convert.ToInt32(qdocnum) + 1;
                    m = s1 + 1;
                }
                else
                {
                    m = 1;
                }
                /*مقدار شماره درخواست را از ماکزیمم ردیف درخواست بدست می اورد */
                exp_doc.DOC_NUMB = "R" + m.ToString();

                Db.EXP_EXPI_DOC.Add(exp_doc);
                Db.SaveChanges();
                /*درخواست را ثبت می نماید */
                string Qjdti = (from b in Db.SEC_JOB_TYPE_DOC where b.ETDO_ETDO_ID == 21 && b.ROWI_ORDE == 1 select b.JDTY_ID).FirstOrDefault().ToString();
                decimal QCURENT = Convert.ToDecimal(Qjdti);
                /* تجهیزات درخواست را براساس تجهیزات دیفکت ثبت می نماید */
                var rel1 = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == eedo_id select b).FirstOrDefault();
                if (rel1 != null)
                {
                    var rel2 = new EXP_EDOC_INSTRU();
                    rel2.EEDO_EEDO_ID = exp_doc.EEDO_ID;
                    rel2.EPIU_EPIU_ID = rel1.EPIU_EPIU_ID;
                    rel2.EPOL_EPOL_ID = rel1.EPOL_EPOL_ID;
                    rel2.JDTY_JDTY_ID = Convert.ToDecimal(QCURENT.ToString());
                    rel2.ETDO_ETDO_ID = 21;
                    rel2.CUT_STAT = "1";
                    Db.EXP_EDOC_INSTRU.Add(rel2);
                    Db.SaveChanges();
                }
                /*ارتباط بین دیفکت و درخواست را ایجاد می نماید */
                EXP_RELATION_DOC relationDoc = new EXP_RELATION_DOC();
                relationDoc.EEDO_EEDO_ID = exp_doc.EEDO_ID;
                relationDoc.EEDO_EEDO_ID_R = eedo_id;
                Db.EXP_RELATION_DOC.Add(relationDoc);
                Db.SaveChanges();

                string postn = (from b in Db.EXP_POST_LINE where b.EPOL_ID == epol_id select b.EPOL_NAME).FirstOrDefault().ToString();
                string doc_name = (from b in Db.EXP_TYPE_DOC where b.ETDO_ID == 21 select b.ETDO_DESC).FirstOrDefault();
                string smessage = " درخواست " + "به شماره" + exp_doc.DOC_NUMB + " در تاریخ " + exp_doc.EEDO_DATE + "  مربوط به دیفکت " + eedo_id + " پست " + postn + " میباشد ";
                /*در کارتابل فرد مشخص شده درخواست را ایجاد می نماید */
                AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                //  wp.SetKeyValue("MY_FLAG", "1");
                wp.StartProcess(userName, new string[] { userName }, doc_name, smessage, 21, exp_doc.EEDO_ID);
                // wp.SetKeyValue("MY_FLAG", "1");
                return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد.", CoustomData = exp_doc.DOC_NUMB }.ToJson();
            }
            catch
            {
                return this.Json(new { Success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        /*این اکشن کاربرانی که در مرحله ایجاد درخواست می توانند درخواس انجام کار را ایجاد نماییند را برمیگرداند */
        public JsonResult USERCREATEREQUEST()
        {
            string idrole = "CREATOR";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_REQU");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }
        [EntityAuthorize("EXP_INSTRUMENT>select|EXP_TYPE_EQUIP>select|STR_GOODS>select|EXP_EXPI_DOC>select|EXP_RELATION_DOC>select")]
        /// <summary>
        /// //////////////////////////////لوازم یدکی
        /// </summary>
        /// <param name="id"></param>
        /// <param name="notId"></param>
        /// <returns></returns>
        /*ویو کارتابلی لوازم یدکی را نمایش می دهد */
        public ActionResult viewneedtools(string id, string notId)
        {
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.typeinstrument = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC });
            ViewBag.good = Db.STR_GOODS.Select(c => new { c.GOOD_ID, c.GOOD_DESC });
            ViewBag.exp_doc = Db.EXP_EXPI_DOC;

            EXP_EXPI_DOC cm = new EXP_EXPI_DOC();

            cm = Db.Database.SqlQuery<EXP_EXPI_DOC>("select * from EXP_EXPI_DOC where {0}".FormatWith(id)).FirstOrDefault();

            decimal did = cm.EEDO_ID;
            string sqeedo = (from b in Db.EXP_RELATION_DOC
                             join c in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals c.EEDO_ID
                             where b.EEDO_EEDO_ID_R == did && c.ETDO_ETDO_ID == 2
                             select b.EEDO_EEDO_ID).FirstOrDefault().ToString();

            Session["eedo_id"] = sqeedo;
            Session["eedotools"] = did;
            Session["notid"] = notId;
            return View("Add_needtoolsdefect", cm);
        }
        [EntityAuthorize("EXP_INSTRUMENT>select|EXP_TYPE_EQUIP>select|STR_GOODS>select|EXP_RELATION_DOC>select|EXP_EXPI_DOC>select")]
        /*ویو مربوط به لوازم یدکی را نمایش می دهد*/
        public ActionResult Add_needtoolsdefect(int? id)
        {
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.typeinstrument = Db.EXP_TYPE_EQUIP.Select(c => new { c.ETEX_ID, c.ETEX_DESC });
            ViewBag.good = Db.STR_GOODS.Select(c => new { c.GOOD_ID, c.GOOD_DESC });

            Session["eedo_id"] = id;
            Session["eedotools"] = null;

            if (id != 0)
            { /*برای این دیفکت لوازم یدکی تعریف شده است */
                int counti = (from b in Db.EXP_RELATION_DOC
                              join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                              where b.EEDO_EEDO_ID == id && k.ETDO_ETDO_ID == 164
                              select k).Count();
                Session["notid"] = 0;
                if (counti != 0)
                {
                    /*لوازم یدکی برای این دیفکت تعریف شه است که ردیف لوازم یدکی در سشن زیر قرار می 
                    گیرد و ویو لوازم یدکی صدا زده می شود */
                    EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_RELATION_DOC
                                           join k in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID_R equals k.EEDO_ID
                                           where b.EEDO_EEDO_ID == id && k.ETDO_ETDO_ID == 164
                                           select k).FirstOrDefault();
                    Session["eedotools"] = EXPNEW.EEDO_ID.ToString();

                    return View(EXPNEW);
                }
                else
                    /*برای این دیفکت هنوز لوازم یدکی ثبت نشده است پس ویو خالی ایجاد می شود */
                    return View();
            }
            else
            {
                return View("ErrorNotFound");
            }
        }

        public JsonResult Userneedtools()
        {
            string idrole = "COFANI";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_TOOL");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);
        }
        [EntityAuthorize("EXP_EXPI_DOC>select,insert,update|EXP_RELATION_DOC>insert|EXP_TYPE_DOC>select")]
        /*برای ثبت اطلاعات لوازم یدکی از این اکشن استفاده می شود همچنین در صورتیکه بعد از ثبت اولیه نیاز به تغییرات باشد از همین اکشن استفاده می شود . */
        public ActionResult Inserttools(EXP_EXPI_DOC objecttemp)
        {
            int id = Convert.ToInt32(Session["eedo_id"].ToString());
            int idedin = 0;
            if (Session["eedin_id"] != null && Session["eedin_id"] != "")
            {
                idedin = Convert.ToInt32(Session["eedin_id"].ToString());
            }
            string qetdo = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b.ETDO_ETDO_ID).FirstOrDefault().ToString();

            int idd = 0;
            /*در صورتیکه لوازم یدکی قبلا ثبت شده باشد در idd مقدارش قرار می گیرد */
            if (Session["eedotools"] != null && Session["eedotools"] != "")
            {
                idd = Convert.ToInt32(Session["eedotools"].ToString());
            }

            if (idd == 0)
            {
                /* لوازم یدکی ردیف مدرک ان 164 می باشد */
                objecttemp.ETDO_ETDO_ID = 164;
                Db.EXP_EXPI_DOC.Add(objecttemp);
                Db.SaveChanges();

                /*ثبت 
                 * لوازم یدکی با دیفکت */
                var rel = new EXP_RELATION_DOC();
                rel.EEDO_EEDO_ID = id;
                rel.EEDO_EEDO_ID_R = objecttemp.EEDO_ID;
                Db.EXP_RELATION_DOC.Add(rel);
                Db.SaveChanges();
                string typedoc = string.Empty;

                typedoc = "دیفکت به شماره " + id;
                int not_id = 0;
                string smessage = " فرم لوازم یدکی " + "به شماره" + objecttemp.DOC_NUMB + " مربوط به فرم " + typedoc + " میباشد ";
                string doc_name = (from b in Db.EXP_TYPE_DOC where b.ETDO_ID == 164 select b.ETDO_DESC).FirstOrDefault();
                /*ایجاد ردیف کارتابل */
                if (idedin == 0)
                {
                    AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                    wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, smessage, 164, objecttemp.EEDO_ID);
                    not_id = wp.NoteId;
                }
                else
                {
                    var qmas = (from b in Db.EXP_SUPL_DOC where b.EDIN_EDIN_ID == idedin && b.POSI_TYEP == "1" select b).FirstOrDefault();

                    string usera = string.Empty;
                    if (qmas.OUTP_OUTP_ID != null)
                    {
                        var users = (from b in Db.SEC_USERS where b.OUTP_OUTP_ID == qmas.OUTP_OUTP_ID /*&& b.USER_TYPE == "1"*/ select b).FirstOrDefault();
                        if (users == null)
                        {
                            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                            wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, smessage, 164, objecttemp.EEDO_ID);
                            not_id = wp.NoteId;

                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = " مسئول اجرا خارج شرکت نام کاربری فعال برای استفاده از سیستم ندارد به خاطر همین لوازم یدکی در کارتابل دبیر جلسه قرار می گیرد" }.ToJson();
                        }
                        else
                        {
                            usera = users.ORCL_NAME;
                            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();

                            wp.StartProcess(usera, new string[] { usera }, doc_name, smessage, 164, objecttemp.EEDO_ID);
                            not_id = wp.NoteId;
                        }
                    }

                    if (qmas.PRSN_EMP_NUMB != null)
                    {
                        var users = (from b in Db.SEC_USERS where b.PRSN_EMP_NUMB == qmas.PRSN_EMP_NUMB /*&& b.USER_TYPE=="1"*/ select b).FirstOrDefault();
                        if (users == null)
                        {
                            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                            wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, smessage, 164, objecttemp.EEDO_ID);
                            not_id = wp.NoteId;

                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = " مسئول اجرا خارج شرکت نام کاربری فعال برای استفاده از سیستم ندارد به خاطر همین لوازم یدکی در کارتابل دبیر جلسه قرار می گیرد" }.ToJson();
                        }
                        else
                        {
                            usera = users.ORCL_NAME;
                            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();

                            wp.StartProcess(usera, new string[] { usera }, doc_name, smessage, 164, objecttemp.EEDO_ID);

                            not_id = wp.NoteId;
                        }
                    }



                }


                Session["eedotools"] = objecttemp.EEDO_ID;
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.DOC_NUMB), CoustomData = not_id.ToString() + "%" + objecttemp.EEDO_ID }.ToJson();





            }
            else
            {
                /*ثبت اطلاعات لوازم یدکی در صورتیکه قبلا ایجاد شده ایست */
                var q = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == idd select b).FirstOrDefault();
                q.EEDO_DESC = objecttemp.EEDO_DESC;
                q.EEDO_DATE = objecttemp.EEDO_DATE;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", objecttemp.DOC_NUMB) }.ToJson();
            }
        }
        [EntityAuthorize("EXP_EDOC_INSTRU>select")]
        /*ایجاد ردیف لوازم یدکی */
        public ActionResult tooldefect_New(int? id)
        {
            if (id == 0)
            {
                Session["tollinst"] = null;
                return View();
            }
            else
            {
                string q = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b.EEDO_EEDO_ID).FirstOrDefault().ToString();
                Session["tollinst"] = id;//Convert.ToInt32(q);

                EXP_EDOC_INSTRU EXPNEW = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b).FirstOrDefault();
                return View(EXPNEW);
            }
        }
        [EntityAuthorize("EXP_INSTRUMENT>select")]
        /*نوع تجهیزات را نمایش می دهد*/
        public ActionResult EINS_EINS_ID_R()
        {
            var query = (from b in Db.EXP_INSTRUMENT
                         orderby b.EINS_DESC
                         where b.EINS_EINS_ID != null
                         select new { b.EINS_ID, b.EINS_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        [EntityAuthorize("STR_GOODS>select")]
        /*کالاهای انبار را نمایش می دهد*/
        public ActionResult SGOD_GOOD_ID_R()
        {
            var query = (from b in Db.STR_GOODS
                         where b.GOOD_CODE_DESC != "M"
                         select new { b.GOOD_ID, b.GOOD_DESC });
            return Json(query, JsonRequestBehavior.AllowGet);
        }
        [EntityAuthorize("EXP_EDOC_INSTRU>insert,select,update")]
        /*با این اکشن اطلاعات مربوط ردیف لوازم یدکی ثبت می شود که این اطلاعات شامل 
         * نوع تجهیز تیپ ان و کد کالای انباری ان و تعدادی که مورد نیاز است می باشد */
        public ActionResult Inserttoolsgood(EXP_EDOC_INSTRU objecttemp)
        {
            int id = Convert.ToInt32(Session["eedotools"].ToString());
            int idd = 0;
            if (Session["tollinst"] != null)
            {
                idd = Convert.ToInt32(Session["tollinst"].ToString());
            }

            if (idd == 0)
            {
                /*در صورتیکه ردیف لوازم یدکی هنوز ایجاد نشده است و برای اولین بار است */
                objecttemp.ETDO_ETDO_ID = 164;
                objecttemp.EEDO_EEDO_ID = id;
                Db.EXP_EDOC_INSTRU.Add(objecttemp);
                Db.SaveChanges();

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", objecttemp.EDIN_ID) }.ToJson();
            }
            else
            {
                /*ثبت تغییرات اطلاعات ردیف لوازم یدکی */
                var q = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == idd select b).FirstOrDefault();
                if (objecttemp.SGOD_GOOD_ID != null)
                {
                    q.SGOD_GOOD_ID = objecttemp.SGOD_GOOD_ID;
                }
                if (objecttemp.ETEX_ETEX_ID != null)
                {
                    q.ETEX_ETEX_ID = objecttemp.ETEX_ETEX_ID;
                }
                if (objecttemp.EINS_EINS_ID != null)
                {
                    q.EINS_EINS_ID = objecttemp.EINS_EINS_ID;
                }
                q.CONT_FUN = objecttemp.CONT_FUN;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", objecttemp.EDIN_ID) }.ToJson();
            }
        }
        [EntityAuthorize("EXP_EDOC_INSTRU>select")]
        /*نمایش ردیف لوازم یدکی دیفکت در گرید مورد نظر با این اکشن انجام میشود */
        public ActionResult Get_needtool([DataSourceRequest]
                                         DataSourceRequest request, int? eedo_id)
        {
            var query = from p in Db.EXP_EDOC_INSTRU.OrderByDescending(b => b.EDIN_ID)
                        where (p.EEDO_EEDO_ID == eedo_id && eedo_id.HasValue)
                        select new
                        {
                            p.EDIN_ID,
                            p.EINS_EINS_ID,
                            p.SGOD_GOOD_ID,
                            p.ETEX_ETEX_ID,
                            p.CONT_FUN
                        }

            ;
            return Json(query.ToDataSourceResult(request));
        }
        //---------------------------------------------------------------------------------------------------دعوتنامه
        public ActionResult meetingdefect(int? id)
        {
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            ViewData["id"] = id;
            return View();
        }

        /*این اکشن برای ثبت اطلاعات دعوت نامه و ایجاد ان برای کارتابل است .     */
        public ActionResult Insert_defect_meet(COM_INVIT_PART MyModel)
        {
            var id = int.Parse(Request.Form["id"]);
            MyModel.ANPT_ID = MyModel.ANPT_ID == 0 ? id : 0;
            string sdate = string.Empty;
            try
            {
                if (MyModel.ANPT_ID != 0)
                {
                    var row = (from b in Db.COM_INVIT_PART where b.ANPT_ID == MyModel.ANPT_ID select b).FirstOrDefault();
                    //row.ANPT_FNO = MyModel.ANPT_FNO;
                    if (Request.Form["MetDate"].ToString() != "" && Request.Form["MetDate"].ToString() != null)
                        sdate = Request.Form["MetDate"].ToString();

                    //row.ANPT_FNO = "M" + sdate.Substring(0, 3);
                    row.ANPT_DATE = sdate;
                    row.ANPT_DESC = MyModel.ANPT_DESC;
                    row.ANPT_CLOK = MyModel.ANPT_CLOK;
                    row.ANPT_PLAS = MyModel.ANPT_PLAS;
                    row.ANPT_DURI = MyModel.ANPT_DURI;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد", MyModel.ANPT_DESC) }.ToJson();

                }
                else
                {
                    int qcount = (from b in Db.COM_INVIT_PART where b.ANPT_DATE == sdate && b.ACMI_1_ACMI_CODE == 3 && b.ANPT_DESC == MyModel.ANPT_DESC select b).Count();
                    if (qcount == 0)
                    {


                        if (Request.Form["MetDate"].ToString() != "" && Request.Form["MetDate"].ToString() != null)
                            sdate = Request.Form["MetDate"].ToString();

                        MyModel.ANPT_DATE = sdate;
                        MyModel.ACMI_1_ACMI_CODE = 3;
                        Db.COM_INVIT_PART.Add(MyModel);

                        Db.SaveChanges();
                        int i = MyModel.ANPT_ID;
                        MyModel.ANPT_FNO = "M-" + sdate.Substring(0, 4) + "-" + sdate.Substring(5, 2) + "-" + sdate.Substring(8, 2) + "-" + i;
                        Db.SaveChanges();
                        string doc_name = MyModel.ANPT_DESC;
                        string bodymessage = " دعوتنامه به شماره" + MyModel.ANPT_FNO + " در تاریخ " + MyModel.ANPT_DATE + " مربوط به کمیته رفع عیب ارسال می شود";

                        int ETDO_ID = 143;

                        var RetVal = from comm_user in Db.COM_PERSON_COMM where comm_user.ACMI_1_ACMI_CODE == 3 select comm_user;
                        COM_PERSON_INVIT objecttemp = new COM_PERSON_INVIT();
                        foreach (Equipment.Models.COM_PERSON_COMM comm_user in RetVal)
                        {
                            objecttemp.PRSN_EMP_NUMB = comm_user.PRSN_EMP_NUMB;
                            objecttemp.ANPT_ANPT_ID = i;
                            objecttemp.CPIN_STAT = "0";
                            objecttemp.OUTP_OUTP_ID = comm_user.OUTP_OUTP_ID;


                            Db.COM_PERSON_INVIT.Add(objecttemp);
                            Db.SaveChanges();
                        }

                        Session["anapid"] = i;


                        AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
                        //wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, bodymessage, ETDO_ID, i);

                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", MyModel.ANPT_DESC), CoustomData = i }.ToJson();
                    }
                    else
                    {
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]بروز رسانی شد.", MyModel.ANPT_DESC), CoustomData = 1 }.ToJson();

                    }
                }


            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.InnerException.ToString() }.ToJson();
            }
        }


        /*این اکشن حادثه های که براساس تاریخ مشخص شده است به یک جلسه لینک می کند */

        public ActionResult alldefectdateinsert(int? EEDO_ID, int? ANPT_ID)
        {

            try
            {


                //var query = from b in Db.EXP_EXPI_DOC
                //            where (b.EEDO_DATE.CompareTo(fdate) >= 0) && (b.EEDO_DATE.CompareTo(edate) <= 0) && b.ETDO_ETDO_ID == 2  && b.EANA_EANA_ROW == 10

                //            select b;


                //foreach (var q in query)
                //{
                //    q.ANPT_ANPT_ID = idd;

                //}

                var query = from b in Db.EXP_EXPI_DOC where b.EEDO_ID == EEDO_ID select b;

                if (!query.Where(xx => xx.ANPT_ANPT_ID == ANPT_ID).Any())
                {


                    foreach (var q in query)
                    {
                        q.ANPT_ANPT_ID = ANPT_ID;

                    }

                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", ANPT_ID) }.ToJson();
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این دیفکت از قبل بروی این دعوتنامه ثبت شده است" }.ToJson();

                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }
        /*
این اکشن تحلیل حوادث مربوط به جلسه را در صورت وجود برمی گرداند 
*/

        private string returninst(decimal id)
        {
            var query = from b in Db.EXP_EDOC_INSTRU.AsEnumerable()
                        join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                        join p in Db.EXP_POST_LINE on c.EPOL_EPOL_ID equals p.EPOL_ID
                        join e in Db.EXP_ERROR_INST on b.EERR_EERR_ID equals e.EERR_ID
                        where (b.EEDO_EEDO_ID == id)
                        select new
                        {

                            b.EPOL_EPOL_ID,
                            b.EPIU_EPIU_ID,
                            b.EERR_EERR_ID,
                            cpost = p.EPOL_NAME + " " + c.CODE_NAME + " " + e.EERR_DESC



                        };
            string g = query.FirstOrDefault().cpost;
            return g;

        }
        private string returnerror(decimal id)
        {
            var query = from b in Db.EXP_EDOC_INSTRU.AsEnumerable()
                        join c in Db.EXP_ERROR_INST on b.EERR_EERR_ID_R1 equals c.EERR_ID
                        where (b.EEDO_EEDO_ID == id)
                        select new { c.EERR_DESC };
            string g = query.FirstOrDefault().EERR_DESC.ToString();

            return g;

        }
        public ActionResult Exp_defect_met([DataSourceRequest] DataSourceRequest request, string fdate, string edate, int? id)
        {
            var query = (from b in Db.EXP_EXPI_DOC
                             //join item in Db.EXP_EDOC_INSTRU on b.EEDO_ID equals item.EEDO_EEDO_ID
                             //join c in Db.EXP_POST_LINE_INSTRU on item.EPIU_EPIU_ID equals c.EPIU_ID



                         where b.ETDO_ETDO_ID == 2 && b.DOC_NUMB != null && (b.ANPT_ANPT_ID == id && id != null) //&& b.EANA_EANA_ROW == 10
                         orderby b.DOC_NUMB
                         select b).AsEnumerable().Select(b => new
                         {


                             b.EEDO_ID,
                             b.DOC_NUMB,
                             b.EEDO_DESC,
                             b.EEDO_DATE,
                             b.EANA_EANA_ROW,
                             cpost = b.EXP_POST_LINE.EPOL_NAME + "-" + GetPostInstru(b.EEDO_ID),
                             EANA_DESC = b.EXP_ANALYZOR_EVENT.EANA_DESC,
                             CONT_FUN = GetContDay(b.EEDO_ID),
                             ATTG_MOEJ = b.EXP_EDOC_INSTRU.Where(xx => xx.ETDO_ETDO_ID == 443 && xx.EEDO_EEDO_ID == b.EEDO_ID).Select(xx => xx.ATTG_MOEJ).FirstOrDefault(),
                             NotID = return_noteid(b.EEDO_ID, this.User.Identity.Name.ToUpper()),
                             erroe = GetErrorDesc(b.EEDO_ID),
                             FollowDefect = Ajax_GetMainDefect(b.EEDO_ID),
                             // FollowDefect2 = Ajax_GetFollowDefect(GetFollowId(b.EEDO_ID), 0),
                             // FollowDefect3 = Ajax_GetFollowDefect(GetFollowId(GetFollowId(b.EEDO_ID)), 0),
                         }).ToList().OrderBy(xx => xx.EEDO_ID);


            return Json(query.ToDataSourceResult(request));
        }
        public string GetPostInstru(decimal EEDO_ID)
        {
            return Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == EEDO_ID && xx.ETDO_ETDO_ID == 2).Select(xx => xx.EXP_POST_LINE_INSTRU.CODE_NAME).FirstOrDefault();
        }
        public string GetErrorDesc(decimal EEDO_ID)
        {
            return Db.EXP_EDOC_INSTRU.Where(xx => xx.EEDO_EEDO_ID == EEDO_ID && xx.ETDO_ETDO_ID == 2).Select(xx => xx.EXP_ERROR_INST.EERR_DESC).FirstOrDefault();
        }

        public ActionResult Get_Meeting_Desc()
        {
            var query = (from a in Db.EXP_EDOC_INSTRU
                         where a.ETDO_ETDO_ID == 443 && a.ATTG_MOEJ != null
                         select new
                         {
                             a.ATTG_MOEJ
                         }).ToList().Distinct();


            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public string GetContDay(decimal EEDO_ID)
        {
            return Db.EXP_EDOC_INSTRU.Where(xx => xx.ETDO_ETDO_ID == 443 && xx.EEDO_EEDO_ID == EEDO_ID).Select(xx => xx.CONT_FUN).FirstOrDefault();
        }
        /*این اکشن قطعی های مربوط به حادثه را برمی گرداند */
        public ActionResult Get_Value_Doc([DataSourceRequest] DataSourceRequest request, int id)
        {
            var query = from b in Db.EXP_EDOC_INSTRU
                        where (b.EEDO_EEDO_ID == id) /*&& b.ETDO_ETDO_ID == null*/

                        select new
                        {
                            b.EDIN_ID,
                            b.CRET_BY,
                            b.EPOL_EPOL_ID,
                            b.EPIU_EPIU_ID,
                            b.EEDO_EEDO_ID,
                            b.OFF_TIME,
                            b.DMAN_DMAN_ID,
                            b.ON_DATE,
                            b.ON_TIME,
                            b.CONN_STAT,
                            b.EDIN_MW,
                            b.EDIN_OFF,
                            b.EDIN_MVH,
                            b.ATTG_SPIC,
                            b.TANS_DOFF,
                            b.OFF_DATE,
                            b.TANS_TOFF,
                            b.TANS_DON,
                            b.TANS_TON,
                            b.TANS_OFST,
                            b.TANS_ONST,
                            cpost = b.EXP_POST_LINE.EPOL_NAME + " " + b.EXP_POST_LINE_INSTRU.CODE_NAME,
                            offdate = b.OFF_DATE + " " + b.OFF_TIME + "" + b.TANS_DOFF + " " + b.TANS_TOFF,
                            onedate = b.ON_DATE + " " + b.ON_TIME + "" + b.TANS_DON + " " + b.TANS_TON,
                            dattanon = b.TANS_DON + " " + b.TANS_TON + " :تانسیون" + b.TANS_DOFF + " " + b.TANS_TOFF,
                            clent = b.EXP_POST_LINE.LINE_LENT,
                            opertmain = b.EXP_EVE_OPERA.EEVO_DESC + "" + b.EXP_EVE_OPER_DET.EEOD_DESC,
                            b.OPER_STAT,
                            b.FUNC_TYPE
                              ,
                            b.CUT_STAT
                              ,
                            b.EVEN_KM
                              ,
                            b.CONT_FUN,

                        };

            return Json(query.ToDataSourceResult(request));
        }

        /*ین اکشن ردیف حادثه مشخص شده را از جلسه حذف می کند وان را ازاد می نماید  */
        public ActionResult upadateinitedefect(int idd)
        {
            try
            {

                if (Db.EXP_WFEX_V.Where(xx => xx.EEDO_ID == idd && xx.STAT == "OPEN" && xx.RECIPIENT_ROLE == this.User.Identity.Name.ToUpper()).Any())
                {
                    var row = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == idd select b).FirstOrDefault();
                    row.ANPT_ANPT_ID = null;
                    Db.SaveChanges();
                    Db.Database.ExecuteSqlCommand(string.Format("delete from EXP_EDOC_INSTRU where eedo_eedo_id={0} and etdo_etdo_id=443", idd));
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", idd) }.ToJson();
                }
                else
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "این مدرک ارسال شده است و شما قادر به حذف آن از صورت جلسه نیستید" }.ToJson();
                }


            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /*این اکشن فرم صورتجلسه و کارتابل جلسات را برمی گرداند */
        public ActionResult ViewFormDEF(string id, string notId)
        {

            ViewBag.ORGA = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.presption = Db.EXP_EDOC_INSTRU.Where(c => c.ETDO_ETDO_ID == 144).Select(c => new { c.EDIN_ID, c.ATTG_SPIC });

            if (id != null)
            {

                COM_INVIT_PART cm = new COM_INVIT_PART();
                cm = Db.Database.SqlQuery<COM_INVIT_PART>("select * from COM_INVIT_PART where {0}".FormatWith(id)).FirstOrDefault();
                Session["anapid"] = id;
                Session["notid"] = notId;
                ViewBag.key = notId;

                AsrWorkFlowProcess p1 = new AsrWorkFlowProcess(Convert.ToInt32(notId));
                string curent = p1.CurrentStat;
                if (curent == "CREATMEET")
                { return View("PartialViewmeet", cm); }
                else
                { return View("sortmeeting", cm); }

            }
            else
            { return View(); }

        }
        public JsonResult Approvemeeting(int notId)
        {
            string idrole = "MEETINGORDER";
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(notId);
            AsrJobProvider jp = new AsrJobProvider(idrole, wp.FlowName);
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);


        }

        public JsonResult archivedeffect(int eedoid)
        {
            int noteid = AsrWorkFlowProcess.GetNotId("FLW_DEFE", "PFLW_DEFC", eedoid);
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess(noteid);

            wp.SetKeyValue("MY_FLAG", "1");
            string idrole = "ARCHIVE";
            AsrJobProvider jp = new AsrJobProvider(idrole, "FLW_DEFE");
            return this.Json(new { Success = true, data = jp.AllUsers }, JsonRequestBehavior.AllowGet);

        }


        public JsonResult Approvedefect(int notId, string userName)
        {
            try
            {
                int noteid = AsrWorkFlowProcess.GetNotId("FLW_DEFE", "PFLW_DEFC", notId);


                AsrWorkFlowProcess fp = new AsrWorkFlowProcess(noteid);
                if (fp.IsOpen)
                {
                    fp.Approve(new string[] { userName });
                    NotificationHub hub = new NotificationHub();
                    hub.SendNotify(HttpContext.User.Identity.Name, userName, fp.MsgTitle);
                }
                return new ServerMessages(ServerOprationType.Success) { Message = "Approve" + Convert.ToString(noteid) }.ToJson();
            }
            catch (Exception)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = "Approve Failed =>" + Convert.ToString(notId) }.ToJson();
            }
        }


        /*فرم مصوبه هارا نمایش می دهد*/
        public ActionResult approevent_new(int id, int type)
        {
            ViewBag.ORGA = Db.PAY_ORGAN.Where(c => c.MANA_ASTA_CODE == "7" && c.MANA_CODE == "6").Select(c => new { c.CODE, c.ORGA_DESC });
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            ViewBag.eventc = Db.EXP_EXPI_DOC.Select(c => new { c.EEDO_ID, c.DOC_NUMB });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.presption = Db.EXP_EDOC_INSTRU.Where(c => c.ETDO_ETDO_ID == 144).Select(c => new { c.EDIN_ID, c.ATTG_SPIC });
            Session["notid"] = null;
            if (type == 1)
            {
                Session["eedin_id"] = 0;
                Session["eedo_id"] = id;
                if (id != 0)
                {
                    EXP_EXPI_DOC EXPNEW = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == id select b).FirstOrDefault();

                    EXP_EDOC_INSTRU appro = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == id && b.ETDO_ETDO_ID == 144 select b).FirstOrDefault();
                    return View();
                }
                else
                { return View("ErrorNotFound"); }
            }
            else

                if (type == 2)
            {
                if (id != 0)
                {
                    int i = Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 select b.EEDO_EEDO_ID).FirstOrDefault().ToString());
                    Session["eedo_id"] = i;
                    Session["eedin_id"] = id;
                    EXP_EDOC_INSTRU appro = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 select b).FirstOrDefault();
                    return View(appro);
                }
                else
                { return View("ErrorNotFound"); }
            }
            else

                    if (type == 3)
            {
                int i = Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 select b.EEDO_EEDO_ID).FirstOrDefault().ToString());
                Session["eedo_id"] = i;
                Session["eedin_id"] = 0;
                Session["eedinasle_id"] = id;
                return View();
            }
            else

                        if (type == 4)
            {

                int iedina = Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 && b.EDIN_EDIN_ID != null select b.EDIN_EDIN_ID).FirstOrDefault().ToString());

                int i = Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == iedina && b.ETDO_ETDO_ID == 144 select b.EEDO_EEDO_ID).FirstOrDefault().ToString());
                Session["eedo_id"] = i;
                Session["eedin_id"] = id;
                EXP_EDOC_INSTRU appro = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id && b.ETDO_ETDO_ID == 144 select b).FirstOrDefault();
                return View(appro);

            }
            else
            { return View("ErrorNotFound"); }

        }
        /*
        این اکشن برای ثبت اطلاعات مصوبه ها و تغییرات ان است 
        */
        public ActionResult InsertManagePostApprov(decimal? EEDO_ID, string ATTG_MOEJ)
        {
            PersianCalendar pc = new PersianCalendar();
            DateTime thisDate = DateTime.Now;
            string sql = string.Format("insert into EXP_EDOC_INSTRU (ATTG_DATE,ETDO_ETDO_ID,EEDO_EEDO_ID,ATTG_MOEJ,EPOL_EPOL_ID) values (to_date('{0}','mm/dd/yyyy'),{1},{2},'{3}',{5})",
                thisDate.ToShortDateString(), 443, EEDO_ID, ATTG_MOEJ, "0", Db.EXP_EXPI_DOC.Where(xx => xx.EEDO_ID == EEDO_ID).Select(xx => xx.EPOL_EPOL_ID).FirstOrDefault());
            Db.Database.ExecuteSqlCommand(sql);
            var edin_id = Db.Database.SqlQuery<decimal>(string.Format("SELECT edin_id FROM EXP_EDOC_INSTRU where ATTG_DATE=to_date('{0}','mm/dd/yyyy') and ETDO_ETDO_ID=443 and EEDO_EEDO_ID={1} and ATTG_MOEJ='{2}'",
                thisDate.ToShortDateString(), EEDO_ID, ATTG_MOEJ)).FirstOrDefault();

            sql = string.Format("update EXP_EDOC_INSTRU set ATTG_SPIC='A'||'{0}' where edin_id={0}", edin_id);
            Db.Database.ExecuteSqlCommand(sql);





            return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();

        }

        public ActionResult insertdefectapproevent(Equipment.Models.EXP_EDOC_INSTRU NewItem)
        {
            string EANA_EANA_ROW = Request.Form["EANA_EANA_ROW"];

            var row = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == NewItem.EEDO_EEDO_ID select b).FirstOrDefault();
            row.EANA_EANA_ROW = int.Parse(EANA_EANA_ROW);
            Db.SaveChanges();

            //string DAY = Convert.ToString(pc.GetDayOfMonth(thisDate));
            //string MNT = Convert.ToString(pc.GetMonth(thisDate));
            //string YEAR = Convert.ToString(pc.GetYear(thisDate));
            //DAY = YEAR + "/" + MNT + "/" + DAY;
            //DateTime d = Convert.ToDateTime(DAY);
            //d = d.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));
            //Db.Database.SqlQuery<string>(string.Format("SELECT farsi_date_u(to_date('{0}','mm/dd/yyyy')) FROM DUAL", d)).FirstOrDefault().ToString();
            PersianCalendar pc = new PersianCalendar();
            DateTime thisDate = DateTime.Now.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));
            string sql = string.Format("insert into EXP_EDOC_INSTRU (ATTG_DATE,ETDO_ETDO_ID,EEDO_EEDO_ID,ATTG_MOEJ,CONT_FUN,EPOL_EPOL_ID) values (to_date('{0}','mm/dd/yyyy'),{1},{2},'{3}',{4},{5})", thisDate.ToShortDateString(), 443, NewItem.EEDO_EEDO_ID, NewItem.ATTG_MOEJ, NewItem.CONT_FUN, row.EPOL_EPOL_ID);
            Db.Database.ExecuteSqlCommand(sql);
            // NewItem.ATTG_DATE = thisDate;
            // NewItem.ETDO_ETDO_ID = 144;
            //  NewItem.EEDO_EEDO_ID = u;
            //  Context.EXP_EDOC_INSTRU.Add(NewItem);
            // Context.SaveChanges();
            var edin_id = Db.Database.SqlQuery<decimal>(string.Format("SELECT edin_id FROM EXP_EDOC_INSTRU where ATTG_DATE=to_date('{0}','mm/dd/yyyy') and ETDO_ETDO_ID=443 and EEDO_EEDO_ID={1} and ATTG_MOEJ='{2}'", thisDate.ToShortDateString(), NewItem.EEDO_EEDO_ID, NewItem.ATTG_MOEJ)).FirstOrDefault();

            sql = string.Format("update EXP_EDOC_INSTRU set ATTG_SPIC='A'||'{0}' where edin_id={0}", edin_id);
            Db.Database.ExecuteSqlCommand(sql);
            string RECPI_ROLE = Db.SEC_USERS.Where(xx => xx.ROW_NO ==
                Db.SEC_USER_TYPE_POST.Where(yy => yy.EANA_EANA_ROW == row.EANA_EANA_ROW && yy.EURP_TYPE == 0 && yy.EURP_ACTV == 1).Select(yy => yy.SCSU_ROW_NO).FirstOrDefault()
                ).Select(xx => xx.ORCL_NAME).FirstOrDefault();
            int notId = Db.Database.SqlQuery<int>("SELECT WF_NOTE_V.NOT_ID as m FROM WF_NOTE_V where stat='OPEN' and upper(RECIPIENT_ROLE)='" + this.User.Identity.Name.ToUpper() + "' and  WF_NOTE_V.ITEM_KEY='FLW_DEFE.PFLW_DEFC^" + NewItem.EEDO_EEDO_ID + "'").FirstOrDefault();

            AsrWorkFlowProcess fp = new AsrWorkFlowProcess(notId);

            if (fp.IsOpen)
            {

                fp.SetKeyValue("MY_FLAG", "0");
                string idrole = "FANI";

                fp.Approve(new string[] { RECPI_ROLE });
                // fp.StartProcess(this.User.Identity.Name, new string[] { RECPI_ROLE }, "مصوبات ديفکت", "bodymessage", 443, NewItem.EEDO_EEDO_ID);
                // wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { this.HttpContext.User.Identity.Name }, doc_name, bodymessage, etdo_id, objecttemp.EEDO_ID);
            }




            return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();

        }
        public ActionResult insertapproevent(Equipment.Models.EXP_EDOC_INSTRU NewItem)
        {

            int u = Convert.ToInt32(Session["eedo_id"].ToString());
            int uid = Convert.ToInt32(Session["eedin_id"].ToString());
            int uidasle = 0;
            if (Session["eedinasle_id"] != null)
                uidasle = Convert.ToInt32(Session["eedinasle_id"].ToString());
            string y = string.Empty;
            string qcount = string.Empty;
            string name = string.Empty;
            try
            {

                var q = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == u select b).FirstOrDefault();
                name = (from b in Db.COM_INVIT_PART where b.ANPT_ID == q.ANPT_ANPT_ID select b.ANPT_FNO).FirstOrDefault().ToString();
                qcount = (Convert.ToInt32((from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == u && b.ETDO_ETDO_ID == 144 select b).Count().ToString()) + 1).ToString();



                PersianCalendar pc = new PersianCalendar();
                DateTime thisDate = DateTime.Now;

                string DAY = Convert.ToString(pc.GetDayOfMonth(thisDate));
                string _MNT = Convert.ToString(pc.GetMonth(thisDate));
                string YEAR = Convert.ToString(pc.GetYear(thisDate));
                // y = a.Year.ToString();
                name = name + "-" + YEAR + "-" + qcount;


                DAY = YEAR + "/" + _MNT + "/" + DAY;
                DateTime d = Convert.ToDateTime(DAY);
                d = d.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));
                string Omc = string.Empty;
                string Org = string.Empty;
                short Ope = 0;

                string Omc1 = string.Empty;
                string Org1 = string.Empty;
                string wdesc = string.Empty;
                string wconf = string.Empty;
                string date = string.Empty;
                short Ope1 = 0;

                int per = 0;
                if (Request.Form["ORGA_MANA_CODE"] != "" && Request.Form["ORGA_MANA_CODE"] != null)
                    Omc = Request.Form["ORGA_MANA_CODE"].ToString();

                if (Request.Form["ORGA_CODEconf"] != "" && Request.Form["ORGA_CODEconf"] != null)
                    Org = Request.Form["ORGA_CODEconf"].ToString();

                if (Request.Form["PRSN_EMP_NUMB"] != "" && Request.Form["PRSN_EMP_NUMB"] != null)
                    // Ope = Convert.ToInt32(Request.Form["PRSN_EMP_NUMB"].ToString());
                    Ope = short.Parse(Request.Form["PRSN_EMP_NUMB"].ToString());

                if (Request.Form["ORGA_MANA_CODE1"] != "" && Request.Form["ORGA_MANA_CODE1"] != null)
                { Omc1 = Request.Form["ORGA_MANA_CODE1"].ToString(); }

                if (Request.Form["ORGA_CODEconf1"] != "" && Request.Form["ORGA_CODEconf1"] != null)
                { Org1 = Request.Form["ORGA_CODEconf1"].ToString(); }

                if (Request.Form["PRSN_EMP_NUMB1"] != "" && Request.Form["PRSN_EMP_NUMB1"] != null)

                    Ope1 = short.Parse(Request.Form["PRSN_EMP_NUMB1"].ToString());
                if (Request.Form["PRSNout"] != "" && Request.Form["PRSNout"] != null)
                    per = Convert.ToInt32(Request.Form["PRSNout"].ToString());
                if (Request.Form["tdesc"] != "" && Request.Form["tdesc"] != null)
                    wdesc = Request.Form["tdesc"].ToString();
                if (Request.Form["tconf"] != "" && Request.Form["tconf"] != null)
                    wconf = Request.Form["tconf"].ToString();


                if (Request.Form["EDATE"] != "" && Request.Form["EDATE"] != null)
                    date = Request.Form["EDATE"].ToString();

                // a=a.AddDays(Convert.ToInt32(NewItem.CONT_FUN.ToString()));
                if (uid == 0)
                {
                    /*ایجاد مصوبه*/
                    if (uidasle != 0)
                        NewItem.EDIN_EDIN_ID = uidasle;

                    NewItem.ATTG_DATE = d;
                    NewItem.ATTG_SPIC = name;
                    NewItem.ATTG_DATE = d;
                    NewItem.ETDO_ETDO_ID = 144;

                    NewItem.ORGA_MANA_ASTA_CODE = "7";
                    NewItem.ORGA_MANA_CODE = "6";
                    NewItem.EEDO_EEDO_ID = u;

                    Db.EXP_EDOC_INSTRU.Add(NewItem);
                    Db.SaveChanges();
                    int i = Convert.ToUInt16(NewItem.EDIN_ID.ToString());

                    if (Ope == 0)
                    {/*متعهدها*/
                        Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

                        {
                            EDIN_EDIN_ID = i,
                            ORGA_CODE = Org,
                            ORGA_MANA_ASTA_CODE = "7",
                            ORGA_MANA_CODE = Omc,

                            POSI_TYEP = "3",
                            TIME_WORK = NewItem.CONT_FUN

                        });
                    }
                    else
                    {
                        Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

                        {
                            EDIN_EDIN_ID = i,
                            ORGA_CODE = Org,
                            ORGA_MANA_ASTA_CODE = "7",
                            ORGA_MANA_CODE = Omc,
                            PRSN_EMP_NUMB = Ope,
                            POSI_TYEP = "3",
                            TIME_WORK = NewItem.CONT_FUN

                        });
                    }


                    if (per != 0 && Ope1 != 0)
                    {
                        Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

                        {
                            EDIN_EDIN_ID = i,
                            ORGA_CODE = Org1,
                            ORGA_MANA_ASTA_CODE = "7",
                            ORGA_MANA_CODE = Omc1,
                            PRSN_EMP_NUMB = Ope1,

                            OUTP_OUTP_ID = per,
                            POSI_TYEP = "1",
                            TIME_WORK = NewItem.CONT_FUN

                        });
                    }
                    else
                    {
                        if (per == 0 && Ope1 == 0)
                        {
                            Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

                            {
                                EDIN_EDIN_ID = i,
                                ORGA_CODE = Org1,
                                ORGA_MANA_ASTA_CODE = "7",
                                ORGA_MANA_CODE = Omc1,
                                POSI_TYEP = "1",
                                TIME_WORK = NewItem.CONT_FUN

                            });
                        }
                        if (Ope1 == 0)
                        {
                            Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()
                            {
                                EDIN_EDIN_ID = i,
                                ORGA_CODE = Org1,
                                ORGA_MANA_ASTA_CODE = "7",
                                ORGA_MANA_CODE = Omc1,
                                OUTP_OUTP_ID = per,
                                POSI_TYEP = "1",
                                TIME_WORK = NewItem.CONT_FUN

                            });
                        }
                        if (per == 0)
                        {
                            Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()
                            {
                                EDIN_EDIN_ID = i,
                                ORGA_CODE = Org1,
                                ORGA_MANA_ASTA_CODE = "7",
                                ORGA_MANA_CODE = Omc1,
                                PRSN_EMP_NUMB = Ope1,

                                POSI_TYEP = "1",
                                TIME_WORK = NewItem.CONT_FUN
                            });
                        }
                    }
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "ثبت شد." }.ToJson();
                }
                else
                {/*تغییرات بروی مصوبه */
                    var row = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == uid select b).FirstOrDefault();
                    row.ATTG_SPIC = name;
                    row.ATTG_DATE = d;
                    row.ATTG_MOEJ = NewItem.ATTG_MOEJ;
                    row.TIME_ISTA = NewItem.TIME_ISTA;
                    row.ORDE_TYPE = NewItem.ORDE_TYPE;
                    row.EDIN_TYPE = NewItem.EDIN_TYPE;
                    row.EFUN_EFUN_ID = NewItem.EFUN_EFUN_ID;
                    row.ORGA_CODE = NewItem.ORGA_CODE;
                    row.EPOL_EPOL_ID = NewItem.EPOL_EPOL_ID;
                    row.EPIU_EPIU_ID = NewItem.EPIU_EPIU_ID;
                    row.CONT_FUN = NewItem.CONT_FUN;
                    row.ON_DATE = date;
                    row.TYPE_FUNC = NewItem.TYPE_FUNC;
                    row.ATTG_STATT = NewItem.ATTG_STATT;
                    row.MEMA_DESC = NewItem.MEMA_DESC;

                    Db.SaveChanges();

                    var row1 = (from b in Db.EXP_SUPL_DOC where b.EDIN_EDIN_ID == uid && b.POSI_TYEP == "3" select b).FirstOrDefault();
                    if (row1 == null)
                    {

                        if (Ope == 0)
                        {/*متعهدها*/
                            Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

                            {
                                EDIN_EDIN_ID = uid,
                                ORGA_CODE = Org,
                                ORGA_MANA_ASTA_CODE = "7",
                                ORGA_MANA_CODE = Omc,

                                POSI_TYEP = "3",
                                TIME_WORK = NewItem.CONT_FUN

                            });
                        }
                        else
                        {
                            Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

                            {
                                EDIN_EDIN_ID = uid,
                                ORGA_CODE = Org,
                                ORGA_MANA_ASTA_CODE = "7",
                                ORGA_MANA_CODE = Omc,
                                PRSN_EMP_NUMB = Ope,
                                POSI_TYEP = "3",
                                TIME_WORK = NewItem.CONT_FUN

                            });
                        }



                    }
                    else
                    {
                        row1.ORGA_CODE = Org;
                        row1.ORGA_MANA_ASTA_CODE = "7";
                        row1.ORGA_MANA_CODE = Omc;
                        row1.ESUD_DESC = wconf;

                        if (Ope != 0)
                        { row1.PRSN_EMP_NUMB = Ope; }
                        row1.TIME_WORK = NewItem.CONT_FUN;
                    }

                    var row2 = (from b in Db.EXP_SUPL_DOC where b.EDIN_EDIN_ID == uid && b.POSI_TYEP == "1" select b).FirstOrDefault();

                    if (row2 == null)
                    {

                        if (per != 0 && Ope1 != 0)
                        {
                            Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

                            {
                                EDIN_EDIN_ID = uid,
                                ORGA_CODE = Org1,
                                ORGA_MANA_ASTA_CODE = "7",
                                ORGA_MANA_CODE = Omc1,
                                PRSN_EMP_NUMB = Ope1,

                                OUTP_OUTP_ID = per,
                                POSI_TYEP = "1",
                                TIME_WORK = NewItem.CONT_FUN

                            });
                        }
                        else
                        {
                            if (per == 0 && Ope1 == 0)
                            {
                                Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()

                                {
                                    EDIN_EDIN_ID = uid,
                                    ORGA_CODE = Org1,
                                    ORGA_MANA_ASTA_CODE = "7",
                                    ORGA_MANA_CODE = Omc1,
                                    POSI_TYEP = "1",
                                    TIME_WORK = NewItem.CONT_FUN

                                });
                            }
                            if (Ope1 == 0)
                            {
                                Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()
                                {
                                    EDIN_EDIN_ID = uid,
                                    ORGA_CODE = Org1,
                                    ORGA_MANA_ASTA_CODE = "7",
                                    ORGA_MANA_CODE = Omc1,
                                    OUTP_OUTP_ID = per,
                                    POSI_TYEP = "1",
                                    TIME_WORK = NewItem.CONT_FUN

                                });
                            }
                            if (per == 0)
                            {
                                Db.EXP_SUPL_DOC.Add(new EXP_SUPL_DOC()
                                {
                                    EDIN_EDIN_ID = uid,
                                    ORGA_CODE = Org1,
                                    ORGA_MANA_ASTA_CODE = "7",
                                    ORGA_MANA_CODE = Omc1,
                                    PRSN_EMP_NUMB = Ope1,

                                    POSI_TYEP = "1",
                                    TIME_WORK = NewItem.CONT_FUN
                                });
                            }
                        }


                    }
                    else
                    {
                        row2.ORGA_CODE = Org1;
                        row2.ORGA_MANA_ASTA_CODE = "7";
                        row2.ORGA_MANA_CODE = Omc1;
                        row2.ESUD_DESC = wdesc;
                        if (Ope1 != 0)
                        { row2.PRSN_EMP_NUMB = Ope1; }
                        if (per != 0)
                        { row2.OUTP_OUTP_ID = per; }
                        row2.TIME_WORK = NewItem.CONT_FUN;
                    }
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();

                }

            }

            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }

        }



    }
}