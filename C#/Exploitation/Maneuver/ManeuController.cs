using Asr.Base.Globalization;
using Kendo.Mvc.UI;
using System;
using System.Linq;
using System.Web.Mvc;
using Equipment.Models;
using Kendo.Mvc.Extensions;
using Equipment.Models.CoustomModel;
using Equipment.Codes.Security;
using System.Collections.Generic;
using System.Data;

namespace Equipment.Controllers.Exploitation.Maneuver
{
    [Authorize]
    public class ManeuController : DbController
    {
        //BandarEntities Db;

        ////سازنده کلاس
        //public ManeuController()
        //{
        //    Db = GlobalConst.DB();
        //}

        //
        // GET: /Maneu/

        /*این اکشن اطلاعات رویدادها را در یک ویو نمایش می دهد */
        [MenuAuthorize]
        [EntityAuthorize("EXP_POST_LINE > select | EXP_POST_LINE_INSTRU > select | CHK_DOMAIN > select")]
        public ActionResult Maneuver(int? id)
        {
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Where(c => c.DMAN_DMAN_ID == 369).Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            Session["RowId"] = id;
            return View();
        }

        public ActionResult Maneuver20k(int? id)
        {
            ViewBag.post = Db.EXP_POST_LINE.Select(c => new { c.EPOL_ID, c.EPOL_NAME });
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME });
            ViewBag.Offstat = Db.CHK_DOMAIN.Where(c => c.DMAN_DMAN_ID == 369).Select(c => new { c.DMAN_ID, c.DMAN_TITL });
            Session["RowId"] = id;
            return View();
        }

        /*این اکشن نام مرکزکنترل ها را برمی گرداند */
        //[EntityAuthorize("EXP_AOC_RDC > select")]
        public ActionResult read_aocrdc()
        {
            var query = from b in Db.EXP_AOC_RDC where b.ACTI_NACT == "1" select new { b.EARD_ID, b.EARD_NAME };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*ین اکشن نوع قطعی را برمی گرداند */
        //[EntityAuthorize("CHK_DOMAIN > select")]
        public ActionResult GetOffType(string TYPE)
        {
            //TYPE = TYPE == null ? "0" : ;
            var query = (from b in Db.CHK_DOMAIN
                         where b.DMAN_DMAN_ID == 369 && b.ACTV_TYPE == "1" && (b.DMAN_TYPE == TYPE || TYPE == null)
                         select new { b.DMAN_ID, b.DMAN_TITL }).OrderBy(xx => xx.DMAN_TITL);


            if (TYPE == null)
            {
                query = (from b in Db.CHK_DOMAIN
                         where b.DMAN_DMAN_ID == 369 && b.ACTV_TYPE == "1" && b.READ_ONLY != "2"
                         select new { b.DMAN_ID, b.DMAN_TITL }).OrderBy(xx => xx.DMAN_TITL);

            }
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public class Customerpost
        {
            public int EARD_ID1 { get; set; }
            public int id { get; set; }
        }

        /*نمایش اطلاعات پست ها */
        [EntityAuthorize("EXP_POST_LINE > select")]
        public ActionResult Getpost()
        {
            int EARD_ID2 = Convert.ToInt32(Session["EARD"]);
            if (EARD_ID2 == 1)
            {/*نمایش پست های  aoc*/
                var query = from b in Db.EXP_POST_LINE
                            where b.EARD_EARD_ID == EARD_ID2 && b.EPOL_TYPE == "0" && b.EPOL_STAT == "1"
                            select new { b.EPOL_ID, b.EPOL_NAME };
                return Json(query, JsonRequestBehavior.AllowGet);
            }
            else
            {/*نمایش تمام پست ها برای rdc*/
                var query = from b in Db.EXP_POST_LINE
                            where b.EPOL_TYPE == "0" && b.EPOL_STAT == "1"
                            select new { b.EPOL_ID, b.EPOL_NAME };
                return Json(query, JsonRequestBehavior.AllowGet);
            }
        }

        public class Customerinst
        {
            public int id { get; set; }
        }

        /*نوع تجهیزات مربوط به پست و خط ها */
        [EntityAuthorize("EXP_INSTRUMENT > select | EXP_POST_LINE_INSTRU > select")]
        public ActionResult Getinstrument(int? post3)
        {
            var q = (from c in Db.EXP_POST_LINE_INSTRU
                     where c.EPOL_EPOL_ID == post3 || c.EPOL_EPOL_ID_INSLIN == post3 || c.EPOL_EPOL_ID_LINE == post3 && post3.HasValue
                     select c.EINS_EINS_ID);

            var query = (from b in Db.EXP_INSTRUMENT
                         where b.EINS_EINS_ID != null && q.Contains(b.EINS_ID)
                         select new { b.EINS_ID, b.EINS_DESC });

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*اطلاعات تجهیزات که رله هستند را برمی گرداند */
        [EntityAuthorize("EXP_INSTRUMENT > select | EXP_POST_LINE_INSTRU > select")]
        public ActionResult GetPInstrumentrelleh(int? id2)
        {
            var RetVal = from b in Db.EXP_POST_LINE_INSTRU
                         join t in Db.EXP_INSTRUMENT on b.EINS_EINS_ID equals t.EINS_ID
                         where (b.EPOL_EPOL_ID == id2 && id2.HasValue) && t.EINS_EINS_ID == 367
                         select new { b.EPIU_ID, b.CODE_NAME };
            /*کلاس تجهیز رله */
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        /*اطلاعات تجهیزات که رله هستند را برمی گرداند */
        [EntityAuthorize("EXP_INSTRUMENT > select | EXP_POST_LINE_INSTRU > select")]
        public ActionResult Getinstrel(int? id1, int? id2)
        {
            decimal i = int.Parse((from p in Db.EXP_EDOC_INSTRU where p.EDIN_ID == id1 select p.EPIU_EPIU_ID).FirstOrDefault().ToString());

            var RetVal = from b in Db.EXP_POST_LINE_INSTRU
                         join t in Db.EXP_FRELAH_INST on b.EPIU_ID equals t.EPIU_EPIU_ID_R
                         where t.EPIU_EPIU_ID == i && b.EINS_EINS_ID == id2
                         select new
                         {
                             b.EPIU_ID,
                             b.CODE_NAME,
                             b.PHAS_TYPE,
                             b.PHAS_STAT,
                             types = b.CODE_NAME //+ " " + backtypephaz(b.PHAS_STAT)
                             //cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                         };
            /*کلاس تجهیز رله */
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        private string instpiro(decimal i)
        {
            var q = from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == i select new { b.EXP_POST_LINE_INSTRU.CODE_NAME, b.EXP_ERROR_INST.EERR_DESC };
            return q.FirstOrDefault().CODE_NAME + "  " + q.FirstOrDefault().EERR_DESC;
        }

        public ActionResult get_rel_doc_DP(int? postid, string date1, string date2)
        {
            //ar RetVal = (from b in PublicRepository.Get_Doc() where (b.ETDO_ETDO_ID == id) orderby b.DOC_NUMB select b).AsEnumerable().Select(b => new { b.EEDO_ID, b.DOC_NUMB });
            var RetVal = (from b in Db.EXP_EXPI_DOC.AsEnumerable()
                          join c in Db.EXP_EDOC_INSTRU.AsEnumerable() on b.EEDO_ID equals c.EEDO_EEDO_ID
                          where b.ETDO_ETDO_ID == 21 && c.EPOL_EPOL_ID == postid && (c.OFF_DATE == date1 || c.ON_DATE == date2)
                          select new { b.EEDO_ID, fullname = b.DOC_NUMB + " " + instpiro(b.EEDO_ID) }).ToList();

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID(int? id1)
        {
            int insttype = 0;
            if (id1 != null)
            {
                insttype = int.Parse((from p in Db.EXP_EDOC_INSTRU where p.EDIN_ID == id1 select p.EINS_EINS_ID).FirstOrDefault().ToString());
            }

            var query = (from i in Db.EXP_INSTRUMENT
                         where i.EINS_EINS_ID == 367 && i.EINS_EINS_ID_RRE == insttype
                         orderby i.EINS_DESC
                         select new { i.EINS_ID, i.EINS_DESC }).ToList().Distinct();

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetRellehList(int? EDIN_ID)
        {
            int insttype = 0;
            if (EDIN_ID != null)
            {
                insttype = int.Parse((from p in Db.EXP_EDOC_INSTRU where p.EDIN_ID == EDIN_ID select p.EINS_EINS_ID).FirstOrDefault().ToString());
            }
            var query = (from i in Db.EXP_INSTRUMENT
                         where i.EINS_EINS_ID == 367 && (i.EINS_EINS_ID_RRE == insttype || EDIN_ID == null)
                         orderby i.EINS_DESC
                         select new { i.EINS_ID, i.EINS_DESC }).ToList().Distinct();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Rellehofline()
        {
            var query = (from i in Db.EXP_INSTRUMENT
                         where i.EINS_EINS_ID == 367 && i.EINS_EINS_ID_RRE == 1
                         orderby i.EINS_DESC
                         select new { i.EINS_ID, i.EINS_DESC }).ToList().Distinct();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Rellehofline20k()
        {
            string[] stringArray = { "E/F", "O/C", "U/V  RELAY", "O/C& E/F" };
            var query = (from i in Db.EXP_INSTRUMENT
                         where i.EINS_EINS_ID == 367 && i.EINS_EINS_ID_RRE == 1 && stringArray.Contains(i.EINS_DESC)
                         orderby i.EINS_DESC
                         select new { i.EINS_ID, i.EINS_DESC }).ToList().Distinct();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*اطلاعات پست براساس این که در ردیف قطعی اطلاعات پست یا خط است نمایش داده می شود */
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select | EXP_EDOC_INSTRU > select | EXP_POST_LINE > select")]
        public ActionResult Getpostrelleh(int id1)
        {
            if (id1 != 0)
            {
                int i = int.Parse((from p in Db.EXP_EDOC_INSTRU where p.EDIN_ID == id1 select p.EINS_EINS_ID).FirstOrDefault().ToString());

                if (i != 1)
                {/*پست ها*/
                    var query = from b in Db.EXP_POST_LINE
                                join m in Db.EXP_EDOC_INSTRU on b.EPOL_ID equals m.EPOL_EPOL_ID
                                where m.EDIN_ID == id1 && b.EPOL_STAT == "1"
                                select new { b.EPOL_ID, b.EPOL_NAME };
                    return Json(query, JsonRequestBehavior.AllowGet);
                }
                else
                {/*پست های خط */
                    var q = (from p in Db.EXP_EDOC_INSTRU
                             join b in Db.EXP_POST_LINE_INSTRU on p.EPIU_EPIU_ID equals b.EPIU_ID
                             where p.EDIN_ID == id1
                             select new { b.EPOL_EPOL_ID_INSLIN, b.EPOL_EPOL_ID_LINE });

                    var query = from k in Db.EXP_POST_LINE
                                where (k.EPOL_ID == q.FirstOrDefault().EPOL_EPOL_ID_INSLIN ||
                                k.EPOL_ID == q.FirstOrDefault().EPOL_EPOL_ID_LINE) && k.EPOL_STAT == "1"
                                select new { k.EPOL_ID, k.EPOL_NAME };
                    return Json(query, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                var query = from b in Db.EXP_POST_LINE
                            where b.EPOL_STAT == "1"
                            select new { b.EPOL_ID, b.EPOL_NAME };
                return Json(query, JsonRequestBehavior.AllowGet);
            }
        }

        public class CustomerSearchModel
        {
            public int EINS_ID1 { get; set; }
            public int post3 { get; set; }
        }

        private string backtypephaz(string i)
        {
            if (i == "0") return " فاز R";
            else
                if (i == "1") return "فاز S";
            else if (i == "2") return "فاز T";
            else return "";
        }

        /*اطلاعات مربوط تجهیزات خط و پست را برمی گرداند */
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select | EXP_POST_LINE > select")]
        public ActionResult GetPostInstrument(CustomerSearchModel customerSearchModel)
        {
            int EINS_IDpro = customerSearchModel.EINS_ID1;
            int postpo = customerSearchModel.post3;
            if (EINS_IDpro == 1)
            {
                var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                             join p in Db.EXP_POST_LINE on b.EPOL_EPOL_ID equals p.EPOL_ID
                             where p.EPOL_TYPE == "1" && p.EPOL_STAT == "1" && (b.EPOL_EPOL_ID_INSLIN == postpo || b.EPOL_EPOL_ID_LINE == postpo)
                                   && (b.EPOL_EPOL_ID_INSLIN != null && b.EPOL_EPOL_ID_LINE != null)
                             select new
                             {
                                 b.EPIU_ID,
                                 b.CODE_NAME,
                                 b.PHAS_TYPE,
                                 b.PHAS_STAT,
                                 types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)
                                 //cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                             };
                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var RetVal = from b in Db.EXP_POST_LINE_INSTRU.AsEnumerable()
                             where (b.EINS_EINS_ID == EINS_IDpro || EINS_IDpro == 0) &&
                            (b.EPOL_EPOL_ID == postpo || postpo == 0)
                             select new
                             {
                                 b.EPIU_ID,
                                 b.CODE_NAME,
                                 b.PHAS_TYPE,
                                 b.PHAS_STAT,
                                 types = b.CODE_NAME + " " + backtypephaz(b.PHAS_STAT)
                                 //cexecdesc = b.EXP_TYPE_EQUIP.ETEX_DESC,
                             };

                return Json(RetVal, JsonRequestBehavior.AllowGet);
            }
        }

        public class Customergrid
        {
            public int EARD_ID1 { get; set; }
            public int id { get; set; }
            public string date1 { get; set; }
            public string date2 { get; set; }
        }

        /*اطلاعات رله های مربوط به ردیف قطعی را برمی گرداند */
        [EntityAuthorize("EXP_FUNC_RELE > select")]
        public ActionResult Exp_Rele_Read([DataSourceRequest] DataSourceRequest request, int? EDIN_ID)
        {
            var query = from b in Db.EXP_FUNC_RELE
                            // join c in Context.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                        where b.EDIN_EDIN_ID == EDIN_ID
                        select new
                        {
                            b.EPOL_EPOL_ID,
                            b.EPIU_EPIU_ID,
                            EPOL_NAME = b.EXP_POST_LINE.EPOL_NAME,
                            //  inst = c.CODE_NAME,
                            b.EINS_EINS_ID,
                            b.EFRE_ZONE,
                            b.EFRE_PHAZ,
                            b.EFRE_TYPE,
                            b.EDIN_EDIN_ID,
                            b.EFRE_ROW
                        };

            return Json(query.ToDataSourceResult(request));
        }

        public int Ajax_time_between(string firstdate, string firsttime, string enddate, string endtime)
        {
            //string item_key = "FLW_LEPA.PFLW_LEPA";//, name = "m_fayyazi";
            string sql = string.Format("select TIME_BETWEEN_U('{0}','{1}','{2}','{3}') from dual ", firstdate, firsttime, enddate, endtime);
            string time = Db.Database.SqlQuery<string>(sql).FirstOrDefault();
            var val = time.Split(':');
            string h = val[0].ToString();
            string m = val[1].ToString();
            int minute = Convert.ToInt16(h) * 60 + Convert.ToInt16(m);
            return (minute);
        }

        public int Ajax_time_betweenm(string enddate, string endtime)
        {
            //string item_key = "FLW_LEPA.PFLW_LEPA";//, name = "m_fayyazi";
            int u = Convert.ToInt32(Session["id"]);
            string dateoff = null;
            string timeoff = null;

            var query = (from b in Db.EXP_EDOC_INSTRU
                         where b.EDIN_ID == u
                         select b);

            if (query.FirstOrDefault().OFF_DATE != null)
                dateoff = query.FirstOrDefault().OFF_DATE;
            else
                dateoff = query.FirstOrDefault().TANS_DOFF;


            if (query.FirstOrDefault().OFF_TIME != null)
                timeoff = query.FirstOrDefault().OFF_TIME;
            else
                timeoff = query.FirstOrDefault().TANS_TOFF;

            string sql = string.Format("select TIME_BETWEEN_U('{0}','{1}','{2}','{3}') from dual ", dateoff, timeoff, enddate, endtime);
            string time = Db.Database.SqlQuery<string>(sql).FirstOrDefault();
            var val = time.Split(':');
            string h = val[0].ToString();
            string m = val[1].ToString();
            int minute = Convert.ToInt16(h) * 60 + Convert.ToInt16(m);

            var query1 = (from b in Db.EXP_EDOC_INSTRU
                          where b.EDIN_ID == u
                          select b);

            query1.FirstOrDefault().EDIN_OFF = minute.ToString();
            Db.SaveChanges();
            return (minute);
        }

        private void FillViewDatabyRequestId(int reqId)
        {
            string dateNow = DateTime.Now.GetShamsi();
            Session["date"] = dateNow;
            Session["EARD"] = 181; // AOC , RDC

            if (reqId > 0)
            {
                var findRequestMain = (from b in Db.EXP_EXPI_DOC where b.EEDO_ID == reqId select new { b.ORGA_CODE, b.EPOL_EPOL_ID }).FirstOrDefault();
                var findRequestInstru = (from b in Db.EXP_EDOC_INSTRU where b.EEDO_EEDO_ID == reqId orderby b.EDIN_ID descending select new { b.EPIU_EPIU_ID, b.EUNL_EUNL_ID, b.ON_DATE, b.ON_TIME }).FirstOrDefault();
                if (findRequestInstru.EPIU_EPIU_ID != null)
                {
                    var findRequestInstruDetails = (from b in Db.EXP_POST_LINE_INSTRU where b.EPIU_ID == findRequestInstru.EPIU_EPIU_ID select new { b.EINS_EINS_ID, b.CODE_NAME }).FirstOrDefault();
                    //ViewData["EINSC2"] = findRequestInstruDetails.EINS_EINS_ID;
                    //ViewData["disp_POST2"] = findRequestInstruDetails.CODE_NAME;
                    //ViewData["EINSC"] = findRequestInstruDetails.EINS_EINS_ID;
                    //ViewData["POSTINSTTT"] = findRequestInstru.EPIU_EPIU_ID;
                    ViewBag.einsId = findRequestInstruDetails.EINS_EINS_ID;
                    ViewBag.epiuId = findRequestInstru.EPIU_EPIU_ID;
                    ViewBag.instruName = findRequestInstruDetails.CODE_NAME;
                }

                //ViewData["ORGA_CODE1"] = findRequestMain.ORGA_CODE;
                //ViewData["Unitvolt"] = findRequestInstru.EUNL_EUNL_ID;
                //ViewData["post3"] = findRequestMain.EPOL_EPOL_ID;
                //ViewData["offtype"] = 370;
                //ViewData["off_date"] = findRequestInstru.ON_DATE;
                //ViewData["off_time"] = findRequestInstru.ON_TIME;

                ViewBag.organCode = findRequestMain.ORGA_CODE;
                ViewBag.eunlId = findRequestInstru.EUNL_EUNL_ID;
                ViewBag.postId = findRequestMain.EPOL_EPOL_ID;
                ViewBag.offDate = findRequestInstru.ON_DATE;
                ViewBag.offTime = findRequestInstru.ON_TIME;
                ViewBag.offType = 370;
                ViewBag.requId = reqId;
            }
        }

        public ActionResult ErrorList()
        {
            return View();
        }

        /*با این اکشن ها می توان رویداد جدید ایجاد نمود  یا ردیف رویدادها  ایجاد شده را تغییرو ویرایش
         * کرد*/
        [EntityAuthorize("EXP_EDOC_INSTRU > select")]
        public ActionResult event_new(int? id, int? requ_id)
        {
            //ViewBag.requ_id = requ_id;
            Session["eventid"] = id;
            int keyaoc = 0;
            keyaoc = Convert.ToInt32(Session["EARD"]);
            if (keyaoc == 0)
            {
                Session["EARD"] = 24;
                keyaoc = Convert.ToInt32(Session["EARD"]);
            }
            if (id != 0)
            {
                EXP_EDOC_INSTRU type = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b).FirstOrDefault();
                ViewBag.id = id;
                ViewBag.OFFDATE = type.OFF_DATE;
                ViewBag.OFFTIME = type.OFF_TIME;
                ViewBag.ONDATE = type.ON_DATE;
                ViewBag.ONTIME = type.ON_TIME;
                ViewBag.TANSDOFF = type.TANS_DOFF;
                ViewBag.TANSDON = type.TANS_DON;
                ViewBag.TANSTOFF = type.TANS_TOFF;
                ViewBag.TANSTON = type.TANS_TON;
                return View(type);
            }
            else
            {
                if (requ_id.HasValue)
                {
                    ViewBag.openInRequest = 1;
                    FillViewDatabyRequestId(requ_id.GetValueOrDefault());
                }
                return View();
            }
        }


        public ActionResult Event_Update(int? id, int? requ_id)
        {
            //ViewBag.requ_id = requ_id;
            Session["eventid"] = id;
            int keyaoc = 0;
            keyaoc = Convert.ToInt32(Session["EARD"]);
            if (keyaoc == 0)
            {
                Session["EARD"] = 24;
                keyaoc = Convert.ToInt32(Session["EARD"]);
            }
            if (id != 0)
            {
                EXP_EDOC_INSTRU type = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b).FirstOrDefault();
                ViewBag.id = id;
                ViewBag.OFFDATE = type.OFF_DATE;
                ViewBag.OFFTIME = type.OFF_TIME;
                ViewBag.ONDATE = type.ON_DATE;
                ViewBag.ONTIME = type.ON_TIME;
                ViewBag.TANSDOFF = type.TANS_DOFF;
                ViewBag.TANSDON = type.TANS_DON;
                ViewBag.TANSTOFF = type.TANS_TOFF;
                ViewBag.TANSTON = type.TANS_TON;
                return View(type);
            }
            else
            {
                if (requ_id.HasValue)
                {
                    ViewBag.openInRequest = 1;
                    FillViewDatabyRequestId(requ_id.GetValueOrDefault());
                }
                return View();
            }
        }

        [EntityAuthorize("EXP_EDOC_INSTRU > select")]
        public ActionResult event_new20k(int? id)
        {
            Session["eventid"] = id;
            int keyaoc = 0;
            keyaoc = Convert.ToInt32(Session["EARD"]);
            if (keyaoc == 0)
            {
                Session["EARD"] = 24;
                keyaoc = Convert.ToInt32(Session["EARD"]);
            }
            if (id != 0)
            {
                EXP_EDOC_INSTRU type = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b).FirstOrDefault();
                ViewBag.id = id;
                ViewBag.OFFDATE = type.OFF_DATE;
                ViewBag.OFFTIME = type.OFF_TIME;
                ViewBag.ONDATE = type.ON_DATE;
                ViewBag.ONTIME = type.ON_TIME;
                ViewBag.TANSDOFF = type.TANS_DOFF;
                ViewBag.TANSDON = type.TANS_DON;
                ViewBag.TANSTOFF = type.TANS_TOFF;
                ViewBag.TANSTON = type.TANS_TON;
                return View(type);
            }

            return View();
        }

        public string GetFuc(decimal EDIN_ID)
        {
            var query = from b in Db.EXP_FUNC_RELE where b.EDIN_EDIN_ID == EDIN_ID select b;
            //string[] Func=null;
            List<string> Func = new List<string>();
            foreach (var item in query)
            {
                Func.Add(item.EXP_INSTRUMENT.EINS_DESC);
            }

            return string.Join("-", Func.ToArray());
        }

        public string Get_Organ(string ORGA_CODE, string ORGA_MANA_ASTA_CODE, string ORGA_MANA_CODE)
        {
            string Organ_name = "";
            Organ_name = Db.PAY_ORGAN.Where(xx => xx.CODE == ORGA_CODE && xx.MANA_ASTA_CODE == ORGA_MANA_ASTA_CODE && xx.MANA_CODE == ORGA_MANA_CODE).Select(xx => xx.ORGA_DESC).FirstOrDefault();
            return Organ_name;

        }
        /*این اکشن مقدار رویدادهای ثبت شده را را به ازا اشکالات پایدار یا یک روز خاص برمی گرداند   */
        [EntityAuthorize("EXP_EDOC_INSTRU > select")]
        public ActionResult Exp_maneu_Read([DataSourceRequest] DataSourceRequest request, Customergrid Customergrid1)
        {
            int id = Customergrid1.id;
            int EARD_ID1 = Customergrid1.EARD_ID1;
            string date1 = Customergrid1.date1;
            string date2 = Customergrid1.date2;

            Session["EARD"] = EARD_ID1;
            Session["date"] = date1;



            if (id == -1)
            {/*این قسمت مربوط به رویدادهای که تاریخ وصل ندارند و جز اشکالات شبکه در نظر گرفته می شوند*/
                var query = (from b in Db.EXP_EDOC_INSTRU
                             join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                             where (b.ON_DATE == null && b.ON_TIME == null) && (b.TANS_DON == null || b.TANS_TON == null)
                             && ((b.OFF_DATE != null && b.OFF_TIME != null) || (b.TANS_DOFF != null && b.TANS_TOFF != null))
                             && b.EARD_EARD_ID == EARD_ID1
                             && c.EUNL_EUNL_ID != 201 && b.ETDO_ETDO_ID == 61
                             orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                             select new
                             {
                                 b.EDIN_ID,
                                 b.EPOL_EPOL_ID,
                                 EPOL_NAME = b.EXP_POST_LINE.EPOL_NAME,
                                 b.EPIU_EPIU_ID,
                                 inst = c.CODE_DISP,
                                 b.OFF_DATE,
                                 b.OFF_TIME,
                                 dateoff = b.OFF_DATE + " " + b.TANS_DOFF,
                                 timeoff = b.OFF_TIME + " " + b.TANS_TOFF,
                                 dateon = b.ON_DATE + " " + b.TANS_DON,
                                 timen = b.ON_TIME + " " + b.TANS_TON,

                                 b.DMAN_DMAN_ID,
                                 b.ON_DATE,
                                 b.ON_TIME,
                                 b.CONN_STAT,
                                 b.EDIN_MW,
                                 b.EDIN_OFF,
                                 b.EDIN_MVH,
                                 b.ATTG_SPIC,
                                 b.TANS_DOFF,
                                 b.TANS_TOFF,
                                 b.TANS_DON,
                                 b.TANS_TON,
                                 b.TANS_OFST,
                                 b.TANS_ONST,
                                 WORE_DATE = b.WORE_DATE + " " + b.WORE_TIME,
                                 ERRE_DESC = b.EXP_ERROR_INST.EERR_DESC,
                                 b.STAT_WETH,
                                 b.CRET_BY,
                                 b.EXP_POST_LINE.EXP_UNIT_LEVEL.EUNL_NUM,
                                 b.EXP_POST_LINE.ORGA_CODE,
                                 b.EXP_POST_LINE.ORGA_MANA_ASTA_CODE,
                                 b.EXP_POST_LINE.ORGA_MANA_CODE
                             }).ToList();
                var query2 = query.Select(b => new
                {
                    b.EDIN_ID,
                    b.EPOL_EPOL_ID,
                    b.EPOL_NAME,
                    b.EPIU_EPIU_ID,
                    b.inst,
                    b.OFF_DATE,
                    b.OFF_TIME,
                    b.dateoff,
                    b.timeoff,
                    b.dateon,
                    b.timen,
                    b.DMAN_DMAN_ID,
                    b.ON_DATE,
                    b.ON_TIME,
                    b.CONN_STAT,
                    b.EDIN_MW,
                    b.EDIN_OFF,
                    b.EDIN_MVH,
                    b.ATTG_SPIC,
                    b.TANS_DOFF,
                    b.TANS_TOFF,
                    b.TANS_DON,
                    b.TANS_TON,
                    b.TANS_OFST,
                    b.TANS_ONST,
                    b.WORE_DATE,
                    b.ERRE_DESC,
                    b.STAT_WETH,
                    b.CRET_BY,
                    Func_Desc = GetFuc(b.EDIN_ID),
                    b.EUNL_NUM,
                    Organ_Name = Get_Organ(b.ORGA_CODE, b.ORGA_MANA_ASTA_CODE, b.ORGA_MANA_CODE)

                }).ToList();

                return Json(query2.ToDataSourceResult(request));
            }
            else
            {         /*رویدادهای که مربوط به یک تاریخ خاص هستند */
                var query = (from b in Db.EXP_EDOC_INSTRU
                             join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                             where
                             (
                             ((b.OFF_DATE.CompareTo(date1) > 0 && b.OFF_DATE.CompareTo(date2) < 0) || (b.OFF_DATE.CompareTo(date1) == 0 || b.OFF_DATE.CompareTo(date2) == 0))
                             ||
                             ((b.ON_DATE.CompareTo(date1) > 0 && b.ON_DATE.CompareTo(date2) < 0) || (b.ON_DATE.CompareTo(date1) == 0 || b.ON_DATE.CompareTo(date2) == 0))
                             ) && b.ETDO_ETDO_ID == 61
                              && (c.EUNL_EUNL_ID != 201 || b.CRET_BY == "A-FIROOZMAND" || b.CRET_BY == "M-CONTROL")
                               && (b.EARD_EARD_ID == EARD_ID1)
                             orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                             select new
                             {
                                 b.EDIN_ID,
                                 b.EPOL_EPOL_ID,
                                 EPOL_NAME = b.EXP_POST_LINE.EPOL_NAME,
                                 b.EPIU_EPIU_ID,
                                 inst = c.CODE_NAME,
                                 dateoff = b.OFF_DATE + " " + b.TANS_DOFF,
                                 timeoff = b.OFF_TIME + " " + b.TANS_TOFF,
                                 dateon = b.ON_DATE + " " + b.TANS_DON,
                                 timen = b.ON_TIME + " " + b.TANS_TON,
                                 b.OFF_DATE,
                                 b.OFF_TIME,
                                 b.DMAN_DMAN_ID,
                                 b.ON_DATE,
                                 b.ON_TIME,
                                 b.CONN_STAT,
                                 b.EDIN_MW,
                                 b.EDIN_OFF,
                                 b.EDIN_MVH,
                                 b.ATTG_SPIC,
                                 b.TANS_DOFF,
                                 b.TANS_TOFF,
                                 b.TANS_DON,
                                 b.TANS_TON,
                                 b.TANS_OFST,
                                 b.TANS_ONST,
                                 WORE_DATE = b.WORE_DATE + " " + b.WORE_TIME,
                                 ERRE_DESC = b.EXP_ERROR_INST.EERR_DESC,
                                 b.STAT_WETH,
                                 b.CRET_BY,
                                 b.EXP_POST_LINE.EXP_UNIT_LEVEL.EUNL_NUM,
                                 b.EXP_POST_LINE.ORGA_CODE,
                                 b.EXP_POST_LINE.ORGA_MANA_ASTA_CODE,
                                 b.EXP_POST_LINE.ORGA_MANA_CODE,
                                 b.EEDO_EEDO_ID

                             }).ToList();
                var query2 = query.Select(b => new
                {
                    b.EDIN_ID,
                    b.EPOL_EPOL_ID,
                    b.EPOL_NAME,
                    b.EPIU_EPIU_ID,
                    b.inst,
                    b.OFF_DATE,
                    b.OFF_TIME,
                    b.dateoff,
                    b.timeoff,
                    b.dateon,
                    b.timen,
                    b.DMAN_DMAN_ID,
                    b.ON_DATE,
                    b.ON_TIME,
                    b.CONN_STAT,
                    b.EDIN_MW,
                    b.EDIN_OFF,
                    b.EDIN_MVH,
                    b.ATTG_SPIC,
                    b.TANS_DOFF,
                    b.TANS_TOFF,
                    b.TANS_DON,
                    b.TANS_TON,
                    b.TANS_OFST,
                    b.TANS_ONST,
                    b.WORE_DATE,
                    b.ERRE_DESC,
                    b.STAT_WETH,
                    b.CRET_BY,
                    b.EUNL_NUM,
                    Organ_Name = Get_Organ(b.ORGA_CODE, b.ORGA_MANA_ASTA_CODE, b.ORGA_MANA_CODE),
                    Func_Desc = GetFuc(b.EDIN_ID),
                    Request_ID = b.EEDO_EEDO_ID.HasValue ? "R" + b.EEDO_EEDO_ID : ""
                }).ToList();

                return Json(query2.ToDataSourceResult(request));

            }
        }

        public ActionResult Exp_maneu_Read20k([DataSourceRequest] DataSourceRequest request, Customergrid Customergrid1)
        {
            int id = Customergrid1.id;
            int EARD_ID1 = Customergrid1.EARD_ID1;
            string StartDate = Customergrid1.date1;
            string EndDate = Customergrid1.date2;
            Session["EARD"] = EARD_ID1;
            Session["date"] = StartDate;
            int userid = this.UserInfo().UserId;
            var userquery = from a in Db.SEC_USERS
                            join b in Db.SEC_USER_TYPE_POST on a.ROW_NO equals b.SCSU_ROW_NO
                            where (b.SCSU_ROW_NO == userid && b.ETDO_ETDO_ID == 303)
                            select b.EPOL_EPOL_ID;

            if (id == -1)
            {/*این قسمت مربوط به رویدادهای که تاریخ وصل ندارند و جز اشکالات شبکه در نظر گرفته می شوند*/
                var query = from b in Db.EXP_EDOC_INSTRU
                            join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                            where (b.ON_DATE == null || b.ON_TIME == null) && (b.TANS_DON == null || b.TANS_TON == null)
                                   && ((b.OFF_DATE != null && b.OFF_TIME != null) || (b.TANS_DOFF != null && b.TANS_TOFF != null))
                                   && (b.EARD_EARD_ID == EARD_ID1) && userquery.Contains(b.EPOL_EPOL_ID)
                            orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                            select new
                            {
                                b.EDIN_ID,
                                b.EPOL_EPOL_ID,
                                EPOL_NAME = b.EXP_POST_LINE.EPOL_NAME,
                                b.EPIU_EPIU_ID,
                                inst = c.CODE_DISP,
                                b.OFF_DATE,
                                b.OFF_TIME,
                                dateoff = b.OFF_DATE + " " + b.TANS_DOFF,
                                timeoff = b.OFF_TIME + " " + b.TANS_TOFF,
                                dateon = b.ON_DATE + " " + b.TANS_DON,
                                timen = b.ON_TIME + " " + b.TANS_TON,
                                b.DMAN_DMAN_ID,
                                b.ON_DATE,
                                b.ON_TIME,
                                b.CONN_STAT,
                                b.EDIN_MW,
                                b.EDIN_OFF,
                                b.EDIN_MVH,
                                b.ATTG_SPIC,
                                b.TANS_DOFF,
                                b.TANS_TOFF,
                                b.TANS_DON,
                                b.TANS_TON,
                                b.TANS_OFST,
                                b.TANS_ONST,
                                WORE_DATE = b.WORE_DATE + " " + b.WORE_TIME,
                                ERRE_DESC = b.EXP_ERROR_INST.EERR_DESC,
                                b.STAT_WETH,
                                b.CRET_BY
                            };

                return Json(query.ToDataSourceResult(request));
            }
            else
            {         /*رویدادهای که مربوط به یک تاریخ خاص هستند */
                var query = from b in Db.EXP_EDOC_INSTRU
                            join c in Db.EXP_POST_LINE_INSTRU on b.EPIU_EPIU_ID equals c.EPIU_ID
                            where
                                 (
                                 b.OFF_DATE == StartDate || b.ON_DATE == StartDate ||
                                 b.OFF_DATE == EndDate || b.ON_DATE == EndDate ||
                                 (b.OFF_DATE.CompareTo(StartDate) > 0 && b.OFF_DATE.CompareTo(EndDate) < 0) && (b.ON_DATE.CompareTo(StartDate) > 0 && b.ON_DATE.CompareTo(EndDate) < 0 || b.ON_DATE == null)


                                 ) && b.EXP_POST_LINE_INSTRU.EUNL_EUNL_ID == 201
                                   && (b.EARD_EARD_ID == EARD_ID1) && userquery.Contains(b.EPOL_EPOL_ID)
                            orderby b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.OFF_DATE, b.OFF_TIME
                            select new
                            {
                                b.EDIN_ID,
                                b.EPOL_EPOL_ID,
                                EPOL_NAME = b.EXP_POST_LINE.EPOL_NAME,
                                b.EPIU_EPIU_ID,
                                inst = c.CODE_NAME,
                                dateoff = b.OFF_DATE + " " + b.TANS_DOFF,
                                timeoff = b.OFF_TIME + " " + b.TANS_TOFF,
                                dateon = b.ON_DATE + " " + b.TANS_DON,
                                timen = b.ON_TIME + " " + b.TANS_TON,
                                b.OFF_DATE,
                                b.OFF_TIME,
                                b.DMAN_DMAN_ID,
                                b.ON_DATE,
                                b.ON_TIME,
                                b.CONN_STAT,
                                b.EDIN_MW,
                                b.EDIN_OFF,
                                b.EDIN_MVH,
                                b.ATTG_SPIC,
                                b.TANS_DOFF,
                                b.TANS_TOFF,
                                b.TANS_DON,
                                b.TANS_TON,
                                b.TANS_OFST,
                                b.TANS_ONST,
                                //WORE_DATE = b.WORE_DATE + " " + b.WORE_TIME,
                                b.WORE_TIME,
                                b.WORE_DATE,
                                ERRE_DESC = b.EXP_ERROR_INST.EERR_DESC,
                                b.STAT_WETH,
                                b.CRET_BY
                            };

                return Json(query.ToDataSourceResult(request));
                /* }
                /* else
                 {
                     var query = from b in Context.EXP_EDOC_INSTRU
                                 where (b.EDIN_ID == id)
                                 select new
                                 {
                                     b.EDIN_ID,
                                     b.EPOL_EPOL_ID,
                                     b.EPIU_EPIU_ID,
                                     b.OFF_DATE,
                                     b.OFF_TIME,
                                     b.DMAN_DMAN_ID,
                                     b.ON_DATE,
                                     b.ON_TIME,
                                     b.CONN_STAT,
                                     b.EDIN_MW,
                                     b.EDIN_OFF,
                                     b.EDIN_MVH,
                                     b.ATTG_SPIC
                                 };


                     return Json(query.ToDataSourceResult(request));
                 }*/
            }
        }

        public ActionResult Report_L1()
        {
            return View();
        }

        public ActionResult Report_T()
        {
            return View();
        }

        public ActionResult dailyreport()
        {
            return View();
        }
        public ActionResult FirstChargeReport()
        {
            return View();
        }

        public ActionResult weeklyreport()
        {
            return View();
        }

        /*این اکشن ویو مربوط به عملکرد رله را نمایش می دهد*/
        [EntityAuthorize("EXP_POST_LINE > select | EXP_EDOC_INSTRU > select | EXP_POST_LINE_INSTRU > select")]
        public ActionResult Add_relleh_win(string id)
        {
            if ((id == null))
            {
                Session["id"] = id;
                ViewBag.MyMessage = "اطلاعات را ابتدا وارد و ذخیره نمایید";
                return View();
            }
            else
            {
                //int k = int.Parse(id);
                //var q = (from b in Context.EXP_EDOC_INSTRU where b.EDIN_ID == k select b.EINS_EINS_ID).FirstOrDefault().ToString();
                //if (q != "")
                //{
                //    int a = int.Parse(q);
                //    if (a == 1) ViewBag.key = 1;
                //    else ViewBag.key = 0;
                //}
                ViewBag.key = 1;
                if ((id != null))
                {
                    Session["id"] = id;
                }
                ViewData["post1"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
                ViewData["PostInstrument1"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EPIU_ID, o.CODE_NAME });
                ViewData["Instrument"] = Db.EXP_INSTRUMENT.Where(o => o.EINS_EINS_ID != null).Select(o => new { o.EINS_ID, o.EINS_DESC });
                return View("PartialFuncRelleh");
            }
        }

        [EntityAuthorize("EXP_POST_LINE > select | EXP_EDOC_INSTRU > select | EXP_POST_LINE_INSTRU > select")]
        public ActionResult Add_onverch_win(string id)
        {
            if ((id == null))
            {
                Session["id"] = id;
                ViewBag.MyMessage = "اطلاعات را ابتدا وارد و ذخیره نمایید";
                return View();
            }
            else
            {
                //int k = int.Parse(id);
                //var q = (from b in Context.EXP_EDOC_INSTRU where b.EDIN_ID == k select b.EINS_EINS_ID).FirstOrDefault().ToString();
                //if (q != "")
                //{
                //    int a = int.Parse(q);
                //    if (a == 1) ViewBag.key = 1;
                //    else ViewBag.key = 0;
                //}
                ViewBag.key = 1;
                if ((id != null))
                {
                    Session["id"] = id;
                }
                ViewData["post1"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
                ViewData["PostInstrument1"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EPIU_ID, o.CODE_NAME });
                ViewData["Instrument"] = Db.EXP_INSTRUMENT.Where(o => o.EINS_EINS_ID != null).Select(o => new { o.EINS_ID, o.EINS_DESC });
                return View("Partialonverch");
            }
        }

        /*با این اکشن اطلاعات عملکرد رله مربوط به قطعی ثبت می شود و در صورتیکه اطلاعات تغییر نمایید اطلاعات ثبت می شود .*/
        public ActionResult Add_onverch_win20k(string id)
        {
            if ((id == null))
            {
                Session["id"] = id;
                ViewBag.MyMessage = "اطلاعات را ابتدا وارد و ذخیره نمایید";
                return View();
            }
            else
            {
                //int k = int.Parse(id);
                //var q = (from b in Context.EXP_EDOC_INSTRU where b.EDIN_ID == k select b.EINS_EINS_ID).FirstOrDefault().ToString();
                //if (q != "")
                //{
                //    int a = int.Parse(q);
                //    if (a == 1) ViewBag.key = 1;
                //    else ViewBag.key = 0;
                //}
                ViewBag.key = 1;
                if ((id != null))
                {
                    Session["id"] = id;
                }
                ViewData["post1"] = Db.EXP_POST_LINE.Select(o => new { o.EPOL_ID, o.EPOL_NAME }).AsEnumerable();
                ViewData["PostInstrument1"] = Db.EXP_POST_LINE_INSTRU.Select(o => new { o.EPIU_ID, o.CODE_NAME });
                ViewData["Instrument"] = Db.EXP_INSTRUMENT.Where(o => o.EINS_EINS_ID != null).Select(o => new { o.EINS_ID, o.EINS_DESC });
                return View("Partialonverch20k");
            }
        }

        [EntityAuthorize("EXP_EDOC_INSTRU > insert,select,update")]
        public ActionResult Insertonver20k(EXP_EDOC_INSTRU MyModel)
        {
            int Id = Convert.ToInt32(Session["id"]);
            string dateoff = null, timeoff = null, ON_DATE = "", ON_TIME = "";
            string WORE_DATE = Request.Form["on_datem"]; //Model.WORE_DATE; ;
            string WORE_TIME = Request.Form["on_timem"]; // Model.WORE_TIME;

            var query = (from b in Db.EXP_EDOC_INSTRU
                         where b.EDIN_ID == Id
                         select b);


            if (query.FirstOrDefault().OFF_DATE != null)
                dateoff = query.FirstOrDefault().OFF_DATE;

            else
                dateoff = query.FirstOrDefault().TANS_DOFF;

            if (query.FirstOrDefault().OFF_TIME != null)
                timeoff = query.FirstOrDefault().OFF_TIME;

            else
                timeoff = query.FirstOrDefault().TANS_TOFF;

            ON_DATE = query.FirstOrDefault().ON_DATE;
            ON_TIME = query.FirstOrDefault().ON_TIME;

            if (ON_DATE != null && ON_TIME != null)
            {
                if (ON_DATE.CompareTo(WORE_DATE) < 0)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("تاریخ  وصل مجازی نمی تواند از تاریخ وصل واقعی بیشتر  باشد") }.ToJson();
                }
                else if (ON_DATE.CompareTo(WORE_DATE) == 0 && ON_TIME.CompareTo(WORE_TIME) < 0)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("زمان  وصل مجازی  نمی تواند از زمان وصل واقعی بیشتر  باشد") }.ToJson();
                }

            }





            if (dateoff != null && WORE_DATE != null && dateoff.CompareTo(WORE_DATE) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("تاریخ  وصل مجازی  نمی تواند از تاریخ قطع کمتر باشد") }.ToJson();
            }
            if (dateoff.CompareTo(WORE_DATE) == 0 && timeoff.CompareTo(WORE_TIME) == 1)
            {

                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("زمان  وصل مجازی نمی تواند از زمان قطع کمتر  باشد") }.ToJson();
            }
            //else
            //{
            //    if (dateoff != null && dateon != null && dateoff.CompareTo(dateon) == 0)
            //    {
            //        if (timeoff != null && timeon != null)
            //        {
            //            string timeoff1 = timeoff.Substring(0, 5);
            //            string timeon1 = timeon.Substring(0, 5);
            //            if (timeoff1.CompareTo(timeon1) > 0)
            //            {
            //                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  وصل مجازی از زمان قطع نمی تواند بزرگتر باشد ", u) }.ToJson();
            //            }
            //        }
            //    }
            //}

            try
            {
                var chkl = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == Id select b).FirstOrDefault();
                decimal min = Ajax_time_between(chkl.OFF_DATE, chkl.OFF_TIME, WORE_DATE, WORE_TIME);
                min = min / (decimal)60;
                int EDIN_MW = Convert.ToInt32(chkl.EDIN_MW);
                chkl.EDIN_MVH = Math.Round((EDIN_MW / (decimal)30 * min) * 1000).ToString();
                chkl.WORE_DATE = WORE_DATE;
                chkl.WORE_TIME = WORE_TIME;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("وصل مجازی با موفقیت ثبت شد") }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        public ActionResult Insertonver(EXP_EDOC_INSTRU MyModel)
        {
            int u = Convert.ToInt32(Session["id"]);
            string dateoff = null, timeoff = null, ON_DATE = "", ON_TIME = "";
            string dateon = Request.Form["on_datem"]; //Model.WORE_DATE; ;
            string timeon = Request.Form["on_timem"]; // Model.WORE_TIME;

            var query = (from b in Db.EXP_EDOC_INSTRU
                         where b.EDIN_ID == u
                         select b);

            if (query.FirstOrDefault().OFF_DATE != null)
                dateoff = query.FirstOrDefault().OFF_DATE;
            else
                dateoff = query.FirstOrDefault().TANS_DOFF;

            if (query.FirstOrDefault().OFF_TIME != null)
                timeoff = query.FirstOrDefault().OFF_TIME;
            else
                timeoff = query.FirstOrDefault().TANS_TOFF;

            ON_DATE = query.FirstOrDefault().ON_DATE;
            ON_TIME = query.FirstOrDefault().ON_TIME;
            if (!string.IsNullOrEmpty(ON_DATE))
            {
                if (ON_DATE.CompareTo(dateon) < 0)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  وصل مجازی از تاریخ وصل واقعی بیشتر نمی تواند باشد", u) }.ToJson();
                }
                if ((ON_DATE.CompareTo(dateon) < 0 || ON_DATE.CompareTo(dateon) == 0) && ON_TIME.CompareTo(timeon) < 0)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  وصل مجازی از زمان وصل واقعی بیشتر نمی تواند باشد", u) }.ToJson();
                }
            }

            if (dateoff != null && dateon != null && dateoff.CompareTo(dateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  وصل مجازی از تاریخ قطع کمتر نمی تواند باشد", u) }.ToJson();
            }
            else
            {
                if (dateoff != null && dateon != null && dateoff.CompareTo(dateon) == 0)
                {
                    if (timeoff != null && timeon != null)
                    {
                        string timeoff1 = timeoff.Substring(0, 5);
                        string timeon1 = timeon.Substring(0, 5);
                        if (timeoff1.CompareTo(timeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  وصل مجازی از زمان قطع نمی تواند بزرگتر باشد ", u) }.ToJson();
                        }
                    }
                }
            }

            try
            {

                var chkl = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == u select b).FirstOrDefault();
                //int min = Ajax_time_between(chkl.OFF_DATE, chkl.OFF_TIME, dateon, timeon);
                decimal min = Ajax_time_between(chkl.OFF_DATE, chkl.OFF_TIME, dateon, timeon);
                min = min / (decimal)60;
                decimal EDIN_MW = Convert.ToDecimal(chkl.EDIN_MW);
                chkl.EDIN_MVH = (Math.Round((EDIN_MW * min) * 1000)).ToString();// ((int)((decimal)(EDIN_MW * min) * 1000)).ToString();
                // chkl.EDIN_MVH = ((EDIN_MW * (min / 60)) * 1000).ToString();
                //chkl.EDIN_MVH = (((decimal)EDIN_MW / (decimal)30)).ToString();
                chkl.WORE_DATE = dateon;
                chkl.WORE_TIME = timeon;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", u) }.ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_EDOC_INSTRU > select | EXP_FUNC_RELE > insert")]
        public ActionResult Insertrellah(Equipment.Models.EXP_FUNC_RELE MyModel)
        {
            //int d = 0;
            //if (Request.Form["Relehinstr"] != "")
            //{ d = int.Parse(Request.Form["Relehinstr"]); }

            //int d1 = 0;
            //if (Request.Form["postreleh"] != "")
            //{ d1 = int.Parse(Request.Form["postreleh"]); }
            //int d3 = 0;
            //if (Request.Form["postreleh"] != "")
            //{ d3 = int.Parse(Request.Form["postreleh"]); }
            //string d4 = "";
            if (Session["id"] != null)
            {
                int id = Convert.ToInt32(Session["id"]);
                //int i = int.Parse((from p in Context.EXP_EDOC_INSTRU where p.EDIN_ID == id select p.EINS_EINS_ID).FirstOrDefault().ToString());
                //if (i == 1)
                //{                   
                //    if (Request.Form["line"] != "")
                //    { d4 = Request.Form["line"].ToString(); }
                //}
                //else
                //{                    
                //    if (Request.Form["post"] != "")
                //    { d4 = Request.Form["post"].ToString(); }
                //}
                try
                {
                    //Context.EXP_FUNC_RELE.Add(new EXP_FUNC_RELE()
                    //{
                    //    EPIU_EPIU_ID = d,
                    //    EPOL_EPOL_ID = d1,
                    //    EDIN_EDIN_ID = id,
                    //    EFRE_TYPE = d4
                    //});
                    if (Request.Form["Relehinstr"] != null)
                        if (Request.Form["Relehinstr"] != "")
                            MyModel.EPIU_EPIU_ID = Convert.ToInt32(Request.Form["Relehinstr"].ToString());

                    if (Request.Form["funcr"] != null)
                        if (Request.Form["funcr"] != "")
                            MyModel.EINS_EINS_ID = Convert.ToInt32(Request.Form["funcr"].ToString());

                    if (Request.Form["zone"] != null)
                        MyModel.EFRE_ZONE = Request.Form["zone"].ToString();

                    if (Request.Form["Phaz"] != null)
                        MyModel.EFRE_PHAZ = Request.Form["Phaz"].ToString();

                    MyModel.EDIN_EDIN_ID = id;
                    Db.EXP_FUNC_RELE.Add(MyModel);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", id) }.ToJson();
                }
                catch (Exception ex)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
                }
            }
            else
            {
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ابتدا اطلاعات قطعی را وارد نمایید.") }.ToJson();
            }
        }

        public ActionResult geterror()
        {
            var RetVal = from b in Db.EXP_ERROR_INST
                         where b.EERR_TYPE == null
                         select new { b.EERR_ID, b.EERR_DESC };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        public ActionResult geterror20k()
        {
            var RetVal = from b in Db.EXP_ERROR_INST
                         where b.EERR_TYPE == 2
                         select new { b.EERR_ID, b.EERR_DESC };

            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetErrorList([DataSourceRequest] DataSourceRequest request)
        {
            var query = (from p in Db.EXP_ERROR_INST
                         where p.EERR_TYPE == null
                         orderby p.EERR_DESC
                         select new
                         {
                             p.EERR_DESC,
                             p.EERR_ID,
                             p.EERR_TYPE
                         }).ToList();

            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult insert_error(EXP_ERROR_INST objecttemp)
        {
            //objecttemp.GROP_GROP_ID = 62;
            Db.EXP_ERROR_INST.Add(objecttemp);
            Db.SaveChanges();
            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("اطلاعات با موفقیت ثبت شد ") }.ToJson();
        }

        public ActionResult Update_Error([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<EXP_ERROR_INST> EXP_ERROR_INST)
        {
            if (EXP_ERROR_INST != null)
            {
                foreach (EXP_ERROR_INST item in EXP_ERROR_INST)
                {
                    Db.Entry(item).State = EntityState.Modified;
                    Db.SaveChanges();
                }
            }

            return Json(EXP_ERROR_INST.ToDataSourceResult(request, ModelState));
        }

        /*با این اکشن اطلعات رویدادها ثبت یا اطلاعات تغییر یافته ثبت می شود */
        [EntityAuthorize("EXP_EDOC_INSTRU > insert,select,update")]
        public ActionResult InsertManeu(EXP_EDOC_INSTRU MyModel)
        {
            decimal EDIN_ID = MyModel.EDIN_ID;// Convert.ToInt32(Session["eventid"]);
            string date = Db.Database.SqlQuery<string>(string.Format("SELECT farsi_date_u(to_date('{0}','mm/dd/yyyy')) FROM DUAL", DateTime.Today.ToShortDateString())).FirstOrDefault().ToString();
            //int EDIN_ID = Convert.ToInt32(Session["eventid"]);
            //string date = Session["date"].ToString();
            int erad = 181; Convert.ToInt32(Session["EARD"]);
            int d2 = 0;
            if (Request.Form["post3"] != null)
            {
                if (Request.Form["post3"] != "")
                { d2 = int.Parse(Request.Form["post3"]); }
            }

            int d13 = 0;
            if (Request.Form["EINSC"] != null)
            {
                if (Request.Form["EINSC"] != "")
                { d13 = int.Parse(Request.Form["EINSC"]); }

            }
            int error_error_id = 0;
            if (Request.Form["error_error_id"] != "")
            {
                if (Request.Form["error_error_id"] != "")
                { error_error_id = int.Parse(Request.Form["error_error_id"]); }
            }

            string d4 = string.Empty;
            if (Request.Form["EDIN_MW"] != null)
            {
                d4 = Request.Form["EDIN_MW"].ToString();
            }

            int dstattype = -1;

            if (d13 == 1)
            {
                if (Request.Form["linetype"] != null)
                {
                    if (Request.Form["linetype"] != "")
                    { dstattype = int.Parse(Request.Form["linetype"]); }
                }
            }
            else
            {
                if (Request.Form["posttype"] != null)
                {
                    if (Request.Form["posttype"] != "")
                    { dstattype = int.Parse(Request.Form["posttype"]); }
                }
            }

            string dateoff = null;
            string timeoff = null;
            string tdateoff = null;
            string ttimeoff = null;

            if (dstattype == 0)
            {
                if (Request.Form["off_date"] != null)
                {
                    if (Request.Form["off_date"].ToString() != "")
                        dateoff = Request.Form["off_date"].ToString();
                }
                if (Request.Form["off_time2"] != null)
                {
                    if (Request.Form["off_time2"].ToString() != "")
                        timeoff = Request.Form["off_time2"].ToString();
                }
            }
            else
            {
                if (Request.Form["offt_date"] != null)
                {
                    if (Request.Form["offt_date"].ToString() != "")
                        tdateoff = Request.Form["offt_date"].ToString();
                }

                if (Request.Form["offt_time"] != null)
                {
                    if (Request.Form["offt_time"].ToString() != "")
                        ttimeoff = Request.Form["offt_time"].ToString();
                }
                if (Request.Form["off_date1"] != null)
                {
                    if (Request.Form["off_date1"].ToString() != "")
                        dateoff = Request.Form["off_date1"].ToString();
                }
                if (Request.Form["off_time1"] != null)
                {
                    if (Request.Form["off_time1"].ToString() != "")
                        timeoff = Request.Form["off_time1"].ToString();
                }
            }

            int d6 = 0;

            if (Request.Form["offtype"] != null)
            {
                if (Request.Form["offtype"] != "")
                { d6 = int.Parse(Request.Form["offtype"]); }
            }

            string d7 = string.Empty;
            if (Request.Form["EDIN_OFF"] != null)
            {
                d7 = Request.Form["EDIN_OFF"].ToString();
            }

            int d8 = 0;
            if (Request.Form["POSTINSTTT"] != "")
            {
                d8 = int.Parse(Request.Form["POSTINSTTT"]);
            }
            //if (Request.Form["typeinst1"] != null)
            //{
            //    if (Request.Form["typeinst1"].ToString() == "1")
            //    {
            //        if (Request.Form["POSTINSTTT"] != null)
            //        {
            //            if (Request.Form["POSTINSTTT"] != "")
            //            { d8 = int.Parse(Request.Form["POSTINSTTT"]); }
            //        }
            //    }
            //    else
            //    {
            //        if (Request.Form["POSTINST"] != null)
            //        {
            //            if (Request.Form["POSTINST"] != "")
            //            { d8 = int.Parse(Request.Form["POSTINST"]); }
            //        }
            //    }
            //}
            //if (Request.Form["POSTINSTTT"] != null)
            //{
            //    if (Request.Form["POSTINSTTT"] != "")
            //    { d8 = int.Parse(Request.Form["POSTINSTTT"]); }
            //}
            // var d9 = Request.Form["on_time"].ToString();

            string d10 = "";
            string c1 = Request.Form["C1"];
            if (!string.IsNullOrEmpty(Request.Form["EDIN_OFF"]) && c1 == "ON")
            {
                d10 = Request.Form["EDIN_MVH"].ToString();
            }

            string d11 = string.Empty;
            if (Request.Form["EDIN_OFF"] != null)
            {
                d11 = Request.Form["connstat"].ToString();
            }
            string d12 = string.Empty;
            if (Request.Form["ATTG_SPIC"] != "")
            {
                d12 = Request.Form["ATTG_SPIC"];
            }
            else
            {
                d12 = null;
            }

            int? dstattypeon = null;

            if (d13 == 1)
            {
                if (Request.Form["lineon"] != null)
                {
                    if (Request.Form["lineon"] != "")
                    { dstattypeon = int.Parse(Request.Form["lineon"]); }
                }
            }
            else
            {
                if (Request.Form["poston"] != null)
                {
                    if (Request.Form["poston"] != "")
                    { dstattypeon = int.Parse(Request.Form["poston"]); }
                }
            }
            string STATWETH = Request.Form["STAT_WETH"];
            //if (Request.Form["STAT_WETH"] != null)


            //{ STATWETH = Request.Form["STAT_WETH"]; }

            string dateon = null;
            string timeon = null;
            string tdateon = null;
            string ttimeon = null;

            if (dstattypeon == 0)
            {
                if (Request.Form["on_date"] != null)
                {
                    if (Request.Form["on_date"].ToString() != "")
                        dateon = Request.Form["on_date"].ToString();
                }
                if (Request.Form["on_time"] != null)
                {
                    if (Request.Form["on_time"].ToString() != "")
                        timeon = Request.Form["on_time"].ToString();
                }
            }
            else if (dstattypeon == 1 || dstattypeon == 2)
            {
                if (Request.Form["ont_date"] != null)
                {
                    if (Request.Form["ont_date"].ToString() != "")
                        tdateon = Request.Form["ont_date"].ToString();
                }

                if (Request.Form["ont_time"] != null)
                {
                    if (Request.Form["ont_time"].ToString() != "")
                        ttimeon = Request.Form["ont_time"].ToString();
                }
                if (Request.Form["on_date1"] != null)
                {
                    if (Request.Form["on_date1"].ToString() != "")
                        dateon = Request.Form["on_date1"].ToString();
                }

                if (Request.Form["on_time1"] != null)
                {
                    if (Request.Form["on_time1"].ToString() != "")
                        timeon = Request.Form["on_time1"].ToString();
                }
            }

            string ONDATEm = Request.Form["ONDATEm"]; //Model.WORE_DATE; ;
            string ONTIMEm = Request.Form["ONTIMEm"]; // Model.WORE_TIME;
            /*چک زمان */
            //string date1 = null;

            if (tdateoff != null && dateoff != null && tdateoff.CompareTo(dateoff) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { Message = string.Format("[{0}]تاریخ  قطع تحت تانسیون از تاریخ قطع کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateoff != null && dateoff != null && tdateoff.CompareTo(dateoff) == 0)
                {
                    if (ttimeoff != null && timeoff != null)
                    {
                        string ttimeoff1 = ttimeoff.Substring(0, 5);
                        string timeoff1 = timeoff.Substring(0, 5);
                        if (ttimeoff1.CompareTo(timeoff1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  قطع تحت تانسیون از زمان قطع کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            var check = from b in Db.EXP_EDOC_INSTRU where b.ETDO_ETDO_ID == 61 && b.EPIU_EPIU_ID == d8 && b.OFF_DATE == dateoff && b.OFF_TIME == timeoff select b;
            if (tdateoff != null && tdateon != null && tdateoff.CompareTo(tdateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  قطع تحت تانسیون از تاریخ وصل تحت تانسیون  بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateoff != null && tdateon != null && tdateoff.CompareTo(tdateon) == 0)
                {
                    if (ttimeoff != null && ttimeon != null)
                    {
                        string ttimeoff1 = ttimeoff.Substring(0, 5);
                        string ttimeon1 = ttimeon.Substring(0, 5);
                        if (ttimeoff1.CompareTo(ttimeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  قطع تحت تانسیون از زمان وصل تحت نانسیون  بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            if (tdateon != null && dateoff != null && dateoff.CompareTo(tdateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  قطع کامل  از تاریخ وصل تحت تانسیون بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateon != null && dateoff != null && dateoff.CompareTo(tdateon) == 0)
                {
                    if (ttimeon != null && timeoff != null)
                    {
                        string ttimeon1 = ttimeon.Substring(0, 5);
                        string timeoff1 = timeoff.Substring(0, 5);
                        if (ttimeon1.CompareTo(timeoff1) < 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  قطع کامل از زمان  وصل تحت تانسیون بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            if (tdateon != null && dateon != null && tdateon.CompareTo(dateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  وصل تحت تانسیون از تاریخ  وصل کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateon != null && dateon != null && tdateon.CompareTo(dateon) == 0)
                {
                    if (ttimeon != null && timeon != null)
                    {
                        string ttimeon1 = ttimeon.Substring(0, 5);
                        string timeon1 = timeon.Substring(0, 5);
                        if (ttimeon1.CompareTo(timeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  وصل تحت تانسیون از زمان وصل کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            if (dateoff != null && dateon != null && dateoff.CompareTo(dateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  قطع کامل از تاریخ  وصل کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (dateoff != null && dateon != null && dateoff.CompareTo(dateon) == 0)
                {
                    if (timeoff != null && timeon != null)
                    {
                        string timeoff1 = timeoff.Substring(0, 5);
                        string timeon1 = timeon.Substring(0, 5);
                        if (timeoff1.CompareTo(timeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  قطع کامل از زمان وصل کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            if (tdateoff != null && dateon != null && tdateoff.CompareTo(dateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  قطع تحت تانسیون از تاریخ وصل کامل   بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateoff != null && dateon != null && tdateoff.CompareTo(dateon) == 0)
                {
                    if (ttimeoff != null && timeon != null)
                    {
                        string ttimeoff1 = ttimeoff.Substring(0, 5);
                        string timeon1 = timeon.Substring(0, 5);
                        if (ttimeoff1.CompareTo(timeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Success) { ExceptionMessage = string.Format("[{0}]زمان  قطع تحت تانسیون از زمان وصل کامل  بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            //if (timeon != null )
            //{
            //    string timeoff1 = string.Empty;
            //    string ttimeoff1 = string.Empty;
            //    string timeon1 = timeon.Substring(0, 5);

            //    if (timeoff != null)
            //    {
            //         timeoff1 = timeoff.Substring(0, 5);
            //         if (timeoff1.CompareTo(timeon1) > 0)
            //         {
            //             return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]زمان قطع از زمان وصل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            //         }
            //    }
            //    if (ttimeoff != null)
            //    {
            //         ttimeoff1 = ttimeoff.Substring(0, 5);
            //         if (ttimeoff1.CompareTo(timeon1) > 0)
            //         {
            //             return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]زمان قطع از زمان وصل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            //         }
            //    }
            //}
            /*چک زمان */

            //if (ttimeon != null)
            //{
            //    string timeoff1 = string.Empty;
            //    string ttimeoff1 = string.Empty;
            //    string ttimeon1 = ttimeon.Substring(0, 5);

            //    if (timeoff != null)
            //    {
            //        timeoff1 = timeoff.Substring(0, 5);
            //        if (timeoff1.CompareTo(ttimeon1) > 0)
            //        {
            //            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]زمان قطع از زمان وصل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            //        }
            //    }
            //    if (ttimeoff != null)
            //    {
            //        ttimeoff1 = ttimeoff.Substring(0, 5);
            //        if (ttimeoff1.CompareTo(ttimeon1) > 0)
            //        {
            //            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]زمان قطع از زمان وصل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            //        }
            //    }
            //}

            try
            {
                /*چک اطلاعات رویدادها که برای ثبت کامل باشد */
                if (d2 == 0 || d6 == 0 || d8 == 0 || (timeoff == "" && ttimeoff == "") || d13 == 0)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("اطلاعات وارد شده ناقص می باشد") }.ToJson();
                }
                else
                {
                    if (EDIN_ID == 0)
                    {/*ثبت اطلاعات رویدادها */
                        if (check.Any())
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("اطلاعات ثبت شده تکراری می باشد.") }.ToJson();
                        }

                        Db.EXP_EDOC_INSTRU.Add(new EXP_EDOC_INSTRU()
                        {
                            EERR_EERR_ID = error_error_id,
                            EINS_EINS_ID = d13,
                            EARD_EARD_ID = erad,
                            EPIU_EPIU_ID = d8,
                            EPOL_EPOL_ID = d2,
                            DMAN_DMAN_ID = d6,
                            TANS_DOFF = tdateoff,
                            TANS_TOFF = ttimeoff,
                            OFF_DATE = dateoff,
                            OFF_TIME = timeoff,
                            STAT_WETH = STATWETH,
                            TANS_DON = tdateon,
                            TANS_TON = ttimeon,
                            TANS_OFST = dstattype.ToString(),
                            TANS_ONST = dstattypeon.ToString(),
                            ON_DATE = dateon,
                            ON_TIME = timeon,
                            ETDO_ETDO_ID = 61,
                            CONN_STAT = d11,
                            ATTG_SPIC = d12,
                            EDIN_MVH = d10,
                            EDIN_MW = d4,
                            EDIN_OFF = d7,
                            WORE_DATE = ONDATEm,
                            WORE_TIME = ONTIMEm,
                            EDIN_TYPE = Request.Form["EDIN_TYPE"]
                        });

                        Db.SaveChanges();
                        check = from b in Db.EXP_EDOC_INSTRU where b.ETDO_ETDO_ID == 61 && b.EPIU_EPIU_ID == d8 && b.OFF_DATE == dateoff && b.OFF_TIME == timeoff select b;
                        var i = check.Select(xx => xx.EDIN_ID).FirstOrDefault(); // Context.EXP_EDOC_INSTRU.FirstOrDefault().EDIN_ID;
                        Session["id"] = i;
                        var EXP_FUNC_RELE = new EXP_FUNC_RELE();
                        if (Request.Form["funcr"] != null)
                            if (Request.Form["funcr"] != "")
                                EXP_FUNC_RELE.EINS_EINS_ID = Convert.ToInt32(Request.Form["funcr"].ToString());

                        EXP_FUNC_RELE.EDIN_EDIN_ID = i;
                        if (EXP_FUNC_RELE.EINS_EINS_ID != null)
                        {
                            Db.EXP_FUNC_RELE.Add(EXP_FUNC_RELE);
                            Db.SaveChanges();
                        }

                        if ((ttimeon != "" || timeon != "") && d11 == "01")
                        {
                            Db.EXP_EDOC_INSTRU.Add(new EXP_EDOC_INSTRU()
                            {
                                CONN_STAT = "00",
                                EERR_EERR_ID = error_error_id,
                                EINS_EINS_ID = d13,
                                EARD_EARD_ID = erad,
                                EPIU_EPIU_ID = d8,
                                EPOL_EPOL_ID = d2,
                                DMAN_DMAN_ID = d6,
                                TANS_DOFF = tdateoff,
                                TANS_TOFF = ttimeoff,
                                STAT_WETH = STATWETH,
                                OFF_DATE = dateon,
                                OFF_TIME = timeon,
                                ETDO_ETDO_ID = 61,
                                TANS_DON = tdateon,
                                TANS_TON = ttimeon,
                                TANS_OFST = dstattype.ToString(),
                                TANS_ONST = dstattypeon.ToString(),
                                //CONN_STAT = d11,
                                ATTG_SPIC = d12,
                                EDIN_MVH = d10,
                                EDIN_MW = d4,
                                EDIN_OFF = d7,
                                WORE_DATE = ONDATEm,
                                WORE_TIME = ONTIMEm,
                                EDIN_TYPE = Request.Form["EDIN_TYPE"]
                            });

                            Db.SaveChanges();
                        }

                        string relation = (from b in Db.EXP_RELATION_DOC
                                           join x in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals x.EEDO_ID
                                           where b.EDIN_EDIN_ID == i && x.ETDO_ETDO_ID == 21
                                           select b.ERED_ID).FirstOrDefault().ToString();

                        int rccc = Convert.ToInt32(relation);

                        //if (Request.Form["DESC"] == "0")
                        //{
                        //    var rel4 = new EXP_RELATION_DOC();
                        //    //  cntx.EXP_RELATION_DOC.Remove(relation);
                        //    /*ثبت اطلاعات درخواست های اصلی در حالت تمدیدی */
                        //    if (rccc == 0)
                        //    {
                        //        if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                        //        {
                        //            rel4.EDIN_EDIN_ID = i;
                        //            rel4.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                        //            Db.EXP_RELATION_DOC.Add(rel4);
                        //            Db.SaveChanges();
                        //        }
                        //    }
                        //    else
                        //    {
                        //        var qrelattd = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == i && b.ERED_ID == rccc select b).FirstOrDefault();
                        //        if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                        //            qrelattd.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                        //        Db.SaveChanges();
                        //    }
                        //}
                        //else
                        //{
                        //    if (rccc != 0)
                        //    {
                        //        var r = (from b in Db.EXP_RELATION_DOC where b.ERED_ID == rccc select b).FirstOrDefault();

                        //        Db.EXP_RELATION_DOC.Remove(r);
                        //        Db.SaveChanges();
                        //    }
                        //}

                        if (rccc == 0)
                        {

                            var qrelattd = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == i select b).FirstOrDefault();
                            if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                                qrelattd.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                            Db.SaveChanges();
                        }

                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("اطلاعات با موفقیت ثبت شد"), CoustomData = i.ToString() }.ToJson();
                    }
                    else
                    {/*ثبت تغییرات اطلاعات */
                        var query = from b in Db.EXP_EDOC_INSTRU
                                    where b.EDIN_ID == EDIN_ID
                                    select new { b.EDIN_ID, b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.EUNL_EUNL_ID, b.EFUN_EFUN_ID, b.OFF_DATE, b.ON_DATE, b.EOFS_EOFS_ID };

                        foreach (var item in query)
                        {
                            var chkl = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == item.EDIN_ID select b).FirstOrDefault();
                            chkl.EINS_EINS_ID = d13;
                            chkl.EPIU_EPIU_ID = d8;
                            chkl.EPOL_EPOL_ID = d2;
                            chkl.DMAN_DMAN_ID = d6;
                            // chkl.OFF_DATE = date;
                            chkl.OFF_DATE = dateoff;
                            chkl.ETDO_ETDO_ID = 61;
                            chkl.CONN_STAT = d11;
                            chkl.ATTG_SPIC = d12;
                            //if (chkl.WORE_TIME == null)
                            if (chkl.WORE_TIME == null)
                                chkl.EDIN_MW = d4;

                            if (chkl.WORE_TIME == null) chkl.EDIN_OFF = d7;

                            chkl.EDIN_MVH = d10;

                            chkl.STAT_WETH = STATWETH;

                            chkl.EDIN_TYPE = Request.Form["EDIN_TYPE"];
                            chkl.TANS_DOFF = tdateoff;
                            chkl.TANS_TOFF = ttimeoff;
                            chkl.OFF_DATE = dateoff;
                            chkl.OFF_TIME = timeoff;
                            chkl.TANS_DON = tdateon;
                            chkl.TANS_TON = ttimeon;
                            chkl.TANS_OFST = dstattype.ToString();
                            chkl.TANS_ONST = dstattypeon.ToString();
                            chkl.ON_DATE = dateon;
                            chkl.ON_TIME = timeon;
                            chkl.EERR_EERR_ID = error_error_id;
                            Db.SaveChanges();
                            if (Request.Form["funcr"] != null && Request.Form["funcr"] != "")
                            {
                                var Func_Rele = (from b in Db.EXP_FUNC_RELE where b.EDIN_EDIN_ID == item.EDIN_ID select b).FirstOrDefault();
                                Func_Rele.EINS_EINS_ID = Convert.ToInt32(Request.Form["funcr"].ToString());
                                Db.SaveChanges();
                            }
                        }

                        if ((ttimeon != "" || timeon != "") && d11 == "01")
                        {
                            Db.EXP_EDOC_INSTRU.Add(new EXP_EDOC_INSTRU()
                            {
                                CONN_STAT = "00",
                                EINS_EINS_ID = d13,
                                EARD_EARD_ID = erad,
                                EPIU_EPIU_ID = d8,
                                EPOL_EPOL_ID = d2,
                                DMAN_DMAN_ID = d6,
                                TANS_DOFF = tdateoff,
                                TANS_TOFF = ttimeoff,
                                ETDO_ETDO_ID = 61,
                                OFF_DATE = dateon,
                                OFF_TIME = timeon,
                                STAT_WETH = STATWETH,
                                TANS_DON = tdateon,
                                TANS_TON = ttimeon,
                                TANS_OFST = dstattype.ToString(),
                                TANS_ONST = dstattypeon.ToString(),
                                ATTG_SPIC = d12,
                                EDIN_MVH = d10,
                                EDIN_MW = d4,
                                EDIN_OFF = d7,
                                EERR_EERR_ID = error_error_id,
                                EDIN_TYPE = Request.Form["EDIN_TYPE"]
                            });

                            Db.SaveChanges();
                        }

                        string relation = (from b in Db.EXP_RELATION_DOC
                                           join x in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals x.EEDO_ID
                                           where b.EDIN_EDIN_ID == EDIN_ID && x.ETDO_ETDO_ID == 21
                                           select b.ERED_ID).FirstOrDefault().ToString();

                        int rccc = Convert.ToInt32(relation);

                        if (Request.Form["DESC"] == "0")
                        {
                            var rel4 = new EXP_RELATION_DOC();
                            //  cntx.EXP_RELATION_DOC.Remove(relation);
                            /*ثبت اطلاعات درخواست های اصلی در حالت تمدیدی */
                            if (rccc == 0)
                            {
                                if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                                {
                                    rel4.EDIN_EDIN_ID = EDIN_ID;
                                    rel4.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                                    Db.EXP_RELATION_DOC.Add(rel4);
                                    Db.SaveChanges();
                                }
                            }
                            else
                            {
                                var qrelattd = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == EDIN_ID && b.ERED_ID == rccc select b).FirstOrDefault();
                                if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                                    qrelattd.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            if (rccc != 0)
                            {
                                var r = (from b in Db.EXP_RELATION_DOC where b.ERED_ID == rccc select b).FirstOrDefault();
                                Db.EXP_RELATION_DOC.Remove(r);
                                Db.SaveChanges();
                            }
                        }
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", EDIN_ID) }.ToJson();
                    }
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_EDOC_INSTRU > insert,select,update")]
        public ActionResult InsertManeu20K(EXP_EDOC_INSTRU MyModel)
        {
            decimal EDIN_ID = MyModel.EDIN_ID;// Convert.ToInt32(Session["eventid"]);
            string date = Db.Database.SqlQuery<string>(string.Format("SELECT farsi_date_u(to_date('{0}','mm/dd/yyyy')) FROM DUAL", DateTime.Today.ToShortDateString())).FirstOrDefault().ToString();
            int EARD_EARD_ID = 181;
            int? EPOL_EPOL_ID = MyModel.EPOL_EPOL_ID;
            int? EINS_EINS_ID = MyModel.EINS_EINS_ID;
            int? EERR_EERR_ID = MyModel.EERR_EERR_ID;
            string EDIN_MW = MyModel.EDIN_MW;
            int TANS_OFST = -1;

            if (EINS_EINS_ID == 1)
            {
                if (!string.IsNullOrEmpty(Request.Form["linetype"]))
                    TANS_OFST = int.Parse(Request.Form["linetype"]);
            }
            else
            {
                if (!string.IsNullOrEmpty(Request.Form["posttype"]))
                    TANS_OFST = int.Parse(Request.Form["posttype"]);
            }

            string OFF_DATE = MyModel.OFF_DATE;
            string OFF_TIME = MyModel.OFF_TIME;
            string tdateoff = null;
            string ttimeoff = null;

            if (TANS_OFST != 0)
            {
                if (Request.Form["offt_date"] != null)
                {
                    if (Request.Form["offt_date"].ToString() != "")
                        tdateoff = Request.Form["offt_date"].ToString();
                }

                if (Request.Form["offt_time"] != null)
                {
                    if (Request.Form["offt_time"].ToString() != "")
                        ttimeoff = Request.Form["offt_time"].ToString();
                }
                if (Request.Form["off_date1"] != null)
                {
                    if (Request.Form["off_date1"].ToString() != "")
                        OFF_DATE = Request.Form["off_date1"].ToString();
                }
                if (Request.Form["off_time1"] != null)
                {
                    if (Request.Form["off_time1"].ToString() != "")
                        OFF_TIME = Request.Form["off_time1"].ToString();
                }
            }

            int DMAN_DMAN_ID = 0;

            if (Request.Form["offtype"] != null)
                if (Request.Form["offtype"] != "")
                    DMAN_DMAN_ID = int.Parse(Request.Form["offtype"]);

            string EDIN_OFF = MyModel.EDIN_OFF;
            // if (Request.Form["EDIN_OFF"] != null)
            // {
            //     EDIN_OFF = Request.Form["EDIN_OFF"].ToString();
            // }
            int EPIU_EPIU_ID = 0;
            if (Request.Form["POSTINSTTT"] != "")
                EPIU_EPIU_ID = int.Parse(Request.Form["POSTINSTTT"]);
            //if (Request.Form["typeinst1"] != null)
            //{
            //    if (Request.Form["typeinst1"].ToString() == "1")
            //    {
            //        if (Request.Form["POSTINSTTT"] != null)
            //        {
            //            if (Request.Form["POSTINSTTT"] != "")
            //            { EPIU_EPIU_ID = int.Parse(Request.Form["POSTINSTTT"]); }
            //        }
            //    }
            //    else
            //    {
            //        if (Request.Form["POSTINST"] != null)
            //        {
            //            if (Request.Form["POSTINST"] != "")
            //            { EPIU_EPIU_ID = int.Parse(Request.Form["POSTINST"]); }
            //        }
            //    }
            //}
            //if (Request.Form["POSTINSTTT"] != null)
            //{
            //    if (Request.Form["POSTINSTTT"] != "")
            //    { EPIU_EPIU_ID = int.Parse(Request.Form["POSTINSTTT"]); }
            //}
            // var d9 = Request.Form["on_time"].ToString();
            string EDIN_MVH = MyModel.EDIN_MVH;

            string c1 = Request.Form["C1"];
            //  if (Request.Form["EDIN_OFF"] != null && c1 == "ON")
            //  {
            //      EDIN_MVH = Request.Form["EDIN_MVH"].ToString();
            //  }

            string CONN_STAT = string.Empty;
            if (Request.Form["EDIN_OFF"] != null)
            {
                CONN_STAT = Request.Form["connstat"].ToString();
            }

            string ATTG_SPIC = string.Empty;
            if (Request.Form["ATTG_SPIC"] != "")
            {
                ATTG_SPIC = Request.Form["ATTG_SPIC"];
            }

            int? dstattypeon = null;

            if (EINS_EINS_ID == 1)
            {
                if (Request.Form["lineon"] != null)
                {
                    if (Request.Form["lineon"] != "")
                        dstattypeon = int.Parse(Request.Form["lineon"]);
                }
            }
            else
            {
                if (Request.Form["poston"] != null)
                {
                    if (Request.Form["poston"] != "")
                        dstattypeon = int.Parse(Request.Form["poston"]);
                }
            }
            string STATWETH = Request.Form["STAT_WETH"];

            //if (Request.Form["STAT_WETH"] != null)
            //{ STATWETH = Request.Form["STAT_WETH"]; }

            string dateon = null;
            string timeon = null;
            string tdateon = null;
            string ttimeon = null;

            if (dstattypeon == 0)
            {
                if (Request.Form["on_date"] != null)
                {
                    if (Request.Form["on_date"].ToString() != "")
                        dateon = Request.Form["on_date"].ToString();
                }
                if (Request.Form["on_time"] != null)
                {
                    if (Request.Form["on_time"].ToString() != "")
                        timeon = Request.Form["on_time"].ToString();
                }
            }
            else if (dstattypeon == 1 || dstattypeon == 2)
            {
                if (Request.Form["ont_date"] != null)
                {
                    if (Request.Form["ont_date"].ToString() != "")
                        tdateon = Request.Form["ont_date"].ToString();
                }

                if (Request.Form["ont_time"] != null)
                {
                    if (Request.Form["ont_time"].ToString() != "")
                        ttimeon = Request.Form["ont_time"].ToString();
                }
                if (Request.Form["on_date1"] != null)
                {
                    if (Request.Form["on_date1"].ToString() != "")
                        dateon = Request.Form["on_date1"].ToString();
                }

                if (Request.Form["on_time1"] != null)
                {
                    if (Request.Form["on_time1"].ToString() != "")
                        timeon = Request.Form["on_time1"].ToString();
                }
            }

            string ONDATEm = Request.Form["ONDATEm"]; //Model.WORE_DATE; ;
            string ONTIMEm = Request.Form["ONTIMEm"]; // Model.WORE_TIME;
            /*چک زمان */
            //string date1 = null;

            if (tdateoff != null && OFF_DATE != null && tdateoff.CompareTo(OFF_DATE) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { Message = string.Format("[{0}]تاریخ  قطع تحت تانسیون از تاریخ قطع کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateoff != null && OFF_DATE != null && tdateoff.CompareTo(OFF_DATE) == 0)
                {
                    if (ttimeoff != null && OFF_TIME != null)
                    {
                        string ttimeoff1 = ttimeoff.Substring(0, 5);
                        string timeoff1 = OFF_TIME.Substring(0, 5);
                        if (ttimeoff1.CompareTo(timeoff1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  قطع تحت تانسیون از زمان قطع کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            //var check = from b in Db.EXP_EDOC_INSTRU where b.ETDO_ETDO_ID == 61 && b.EPIU_EPIU_ID == EPIU_EPIU_ID
            //                && b.ON_DATE == dateon && b.ON_TIME == timeon
            //                && b.OFF_DATE == OFF_DATE && b.OFF_TIME == OFF_TIME

            //                && b.EPOL_EPOL_ID == EPOL_EPOL_ID select b; 


            //if (DMAN_DMAN_ID == 881)
            //{
            //    check = from b in Db.EXP_EDOC_INSTRU where b.ETDO_ETDO_ID == 61 && b.EPIU_EPIU_ID == EPIU_EPIU_ID && b.ON_DATE == dateon && b.ON_TIME == timeon && b.EPOL_EPOL_ID == EPOL_EPOL_ID select b;

            //}
            //else
            //{
            //    check = from b in Db.EXP_EDOC_INSTRU where b.ETDO_ETDO_ID == 61 && b.EPIU_EPIU_ID == EPIU_EPIU_ID && b.OFF_DATE == OFF_DATE && b.OFF_TIME == OFF_TIME select b;
            //}


            if (tdateoff != null && tdateon != null && tdateoff.CompareTo(tdateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  قطع تحت تانسیون از تاریخ وصل تحت تانسیون  بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateoff != null && tdateon != null && tdateoff.CompareTo(tdateon) == 0)
                {
                    if (ttimeoff != null && ttimeon != null)
                    {
                        string ttimeoff1 = ttimeoff.Substring(0, 5);
                        string ttimeon1 = ttimeon.Substring(0, 5);
                        if (ttimeoff1.CompareTo(ttimeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  قطع تحت تانسیون از زمان وصل تحت نانسیون  بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            if (tdateon != null && OFF_DATE != null && OFF_DATE.CompareTo(tdateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  قطع کامل  از تاریخ وصل تحت تانسیون بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateon != null && OFF_DATE != null && OFF_DATE.CompareTo(tdateon) == 0)
                {
                    if (ttimeon != null && OFF_TIME != null)
                    {
                        string ttimeon1 = ttimeon.Substring(0, 5);
                        string timeoff1 = OFF_TIME.Substring(0, 5);
                        if (ttimeon1.CompareTo(timeoff1) < 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  قطع کامل از زمان  وصل تحت تانسیون بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            if (tdateon != null && dateon != null && tdateon.CompareTo(dateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  وصل تحت تانسیون از تاریخ  وصل کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateon != null && dateon != null && tdateon.CompareTo(dateon) == 0)
                {
                    if (ttimeon != null && timeon != null)
                    {
                        string ttimeon1 = ttimeon.Substring(0, 5);
                        string timeon1 = timeon.Substring(0, 5);
                        if (ttimeon1.CompareTo(timeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  وصل تحت تانسیون از زمان وصل کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            if (OFF_DATE != null && dateon != null && OFF_DATE.CompareTo(dateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  قطع کامل از تاریخ  وصل کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (OFF_DATE != null && dateon != null && OFF_DATE.CompareTo(dateon) == 0)
                {
                    if (OFF_TIME != null && timeon != null)
                    {
                        string timeoff1 = OFF_TIME.Substring(0, 5);
                        string timeon1 = timeon.Substring(0, 5);
                        if (timeoff1.CompareTo(timeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]زمان  قطع کامل از زمان وصل کامل بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            if (tdateoff != null && dateon != null && tdateoff.CompareTo(dateon) > 0)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]تاریخ  قطع تحت تانسیون از تاریخ وصل کامل   بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
            }
            else
            {
                if (tdateoff != null && dateon != null && tdateoff.CompareTo(dateon) == 0)
                {
                    if (ttimeoff != null && timeon != null)
                    {
                        string ttimeoff1 = ttimeoff.Substring(0, 5);
                        string timeon1 = timeon.Substring(0, 5);
                        if (ttimeoff1.CompareTo(timeon1) > 0)
                        {
                            return new ServerMessages(ServerOprationType.Success) { ExceptionMessage = string.Format("[{0}]زمان  قطع تحت تانسیون از زمان وصل کامل  بزرگتر نمی تواند باشد", EDIN_ID) }.ToJson();
                        }
                    }
                }
            }

            //if (timeon != null )
            //{
            //    string timeoff1 = string.Empty;
            //    string ttimeoff1 = string.Empty;
            //    string timeon1 = timeon.Substring(0, 5);

            //    if (OFF_TIME != null)
            //    {
            //         timeoff1 = OFF_TIME.Substring(0, 5);
            //         if (timeoff1.CompareTo(timeon1) > 0)
            //         {
            //             return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]زمان قطع از زمان وصل بزرگتر نمی تواند باشد", u) }.ToJson();
            //         }
            //    }
            //    if (ttimeoff != null)
            //    {
            //         ttimeoff1 = ttimeoff.Substring(0, 5);
            //         if (ttimeoff1.CompareTo(timeon1) > 0)
            //         {
            //             return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]زمان قطع از زمان وصل بزرگتر نمی تواند باشد", u) }.ToJson();
            //         }
            //    }
            //}
            /*چک زمان */

            //if (ttimeon != null)
            //{
            //    string timeoff1 = string.Empty;
            //    string ttimeoff1 = string.Empty;
            //    string ttimeon1 = ttimeon.Substring(0, 5);

            //    if (OFF_TIME != null)
            //    {
            //        timeoff1 = OFF_TIME.Substring(0, 5);
            //        if (timeoff1.CompareTo(ttimeon1) > 0)
            //        {
            //            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]زمان قطع از زمان وصل بزرگتر نمی تواند باشد", u) }.ToJson();
            //        }
            //    }
            //    if (ttimeoff != null)
            //    {
            //        ttimeoff1 = ttimeoff.Substring(0, 5);
            //        if (ttimeoff1.CompareTo(ttimeon1) > 0)
            //        {
            //            return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}]زمان قطع از زمان وصل بزرگتر نمی تواند باشد", u) }.ToJson();
            //        }
            //    }
            //}
            try
            {
                /*چک اطلاعات رویدادها که برای ثبت کامل باشد */
                if (EPOL_EPOL_ID == 0 || DMAN_DMAN_ID == 0 || EPIU_EPIU_ID == 0 || EINS_EINS_ID == 0)
                {
                    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("اطلاعات وارد شده ناقص می باشد") }.ToJson();
                }
                else
                {
                    if (EDIN_ID == 0)
                    {/*ثبت اطلاعات رویدادها */
                        //if (check.Any())
                        //{
                        //    return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("اطلاعات ثبت شده تکراری می باشد.") }.ToJson();
                        //}
                        if (DMAN_DMAN_ID == 881)
                        {
                            EERR_EERR_ID = null;
                            OFF_DATE = null;
                            OFF_TIME = "";
                        }
                        Db.EXP_EDOC_INSTRU.Add(new EXP_EDOC_INSTRU()
                        {
                            EERR_EERR_ID = EERR_EERR_ID,
                            EINS_EINS_ID = EINS_EINS_ID,
                            EARD_EARD_ID = EARD_EARD_ID,
                            EPIU_EPIU_ID = EPIU_EPIU_ID,
                            EPOL_EPOL_ID = EPOL_EPOL_ID,
                            DMAN_DMAN_ID = DMAN_DMAN_ID,
                            TANS_DOFF = tdateoff,
                            TANS_TOFF = ttimeoff,
                            OFF_DATE = OFF_DATE,
                            OFF_TIME = OFF_TIME,
                            STAT_WETH = STATWETH,
                            TANS_DON = tdateon,
                            TANS_TON = ttimeon,
                            TANS_OFST = TANS_OFST.ToString(),
                            TANS_ONST = dstattypeon.ToString(),
                            ON_DATE = dateon,
                            ON_TIME = timeon,
                            ETDO_ETDO_ID = 61,
                            CONN_STAT = CONN_STAT,
                            ATTG_SPIC = ATTG_SPIC,
                            EDIN_MVH = EDIN_MVH,
                            EDIN_MW = EDIN_MW,
                            EDIN_OFF = EDIN_OFF,
                            WORE_DATE = ONDATEm,
                            WORE_TIME = ONTIMEm
                        });
                        Db.SaveChanges();

                        decimal i = 0;

                        if (DMAN_DMAN_ID == 881)
                        {
                            var check = from b in Db.EXP_EDOC_INSTRU where b.ETDO_ETDO_ID == 61 && b.EPIU_EPIU_ID == EPIU_EPIU_ID && b.ON_DATE == dateon && b.ON_TIME == timeon && b.EPOL_EPOL_ID == EPOL_EPOL_ID select b;
                            i = check.Select(xx => xx.EDIN_ID).FirstOrDefault();
                        }
                        else
                        {
                            var check = from b in Db.EXP_EDOC_INSTRU where b.ETDO_ETDO_ID == 61 && b.EPIU_EPIU_ID == EPIU_EPIU_ID && b.OFF_DATE == OFF_DATE && b.OFF_TIME == OFF_TIME && b.EPOL_EPOL_ID == EPOL_EPOL_ID select b;
                            i = check.Select(xx => xx.EDIN_ID).FirstOrDefault();
                        }
                        // Context.EXP_EDOC_INSTRU.FirstOrDefault().EDIN_ID;
                        Session["id"] = i;
                        var EXP_FUNC_RELE = new EXP_FUNC_RELE();
                        if (Request.Form["funcr"] != null)
                            if (Request.Form["funcr"] != "")
                                EXP_FUNC_RELE.EINS_EINS_ID = Convert.ToInt32(Request.Form["funcr"].ToString());

                        EXP_FUNC_RELE.EDIN_EDIN_ID = i;
                        if (EXP_FUNC_RELE.EINS_EINS_ID != null)
                        {
                            Db.EXP_FUNC_RELE.Add(EXP_FUNC_RELE);
                            Db.SaveChanges();
                        }

                        if ((ttimeon != "" || timeon != "") && CONN_STAT == "01")
                        {
                            Db.EXP_EDOC_INSTRU.Add(new EXP_EDOC_INSTRU()
                            {
                                CONN_STAT = "00",
                                EERR_EERR_ID = EERR_EERR_ID,
                                EINS_EINS_ID = EINS_EINS_ID,
                                EARD_EARD_ID = EARD_EARD_ID,
                                EPIU_EPIU_ID = EPIU_EPIU_ID,
                                EPOL_EPOL_ID = EPOL_EPOL_ID,
                                DMAN_DMAN_ID = DMAN_DMAN_ID,
                                TANS_DOFF = tdateoff,
                                TANS_TOFF = ttimeoff,
                                STAT_WETH = STATWETH,
                                OFF_DATE = dateon,
                                OFF_TIME = timeon,
                                ETDO_ETDO_ID = 61,
                                TANS_DON = tdateon,
                                TANS_TON = ttimeon,
                                TANS_OFST = TANS_OFST.ToString(),
                                TANS_ONST = dstattypeon.ToString(),
                                //CONN_STAT = CONN_STAT,
                                ATTG_SPIC = ATTG_SPIC,
                                EDIN_MVH = EDIN_MVH,
                                EDIN_MW = EDIN_MW,
                                EDIN_OFF = EDIN_OFF,
                                WORE_DATE = ONDATEm,
                                WORE_TIME = ONTIMEm
                            });

                            Db.SaveChanges();
                        }

                        string relation = (from b in Db.EXP_RELATION_DOC
                                           join x in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals x.EEDO_ID
                                           where b.EDIN_EDIN_ID == i && x.ETDO_ETDO_ID == 21
                                           select b.ERED_ID).FirstOrDefault().ToString();

                        int rccc = Convert.ToInt32(relation);

                        //if (Request.Form["DESC"] == "0")
                        //{
                        //    var rel4 = new EXP_RELATION_DOC();
                        //    //  cntx.EXP_RELATION_DOC.Remove(relation);
                        //    /*ثبت اطلاعات درخواست های اصلی در حالت تمدیدی */
                        //    if (rccc == 0)
                        //    {
                        //        if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                        //        {
                        //            rel4.EDIN_EDIN_ID = i;
                        //            rel4.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                        //            Db.EXP_RELATION_DOC.Add(rel4);
                        //            Db.SaveChanges();
                        //        }
                        //    }
                        //    else
                        //    {
                        //        var qrelattd = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == i && b.ERED_ID == rccc select b).FirstOrDefault();
                        //        if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                        //            qrelattd.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                        //        Db.SaveChanges();
                        //    }
                        //}
                        //else
                        //{
                        //    if (rccc != 0)
                        //    {
                        //        var r = (from b in Db.EXP_RELATION_DOC where b.ERED_ID == rccc select b).FirstOrDefault();

                        //        Db.EXP_RELATION_DOC.Remove(r);
                        //        Db.SaveChanges();
                        //    }
                        //}

                        if (rccc == 0)
                        {
                            if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                            {
                                var rel4 = new EXP_RELATION_DOC();
                                rel4.EDIN_EDIN_ID = i;
                                rel4.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                                Db.EXP_RELATION_DOC.Add(rel4);
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            var qrelattd = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == i && b.ERED_ID == rccc select b).FirstOrDefault();
                            if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                                qrelattd.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                            Db.SaveChanges();
                        }

                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("اطلاعات با موفقیت ثبت شد"), CoustomData = i.ToString() }.ToJson();
                    }
                    else
                    {/*ثبت تغییرات اطلاعات */
                        var query = from b in Db.EXP_EDOC_INSTRU
                                    where b.EDIN_ID == EDIN_ID
                                    select new { b.EDIN_ID, b.EPOL_EPOL_ID, b.EPIU_EPIU_ID, b.EUNL_EUNL_ID, b.EFUN_EFUN_ID, b.OFF_DATE, b.ON_DATE, b.EOFS_EOFS_ID };

                        foreach (var item in query)
                        {
                            var chkl = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == item.EDIN_ID select b).FirstOrDefault();
                            chkl.EINS_EINS_ID = EINS_EINS_ID;
                            chkl.EPIU_EPIU_ID = EPIU_EPIU_ID;
                            chkl.EPOL_EPOL_ID = EPOL_EPOL_ID;
                            chkl.DMAN_DMAN_ID = DMAN_DMAN_ID;
                            chkl.OFF_DATE = date;
                            chkl.ETDO_ETDO_ID = 61;
                            chkl.CONN_STAT = CONN_STAT;
                            chkl.ATTG_SPIC = ATTG_SPIC;
                            if (chkl.WORE_TIME == null) chkl.EDIN_MVH = EDIN_MVH;
                            chkl.EDIN_MW = EDIN_MW;
                            chkl.STAT_WETH = STATWETH;
                            if (chkl.WORE_TIME == null) chkl.EDIN_OFF = EDIN_OFF;
                            chkl.TANS_DOFF = tdateoff;
                            chkl.TANS_TOFF = ttimeoff;
                            chkl.OFF_DATE = OFF_DATE;
                            chkl.OFF_TIME = OFF_TIME;
                            chkl.TANS_DON = tdateon;
                            chkl.TANS_TON = ttimeon;
                            chkl.TANS_OFST = TANS_OFST.ToString();
                            chkl.TANS_ONST = dstattypeon.ToString();
                            chkl.ON_DATE = dateon;
                            chkl.ON_TIME = timeon;
                            chkl.EERR_EERR_ID = EERR_EERR_ID;
                            Db.SaveChanges();
                            if (Request.Form["funcr"] != null && Request.Form["funcr"] != "")
                            {
                                var Func_Rele = (from b in Db.EXP_FUNC_RELE where b.EDIN_EDIN_ID == item.EDIN_ID select b).FirstOrDefault();
                                if (Func_Rele != null)
                                {
                                    Func_Rele.EINS_EINS_ID = Convert.ToInt32(Request.Form["funcr"].ToString());
                                    Db.SaveChanges();
                                }
                            }
                        }

                        if ((ttimeon != "" || timeon != "") && CONN_STAT == "01")
                        {
                            Db.EXP_EDOC_INSTRU.Add(new EXP_EDOC_INSTRU()
                            {
                                CONN_STAT = "00",
                                EINS_EINS_ID = EINS_EINS_ID,
                                EARD_EARD_ID = EARD_EARD_ID,
                                EPIU_EPIU_ID = EPIU_EPIU_ID,
                                EPOL_EPOL_ID = EPOL_EPOL_ID,
                                DMAN_DMAN_ID = DMAN_DMAN_ID,
                                TANS_DOFF = tdateoff,
                                TANS_TOFF = ttimeoff,
                                ETDO_ETDO_ID = 61,
                                OFF_DATE = dateon,
                                OFF_TIME = timeon,
                                STAT_WETH = STATWETH,
                                TANS_DON = tdateon,
                                TANS_TON = ttimeon,
                                TANS_OFST = TANS_OFST.ToString(),
                                TANS_ONST = dstattypeon.ToString(),
                                ATTG_SPIC = ATTG_SPIC,
                                EDIN_MVH = EDIN_MVH,
                                EDIN_MW = EDIN_MW,
                                EDIN_OFF = EDIN_OFF,
                                EERR_EERR_ID = EERR_EERR_ID
                            });

                            Db.SaveChanges();
                        }

                        string relation = (from b in Db.EXP_RELATION_DOC
                                           join x in Db.EXP_EXPI_DOC on b.EEDO_EEDO_ID equals x.EEDO_ID
                                           where b.EDIN_EDIN_ID == EDIN_ID && x.ETDO_ETDO_ID == 21
                                           select b.ERED_ID).FirstOrDefault().ToString();

                        int rccc = Convert.ToInt32(relation);

                        if (Request.Form["DESC"] == "0")
                        {
                            var rel4 = new EXP_RELATION_DOC();
                            //  cntx.EXP_RELATION_DOC.Remove(relation);
                            /*ثبت اطلاعات درخواست های اصلی در حالت تمدیدی */
                            if (rccc == 0)
                            {
                                if (!string.IsNullOrEmpty(Request.Form["master_doc"]))
                                {
                                    rel4.EDIN_EDIN_ID = EDIN_ID;
                                    rel4.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                                    Db.EXP_RELATION_DOC.Add(rel4);
                                    Db.SaveChanges();
                                }
                            }
                            else
                            {
                                var qrelattd = (from b in Db.EXP_RELATION_DOC where b.EEDO_EEDO_ID == EDIN_ID && b.ERED_ID == rccc select b).FirstOrDefault();
                                if (Request.Form["master_doc"] != "" && Request.Form["master_doc"] != null)
                                    qrelattd.EEDO_EEDO_ID = Convert.ToInt32(Request.Form["master_doc"]);
                                Db.SaveChanges();
                            }
                        }
                        else
                        {
                            if (rccc != 0)
                            {
                                var r = (from b in Db.EXP_RELATION_DOC where b.ERED_ID == rccc select b).FirstOrDefault();
                                Db.EXP_RELATION_DOC.Remove(r);
                                Db.SaveChanges();
                            }
                        }
                        return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] بروز رسانی شد.", EDIN_ID) }.ToJson();
                    }
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

    }

}
