using System;
using System.Linq;
using System.Web.Mvc;
using Equipment.Models;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using Equipment.Models.CoustomModel;
using Equipment.Codes.Security;
using System.Data;
using System.Data.OleDb;
using System.Xml;

namespace Equipment.Controllers.Exploitation.PostVarInfo
{
    [Authorize]
    public partial class PostVarInfoController : DbController
    {

        //BandarEntities Db;

        ////سازنده کلاس
        //public PostVarInfoController()
        //{
        //    Db = GlobalConst.DB();
        //}

        ////مخرب کلاس
        //~PostVarInfoController()
        //{
        //    //این دستور کانکشن را دیسکانکت میکند
        //    Db.Dispose();
        //}

        [MenuAuthorize]
        [EntityAuthorize("EXP_POST_LINE_INSTRU > select")]
        public ActionResult Index()
        {
            ViewBag.PostInstrument = Db.EXP_POST_LINE_INSTRU.Select(c => new { c.EPIU_ID, c.CODE_NAME }).ToList();
            return View();
        }

        //[EntityAuthorize("EXP_POST_LINE > select")]
        public ActionResult Getpost()
        {
            var query = from b in Db.EXP_POST_LINE where b.EPOL_TYPE == "0" select new { b.EPOL_ID, b.EPOL_NAME };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_POST_LINE_INSTRU > select | EXP_INSTRUMENT > select")]
        public ActionResult Getinstrument(short EPOL_ID1)
        {
            var query = (from b in Db.EXP_INSTRUMENT
                         join d in Db.EXP_POST_LINE_INSTRU on b.EINS_ID equals d.EINS_EINS_ID
                         where d.EPOL_EPOL_ID == EPOL_ID1
                         select new { b.EINS_ID, b.EINS_DESC }).Distinct();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        [EntityAuthorize("EXP_PINST_VAR_TYPE > select")]
        public ActionResult GettypePic()
        {
            var query = from b in Db.EXP_PINST_VAR_TYPE select new { b.EPVT_ID, b.EPVT_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult saveinfo()
        {
            try
            {
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", 1), CoustomData = 2 }.ToJson();
            }
            catch (Exception ex)
            {
                ex.Source.ToString();
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_POST_VAR_HEAD > select,insert | EXP_POST_LINE_INSTRU > select | EXP_POST_VAR_INSTRU > insert")]
        public ActionResult Exp_var_Add(Equipment.Models.PartialClass.Exploitation.PostVar.MultiModelPostvarinfo NewItem)
        {
            try
            {
                int post = 0;
                int epvt = 0;
                int var_head = 0;
                string datt = string.Empty;
                string timen = string.Empty;

                if (Request.Form["EPOL_ID1"] != "")
                {
                    post = int.Parse(Request.Form["EPOL_ID1"]);
                }
                if (Request.Form["EPVT_ID1"] != "")
                {
                    epvt = int.Parse(Request.Form["EPVT_ID1"]);
                }
                if (Request.Form["Date1"] != "")
                {
                    datt = Request.Form["Date1"];
                }
                if (Request.Form["ontime"] != "")
                {
                    timen = Request.Form["ontime"];
                }

                var Q = (from b in Db.EXP_POST_VAR_HEAD where b.EPVT_EPVT_ID == epvt && b.EPOL_EPOL_ID == post && b.VAR_DATE.CompareTo(datt) == 0 && (b.VAR_TIME.CompareTo(timen) == 0 || timen == null || timen == "") select b);
                int intvar = 0;
                int var_head1 = 1;
                if (Q.FirstOrDefault() != null)
                {
                    intvar = (from b in Db.EXP_POST_VAR_HEAD where b.EPVT_EPVT_ID == epvt && b.EPOL_EPOL_ID == post && b.VAR_DATE.CompareTo(datt) == 0 && (b.VAR_TIME.CompareTo(timen) == 0 || timen == null || timen == "") select b).Count();
                }
                if (intvar != 0)
                {
                    var qvar = (from b in Db.EXP_POST_VAR_HEAD where b.EPVT_EPVT_ID == epvt && b.EPOL_EPOL_ID == post && b.VAR_DATE.CompareTo(datt) == 0 && (b.VAR_TIME.CompareTo(timen) == 0 || timen == null || timen == "") select b).FirstOrDefault();
                    var_head = qvar.EPVH_ID;
                }
                else
                {
                    Db.EXP_POST_VAR_HEAD.Add(new EXP_POST_VAR_HEAD()
                    {
                        VAR_DATE = Request.Form["Date1"],
                        VAR_TIME = Request.Form["ontime"],
                        EPVT_EPVT_ID = int.Parse(Request.Form["EPVT_ID1"]),
                        EPOL_EPOL_ID = post,
                    });

                    if (Db.EXP_POST_VAR_HEAD.FirstOrDefault() != null)
                        var_head1 = Db.EXP_POST_VAR_HEAD.FirstOrDefault().EPVH_ID;

                    Db.SaveChanges();
                    var_head = Db.EXP_POST_VAR_HEAD.Local[0].EPVH_ID;
                    if (var_head == var_head1)
                    {
                        var_head = Db.EXP_POST_VAR_HEAD.Local[1].EPVH_ID;
                    }
                }

                var C = from D in Db.EXP_POST_LINE_INSTRU
                        where D.EINS_EINS_ID == NewItem.EXP_INSTRUMENT.EINS_ID && D.EPOL_EPOL_ID == post && D.EPIU_EPIU_ID_SAVABEGH == null && (
                        (D.PHAS_TYPE == "0" && D.PHAS_STAT == "0") || (D.PHAS_TYPE == "1"))
                        select new { D.EPIU_ID };

                foreach (var item in C)
                {
                    NewItem.EXP_POST_VAR_INSTRU.EPIU_EPIU_ID = item.EPIU_ID;
                    NewItem.EXP_POST_VAR_INSTRU.EPVH_EPVH_ID = var_head;
                    NewItem.EXP_POST_VAR_INSTRU.INFV_DATE = (Request.Form["Date1"]);
                    NewItem.EXP_POST_VAR_INSTRU.INFV_TIME = (Request.Form["ontime"]);
                    NewItem.EXP_POST_VAR_INSTRU.A = 0;
                    NewItem.EXP_POST_VAR_INSTRU.KV = 0;
                    NewItem.EXP_POST_VAR_INSTRU.MV = 0;
                    NewItem.EXP_POST_VAR_INSTRU.MVA = 0;
                    NewItem.EXP_POST_VAR_INSTRU.MVAR = 0;
                    NewItem.EXP_POST_VAR_INSTRU.TAP = 0;
                    Db.EXP_POST_VAR_INSTRU.Add(NewItem.EXP_POST_VAR_INSTRU);
                    Db.SaveChanges();
                }

                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.EXP_POST_VAR_INSTRU.EPIV_ID), CoustomData = 2 }.ToJson();
            }
            catch (Exception ex)
            {
                ex.Source.ToString();
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        [EntityAuthorize("EXP_POST_VAR_HEAD > select | EXP_POST_VAR_INSTRU > select")]
        public ActionResult Exp_var_Read([DataSourceRequest] DataSourceRequest request, CustomerSearchModel customerSearchModel)
        {
            int EPOL = customerSearchModel.EPOL_ID1;
            int EPVT = customerSearchModel.EPVT_ID1;
            string DATE1 = customerSearchModel.VAR_DATE1;
            int EPOL2 = customerSearchModel.EPOL_ID2;
            int EPVT2 = customerSearchModel.EPVT_ID2;
            string DATE2 = customerSearchModel.VAR_DATE2;
            if (DATE1 != null)
            {
                var query = from b in Db.EXP_POST_VAR_INSTRU
                            join j in Db.EXP_POST_VAR_HEAD on b.EPVH_EPVH_ID equals j.EPVH_ID
                            where (j.EPOL_EPOL_ID == EPOL || EPOL == 0) &&
                                  (j.EPVT_EPVT_ID == EPVT || EPVT == 0) &&
                                  (j.VAR_DATE.CompareTo(DATE1) == 0 || DATE1 == "")
                            select new { b.EPIV_ID, b.EPIU_EPIU_ID, b.FIRS_SECN, b.KV, b.MV, b.MVA, b.MVAR, b.A, b.TAP, j.EPOL_EPOL_ID, j.EPVT_EPVT_ID, j.VAR_DATE };
                return Json(query.ToDataSourceResult(request));
            }
            else
            {
                var query = from b in Db.EXP_POST_VAR_INSTRU
                            join j in Db.EXP_POST_VAR_HEAD on b.EPVH_EPVH_ID equals j.EPVH_ID
                            where (j.EPOL_EPOL_ID == EPOL2 || EPOL == 0) &&
                                  (j.EPVT_EPVT_ID == EPVT2 || EPVT == 0) &&
                                  (j.VAR_DATE.CompareTo(DATE2) == 0 || DATE2 == "")
                            select new { b.EPIV_ID, b.EPIU_EPIU_ID, b.FIRS_SECN, b.KV, b.MV, b.MVA, b.MVAR, b.A, b.TAP, j.EPOL_EPOL_ID, j.EPVT_EPVT_ID, j.VAR_DATE };
                return Json(query.ToDataSourceResult(request));
            }
        }

        public class CustomerSearchModel
        {
            public int EPOL_ID1 { get; set; }

            public int EPVT_ID1 { get; set; }

            public string VAR_DATE1 { get; set; }

            public string year { get; set; }

            public int EPOL_ID2 { get; set; }

            public int EPVT_ID2 { get; set; }

            public string VAR_DATE2 { get; set; }
        }

        [EntityAuthorize("EXP_POST_VAR_INSTRU > select")]
        public ActionResult ExpvarAdd(int? id)
        {
            Session["varid"] = id;
            if (id != 0)
            {
                //var db = this.DB();
                EXP_POST_VAR_INSTRU inst = (from b in Db.EXP_POST_VAR_INSTRU where b.EPIV_ID == id select b).FirstOrDefault();
                return View(inst);
            }
            return View();
        }

        [EntityAuthorize("EXP_POST_VAR_INSTRU > select,insert,update")]
        public ActionResult updateinfo(Equipment.Models.EXP_POST_VAR_INSTRU NewItem)
        {
            // int u = Convert.ToInt32(Session["instid"]);

            try
            {
                // if (u == 0)
                //{
                //    if (NewItem.EINS_EINS_ID == null)
                //    {
                //        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] کلاس- تجهیز اصلی نمی تواند Null باشد در صورت کلاس اصلی از فرم کلاس اصلی استفاده نمایید.", NewItem.EINS_DESC) }.ToJson();
                //    }
                //    if (PublicRepository.ExistModel("EXP_INSTRUMENT", "EINS_DESC='{0}'", NewItem.EINS_DESC.Trim()))
                //    {
                //        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] تکراری است.", NewItem.EINS_DESC) }.ToJson();
                //    }
                //    Context.EXP_INSTRUMENT.Add(NewItem);
                //    Context.SaveChanges();
                //    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", NewItem.EINS_DESC), CoustomData = 1 }.ToJson();
                //}
                // else
                // {
                NewItem.EPIV_ID = Convert.ToInt32(Session["varid"]);
                var row = (from b in Db.EXP_POST_VAR_INSTRU where b.EPIV_ID == NewItem.EPIV_ID select b).FirstOrDefault();
                row.A = NewItem.A;
                row.KV = NewItem.KV;
                row.MV = NewItem.MV;
                row.MVA = NewItem.MVA;
                row.TAP = NewItem.TAP;
                row.MVAR = NewItem.MVAR;
                Db.SaveChanges();
                return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                // }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        //public ActionResult ExpvarAdd(int? id)
        //{
        //    try
        //    {
        //        if (id == null)
        //        {
        //            Index();
        //            return View().IfUserCanAccess();
        //        }
        //        else
        //        {
        //            Index();
        //            return View(PublicRepository.cntx.EXP_POST_VAR_INSTRU.Find(id)).IfUserCanAccess();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        HttpContext.AddError(ex);
        //        return View();
        //    }
        //}

        [AcceptVerbs(HttpVerbs.Post)]
        [HttpPost]
        [EntityAuthorize("EXP_POST_VAR_HEAD > select,insert | EXP_POST_LINE_INSTRU > select | EXP_POST_LINE > select | EXP_POST_VAR_INSTRU > select,insert")]
        public ActionResult Importexcel()//(HttpPostedFileBase file)
        {
            DataSet ds = new DataSet();
            int var_head = 0;
            if (Request.Files["FileUpload1"].ContentLength > 0)
            {
                string fileExtension = System.IO.Path.GetExtension(Request.Files["FileUpload1"].FileName);

                if (fileExtension == ".xls" || fileExtension == ".xlsx")
                {
                    string fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUpload1"].FileName;
                    //if (System.IO.File.Exists(fileLocation))
                    //{
                    //    System.IO.File.Delete(fileLocation);
                    //}
                    Request.Files["FileUpload1"].SaveAs(fileLocation);
                    string excelConnectionString = string.Empty;
                    excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                                            fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    //connection String for xls file format.
                    if (fileExtension == ".xls")
                    {
                        excelConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +
                                                fileLocation + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";
                    }
                    //connection String for xlsx file format.
                    else if (fileExtension == ".xlsx")
                    {
                        excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +
                                                fileLocation + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    }

                    //Create Connection to Excel work book and add oledb namespace
                    OleDbConnection excelConnection = new OleDbConnection(excelConnectionString);
                    excelConnection.Open();
                    DataTable dt = new DataTable();

                    dt = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    if (dt == null)
                    {
                        return null;
                    }

                    String[] excelSheets = new String[dt.Rows.Count];
                    int t = 0;
                    //excel data saves in temp file here.
                    foreach (DataRow row in dt.Rows)
                    {
                        excelSheets[t] = row["TABLE_NAME"].ToString();
                        t++;
                    }

                    OleDbConnection excelConnection1 = new OleDbConnection(excelConnectionString);

                    string query = string.Format("Select * from [{0}]", excelSheets[0]);
                    using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, excelConnection1))
                    {
                        dataAdapter.Fill(ds);
                    }
                }
                if (fileExtension.ToString().ToLower().Equals(".xml"))
                {
                    string fileLocation = Server.MapPath("~/Content/") + Request.Files["FileUpload"].FileName;
                    //if (System.IO.File.Exists(fileLocation))
                    //{
                    //    System.IO.File.Delete(fileLocation);
                    //}

                    Request.Files["FileUpload"].SaveAs(fileLocation);
                    XmlTextReader xmlreader = new XmlTextReader(fileLocation);
                    // DataSet ds = new DataSet();
                    ds.ReadXml(xmlreader);
                    xmlreader.Close();
                }
                try
                {
                    int cpost = int.Parse(Request.Form["EPOL_ID2"].ToString());
                    int id = int.Parse(Request.Form["EPVT_ID2"].ToString());
                    string dat = Request.Form["Date2"].ToString();
                    var Q = (from b in Db.EXP_POST_VAR_HEAD where b.EPVT_EPVT_ID == id && b.EPOL_EPOL_ID == cpost && b.VAR_DATE.CompareTo(dat) == 0 select b);
                    int intvar = 0;
                    int var_head1 = 1;
                    if (Q.FirstOrDefault() != null)
                    {
                        intvar = (from b in Db.EXP_POST_VAR_HEAD where b.EPVT_EPVT_ID == id && b.EPOL_EPOL_ID == cpost && b.VAR_DATE.CompareTo(dat) == 0 select b).Count();
                    }
                    if (intvar != 0)
                    {
                        var qvar = (from b in Db.EXP_POST_VAR_HEAD where b.EPVT_EPVT_ID == id && b.EPOL_EPOL_ID == cpost && b.VAR_DATE.CompareTo(dat) == 0 select b).FirstOrDefault();
                        var_head = qvar.EPVH_ID;
                    }
                    else
                    {
                        Db.EXP_POST_VAR_HEAD.Add(new EXP_POST_VAR_HEAD() { VAR_TIME = "13:10", EPOL_EPOL_ID = cpost, EPVT_EPVT_ID = id, VAR_DATE = dat });
                        if (Db.EXP_POST_VAR_HEAD.FirstOrDefault() != null)
                            var_head1 = Db.EXP_POST_VAR_HEAD.FirstOrDefault().EPVH_ID;

                        Db.SaveChanges();
                        var_head = Db.EXP_POST_VAR_HEAD.Local[0].EPVH_ID;
                        if (var_head == var_head1)
                        {
                            var_head = Db.EXP_POST_VAR_HEAD.Local[1].EPVH_ID;
                        }
                    }

                    for (int i = 0; i < ds.Tables[0].Rows.Count && ds.Tables[0].Rows[i][0].ToString() != ""; i++)
                    {
                        //foreach (int u1 in cpost)
                        //{
                        string tcode = ds.Tables[0].Rows[i][0].ToString();
                        var inst = from k in Db.EXP_POST_LINE
                                   join j in Db.EXP_POST_LINE_INSTRU on k.EPOL_ID equals j.EPOL_EPOL_ID
                                   where k.EPOL_ID == cpost && j.CODE_DISP == tcode
                                   select j;

                        string State;

                        if (ds.Tables[0].Rows[i][1].ToString() == "P")
                            State = "0";
                        else
                            State = "1";

                        foreach (var item1 in inst)
                        {
                            Db.EXP_POST_VAR_INSTRU.Add(new EXP_POST_VAR_INSTRU()
                            {
                                EPIU_EPIU_ID = item1.EPIU_ID,
                                EPVH_EPVH_ID = int.Parse(var_head.ToString()),
                                FIRS_SECN = State,
                                INFV_DATE = dat,
                                INFV_TIME = ds.Tables[0].Rows[i][2].ToString() + ":" + ds.Tables[0].Rows[i][3].ToString(),
                                //A = ds.Tables[0].Rows[i][8].ToString(),
                                //KV = ds.Tables[0].Rows[i][7].ToString(),
                                //MV = ds.Tables[0].Rows[i][4].ToString(),
                                //MVA = ds.Tables[0].Rows[i][6].ToString(),
                                //MVAR = ds.Tables[0].Rows[i][5].ToString(),
                                //TAP = ds.Tables[0].Rows[i][9].ToString()
                            });
                            Db.SaveChanges();
                        }
                        // }
                    }

                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", int.Parse(var_head.ToString())) }.ToJson();
                }
                catch (Exception ex)
                {
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] فرمت سل های فایل اشکال دارد", "1") }.ToJson();
                }
            }
            else
            {
                return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] طول فایل اشکال دارد", "1") }.ToJson();
            }
            //return View("Index");
            // return RedirectToAction("Index");
        }

    }

}
 

