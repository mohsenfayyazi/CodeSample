using Asr.Cartable;
using Equipment.Codes.Security;
using Equipment.Models;
using Equipment.Models.CoustomModel;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using System;
using System.Linq;
using System.Web.Mvc;

namespace Equipment.Controllers.Exploitation.TimePrograming
{
    public partial class TimeProgramingController
    {
        //
        //    GET: /TimePrograming/

        /*اولین اکشنی که برای باز شدن فرم تعریف برنامه ها استفاده شده است */
        [MenuAuthorize]
        public ActionResult index()
        {
            ViewBag.Instrument = Db.EXP_INSTRUMENT.Where(c => c.EINS_EINS_ID != null).Select(c => new { c.EINS_ID, c.EINS_DESC });
            ViewBag.Bay = Db.EXP_TYPE_BAY.Select(c => new { c.ETBY_ID, c.ETBY_DESC });
            ViewBag.UniteV = Db.EXP_UNIT_LEVEL.Select(c => new { c.EUNL_ID, c.EUNL_DESC });
            ViewBag.PFUNCTION = Db.EXP_PFUNCTION.Select(c => new { c.EFUN_ID, c.EFUN_DESC });
            ViewBag.Offstat = Db.EXP_OFF_STAT.Select(c => new { c.EOFS_ID, c.EOFS_DESC });
            ViewBag.ProgType = Db.EXP_PROGRAM.Select(c => new { c.EPRO_ID, c.EPRO_DESC });
            return View();
        }

        /*با این اکشن نوع تجهیزاتی که وجود دارد و کلاس تجهیز نیستند برگردانده می شود  */
        public ActionResult Getinstrumentprog()
        {
            var query1 = (from b in Db.EXP_INSTRUMENT where b.EINS_EINS_ID != null orderby b.EINS_DESC select new { b.EINS_ID, b.EINS_DESC }).ToList();
            return Json(query1, JsonRequestBehavior.AllowGet);
        }

        /*با این اکشن انواع بی های که تعریف شده است در سیستم قابل مشاهده است */
        public ActionResult Getbayprog()
        {
            var query = from b in Db.EXP_TYPE_BAY select new { b.ETBY_ID, b.ETBY_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*با این اکشن سطح ولتاژ های که وجود دارد برگردانده می شود .*/
        public ActionResult GetUNITLEVEprog()
        {
            var query = from b in Db.EXP_UNIT_LEVEL select new { b.EUNL_ID, b.EUNL_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*با این اکشن وضعیت های قطعی که در سیستم تعریف شده است را نمایش می دهد.*/
        public ActionResult GetOffStatprog()
        {
            var query = from b in Db.EXP_OFF_STAT select new { b.EOFS_ID, b.EOFS_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*این اکشن پست های سال انتخابی را برمی گرداند */
        public ActionResult Getpost(string yearprog)
        {
            string h = yearprog;

            var q = from k in Db.EXP_EXPI_DOC
                    join i in Db.EXP_EDOC_INSTRU on k.EEDO_ID equals i.EEDO_EEDO_ID
                    where k.EEDO_YEAR == h
                    select i.EPOL_EPOL_ID;

            var query = from b in Db.EXP_POST_LINE
                        where q.Contains(b.EPOL_ID) && b.EPOL_TYPE == "0"
                        select new { b.EPOL_ID, b.EPOL_NAME };

            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Getpostun(int? code, string ORGA, int? Unitvolt, string yearprog)
        {
            string h = yearprog;

            var q = from k in Db.EXP_EXPI_DOC
                    join i in Db.EXP_EDOC_INSTRU on k.EEDO_ID equals i.EEDO_EEDO_ID
                    where k.EEDO_YEAR == h
                    select i.EPOL_EPOL_ID;

            var query = (from b in Db.EXP_POST_LINE
                         where q.Contains(b.EPOL_ID) && b.EPOL_TYPE == "0" && b.EUNL_EUNL_ID == Unitvolt && b.ORGA_CODE == ORGA
                         select new { b.EPOL_ID, b.EPOL_NAME }).OrderBy(b => b.EPOL_NAME);
            return Json(query, JsonRequestBehavior.AllowGet);

        }

        /*ین اکشن خط های سال انتخابی را برمی گرداند*/
        public ActionResult Getline(string yearprog)
        {
            // string h = yearprog;
            var query = (from k in Db.EXP_POST_LINE
                         join p in Db.EXP_POST_LINE_INSTRU on k.EPOL_ID equals p.EPOL_EPOL_ID
                         join i in Db.EXP_EDOC_INSTRU on p.EPIU_ID equals i.EPIU_EPIU_ID
                         join o in Db.EXP_EXPI_DOC on i.EEDO_EEDO_ID equals o.EEDO_ID
                         where p.EPOL_EPOL_ID_INSLIN != null && p.EPOL_EPOL_ID_LINE != null && o.EEDO_YEAR == yearprog && k.EPOL_TYPE == "1"
                         select new { k.EPOL_ID, k.EPOL_NAME }).Distinct();
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        public class yearSearchModel2
        {
            public int yearprog { get; set; }
            public int post { get; set; }
        }

        /*براساس پارامترهای که به این اکشن پاس داده میشود خط های که در ان سال و مربوط به ان پست را می دهد */
        public ActionResult Getlinepost(yearSearchModel2 customerSearchModel)
        {
            string year1 = customerSearchModel.yearprog.ToString();
            int post1 = int.Parse(customerSearchModel.post.ToString());
            var query = from k in Db.EXP_POST_LINE
                        join p in Db.EXP_POST_LINE_INSTRU on k.EPOL_ID equals p.EPOL_EPOL_ID
                        where (p.EPOL_EPOL_ID_INSLIN == post1 || p.EPOL_EPOL_ID_LINE == post1) && k.EPOL_TYPE == "1" && p.EPOL_EPOL_ID_INSLIN != null && p.EPOL_EPOL_ID_LINE != null
                        select new { k.EPOL_ID, k.EPOL_NAME };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*براساس پارامترهای که به این اکشن پاس داده میشود نوع تجهیزاتی که در ان سال و مربوط به ان پست را می دهد */
        public ActionResult Getinstrument(yearSearchModel2 customerSearchModel)
        {
            string year1 = customerSearchModel.yearprog.ToString();
            int post1 = int.Parse(customerSearchModel.post.ToString());

            var q1 = from k in Db.EXP_EXPI_DOC
                     join i in Db.EXP_EDOC_INSTRU on k.EEDO_ID equals i.EEDO_EEDO_ID
                     where k.EEDO_YEAR == year1
                     select i.EPIU_EPIU_ID;

            var query1 = (from b in Db.EXP_INSTRUMENT
                          join y in Db.EXP_POST_LINE_INSTRU on b.EINS_ID equals y.EINS_EINS_ID
                          where q1.Contains(y.EPIU_ID) && b.EINS_EINS_ID != null && y.EPOL_EPOL_ID == post1

                          select new { b.EINS_ID, b.EINS_DESC }).Distinct();

            return Json(query1, JsonRequestBehavior.AllowGet);
        }

        /*براساس پارامترهای که به این اکشن پاس داده میشود نوع بی ها که در ان سال و مربوط به ان پست را می دهد */
        public ActionResult Getbay(yearSearchModel2 customerSearchModel)
        {
            string year1 = customerSearchModel.yearprog.ToString();
            int post1 = int.Parse(customerSearchModel.post.ToString());

            var q = from k in Db.EXP_EXPI_DOC
                    join i in Db.EXP_EDOC_INSTRU on k.EEDO_ID equals i.EEDO_EEDO_ID
                    where k.EEDO_YEAR == year1 && i.EPOL_EPOL_ID == post1
                    select i.ETBY_ETBY_ID;

            var query = from b in Db.EXP_TYPE_BAY where q.Contains(b.ETBY_ID) select new { b.ETBY_ID, b.ETBY_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*این اکشن سطح وضعیت قطع های سال انتخابی را برمی گرداند*/
        public ActionResult GetOffStat(string yearprog)
        {
            var q = from k in Db.EXP_EXPI_DOC
                    join i in Db.EXP_EDOC_INSTRU on k.EEDO_ID equals i.EEDO_EEDO_ID
                    where k.EEDO_YEAR == yearprog
                    select i.EOFS_EOFS_ID;
            var query = from b in Db.EXP_OFF_STAT where q.Contains(b.EOFS_ID) select new { b.EOFS_ID, b.EOFS_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*این اکشن سطح ولتاژ های سال انتخابی را برمی گرداند*/
        public ActionResult GetUNITLEVE(string yearprog)
        {
            var q = from k in Db.EXP_EXPI_DOC
                    join i in Db.EXP_EDOC_INSTRU on k.EEDO_ID equals i.EEDO_EEDO_ID
                    where k.EEDO_YEAR == yearprog
                    select i.EUNL_EUNL_ID;

            var query = from b in Db.EXP_UNIT_LEVEL where q.Contains(b.EUNL_ID) select new { b.EUNL_ID, b.EUNL_DESC };
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*با این اکشن برنامه های مربوط به برنامه سرویس و نگهداری برگردانده می شود */
        public ActionResult Getprogram()
        {
            var query = (from k in Db.EXP_PROGRAM
                         where k.ETDO_ETDO_ID == 101
                         select new { k.EPRO_ID, k.EPRO_DESC }).OrderBy(b => b.EPRO_DESC);
            return Json(query, JsonRequestBehavior.AllowGet);
        }

        /*تعریف برنامه جدید را نمایش دهد یا برساس اطلاعات دریافتی برنامه قبلی رابرای ویرایش باز می کند */
        public ActionResult progb_New(int? id)
        {
            Session["progb_id"] = id;
            if (id != 0)
            {
                EXP_PROG_TIME progb = (from b in Db.EXP_PROG_TIME where b.EPTI_ID == id select b).FirstOrDefault();
                return View(progb);
            }
            return View();
        }

        /* این اکشن در ردیف های گرید برنامه زمانبندی صدا زده می شود
         * که براساس ان ویوی قابل مشاهده است که براساس ان تاریخ شروع و پایان مربوط به 
         * ان ردیف گرید یا رکورد برنامه زمانبندی قابل تغیر و ویرایش است ویو این اکشن در زیر امده است */
        public ActionResult prog_time_New(int? id)
        {
            string q = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b.EEDO_EEDO_ID).FirstOrDefault().ToString();
            Session["progbid"] = q;
            Session["progb_n_id"] = id;
            ViewBag.progId_Edin = id;
            if (id != 0)
            {
                EXP_EDOC_INSTRU progb = (from b in Db.EXP_EDOC_INSTRU where b.EDIN_ID == id select b).FirstOrDefault();
                return View(progb);
            }
            return View();
        }

        public string confirm_prog(string EEDO_YEAR2)
        {
            var I = int.Parse((from b in Db.EXP_EXPI_DOC where b.EEDO_YEAR != null && b.ETDO_ETDO_ID == 101 select b.EEDO_ID).FirstOrDefault().ToString());
            string smessage = " برنامه زمانبندی سال " + EEDO_YEAR2 + "ارسال شد";
            AsrWorkFlowProcess wp = new AsrWorkFlowProcess();
            wp.StartProcess(this.HttpContext.User.Identity.Name, new string[] { }, "برنامه زمانبندی", smessage, 101, I);
            return (smessage);
        }

        /*با این اکشن عملیات های مربوط به برنامه انتخاب شده را برمی گرداند
         * مثلا برای برنامه پست عملیات های کاری سه ماهه شش ماهه و ... را برمی گرداند */
        public ActionResult GetPFUNCTION(int? EXP_PROGRAM)
        {
            var RetVal = (from b in Db.EXP_PFUNCTION.AsEnumerable()
                          join K in Db.EXP_TIME_PROG on b.ETIP_ETIP_ID equals K.ETIP_ID
                          where b.EPRO_EPRO_ID == EXP_PROGRAM
                          select new { b.EFUN_ID, EFUN_DECS = string.Format("{0}-{1}", b.EFUN_DESC, K.ETIP_DESC) }).OrderBy(b => b.EFUN_DECS);
            return Json(RetVal, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Add_Time_Form(EXP_EXPI_DOC MyModel)
        {
            try
            {
                string d = Request.Form["yearprog"];
                int dpost = int.Parse(Request.Form["post3"]);
                int dtag = int.Parse(Request.Form["EINS_ID2"]);
                var tag = (from k in Db.EXP_POST_LINE_INSTRU where k.EINS_EINS_ID == dtag select new { k.EPIU_ID });
                foreach (var T in tag)
                {
                    var q = from j in Db.EXP_EDOC_INSTRU
                            join i in Db.EXP_EXPI_DOC on j.EEDO_EEDO_ID equals i.EEDO_ID
                            where (i.EEDO_YEAR == d || d == null) &&
                            (j.EPOL_EPOL_ID == dpost || dpost == null) &&
                            (j.EPIU_EPIU_ID == T.EPIU_ID)

                            select j;
                    /* foreach (var item in q)
                     {
                         MyModel.OFF_DATE = item.OFF_DATE;
                         MyModel.ON_DATE = item.ON_DATE;
                         Context.SaveChanges();

                     }*/
                }
                return new ServerMessages(ServerOprationType.Success)
                    //{ Message = string.Format("[{0}] ثبت شد.", MyModel.EEDO_ID) }
                .ToJson();
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /*این اکشن برای ثبت اطلاعات مربوط به تعریف برنامه است که براساس این اکشن در صورتیکه یک برنامه جدید تعریف شده با
         * شد ان را ثبت می نماید و در صورتیکه برنامه قبلا ثبت شده باشد تغییرات ان را ثبت می نماید */
        public ActionResult Add_EXP_PROG_TIME(EXP_PROG_TIME MyModel)
        {

            int u = Convert.ToInt32(Session["progb_id"]);
            int?[] array = new int?[] { 1, 2, 3, 4, 281 };
            try
            {
                if (u == 0)/*تعریف برنامه جدیدی */
                {
                    if (Request.Form["typebay"] == "0")
                    {
                        //if (Request.Form["EINS_ID1"] == null)
                        if (Request.Form["EINSC"] == null || Request.Form["EINSC"] == "")
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] تجهیز  را انتخاب نمایید", MyModel.EINS_EINS_ID) }.ToJson();
                        }
                        else
                        //{ MyModel.EINS_EINS_ID = int.Parse(Request.Form["EINS_ID1"]); }
                        {
                            MyModel.EINS_EINS_ID = int.Parse(Request.Form["EINSC"]);
                        }
                    }
                    else
                    {
                        if (Request.Form["ETBY_ID1"] == null || Request.Form["ETBY_ID1"] == "")
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]  بی  را انتخاب نمایید", MyModel.ETBY_ETBY_ID) }.ToJson();
                        }
                        else
                        {
                            MyModel.ETBY_ETBY_ID = int.Parse(Request.Form["ETBY_ID1"]);
                        }
                    }

                    if (Request.Form["EUNL_ID1"] == null || Request.Form["EUNL_ID1"] == "")
                    {
                        if ((Request.Form["typebay"] == "0" && array.Contains(Convert.ToInt32(Request.Form["EINSC"]))) || Request.Form["typebay"] == "1")
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] سطح ولتاژ  را انتخاب نمایید", MyModel.EINS_EINS_ID) }.ToJson();
                        }
                    }
                    else
                    {
                        if (Request.Form["EINSC"] != "")
                        {
                            if (array.Contains(Convert.ToInt32(Request.Form["EINSC"])))
                            {
                                MyModel.EUNL_EUNL_ID = int.Parse(Request.Form["EUNL_ID1"]);
                            }
                        }
                        else
                        {
                            MyModel.EUNL_EUNL_ID = int.Parse(Request.Form["EUNL_ID1"]);
                        }
                    }

                    if (Request.Form["EFUN_ID1"] == null || Request.Form["EFUN_ID1"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] نوع عملیات  را انتخاب نمایید", MyModel.EINS_EINS_ID) }.ToJson();
                    }
                    else
                    {
                        MyModel.EFUN_EFUN_ID = int.Parse(Request.Form["EFUN_ID1"]);
                    }

                    if (Request.Form["EOFS_ID1"] == null || Request.Form["EOFS_ID1"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] وضعیت قطع  را انتخاب نمایید", MyModel.EINS_EINS_ID) }.ToJson();
                    }
                    else
                    {
                        MyModel.EOFS_EOFS_ID = int.Parse(Request.Form["EOFS_ID1"]);
                    }

                    MyModel.ACTI_TYPE = "1";
                    MyModel.EPTI_TYPE = "0";
                    Db.EXP_PROG_TIME.Add(MyModel);
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = string.Format("[{0}] ثبت شد.", MyModel.EPTI_ID) }.ToJson();
                }
                else
                {/*ثبت تغییرات مورد نظر بروی رکورد قبلی */
                    MyModel.EPTI_ID = Convert.ToInt32(Session["progb_id"]);
                    var row = (from b in Db.EXP_PROG_TIME where b.EPTI_ID == MyModel.EPTI_ID select b).FirstOrDefault();

                    if (Request.Form["typebay"] == "0")
                    {
                        //if (Request.Form["EINS_ID1"] == null)
                        if (Request.Form["EINSC"] == null || Request.Form["EINSC"] == "")
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] تجهیز  را انتخاب نمایید", MyModel.EINS_EINS_ID) }.ToJson();
                        }
                        else
                        {
                            row.ETBY_ETBY_ID = null;
                            //row.EINS_EINS_ID = int.Parse(Request.Form["EINS_ID1"]);
                            row.EINS_EINS_ID = int.Parse(Request.Form["EINSC"]);
                        }
                    }
                    else
                    {
                        if (Request.Form["ETBY_ID1"] == null || Request.Form["ETBY_ID1"] == "")
                        { return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}]  بی  را انتخاب نمایید", MyModel.ETBY_ETBY_ID) }.ToJson(); }
                        else
                        {
                            row.ETBY_ETBY_ID = int.Parse(Request.Form["ETBY_ID1"]);
                            row.EINS_EINS_ID = null;
                        }
                    }

                    /*ثبت تغییرات */
                    if (Request.Form["EUNL_ID1"] == null || Request.Form["EUNL_ID1"] == "")
                    {
                        if ((Request.Form["typebay"] == "0" && array.Contains(Convert.ToInt32(Request.Form["EINSC"]))) || Request.Form["typebay"] == "1")
                        {
                            return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] سطح ولتاژ  را انتخاب نمایید", MyModel.EINS_EINS_ID) }.ToJson();
                        }
                    }
                    else
                    {
                        if (Request.Form["EINSC"] != "")
                        {
                            if (array.Contains(Convert.ToInt32(Request.Form["EINSC"])))
                            {
                                row.EUNL_EUNL_ID = int.Parse(Request.Form["EUNL_ID1"]);
                            }
                            else
                            {
                                row.EUNL_EUNL_ID = null;
                            }
                        }
                        else
                        {
                            row.EUNL_EUNL_ID = int.Parse(Request.Form["EUNL_ID1"]);
                        }
                    }

                    if (Request.Form["EFUN_ID1"] == null || Request.Form["EFUN_ID1"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] نوع عملیات  را انتخاب نمایید", MyModel.EINS_EINS_ID) }.ToJson();
                    }
                    else
                    {
                        row.EFUN_EFUN_ID = int.Parse(Request.Form["EFUN_ID1"]);
                    }

                    if (Request.Form["EOFS_ID1"] == null || Request.Form["EOFS_ID1"] == "")
                    {
                        return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = string.Format("[{0}] وضعیت قطع  را انتخاب نمایید", MyModel.EINS_EINS_ID) }.ToJson();
                    }
                    else
                    {
                        row.EOFS_EOFS_ID = int.Parse(Request.Form["EOFS_ID1"]);
                    }

                    row.ACTI_TYPE = MyModel.ACTI_TYPE;
                    row.EPTI_TYPE = MyModel.EPTI_TYPE;
                    Db.SaveChanges();
                    return new ServerMessages(ServerOprationType.Success) { Message = "بروز رسانی شد." }.ToJson();
                }
            }
            catch (Exception ex)
            {
                return new ServerMessages(ServerOprationType.Failure) { ExceptionMessage = ex.PersianMessage() }.ToJson();
            }
        }

        /*پارامترهای که از ورودی دریافت کرده است */
        public class CustomerSearchModel
        {
            public int EINS_ID2 { get; set; }
            public int ETBY_ID2 { get; set; }
            public int EUNL_ID2 { get; set; }
            public int EOFS_ID2 { get; set; }
            public int EFUN_ID2 { get; set; }
        }

        /*براساس پارامترهای ورودی برنامه های تعریف شده را مشخص و به کاربر نشان می دهد */
        public ActionResult Exp_Prog_Read([DataSourceRequest] DataSourceRequest request, CustomerSearchModel customerSearchModel)
        {
            int EINS_ID2Param = customerSearchModel.EINS_ID2;
            int ETBY_ID2Param = customerSearchModel.ETBY_ID2;
            int EUNL_ID2Param = customerSearchModel.EUNL_ID2;
            int EOFS_ID2Param = customerSearchModel.EOFS_ID2;
            int EFUN_ID2Param = customerSearchModel.EFUN_ID2;

            var query = from b in Db.EXP_PROG_TIME
                        join c in Db.EXP_PFUNCTION on b.EFUN_EFUN_ID equals c.EFUN_ID
                        where (b.EINS_EINS_ID == EINS_ID2Param || EINS_ID2Param == 0) &&
                              (b.ETBY_ETBY_ID == ETBY_ID2Param || ETBY_ID2Param == 0) &&
                              (b.EUNL_EUNL_ID == EUNL_ID2Param || EUNL_ID2Param == 0) &&
                              (b.EOFS_EOFS_ID == EOFS_ID2Param || EOFS_ID2Param == 0) &&
                              (b.EFUN_EFUN_ID == EFUN_ID2Param || EFUN_ID2Param == 0)
                        select new
                        {
                            b.EPTI_ID,
                            b.ACTI_TYPE,
                            b.ETBY_ETBY_ID,
                            b.EINS_EINS_ID,
                            b.EUNL_EUNL_ID,
                            b.EFUN_EFUN_ID,
                            b.EOFS_EOFS_ID,
                            prog = c.EPRO_EPRO_ID
                        };
            return Json(query.ToDataSourceResult(request));
        }

        public ActionResult Exp_Prog_Delete(EXP_PROG_TIME model)
        {
            var myobj = Db.EXP_PROG_TIME.FirstOrDefault(b => b.EPTI_ID == model.EPTI_ID);
            Db.EXP_PROG_TIME.Remove(myobj);
            Db.SaveChanges();
            return View("Index");
        }

        [EntityAuthorize("EXP_INSTRUMENT > select")]
        public ActionResult EINS_EINS_ID_baytaz(int? instt, int? instta)
        {
            if (instt == 27 || instt == 240 || instt == 379)
            {
                var query = (from i in Db.EXP_INSTRUMENT
                             where i.EINS_EINS_ID == instt
                             select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                return Json(query, JsonRequestBehavior.AllowGet);
            }
            else
                if (((instta == 380 || instta == 376) && instt == 245) || ((instta == 377 || instta == 25) && instt == 378))
                {
                    var query = (from i in Db.EXP_INSTRUMENT
                                 where i.EINS_EINS_ID == instta
                                 select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                    return Json(query, JsonRequestBehavior.AllowGet);
                }
                else
                    if ((instta != 380 && instta != 376) && instt == 245)
                    {
                        var query = (from i in Db.EXP_INSTRUMENT
                                     where i.EINS_EINS_ID == 376
                                     select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                        return Json(query, JsonRequestBehavior.AllowGet);
                    }
                    else
                        if ((instta != 377 || instta != 25) && instt == 378)
                        {
                            var query = (from i in Db.EXP_INSTRUMENT
                                         where i.EINS_EINS_ID == 25
                                         select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                            return Json(query, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var query = (from i in Db.EXP_INSTRUMENT
                                         where i.EINS_ID == instt
                                         select new { i.EINS_ID, i.EINS_DESC }).Distinct();
                            return Json(query, JsonRequestBehavior.AllowGet);
                        }
        }


    }

}


